var PortexETH = (function(exports) {

//#region rolldown:runtime
var __create = Object.create;
var __defProp$1 = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod$1) => function() {
	return mod$1 || (0, cb[__getOwnPropNames(cb)[0]])((mod$1 = { exports: {} }).exports, mod$1), mod$1.exports;
};
var __export = (target, all) => {
	for (var name$1 in all) __defProp$1(target, name$1, {
		get: all[name$1],
		enumerable: true
	});
};
var __copyProps = (to, from, except, desc) => {
	if (from && typeof from === "object" || typeof from === "function") for (var keys = __getOwnPropNames(from), i = 0, n = keys.length, key; i < n; i++) {
		key = keys[i];
		if (!__hasOwnProp.call(to, key) && key !== except) __defProp$1(to, key, {
			get: ((k) => from[k]).bind(null, key),
			enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
		});
	}
	return to;
};
var __toESM = (mod$1, isNodeMode, target) => (target = mod$1 != null ? __create(__getProtoOf(mod$1)) : {}, __copyProps(isNodeMode || !mod$1 || !mod$1.__esModule ? __defProp$1(target, "default", {
	value: mod$1,
	enumerable: true
}) : target, mod$1));

//#endregion

//#region ../../node_modules/.pnpm/web3-types@1.10.0/node_modules/web3-types/lib/esm/data_format_types.js
var FMT_NUMBER;
(function(FMT_NUMBER$1) {
	FMT_NUMBER$1["NUMBER"] = "NUMBER_NUMBER";
	FMT_NUMBER$1["HEX"] = "NUMBER_HEX";
	FMT_NUMBER$1["STR"] = "NUMBER_STR";
	FMT_NUMBER$1["BIGINT"] = "NUMBER_BIGINT";
})(FMT_NUMBER || (FMT_NUMBER = {}));
var FMT_BYTES;
(function(FMT_BYTES$1) {
	FMT_BYTES$1["HEX"] = "BYTES_HEX";
	FMT_BYTES$1["UINT8ARRAY"] = "BYTES_UINT8ARRAY";
})(FMT_BYTES || (FMT_BYTES = {}));
const DEFAULT_RETURN_FORMAT = {
	number: FMT_NUMBER.BIGINT,
	bytes: FMT_BYTES.HEX
};
const ETH_DATA_FORMAT = {
	number: FMT_NUMBER.HEX,
	bytes: FMT_BYTES.HEX
};

//#endregion
//#region ../../node_modules/.pnpm/web3-types@1.10.0/node_modules/web3-types/lib/esm/eth_types.js
var BlockTags;
(function(BlockTags$1) {
	BlockTags$1["EARLIEST"] = "earliest";
	BlockTags$1["LATEST"] = "latest";
	BlockTags$1["PENDING"] = "pending";
	BlockTags$1["SAFE"] = "safe";
	BlockTags$1["FINALIZED"] = "finalized";
	BlockTags$1["COMMITTED"] = "committed";
})(BlockTags || (BlockTags = {}));
var HardforksOrdered;
(function(HardforksOrdered$1) {
	HardforksOrdered$1["chainstart"] = "chainstart";
	HardforksOrdered$1["frontier"] = "frontier";
	HardforksOrdered$1["homestead"] = "homestead";
	HardforksOrdered$1["dao"] = "dao";
	HardforksOrdered$1["tangerineWhistle"] = "tangerineWhistle";
	HardforksOrdered$1["spuriousDragon"] = "spuriousDragon";
	HardforksOrdered$1["byzantium"] = "byzantium";
	HardforksOrdered$1["constantinople"] = "constantinople";
	HardforksOrdered$1["petersburg"] = "petersburg";
	HardforksOrdered$1["istanbul"] = "istanbul";
	HardforksOrdered$1["muirGlacier"] = "muirGlacier";
	HardforksOrdered$1["berlin"] = "berlin";
	HardforksOrdered$1["london"] = "london";
	HardforksOrdered$1["altair"] = "altair";
	HardforksOrdered$1["arrowGlacier"] = "arrowGlacier";
	HardforksOrdered$1["grayGlacier"] = "grayGlacier";
	HardforksOrdered$1["bellatrix"] = "bellatrix";
	HardforksOrdered$1["merge"] = "merge";
	HardforksOrdered$1["capella"] = "capella";
	HardforksOrdered$1["shanghai"] = "shanghai";
})(HardforksOrdered || (HardforksOrdered = {}));

//#endregion
//#region ../../node_modules/.pnpm/web3-types@1.10.0/node_modules/web3-types/lib/esm/primitives_types.js
const TypedArray = Object.getPrototypeOf(Uint8Array);

//#endregion
//#region ../../node_modules/.pnpm/web3-types@1.10.0/node_modules/web3-types/lib/esm/web3_base_provider.js
var __awaiter$44 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
const symbol = Symbol.for("web3/base-provider");
var Web3BaseProvider = class Web3BaseProvider {
	static isWeb3Provider(provider) {
		return provider instanceof Web3BaseProvider || Boolean(provider && provider[symbol]);
	}
	get [symbol]() {
		return true;
	}
	/**
	* @deprecated Please use `.request` instead.
	* @param payload - Request Payload
	* @param callback - Callback
	*/
	send(payload, callback) {
		this.request(payload).then((response) => {
			callback(null, response);
		}).catch((err) => {
			callback(err);
		});
	}
	/**
	* @deprecated Please use `.request` instead.
	* @param payload - Request Payload
	*/
	sendAsync(payload) {
		return __awaiter$44(this, void 0, void 0, function* () {
			return this.request(payload);
		});
	}
	/**
	* Modify the return type of the request method to be fully compatible with EIP-1193
	*
	* [deprecated] In the future major releases (\>= v5) all providers are supposed to be fully compatible with EIP-1193.
	* So this method will not be needed and would not be available in the future.
	*
	* @returns A new instance of the provider with the request method fully compatible with EIP-1193
	*
	* @example
	* ```ts
	* const provider = new Web3HttpProvider('http://localhost:8545');
	* const fullyCompatibleProvider = provider.asEIP1193Provider();
	* const result = await fullyCompatibleProvider.request({ method: 'eth_getBalance' });
	* console.log(result); // '0x0234c8a3397aab58' or something like that
	* ```
	*/
	asEIP1193Provider() {
		const newObj = Object.create(this);
		const originalRequest = newObj.request;
		newObj.request = function request(args) {
			return __awaiter$44(this, void 0, void 0, function* () {
				const response = yield originalRequest(args);
				return response.result;
			});
		};
		newObj.asEIP1193Provider = void 0;
		return newObj;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-types@1.10.0/node_modules/web3-types/lib/esm/web3_base_wallet.js
var Web3BaseWallet = class extends Array {
	constructor(accountProvider) {
		super();
		this._accountProvider = accountProvider;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-errors@1.3.1/node_modules/web3-errors/lib/esm/error_codes.js
const ERR_RESPONSE = 100;
const ERR_INVALID_RESPONSE = 101;
const ERR_FORMATTERS = 201;
const ERR_METHOD_NOT_IMPLEMENTED = 202;
const ERR_OPERATION_TIMEOUT = 203;
const ERR_OPERATION_ABORT = 204;
const ERR_ABI_ENCODING = 205;
const ERR_EXISTING_PLUGIN_NAMESPACE = 206;
const ERR_INVALID_METHOD_PARAMS = 207;
const ERR_MULTIPLE_ERRORS = 208;
const ERR_CONTRACT = 300;
const ERR_CONTRACT_RESOLVER_MISSING = 301;
const ERR_CONTRACT_EXECUTION_REVERTED = 310;
const ERR_CONTRACT_TX_DATA_AND_INPUT = 311;
const ERR_TX = 400;
const ERR_TX_REVERT_TRANSACTION = 402;
const ERR_TX_REVERT_WITHOUT_REASON = 405;
const ERR_RAW_TX_UNDEFINED = 407;
const ERR_TX_INVALID_SENDER = 408;
const ERR_TX_MISSING_CUSTOM_CHAIN = 410;
const ERR_TX_MISSING_CUSTOM_CHAIN_ID = 411;
const ERR_TX_CHAIN_ID_MISMATCH = 412;
const ERR_TX_INVALID_CHAIN_INFO = 413;
const ERR_TX_MISSING_CHAIN_INFO = 414;
const ERR_TX_MISSING_GAS = 415;
const ERR_TX_INVALID_LEGACY_GAS = 416;
const ERR_TX_INVALID_FEE_MARKET_GAS = 417;
const ERR_TX_INVALID_FEE_MARKET_GAS_PRICE = 418;
const ERR_TX_INVALID_LEGACY_FEE_MARKET = 419;
const ERR_TX_INVALID_OBJECT = 420;
const ERR_TX_INVALID_NONCE_OR_CHAIN_ID = 421;
const ERR_TX_UNABLE_TO_POPULATE_NONCE = 422;
const ERR_TX_UNSUPPORTED_EIP_1559 = 423;
const ERR_TX_UNSUPPORTED_TYPE = 424;
const ERR_TX_DATA_AND_INPUT = 425;
const ERR_TX_POLLING_TIMEOUT = 426;
const ERR_TX_RECEIPT_MISSING_OR_BLOCKHASH_NULL = 427;
const ERR_TX_RECEIPT_MISSING_BLOCK_NUMBER = 428;
const ERR_TX_LOCAL_WALLET_NOT_AVAILABLE = 429;
const ERR_TX_NOT_FOUND = 430;
const ERR_TX_SEND_TIMEOUT = 431;
const ERR_TX_BLOCK_TIMEOUT = 432;
const ERR_TX_SIGNING = 433;
const ERR_TX_GAS_MISMATCH = 434;
const ERR_TX_CHAIN_MISMATCH = 435;
const ERR_TX_HARDFORK_MISMATCH = 436;
const ERR_TX_INVALID_RECEIVER = 437;
const ERR_TX_REVERT_TRANSACTION_CUSTOM_ERROR = 438;
const ERR_TX_INVALID_PROPERTIES_FOR_TYPE = 439;
const ERR_TX_MISSING_GAS_INNER_ERROR = 440;
const ERR_TX_GAS_MISMATCH_INNER_ERROR = 441;
const ERR_CONN = 500;
const ERR_CONN_NOT_OPEN = 503;
const ERR_CONN_MAX_ATTEMPTS = 505;
const ERR_CONN_PENDING_REQUESTS = 506;
const ERR_REQ_ALREADY_SENT = 507;
const ERR_PROVIDER = 600;
const ERR_INVALID_CLIENT = 602;
const ERR_SUBSCRIPTION = 603;
const ERR_WS_PROVIDER = 604;
const ERR_PRIVATE_KEY_LENGTH = 701;
const ERR_INVALID_PRIVATE_KEY = 702;
const ERR_UNSUPPORTED_KDF = 703;
const ERR_KEY_DERIVATION_FAIL = 704;
const ERR_KEY_VERSION_UNSUPPORTED = 705;
const ERR_INVALID_PASSWORD = 706;
const ERR_IV_LENGTH = 707;
const ERR_PBKDF2_ITERATIONS = 709;
const ERR_SIGNATURE_FAILED = 801;
const ERR_INVALID_SIGNATURE = 802;
const JSONRPC_ERR_REJECTED_REQUEST = 4001;
const JSONRPC_ERR_UNAUTHORIZED = 4100;
const JSONRPC_ERR_UNSUPPORTED_METHOD = 4200;
const JSONRPC_ERR_DISCONNECTED = 4900;
const JSONRPC_ERR_CHAIN_DISCONNECTED = 4901;
const ERR_ENS_UNSUPPORTED_NETWORK = 902;
const ERR_ENS_NETWORK_NOT_SYNCED = 903;
const ERR_INVALID_STRING = 1001;
const ERR_INVALID_BYTES = 1002;
const ERR_INVALID_NUMBER = 1003;
const ERR_INVALID_UNIT = 1004;
const ERR_INVALID_ADDRESS = 1005;
const ERR_INVALID_HEX = 1006;
const ERR_INVALID_BOOLEAN = 1008;
const ERR_INVALID_UNSIGNED_INTEGER = 1009;
const ERR_INVALID_SIZE = 1010;
const ERR_INVALID_LARGE_VALUE = 1011;
const ERR_INVALID_BLOCK = 1012;
const ERR_INVALID_NIBBLE_WIDTH = 1014;
const ERR_INVALID_INTEGER = 1015;
const ERR_VALIDATION = 1100;
const ERR_CORE_HARDFORK_MISMATCH = 1101;
const ERR_SCHEMA_FORMAT = 1200;
const ERR_RPC_INVALID_JSON = -32700;
const ERR_RPC_INVALID_REQUEST = -32600;
const ERR_RPC_INVALID_METHOD = -32601;
const ERR_RPC_INVALID_PARAMS = -32602;
const ERR_RPC_INTERNAL_ERROR = -32603;
const ERR_RPC_INVALID_INPUT = -32e3;
const ERR_RPC_MISSING_RESOURCE = -32001;
const ERR_RPC_UNAVAILABLE_RESOURCE = -32002;
const ERR_RPC_TRANSACTION_REJECTED = -32003;
const ERR_RPC_UNSUPPORTED_METHOD = -32004;
const ERR_RPC_LIMIT_EXCEEDED = -32005;
const ERR_RPC_NOT_SUPPORTED = -32006;

//#endregion
//#region ../../node_modules/.pnpm/web3-errors@1.3.1/node_modules/web3-errors/lib/esm/web3_error_base.js
/**
* Base class for Web3 errors.
*/
var BaseWeb3Error = class extends Error {
	/**
	* @deprecated Use the `cause` property instead.
	*/
	get innerError() {
		if (this.cause instanceof MultipleErrors) return this.cause.errors;
		return this.cause;
	}
	/**
	* @deprecated Use the `cause` property instead.
	*/
	set innerError(cause) {
		if (Array.isArray(cause)) this.cause = new MultipleErrors(cause);
		else this.cause = cause;
	}
	constructor(msg, cause) {
		super(msg);
		if (Array.isArray(cause)) this.cause = new MultipleErrors(cause);
		else this.cause = cause;
		this.name = this.constructor.name;
		if (typeof Error.captureStackTrace === "function") Error.captureStackTrace(new.target.constructor);
		else this.stack = (/* @__PURE__ */ new Error()).stack;
	}
	static convertToString(value, unquotValue = false) {
		if (value === null || value === void 0) return "undefined";
		const result = JSON.stringify(value, (_, v) => typeof v === "bigint" ? v.toString() : v);
		return unquotValue && ["bigint", "string"].includes(typeof value) ? result.replace(/['\\"]+/g, "") : result;
	}
	toJSON() {
		return {
			name: this.name,
			code: this.code,
			message: this.message,
			cause: this.cause,
			innerError: this.cause
		};
	}
};
var MultipleErrors = class extends BaseWeb3Error {
	constructor(errors) {
		super(`Multiple errors occurred: [${errors.map((e) => e.message).join("], [")}]`);
		this.code = ERR_MULTIPLE_ERRORS;
		this.errors = errors;
	}
};
var InvalidValueError = class extends BaseWeb3Error {
	constructor(value, msg) {
		super(`Invalid value given "${BaseWeb3Error.convertToString(value, true)}". Error: ${msg}.`);
		this.name = this.constructor.name;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-errors@1.3.1/node_modules/web3-errors/lib/esm/errors/account_errors.js
var PrivateKeyLengthError = class extends BaseWeb3Error {
	constructor() {
		super(`Private key must be 32 bytes.`);
		this.code = ERR_PRIVATE_KEY_LENGTH;
	}
};
var InvalidPrivateKeyError = class extends BaseWeb3Error {
	constructor() {
		super(`Invalid Private Key, Not a valid string or uint8Array`);
		this.code = ERR_INVALID_PRIVATE_KEY;
	}
};
var InvalidSignatureError = class extends BaseWeb3Error {
	constructor(errorDetails) {
		super(`"${errorDetails}"`);
		this.code = ERR_INVALID_SIGNATURE;
	}
};
var InvalidKdfError = class extends BaseWeb3Error {
	constructor() {
		super(`Invalid key derivation function`);
		this.code = ERR_UNSUPPORTED_KDF;
	}
};
var KeyDerivationError = class extends BaseWeb3Error {
	constructor() {
		super(`Key derivation failed - possibly wrong password`);
		this.code = ERR_KEY_DERIVATION_FAIL;
	}
};
var KeyStoreVersionError = class extends BaseWeb3Error {
	constructor() {
		super("Unsupported key store version");
		this.code = ERR_KEY_VERSION_UNSUPPORTED;
	}
};
var InvalidPasswordError = class extends BaseWeb3Error {
	constructor() {
		super("Password cannot be empty");
		this.code = ERR_INVALID_PASSWORD;
	}
};
var IVLengthError = class extends BaseWeb3Error {
	constructor() {
		super("Initialization vector must be 16 bytes");
		this.code = ERR_IV_LENGTH;
	}
};
var PBKDF2IterationsError = class extends BaseWeb3Error {
	constructor() {
		super("c > 1000, pbkdf2 is less secure with less iterations");
		this.code = ERR_PBKDF2_ITERATIONS;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-errors@1.3.1/node_modules/web3-errors/lib/esm/errors/connection_errors.js
var ConnectionError = class extends BaseWeb3Error {
	constructor(message, event) {
		super(message);
		this.code = ERR_CONN;
		if (event) {
			this.errorCode = event.code;
			this.errorReason = event.reason;
		}
	}
	toJSON() {
		return Object.assign(Object.assign({}, super.toJSON()), {
			errorCode: this.errorCode,
			errorReason: this.errorReason
		});
	}
};
var ConnectionNotOpenError = class extends ConnectionError {
	constructor(event) {
		super("Connection not open", event);
		this.code = ERR_CONN_NOT_OPEN;
	}
};
var MaxAttemptsReachedOnReconnectingError = class extends ConnectionError {
	constructor(numberOfAttempts) {
		super(`Maximum number of reconnect attempts reached! (${numberOfAttempts})`);
		this.code = ERR_CONN_MAX_ATTEMPTS;
	}
};
var PendingRequestsOnReconnectingError = class extends ConnectionError {
	constructor() {
		super("CONNECTION ERROR: Provider started to reconnect before the response got received!");
		this.code = ERR_CONN_PENDING_REQUESTS;
	}
};
var RequestAlreadySentError = class extends ConnectionError {
	constructor(id) {
		super(`Request already sent with following id: ${id}`);
		this.code = ERR_REQ_ALREADY_SENT;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-errors@1.3.1/node_modules/web3-errors/lib/esm/errors/contract_errors.js
var Web3ContractError = class extends BaseWeb3Error {
	constructor(message, receipt) {
		super(message);
		this.code = ERR_CONTRACT;
		this.receipt = receipt;
	}
};
var ResolverMethodMissingError = class extends BaseWeb3Error {
	constructor(address, name$1) {
		super(`The resolver at ${address} does not implement requested method: "${name$1}".`);
		this.address = address;
		this.name = name$1;
		this.code = ERR_CONTRACT_RESOLVER_MISSING;
	}
	toJSON() {
		return Object.assign(Object.assign({}, super.toJSON()), {
			address: this.address,
			name: this.name
		});
	}
};
/**
* This class is expected to be set as an `cause` inside ContractExecutionError
* The properties would be typically decoded from the `data` if it was encoded according to EIP-838
*/
var Eip838ExecutionError = class Eip838ExecutionError extends Web3ContractError {
	constructor(error) {
		super(error.message || "Error");
		this.name = "name" in error && error.name || this.constructor.name;
		this.stack = "stack" in error && error.stack || void 0;
		this.code = error.code;
		if (typeof error.data === "object") {
			let originalError;
			if (error.data && "originalError" in error.data) originalError = error.data.originalError;
			else originalError = error.data;
			this.data = originalError.data;
			this.cause = new Eip838ExecutionError(originalError);
		} else this.data = error.data;
	}
	setDecodedProperties(errorName, errorSignature, errorArgs) {
		this.errorName = errorName;
		this.errorSignature = errorSignature;
		this.errorArgs = errorArgs;
	}
	toJSON() {
		let json = Object.assign(Object.assign({}, super.toJSON()), { data: this.data });
		if (this.errorName) json = Object.assign(Object.assign({}, json), {
			errorName: this.errorName,
			errorSignature: this.errorSignature,
			errorArgs: this.errorArgs
		});
		return json;
	}
};
/**
* Used when an error is raised while executing a function inside a smart contract.
* The data is expected to be encoded according to EIP-848.
*/
var ContractExecutionError = class extends Web3ContractError {
	constructor(rpcError) {
		super("Error happened while trying to execute a function inside a smart contract");
		this.code = ERR_CONTRACT_EXECUTION_REVERTED;
		this.cause = new Eip838ExecutionError(rpcError);
	}
};
var ContractTransactionDataAndInputError = class extends InvalidValueError {
	constructor(value) {
		var _a$3, _b;
		super(`data: ${(_a$3 = value.data) !== null && _a$3 !== void 0 ? _a$3 : "undefined"}, input: ${(_b = value.input) !== null && _b !== void 0 ? _b : "undefined"}`, "You can't have \"data\" and \"input\" as properties of a contract at the same time, please use either \"data\" or \"input\" instead.");
		this.code = ERR_CONTRACT_TX_DATA_AND_INPUT;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-errors@1.3.1/node_modules/web3-errors/lib/esm/errors/ens_errors.js
var ENSUnsupportedNetworkError = class extends BaseWeb3Error {
	constructor(networkType) {
		super(`ENS is not supported on network ${networkType}`);
		this.code = ERR_ENS_UNSUPPORTED_NETWORK;
	}
};
var ENSNetworkNotSyncedError = class extends BaseWeb3Error {
	constructor() {
		super(`Network not synced`);
		this.code = ERR_ENS_NETWORK_NOT_SYNCED;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-errors@1.3.1/node_modules/web3-errors/lib/esm/errors/generic_errors.js
var InvalidMethodParamsError = class extends BaseWeb3Error {
	constructor(hint) {
		super(`Invalid parameters passed. "${typeof hint !== "undefined" ? hint : ""}"`);
		this.hint = hint;
		this.code = ERR_INVALID_METHOD_PARAMS;
	}
	toJSON() {
		return Object.assign(Object.assign({}, super.toJSON()), { hint: this.hint });
	}
};
var FormatterError = class extends BaseWeb3Error {
	constructor() {
		super(...arguments);
		this.code = ERR_FORMATTERS;
	}
};
var MethodNotImplementedError = class extends BaseWeb3Error {
	constructor() {
		super("The method you're trying to call is not implemented.");
		this.code = ERR_METHOD_NOT_IMPLEMENTED;
	}
};
var OperationTimeoutError = class extends BaseWeb3Error {
	constructor() {
		super(...arguments);
		this.code = ERR_OPERATION_TIMEOUT;
	}
};
var OperationAbortError = class extends BaseWeb3Error {
	constructor() {
		super(...arguments);
		this.code = ERR_OPERATION_ABORT;
	}
};
var AbiError = class extends BaseWeb3Error {
	constructor(message, props) {
		super(message);
		this.code = ERR_ABI_ENCODING;
		this.props = props !== null && props !== void 0 ? props : {};
	}
};
var ExistingPluginNamespaceError = class extends BaseWeb3Error {
	constructor(pluginNamespace) {
		super(`A plugin with the namespace: ${pluginNamespace} has already been registered.`);
		this.code = ERR_EXISTING_PLUGIN_NAMESPACE;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-errors@1.3.1/node_modules/web3-errors/lib/esm/errors/provider_errors.js
var ProviderError = class extends BaseWeb3Error {
	constructor() {
		super(...arguments);
		this.code = ERR_PROVIDER;
	}
};
var InvalidClientError = class extends BaseWeb3Error {
	constructor(clientUrl) {
		super(`Client URL "${clientUrl}" is invalid.`);
		this.code = ERR_INVALID_CLIENT;
	}
};
var SubscriptionError = class extends BaseWeb3Error {
	constructor() {
		super(...arguments);
		this.code = ERR_SUBSCRIPTION;
	}
};
var Web3WSProviderError = class extends BaseWeb3Error {
	constructor() {
		super(...arguments);
		this.code = ERR_WS_PROVIDER;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-errors@1.3.1/node_modules/web3-errors/lib/esm/errors/signature_errors.js
var SignatureError = class extends InvalidValueError {
	constructor() {
		super(...arguments);
		this.code = ERR_SIGNATURE_FAILED;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-errors@1.3.1/node_modules/web3-errors/lib/esm/errors/transaction_errors.js
var TransactionError = class extends BaseWeb3Error {
	constructor(message, receipt) {
		super(message);
		this.receipt = receipt;
		this.code = ERR_TX;
	}
	toJSON() {
		return Object.assign(Object.assign({}, super.toJSON()), { receipt: this.receipt });
	}
};
var TransactionRevertInstructionError = class extends BaseWeb3Error {
	constructor(reason, signature, receipt, data) {
		super(`Transaction has been reverted by the EVM${receipt === void 0 ? "" : `:\n ${BaseWeb3Error.convertToString(receipt)}`}`);
		this.reason = reason;
		this.signature = signature;
		this.receipt = receipt;
		this.data = data;
		this.code = ERR_TX_REVERT_TRANSACTION;
	}
	toJSON() {
		return Object.assign(Object.assign({}, super.toJSON()), {
			reason: this.reason,
			signature: this.signature,
			receipt: this.receipt,
			data: this.data
		});
	}
};
/**
* This error is used when a transaction to a smart contract fails and
* a custom user error (https://blog.soliditylang.org/2021/04/21/custom-errors/)
* is able to be parsed from the revert reason
*/
var TransactionRevertWithCustomError = class extends TransactionRevertInstructionError {
	constructor(reason, customErrorName, customErrorDecodedSignature, customErrorArguments, signature, receipt, data) {
		super(reason);
		this.reason = reason;
		this.customErrorName = customErrorName;
		this.customErrorDecodedSignature = customErrorDecodedSignature;
		this.customErrorArguments = customErrorArguments;
		this.signature = signature;
		this.receipt = receipt;
		this.data = data;
		this.code = ERR_TX_REVERT_TRANSACTION_CUSTOM_ERROR;
	}
	toJSON() {
		return Object.assign(Object.assign({}, super.toJSON()), {
			reason: this.reason,
			customErrorName: this.customErrorName,
			customErrorDecodedSignature: this.customErrorDecodedSignature,
			customErrorArguments: this.customErrorArguments,
			signature: this.signature,
			receipt: this.receipt,
			data: this.data
		});
	}
};
var TransactionRevertedWithoutReasonError = class extends TransactionError {
	constructor(receipt) {
		super(`Transaction has been reverted by the EVM${receipt === void 0 ? "" : `:\n ${BaseWeb3Error.convertToString(receipt)}`}`, receipt);
		this.code = ERR_TX_REVERT_WITHOUT_REASON;
	}
};
var UndefinedRawTransactionError = class extends TransactionError {
	constructor() {
		super(`Raw transaction undefined`);
		this.code = ERR_RAW_TX_UNDEFINED;
	}
};
var TransactionNotFound = class extends TransactionError {
	constructor() {
		super("Transaction not found");
		this.code = ERR_TX_NOT_FOUND;
	}
};
var InvalidTransactionWithSender = class extends InvalidValueError {
	constructor(value) {
		super(value, "invalid transaction with invalid sender");
		this.code = ERR_TX_INVALID_SENDER;
	}
};
var InvalidTransactionWithReceiver = class extends InvalidValueError {
	constructor(value) {
		super(value, "invalid transaction with invalid receiver");
		this.code = ERR_TX_INVALID_RECEIVER;
	}
};
var MissingCustomChainError = class extends InvalidValueError {
	constructor() {
		super("MissingCustomChainError", "If tx.common is provided it must have tx.common.customChain");
		this.code = ERR_TX_MISSING_CUSTOM_CHAIN;
	}
};
var MissingCustomChainIdError = class extends InvalidValueError {
	constructor() {
		super("MissingCustomChainIdError", "If tx.common is provided it must have tx.common.customChain and tx.common.customChain.chainId");
		this.code = ERR_TX_MISSING_CUSTOM_CHAIN_ID;
	}
};
var ChainIdMismatchError = class extends InvalidValueError {
	constructor(value) {
		super(JSON.stringify(value), "Chain Id doesnt match in tx.chainId tx.common.customChain.chainId");
		this.code = ERR_TX_CHAIN_ID_MISMATCH;
	}
};
var ChainMismatchError = class extends InvalidValueError {
	constructor(value) {
		super(JSON.stringify(value), "Chain doesnt match in tx.chain tx.common.basechain");
		this.code = ERR_TX_CHAIN_MISMATCH;
	}
};
var HardforkMismatchError = class extends InvalidValueError {
	constructor(value) {
		super(JSON.stringify(value), "hardfork doesnt match in tx.hardfork tx.common.hardfork");
		this.code = ERR_TX_HARDFORK_MISMATCH;
	}
};
var CommonOrChainAndHardforkError = class extends InvalidValueError {
	constructor() {
		super("CommonOrChainAndHardforkError", "Please provide the common object or the chain and hardfork property but not all together.");
		this.code = ERR_TX_INVALID_CHAIN_INFO;
	}
};
var MissingChainOrHardforkError = class extends InvalidValueError {
	constructor(value) {
		var _a$3, _b;
		super("MissingChainOrHardforkError", `When specifying chain and hardfork, both values must be defined. Received "chain": ${(_a$3 = value.chain) !== null && _a$3 !== void 0 ? _a$3 : "undefined"}, "hardfork": ${(_b = value.hardfork) !== null && _b !== void 0 ? _b : "undefined"}`);
		this.code = ERR_TX_MISSING_CHAIN_INFO;
	}
};
var MissingGasInnerError = class extends BaseWeb3Error {
	constructor() {
		super("Missing properties in transaction, either define \"gas\" and \"gasPrice\" for type 0 transactions or \"gas\", \"maxPriorityFeePerGas\" and \"maxFeePerGas\" for type 2 transactions");
		this.code = ERR_TX_MISSING_GAS_INNER_ERROR;
	}
};
var MissingGasError = class extends InvalidValueError {
	constructor(value) {
		var _a$3, _b, _c, _d;
		super(`gas: ${(_a$3 = value.gas) !== null && _a$3 !== void 0 ? _a$3 : "undefined"}, gasPrice: ${(_b = value.gasPrice) !== null && _b !== void 0 ? _b : "undefined"}, maxPriorityFeePerGas: ${(_c = value.maxPriorityFeePerGas) !== null && _c !== void 0 ? _c : "undefined"}, maxFeePerGas: ${(_d = value.maxFeePerGas) !== null && _d !== void 0 ? _d : "undefined"}`, "\"gas\" is missing");
		this.code = ERR_TX_MISSING_GAS;
		this.cause = new MissingGasInnerError();
	}
};
var TransactionGasMismatchInnerError = class extends BaseWeb3Error {
	constructor() {
		super("Missing properties in transaction, either define \"gas\" and \"gasPrice\" for type 0 transactions or \"gas\", \"maxPriorityFeePerGas\" and \"maxFeePerGas\" for type 2 transactions, not both");
		this.code = ERR_TX_GAS_MISMATCH_INNER_ERROR;
	}
};
var TransactionGasMismatchError = class extends InvalidValueError {
	constructor(value) {
		var _a$3, _b, _c, _d;
		super(`gas: ${(_a$3 = value.gas) !== null && _a$3 !== void 0 ? _a$3 : "undefined"}, gasPrice: ${(_b = value.gasPrice) !== null && _b !== void 0 ? _b : "undefined"}, maxPriorityFeePerGas: ${(_c = value.maxPriorityFeePerGas) !== null && _c !== void 0 ? _c : "undefined"}, maxFeePerGas: ${(_d = value.maxFeePerGas) !== null && _d !== void 0 ? _d : "undefined"}`, "transaction must specify legacy or fee market gas properties, not both");
		this.code = ERR_TX_GAS_MISMATCH;
		this.cause = new TransactionGasMismatchInnerError();
	}
};
var InvalidGasOrGasPrice = class extends InvalidValueError {
	constructor(value) {
		var _a$3, _b;
		super(`gas: ${(_a$3 = value.gas) !== null && _a$3 !== void 0 ? _a$3 : "undefined"}, gasPrice: ${(_b = value.gasPrice) !== null && _b !== void 0 ? _b : "undefined"}`, "Gas or gasPrice is lower than 0");
		this.code = ERR_TX_INVALID_LEGACY_GAS;
	}
};
var InvalidMaxPriorityFeePerGasOrMaxFeePerGas = class extends InvalidValueError {
	constructor(value) {
		var _a$3, _b;
		super(`maxPriorityFeePerGas: ${(_a$3 = value.maxPriorityFeePerGas) !== null && _a$3 !== void 0 ? _a$3 : "undefined"}, maxFeePerGas: ${(_b = value.maxFeePerGas) !== null && _b !== void 0 ? _b : "undefined"}`, "maxPriorityFeePerGas or maxFeePerGas is lower than 0");
		this.code = ERR_TX_INVALID_FEE_MARKET_GAS;
	}
};
var Eip1559GasPriceError = class extends InvalidValueError {
	constructor(value) {
		super(value, "eip-1559 transactions don't support gasPrice");
		this.code = ERR_TX_INVALID_FEE_MARKET_GAS_PRICE;
	}
};
var UnsupportedFeeMarketError = class extends InvalidValueError {
	constructor(value) {
		var _a$3, _b;
		super(`maxPriorityFeePerGas: ${(_a$3 = value.maxPriorityFeePerGas) !== null && _a$3 !== void 0 ? _a$3 : "undefined"}, maxFeePerGas: ${(_b = value.maxFeePerGas) !== null && _b !== void 0 ? _b : "undefined"}`, "pre-eip-1559 transaction don't support maxFeePerGas/maxPriorityFeePerGas");
		this.code = ERR_TX_INVALID_LEGACY_FEE_MARKET;
	}
};
var InvalidTransactionObjectError = class extends InvalidValueError {
	constructor(value) {
		super(value, "invalid transaction object");
		this.code = ERR_TX_INVALID_OBJECT;
	}
};
var InvalidNonceOrChainIdError = class extends InvalidValueError {
	constructor(value) {
		var _a$3, _b;
		super(`nonce: ${(_a$3 = value.nonce) !== null && _a$3 !== void 0 ? _a$3 : "undefined"}, chainId: ${(_b = value.chainId) !== null && _b !== void 0 ? _b : "undefined"}`, "Nonce or chainId is lower than 0");
		this.code = ERR_TX_INVALID_NONCE_OR_CHAIN_ID;
	}
};
var UnableToPopulateNonceError = class extends InvalidValueError {
	constructor() {
		super("UnableToPopulateNonceError", "unable to populate nonce, no from address available");
		this.code = ERR_TX_UNABLE_TO_POPULATE_NONCE;
	}
};
var Eip1559NotSupportedError = class extends InvalidValueError {
	constructor() {
		super("Eip1559NotSupportedError", "Network doesn't support eip-1559");
		this.code = ERR_TX_UNSUPPORTED_EIP_1559;
	}
};
var UnsupportedTransactionTypeError = class extends InvalidValueError {
	constructor(value) {
		super(value, "unsupported transaction type");
		this.code = ERR_TX_UNSUPPORTED_TYPE;
	}
};
var TransactionDataAndInputError = class extends InvalidValueError {
	constructor(value) {
		var _a$3, _b;
		super(`data: ${(_a$3 = value.data) !== null && _a$3 !== void 0 ? _a$3 : "undefined"}, input: ${(_b = value.input) !== null && _b !== void 0 ? _b : "undefined"}`, "You can't have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.");
		this.code = ERR_TX_DATA_AND_INPUT;
	}
};
var TransactionSendTimeoutError = class extends BaseWeb3Error {
	constructor(value) {
		super(`The connected Ethereum Node did not respond within ${value.numberOfSeconds} seconds, please make sure your transaction was properly sent and you are connected to a healthy Node. Be aware that transaction might still be pending or mined!\n\tTransaction Hash: ${value.transactionHash ? value.transactionHash.toString() : "not available"}`);
		this.code = ERR_TX_SEND_TIMEOUT;
	}
};
function transactionTimeoutHint(transactionHash) {
	return `Please make sure your transaction was properly sent and there are no previous pending transaction for the same account. However, be aware that it might still be mined!\n\tTransaction Hash: ${transactionHash ? transactionHash.toString() : "not available"}`;
}
var TransactionPollingTimeoutError = class extends BaseWeb3Error {
	constructor(value) {
		super(`Transaction was not mined within ${value.numberOfSeconds} seconds. ${transactionTimeoutHint(value.transactionHash)}`);
		this.code = ERR_TX_POLLING_TIMEOUT;
	}
};
var TransactionBlockTimeoutError = class extends BaseWeb3Error {
	constructor(value) {
		super(`Transaction started at ${value.starterBlockNumber} but was not mined within ${value.numberOfBlocks} blocks. ${transactionTimeoutHint(value.transactionHash)}`);
		this.code = ERR_TX_BLOCK_TIMEOUT;
	}
};
var TransactionMissingReceiptOrBlockHashError = class extends InvalidValueError {
	constructor(value) {
		var _a$3, _b;
		super(`receipt: ${JSON.stringify(value.receipt)}, blockHash: ${(_a$3 = value.blockHash) === null || _a$3 === void 0 ? void 0 : _a$3.toString()}, transactionHash: ${(_b = value.transactionHash) === null || _b === void 0 ? void 0 : _b.toString()}`, `Receipt missing or blockHash null`);
		this.code = ERR_TX_RECEIPT_MISSING_OR_BLOCKHASH_NULL;
	}
};
var TransactionReceiptMissingBlockNumberError = class extends InvalidValueError {
	constructor(value) {
		super(`receipt: ${JSON.stringify(value.receipt)}`, `Receipt missing block number`);
		this.code = ERR_TX_RECEIPT_MISSING_BLOCK_NUMBER;
	}
};
var TransactionSigningError = class extends BaseWeb3Error {
	constructor(errorDetails) {
		super(`Invalid signature. "${errorDetails}"`);
		this.code = ERR_TX_SIGNING;
	}
};
var LocalWalletNotAvailableError = class extends InvalidValueError {
	constructor() {
		super("LocalWalletNotAvailableError", `Attempted to index account in local wallet, but no wallet is available`);
		this.code = ERR_TX_LOCAL_WALLET_NOT_AVAILABLE;
	}
};
var InvalidPropertiesForTransactionTypeError = class extends BaseWeb3Error {
	constructor(validationError, txType) {
		const invalidPropertyNames = [];
		validationError.forEach((error) => invalidPropertyNames.push(error.keyword));
		super(`The following properties are invalid for the transaction type ${txType}: ${invalidPropertyNames.join(", ")}`);
		this.code = ERR_TX_INVALID_PROPERTIES_FOR_TYPE;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-errors@1.3.1/node_modules/web3-errors/lib/esm/errors/utils_errors.js
var InvalidBytesError = class extends InvalidValueError {
	constructor(value) {
		super(value, "can not parse as byte data");
		this.code = ERR_INVALID_BYTES;
	}
};
var InvalidNumberError = class extends InvalidValueError {
	constructor(value) {
		super(value, "can not parse as number data");
		this.code = ERR_INVALID_NUMBER;
	}
};
var InvalidAddressError = class extends InvalidValueError {
	constructor(value) {
		super(value, "invalid ethereum address");
		this.code = ERR_INVALID_ADDRESS;
	}
};
var InvalidStringError = class extends InvalidValueError {
	constructor(value) {
		super(value, "not a valid string");
		this.code = ERR_INVALID_STRING;
	}
};
var InvalidUnitError = class extends InvalidValueError {
	constructor(value) {
		super(value, "invalid unit");
		this.code = ERR_INVALID_UNIT;
	}
};
var InvalidIntegerError = class extends InvalidValueError {
	constructor(value) {
		super(value, "not a valid unit. Must be a positive integer");
		this.code = ERR_INVALID_INTEGER;
	}
};
var HexProcessingError = class extends InvalidValueError {
	constructor(value) {
		super(value, "can not be converted to hex");
		this.code = ERR_INVALID_HEX;
	}
};
var NibbleWidthError = class extends InvalidValueError {
	constructor(value) {
		super(value, "value greater than the nibble width");
		this.code = ERR_INVALID_NIBBLE_WIDTH;
	}
};
var InvalidBooleanError = class extends InvalidValueError {
	constructor(value) {
		super(value, "not a valid boolean.");
		this.code = ERR_INVALID_BOOLEAN;
	}
};
var InvalidUnsignedIntegerError = class extends InvalidValueError {
	constructor(value) {
		super(value, "not a valid unsigned integer.");
		this.code = ERR_INVALID_UNSIGNED_INTEGER;
	}
};
var InvalidSizeError = class extends InvalidValueError {
	constructor(value) {
		super(value, "invalid size given.");
		this.code = ERR_INVALID_SIZE;
	}
};
var InvalidLargeValueError = class extends InvalidValueError {
	constructor(value) {
		super(value, "value is larger than size.");
		this.code = ERR_INVALID_LARGE_VALUE;
	}
};
var InvalidBlockError = class extends InvalidValueError {
	constructor(value) {
		super(value, "invalid string given");
		this.code = ERR_INVALID_BLOCK;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-errors@1.3.1/node_modules/web3-errors/lib/esm/errors/response_errors.js
const isResponseWithError$1 = (response) => !Array.isArray(response) && response.jsonrpc === "2.0" && !!response && (response.result === void 0 || response.result === null) && "error" in response && (typeof response.id === "number" || typeof response.id === "string");
const buildErrorMessage = (response) => isResponseWithError$1(response) ? response.error.message : "";
var ResponseError = class extends BaseWeb3Error {
	constructor(response, message, request, statusCode) {
		var _a$3;
		super(message !== null && message !== void 0 ? message : `Returned error: ${Array.isArray(response) ? response.map((r) => buildErrorMessage(r)).join(",") : buildErrorMessage(response)}`);
		this.code = ERR_RESPONSE;
		if (!message) this.data = Array.isArray(response) ? response.map((r) => {
			var _a$4;
			return (_a$4 = r.error) === null || _a$4 === void 0 ? void 0 : _a$4.data;
		}) : (_a$3 = response === null || response === void 0 ? void 0 : response.error) === null || _a$3 === void 0 ? void 0 : _a$3.data;
		this.statusCode = statusCode;
		this.request = request;
		let errorOrErrors;
		if (`error` in response) errorOrErrors = response.error;
		else if (response instanceof Array) errorOrErrors = response.filter((r) => r.error).map((r) => r.error);
		if (Array.isArray(errorOrErrors) && errorOrErrors.length > 0) this.cause = new MultipleErrors(errorOrErrors);
		else this.cause = errorOrErrors;
	}
	toJSON() {
		return Object.assign(Object.assign({}, super.toJSON()), {
			data: this.data,
			request: this.request,
			statusCode: this.statusCode
		});
	}
};
var InvalidResponseError = class extends ResponseError {
	constructor(result, request) {
		super(result, void 0, request);
		this.code = ERR_INVALID_RESPONSE;
		let errorOrErrors;
		if (`error` in result) errorOrErrors = result.error;
		else if (result instanceof Array) errorOrErrors = result.map((r) => r.error);
		if (Array.isArray(errorOrErrors)) this.cause = new MultipleErrors(errorOrErrors);
		else this.cause = errorOrErrors;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-errors@1.3.1/node_modules/web3-errors/lib/esm/errors/core_errors.js
var ConfigHardforkMismatchError = class extends BaseWeb3Error {
	constructor(defaultHardfork, commonHardFork) {
		super(`Web3Config hardfork doesnt match in defaultHardfork ${defaultHardfork} and common.hardfork ${commonHardFork}`);
		this.code = ERR_CORE_HARDFORK_MISMATCH;
	}
};
var ConfigChainMismatchError = class extends BaseWeb3Error {
	constructor(defaultHardfork, commonHardFork) {
		super(`Web3Config chain doesnt match in defaultHardfork ${defaultHardfork} and common.hardfork ${commonHardFork}`);
		this.code = ERR_CORE_HARDFORK_MISMATCH;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-errors@1.3.1/node_modules/web3-errors/lib/esm/errors/rpc_error_messages.js
/**
* A template string for a generic Rpc Error. The `*code*` will be replaced with the code number.
* Note: consider in next version that a spelling mistake could be corrected for `occured` and the value could be:
* 	`An Rpc error has occurred with a code of *code*`
*/
const genericRpcErrorMessageTemplate = "An Rpc error has occured with a code of *code*";
const RpcErrorMessages = {
	[ERR_RPC_INVALID_JSON]: {
		message: "Parse error",
		description: "Invalid JSON"
	},
	[ERR_RPC_INVALID_REQUEST]: {
		message: "Invalid request",
		description: "JSON is not a valid request object	"
	},
	[ERR_RPC_INVALID_METHOD]: {
		message: "Method not found",
		description: "Method does not exist	"
	},
	[ERR_RPC_INVALID_PARAMS]: {
		message: "Invalid params",
		description: "Invalid method parameters"
	},
	[ERR_RPC_INTERNAL_ERROR]: {
		message: "Internal error",
		description: "Internal JSON-RPC error"
	},
	[ERR_RPC_INVALID_INPUT]: {
		message: "Invalid input",
		description: "Missing or invalid parameters"
	},
	[ERR_RPC_MISSING_RESOURCE]: {
		message: "Resource not found",
		description: "Requested resource not found"
	},
	[ERR_RPC_UNAVAILABLE_RESOURCE]: {
		message: "Resource unavailable",
		description: "Requested resource not available"
	},
	[ERR_RPC_TRANSACTION_REJECTED]: {
		message: "Transaction rejected",
		description: "Transaction creation failed"
	},
	[ERR_RPC_UNSUPPORTED_METHOD]: {
		message: "Method not supported",
		description: "Method is not implemented"
	},
	[ERR_RPC_LIMIT_EXCEEDED]: {
		message: "Limit exceeded",
		description: "Request exceeds defined limit"
	},
	[ERR_RPC_NOT_SUPPORTED]: {
		message: "JSON-RPC version not supported",
		description: "Version of JSON-RPC protocol is not supported"
	},
	[JSONRPC_ERR_REJECTED_REQUEST]: {
		name: "User Rejected Request",
		message: "The user rejected the request."
	},
	[JSONRPC_ERR_UNAUTHORIZED]: {
		name: "Unauthorized",
		message: "The requested method and/or account has not been authorized by the user."
	},
	[JSONRPC_ERR_UNSUPPORTED_METHOD]: {
		name: "Unsupported Method",
		message: "The Provider does not support the requested method."
	},
	[JSONRPC_ERR_DISCONNECTED]: {
		name: "Disconnected",
		message: "The Provider is disconnected from all chains."
	},
	[JSONRPC_ERR_CHAIN_DISCONNECTED]: {
		name: "Chain Disconnected",
		message: "The Provider is not connected to the requested chain."
	},
	"0-999": {
		name: "",
		message: "Not used."
	},
	1e3: {
		name: "Normal Closure",
		message: "The connection successfully completed the purpose for which it was created."
	},
	1001: {
		name: "Going Away",
		message: "The endpoint is going away, either because of a server failure or because the browser is navigating away from the page that opened the connection."
	},
	1002: {
		name: "Protocol error",
		message: "The endpoint is terminating the connection due to a protocol error."
	},
	1003: {
		name: "Unsupported Data",
		message: "The connection is being terminated because the endpoint received data of a type it cannot accept. (For example, a text-only endpoint received binary data.)"
	},
	1004: {
		name: "Reserved",
		message: "Reserved. A meaning might be defined in the future."
	},
	1005: {
		name: "No Status Rcvd",
		message: "Reserved. Indicates that no status code was provided even though one was expected."
	},
	1006: {
		name: "Abnormal Closure",
		message: "Reserved. Indicates that a connection was closed abnormally (that is, with no close frame being sent) when a status code is expected."
	},
	1007: {
		name: "Invalid frame payload data",
		message: "The endpoint is terminating the connection because a message was received that contained inconsistent data (e.g., non-UTF-8 data within a text message)."
	},
	1008: {
		name: "Policy Violation",
		message: "The endpoint is terminating the connection because it received a message that violates its policy. This is a generic status code, used when codes 1003 and 1009 are not suitable."
	},
	1009: {
		name: "Message Too Big",
		message: "The endpoint is terminating the connection because a data frame was received that is too large."
	},
	1010: {
		name: "Mandatory Ext.",
		message: "The client is terminating the connection because it expected the server to negotiate one or more extension, but the server didn't."
	},
	1011: {
		name: "Internal Error",
		message: "The server is terminating the connection because it encountered an unexpected condition that prevented it from fulfilling the request."
	},
	1012: {
		name: "Service Restart",
		message: "The server is terminating the connection because it is restarting."
	},
	1013: {
		name: "Try Again Later",
		message: "The server is terminating the connection due to a temporary condition, e.g. it is overloaded and is casting off some of its clients."
	},
	1014: {
		name: "Bad Gateway",
		message: "The server was acting as a gateway or proxy and received an invalid response from the upstream server. This is similar to 502 HTTP Status Code."
	},
	1015: {
		name: "TLS handshake",
		message: "Reserved. Indicates that the connection was closed due to a failure to perform a TLS handshake (e.g., the server certificate can't be verified)."
	},
	"1016-2999": {
		name: "",
		message: "For definition by future revisions of the WebSocket Protocol specification, and for definition by extension specifications."
	},
	"3000-3999": {
		name: "",
		message: "For use by libraries, frameworks, and applications. These status codes are registered directly with IANA. The interpretation of these codes is undefined by the WebSocket protocol."
	},
	"4000-4999": {
		name: "",
		message: "For private use, and thus can't be registered. Such codes can be used by prior agreements between WebSocket applications. The interpretation of these codes is undefined by the WebSocket protocol."
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-errors@1.3.1/node_modules/web3-errors/lib/esm/errors/rpc_errors.js
var RpcError = class extends BaseWeb3Error {
	constructor(rpcError, message) {
		super(message !== null && message !== void 0 ? message : genericRpcErrorMessageTemplate.replace("*code*", rpcError.error.code.toString()));
		this.code = rpcError.error.code;
		this.id = rpcError.id;
		this.jsonrpc = rpcError.jsonrpc;
		this.jsonRpcError = rpcError.error;
	}
	toJSON() {
		return Object.assign(Object.assign({}, super.toJSON()), {
			error: this.jsonRpcError,
			id: this.id,
			jsonRpc: this.jsonrpc
		});
	}
};
var EIP1193ProviderRpcError = class extends BaseWeb3Error {
	constructor(code, data) {
		var _a$3, _b, _c, _d;
		if (!code) super();
		else if ((_a$3 = RpcErrorMessages[code]) === null || _a$3 === void 0 ? void 0 : _a$3.message) super(RpcErrorMessages[code].message);
		else {
			const statusCodeRange = Object.keys(RpcErrorMessages).find((statusCode) => typeof statusCode === "string" && code >= parseInt(statusCode.split("-")[0], 10) && code <= parseInt(statusCode.split("-")[1], 10));
			super((_c = (_b = RpcErrorMessages[statusCodeRange !== null && statusCodeRange !== void 0 ? statusCodeRange : ""]) === null || _b === void 0 ? void 0 : _b.message) !== null && _c !== void 0 ? _c : genericRpcErrorMessageTemplate.replace("*code*", (_d = code === null || code === void 0 ? void 0 : code.toString()) !== null && _d !== void 0 ? _d : "\"\""));
		}
		this.code = code;
		this.data = data;
	}
};
var ParseError = class extends RpcError {
	constructor(rpcError) {
		super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_JSON].message);
		this.code = ERR_RPC_INVALID_JSON;
	}
};
var InvalidRequestError = class extends RpcError {
	constructor(rpcError) {
		super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_REQUEST].message);
		this.code = ERR_RPC_INVALID_REQUEST;
	}
};
var MethodNotFoundError = class extends RpcError {
	constructor(rpcError) {
		super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_METHOD].message);
		this.code = ERR_RPC_INVALID_METHOD;
	}
};
var InvalidParamsError = class extends RpcError {
	constructor(rpcError) {
		super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_PARAMS].message);
		this.code = ERR_RPC_INVALID_PARAMS;
	}
};
var InternalError = class extends RpcError {
	constructor(rpcError) {
		super(rpcError, RpcErrorMessages[ERR_RPC_INTERNAL_ERROR].message);
		this.code = ERR_RPC_INTERNAL_ERROR;
	}
};
var InvalidInputError = class extends RpcError {
	constructor(rpcError) {
		super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_INPUT].message);
		this.code = ERR_RPC_INVALID_INPUT;
	}
};
var MethodNotSupported = class extends RpcError {
	constructor(rpcError) {
		super(rpcError, RpcErrorMessages[ERR_RPC_UNSUPPORTED_METHOD].message);
		this.code = ERR_RPC_UNSUPPORTED_METHOD;
	}
};
var ResourceUnavailableError = class extends RpcError {
	constructor(rpcError) {
		super(rpcError, RpcErrorMessages[ERR_RPC_UNAVAILABLE_RESOURCE].message);
		this.code = ERR_RPC_UNAVAILABLE_RESOURCE;
	}
};
var ResourcesNotFoundError = class extends RpcError {
	constructor(rpcError) {
		super(rpcError, RpcErrorMessages[ERR_RPC_MISSING_RESOURCE].message);
		this.code = ERR_RPC_MISSING_RESOURCE;
	}
};
var VersionNotSupportedError = class extends RpcError {
	constructor(rpcError) {
		super(rpcError, RpcErrorMessages[ERR_RPC_NOT_SUPPORTED].message);
		this.code = ERR_RPC_NOT_SUPPORTED;
	}
};
var TransactionRejectedError = class extends RpcError {
	constructor(rpcError) {
		super(rpcError, RpcErrorMessages[ERR_RPC_TRANSACTION_REJECTED].message);
		this.code = ERR_RPC_TRANSACTION_REJECTED;
	}
};
var LimitExceededError = class extends RpcError {
	constructor(rpcError) {
		super(rpcError, RpcErrorMessages[ERR_RPC_LIMIT_EXCEEDED].message);
		this.code = ERR_RPC_LIMIT_EXCEEDED;
	}
};
const rpcErrorsMap = /* @__PURE__ */ new Map();
rpcErrorsMap.set(ERR_RPC_INVALID_JSON, { error: ParseError });
rpcErrorsMap.set(ERR_RPC_INVALID_REQUEST, { error: InvalidRequestError });
rpcErrorsMap.set(ERR_RPC_INVALID_METHOD, { error: MethodNotFoundError });
rpcErrorsMap.set(ERR_RPC_INVALID_PARAMS, { error: InvalidParamsError });
rpcErrorsMap.set(ERR_RPC_INTERNAL_ERROR, { error: InternalError });
rpcErrorsMap.set(ERR_RPC_INVALID_INPUT, { error: InvalidInputError });
rpcErrorsMap.set(ERR_RPC_UNSUPPORTED_METHOD, { error: MethodNotSupported });
rpcErrorsMap.set(ERR_RPC_UNAVAILABLE_RESOURCE, { error: ResourceUnavailableError });
rpcErrorsMap.set(ERR_RPC_TRANSACTION_REJECTED, { error: TransactionRejectedError });
rpcErrorsMap.set(ERR_RPC_MISSING_RESOURCE, { error: ResourcesNotFoundError });
rpcErrorsMap.set(ERR_RPC_NOT_SUPPORTED, { error: VersionNotSupportedError });
rpcErrorsMap.set(ERR_RPC_LIMIT_EXCEEDED, { error: LimitExceededError });

//#endregion
//#region ../../node_modules/.pnpm/web3-errors@1.3.1/node_modules/web3-errors/lib/esm/errors/schema_errors.js
var SchemaFormatError = class extends BaseWeb3Error {
	constructor(type) {
		super(`Format for the type ${type} is unsupported`);
		this.type = type;
		this.code = ERR_SCHEMA_FORMAT;
	}
	toJSON() {
		return Object.assign(Object.assign({}, super.toJSON()), { type: this.type });
	}
};

//#endregion
//#region ../../node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/esm/_assert.js
function number(n) {
	if (!Number.isSafeInteger(n) || n < 0) throw new Error(`positive integer expected, not ${n}`);
}
function bool(b) {
	if (typeof b !== "boolean") throw new Error(`boolean expected, not ${b}`);
}
function isBytes$2(a) {
	return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
}
function bytes(b, ...lengths) {
	if (!isBytes$2(b)) throw new Error("Uint8Array expected");
	if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);
}
function hash(h) {
	if (typeof h !== "function" || typeof h.create !== "function") throw new Error("Hash should be wrapped by utils.wrapConstructor");
	number(h.outputLen);
	number(h.blockLen);
}
function exists(instance, checkFinished = true) {
	if (instance.destroyed) throw new Error("Hash instance has been destroyed");
	if (checkFinished && instance.finished) throw new Error("Hash#digest() has already been called");
}
function output(out, instance) {
	bytes(out);
	const min = instance.outputLen;
	if (out.length < min) throw new Error(`digestInto() expects output buffer of length at least ${min}`);
}
const assert = {
	number,
	bool,
	bytes,
	hash,
	exists,
	output
};
var _assert_default = assert;

//#endregion
//#region ../../node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/esm/_u64.js
const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
const _32n = /* @__PURE__ */ BigInt(32);
function fromBig(n, le = false) {
	if (le) return {
		h: Number(n & U32_MASK64),
		l: Number(n >> _32n & U32_MASK64)
	};
	return {
		h: Number(n >> _32n & U32_MASK64) | 0,
		l: Number(n & U32_MASK64) | 0
	};
}
function split$1(lst, le = false) {
	let Ah = new Uint32Array(lst.length);
	let Al = new Uint32Array(lst.length);
	for (let i = 0; i < lst.length; i++) {
		const { h, l } = fromBig(lst[i], le);
		[Ah[i], Al[i]] = [h, l];
	}
	return [Ah, Al];
}
const toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
const shrSH = (h, _l, s) => h >>> s;
const shrSL = (h, l, s) => h << 32 - s | l >>> s;
const rotrSH = (h, l, s) => h >>> s | l << 32 - s;
const rotrSL = (h, l, s) => h << 32 - s | l >>> s;
const rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;
const rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;
const rotr32H = (_h, l) => l;
const rotr32L = (h, _l) => h;
const rotlSH = (h, l, s) => h << s | l >>> 32 - s;
const rotlSL = (h, l, s) => l << s | h >>> 32 - s;
const rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;
const rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;
function add(Ah, Al, Bh, Bl) {
	const l = (Al >>> 0) + (Bl >>> 0);
	return {
		h: Ah + Bh + (l / 2 ** 32 | 0) | 0,
		l: l | 0
	};
}
const add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
const add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
const add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
const add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
const add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
const add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
const u64 = {
	fromBig,
	split: split$1,
	toBig,
	shrSH,
	shrSL,
	rotrSH,
	rotrSL,
	rotrBH,
	rotrBL,
	rotr32H,
	rotr32L,
	rotlSH,
	rotlSL,
	rotlBH,
	rotlBL,
	add,
	add3L,
	add3H,
	add4L,
	add4H,
	add5H,
	add5L
};
var _u64_default = u64;

//#endregion
//#region ../../node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/esm/crypto.js
const crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;

//#endregion
//#region ../../node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/esm/utils.js
const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
const rotr = (word, shift) => word << 32 - shift | word >>> shift;
const rotl = (word, shift) => word << shift | word >>> 32 - shift >>> 0;
const isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
const byteSwap = (word) => word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
function byteSwap32(arr) {
	for (let i = 0; i < arr.length; i++) arr[i] = byteSwap(arr[i]);
}
/**
* @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
*/
function utf8ToBytes$3(str) {
	if (typeof str !== "string") throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
	return new Uint8Array(new TextEncoder().encode(str));
}
/**
* Normalizes (non-hex) string or Uint8Array to Uint8Array.
* Warning: when Uint8Array is passed, it would NOT get copied.
* Keep in mind for future mutable operations.
*/
function toBytes$1(data) {
	if (typeof data === "string") data = utf8ToBytes$3(data);
	bytes(data);
	return data;
}
/**
* Copies several Uint8Arrays into one.
*/
function concatBytes$1(...arrays) {
	let sum = 0;
	for (let i = 0; i < arrays.length; i++) {
		const a = arrays[i];
		bytes(a);
		sum += a.length;
	}
	const res = new Uint8Array(sum);
	for (let i = 0, pad = 0; i < arrays.length; i++) {
		const a = arrays[i];
		res.set(a, pad);
		pad += a.length;
	}
	return res;
}
var Hash = class {
	clone() {
		return this._cloneInto();
	}
};
const toStr = {}.toString;
function checkOpts(defaults, opts) {
	if (opts !== void 0 && toStr.call(opts) !== "[object Object]") throw new Error("Options should be object or undefined");
	const merged = Object.assign(defaults, opts);
	return merged;
}
function wrapConstructor(hashCons) {
	const hashC = (msg) => hashCons().update(toBytes$1(msg)).digest();
	const tmp = hashCons();
	hashC.outputLen = tmp.outputLen;
	hashC.blockLen = tmp.blockLen;
	hashC.create = () => hashCons();
	return hashC;
}
function wrapXOFConstructorWithOpts(hashCons) {
	const hashC = (msg, opts) => hashCons(opts).update(toBytes$1(msg)).digest();
	const tmp = hashCons({});
	hashC.outputLen = tmp.outputLen;
	hashC.blockLen = tmp.blockLen;
	hashC.create = (opts) => hashCons(opts);
	return hashC;
}
/**
* Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.
*/
function randomBytes$1(bytesLength = 32) {
	if (crypto && typeof crypto.getRandomValues === "function") return crypto.getRandomValues(new Uint8Array(bytesLength));
	throw new Error("crypto.getRandomValues must be defined");
}

//#endregion
//#region ../../node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/esm/sha3.js
const SHA3_PI = [];
const SHA3_ROTL = [];
const _SHA3_IOTA = [];
const _0n$5 = /* @__PURE__ */ BigInt(0);
const _1n$5 = /* @__PURE__ */ BigInt(1);
const _2n$4 = /* @__PURE__ */ BigInt(2);
const _7n = /* @__PURE__ */ BigInt(7);
const _256n = /* @__PURE__ */ BigInt(256);
const _0x71n = /* @__PURE__ */ BigInt(113);
for (let round = 0, R = _1n$5, x = 1, y = 0; round < 24; round++) {
	[x, y] = [y, (2 * x + 3 * y) % 5];
	SHA3_PI.push(2 * (5 * y + x));
	SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
	let t = _0n$5;
	for (let j = 0; j < 7; j++) {
		R = (R << _1n$5 ^ (R >> _7n) * _0x71n) % _256n;
		if (R & _2n$4) t ^= _1n$5 << (_1n$5 << /* @__PURE__ */ BigInt(j)) - _1n$5;
	}
	_SHA3_IOTA.push(t);
}
const [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split$1(_SHA3_IOTA, true);
const rotlH = (h, l, s) => s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s);
const rotlL = (h, l, s) => s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s);
function keccakP(s, rounds = 24) {
	const B = new Uint32Array(5 * 2);
	for (let round = 24 - rounds; round < 24; round++) {
		for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
		for (let x = 0; x < 10; x += 2) {
			const idx1 = (x + 8) % 10;
			const idx0 = (x + 2) % 10;
			const B0 = B[idx0];
			const B1 = B[idx0 + 1];
			const Th = rotlH(B0, B1, 1) ^ B[idx1];
			const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
			for (let y = 0; y < 50; y += 10) {
				s[x + y] ^= Th;
				s[x + y + 1] ^= Tl;
			}
		}
		let curH = s[2];
		let curL = s[3];
		for (let t = 0; t < 24; t++) {
			const shift = SHA3_ROTL[t];
			const Th = rotlH(curH, curL, shift);
			const Tl = rotlL(curH, curL, shift);
			const PI = SHA3_PI[t];
			curH = s[PI];
			curL = s[PI + 1];
			s[PI] = Th;
			s[PI + 1] = Tl;
		}
		for (let y = 0; y < 50; y += 10) {
			for (let x = 0; x < 10; x++) B[x] = s[y + x];
			for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
		}
		s[0] ^= SHA3_IOTA_H[round];
		s[1] ^= SHA3_IOTA_L[round];
	}
	B.fill(0);
}
var Keccak = class Keccak extends Hash {
	constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
		super();
		this.blockLen = blockLen;
		this.suffix = suffix;
		this.outputLen = outputLen;
		this.enableXOF = enableXOF;
		this.rounds = rounds;
		this.pos = 0;
		this.posOut = 0;
		this.finished = false;
		this.destroyed = false;
		number(outputLen);
		if (0 >= this.blockLen || this.blockLen >= 200) throw new Error("Sha3 supports only keccak-f1600 function");
		this.state = new Uint8Array(200);
		this.state32 = u32(this.state);
	}
	keccak() {
		if (!isLE) byteSwap32(this.state32);
		keccakP(this.state32, this.rounds);
		if (!isLE) byteSwap32(this.state32);
		this.posOut = 0;
		this.pos = 0;
	}
	update(data) {
		exists(this);
		const { blockLen, state } = this;
		data = toBytes$1(data);
		const len = data.length;
		for (let pos = 0; pos < len;) {
			const take = Math.min(blockLen - this.pos, len - pos);
			for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];
			if (this.pos === blockLen) this.keccak();
		}
		return this;
	}
	finish() {
		if (this.finished) return;
		this.finished = true;
		const { state, suffix, pos, blockLen } = this;
		state[pos] ^= suffix;
		if ((suffix & 128) !== 0 && pos === blockLen - 1) this.keccak();
		state[blockLen - 1] ^= 128;
		this.keccak();
	}
	writeInto(out) {
		exists(this, false);
		bytes(out);
		this.finish();
		const bufferOut = this.state;
		const { blockLen } = this;
		for (let pos = 0, len = out.length; pos < len;) {
			if (this.posOut >= blockLen) this.keccak();
			const take = Math.min(blockLen - this.posOut, len - pos);
			out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
			this.posOut += take;
			pos += take;
		}
		return out;
	}
	xofInto(out) {
		if (!this.enableXOF) throw new Error("XOF is not possible for this instance");
		return this.writeInto(out);
	}
	xof(bytes$1) {
		number(bytes$1);
		return this.xofInto(new Uint8Array(bytes$1));
	}
	digestInto(out) {
		output(out, this);
		if (this.finished) throw new Error("digest() was already called");
		this.writeInto(out);
		this.destroy();
		return out;
	}
	digest() {
		return this.digestInto(new Uint8Array(this.outputLen));
	}
	destroy() {
		this.destroyed = true;
		this.state.fill(0);
	}
	_cloneInto(to) {
		const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
		to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
		to.state32.set(this.state32);
		to.pos = this.pos;
		to.posOut = this.posOut;
		to.finished = this.finished;
		to.rounds = rounds;
		to.suffix = suffix;
		to.outputLen = outputLen;
		to.enableXOF = enableXOF;
		to.destroyed = this.destroyed;
		return to;
	}
};
const gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));
const sha3_224 = /* @__PURE__ */ gen(6, 144, 224 / 8);
/**
* SHA3-256 hash function
* @param message - that would be hashed
*/
const sha3_256 = /* @__PURE__ */ gen(6, 136, 256 / 8);
const sha3_384 = /* @__PURE__ */ gen(6, 104, 384 / 8);
const sha3_512 = /* @__PURE__ */ gen(6, 72, 512 / 8);
const keccak_224 = /* @__PURE__ */ gen(1, 144, 224 / 8);
/**
* keccak-256 hash function. Different from SHA3-256.
* @param message - that would be hashed
*/
const keccak_256 = /* @__PURE__ */ gen(1, 136, 256 / 8);
const keccak_384 = /* @__PURE__ */ gen(1, 104, 384 / 8);
const keccak_512 = /* @__PURE__ */ gen(1, 72, 512 / 8);
const genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
const shake128 = /* @__PURE__ */ genShake(31, 168, 128 / 8);
const shake256 = /* @__PURE__ */ genShake(31, 136, 256 / 8);

//#endregion
//#region ../../node_modules/.pnpm/ethereum-cryptography@2.2.1/node_modules/ethereum-cryptography/esm/utils.js
const assertBool = _assert_default.bool;
const assertBytes = _assert_default.bytes;
function bytesToUtf8(data) {
	if (!(data instanceof Uint8Array)) throw new TypeError(`bytesToUtf8 expected Uint8Array, got ${typeof data}`);
	return new TextDecoder().decode(data);
}
function equalsBytes(a, b) {
	if (a.length !== b.length) return false;
	for (let i = 0; i < a.length; i++) if (a[i] !== b[i]) return false;
	return true;
}
function wrapHash(hash$1) {
	return (msg) => {
		_assert_default.bytes(msg);
		return hash$1(msg);
	};
}
const crypto$2 = (() => {
	const webCrypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
	const nodeRequire = typeof module !== "undefined" && typeof module.require === "function" && module.require.bind(module);
	return {
		node: nodeRequire && !webCrypto ? nodeRequire("crypto") : void 0,
		web: webCrypto
	};
})();

//#endregion
//#region ../../node_modules/.pnpm/ethereum-cryptography@2.2.1/node_modules/ethereum-cryptography/esm/keccak.js
const keccak224 = wrapHash(keccak_224);
const keccak256 = (() => {
	const k = wrapHash(keccak_256);
	k.create = keccak_256.create;
	return k;
})();
const keccak384 = wrapHash(keccak_384);
const keccak512 = wrapHash(keccak_512);

//#endregion
//#region ../../node_modules/.pnpm/zod@3.25.67/node_modules/zod/dist/esm/v3/helpers/util.js
var util;
(function(util$1) {
	util$1.assertEqual = (_) => {};
	function assertIs(_arg) {}
	util$1.assertIs = assertIs;
	function assertNever(_x) {
		throw new Error();
	}
	util$1.assertNever = assertNever;
	util$1.arrayToEnum = (items) => {
		const obj = {};
		for (const item of items) obj[item] = item;
		return obj;
	};
	util$1.getValidEnumValues = (obj) => {
		const validKeys = util$1.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
		const filtered = {};
		for (const k of validKeys) filtered[k] = obj[k];
		return util$1.objectValues(filtered);
	};
	util$1.objectValues = (obj) => {
		return util$1.objectKeys(obj).map(function(e) {
			return obj[e];
		});
	};
	util$1.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
		const keys = [];
		for (const key in object) if (Object.prototype.hasOwnProperty.call(object, key)) keys.push(key);
		return keys;
	};
	util$1.find = (arr, checker) => {
		for (const item of arr) if (checker(item)) return item;
		return void 0;
	};
	util$1.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && Number.isFinite(val) && Math.floor(val) === val;
	function joinValues(array, separator = " | ") {
		return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
	}
	util$1.joinValues = joinValues;
	util$1.jsonStringifyReplacer = (_, value) => {
		if (typeof value === "bigint") return value.toString();
		return value;
	};
})(util || (util = {}));
var objectUtil;
(function(objectUtil$1) {
	objectUtil$1.mergeShapes = (first, second) => {
		return {
			...first,
			...second
		};
	};
})(objectUtil || (objectUtil = {}));
const ZodParsedType = util.arrayToEnum([
	"string",
	"nan",
	"number",
	"integer",
	"float",
	"boolean",
	"date",
	"bigint",
	"symbol",
	"function",
	"undefined",
	"null",
	"array",
	"object",
	"unknown",
	"promise",
	"void",
	"never",
	"map",
	"set"
]);
const getParsedType = (data) => {
	const t = typeof data;
	switch (t) {
		case "undefined": return ZodParsedType.undefined;
		case "string": return ZodParsedType.string;
		case "number": return Number.isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
		case "boolean": return ZodParsedType.boolean;
		case "function": return ZodParsedType.function;
		case "bigint": return ZodParsedType.bigint;
		case "symbol": return ZodParsedType.symbol;
		case "object":
			if (Array.isArray(data)) return ZodParsedType.array;
			if (data === null) return ZodParsedType.null;
			if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") return ZodParsedType.promise;
			if (typeof Map !== "undefined" && data instanceof Map) return ZodParsedType.map;
			if (typeof Set !== "undefined" && data instanceof Set) return ZodParsedType.set;
			if (typeof Date !== "undefined" && data instanceof Date) return ZodParsedType.date;
			return ZodParsedType.object;
		default: return ZodParsedType.unknown;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/zod@3.25.67/node_modules/zod/dist/esm/v3/ZodError.js
const ZodIssueCode = util.arrayToEnum([
	"invalid_type",
	"invalid_literal",
	"custom",
	"invalid_union",
	"invalid_union_discriminator",
	"invalid_enum_value",
	"unrecognized_keys",
	"invalid_arguments",
	"invalid_return_type",
	"invalid_date",
	"invalid_string",
	"too_small",
	"too_big",
	"invalid_intersection_types",
	"not_multiple_of",
	"not_finite"
]);
const quotelessJson = (obj) => {
	const json = JSON.stringify(obj, null, 2);
	return json.replace(/"([^"]+)":/g, "$1:");
};
var ZodError = class ZodError extends Error {
	get errors() {
		return this.issues;
	}
	constructor(issues) {
		super();
		this.issues = [];
		this.addIssue = (sub) => {
			this.issues = [...this.issues, sub];
		};
		this.addIssues = (subs = []) => {
			this.issues = [...this.issues, ...subs];
		};
		const actualProto = new.target.prototype;
		if (Object.setPrototypeOf) Object.setPrototypeOf(this, actualProto);
		else this.__proto__ = actualProto;
		this.name = "ZodError";
		this.issues = issues;
	}
	format(_mapper) {
		const mapper = _mapper || function(issue) {
			return issue.message;
		};
		const fieldErrors = { _errors: [] };
		const processError = (error) => {
			for (const issue of error.issues) if (issue.code === "invalid_union") issue.unionErrors.map(processError);
			else if (issue.code === "invalid_return_type") processError(issue.returnTypeError);
			else if (issue.code === "invalid_arguments") processError(issue.argumentsError);
			else if (issue.path.length === 0) fieldErrors._errors.push(mapper(issue));
			else {
				let curr = fieldErrors;
				let i = 0;
				while (i < issue.path.length) {
					const el = issue.path[i];
					const terminal = i === issue.path.length - 1;
					if (!terminal) curr[el] = curr[el] || { _errors: [] };
					else {
						curr[el] = curr[el] || { _errors: [] };
						curr[el]._errors.push(mapper(issue));
					}
					curr = curr[el];
					i++;
				}
			}
		};
		processError(this);
		return fieldErrors;
	}
	static assert(value) {
		if (!(value instanceof ZodError)) throw new Error(`Not a ZodError: ${value}`);
	}
	toString() {
		return this.message;
	}
	get message() {
		return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
	}
	get isEmpty() {
		return this.issues.length === 0;
	}
	flatten(mapper = (issue) => issue.message) {
		const fieldErrors = {};
		const formErrors = [];
		for (const sub of this.issues) if (sub.path.length > 0) {
			fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
			fieldErrors[sub.path[0]].push(mapper(sub));
		} else formErrors.push(mapper(sub));
		return {
			formErrors,
			fieldErrors
		};
	}
	get formErrors() {
		return this.flatten();
	}
};
ZodError.create = (issues) => {
	const error = new ZodError(issues);
	return error;
};

//#endregion
//#region ../../node_modules/.pnpm/zod@3.25.67/node_modules/zod/dist/esm/v3/locales/en.js
const errorMap = (issue, _ctx) => {
	let message;
	switch (issue.code) {
		case ZodIssueCode.invalid_type:
			if (issue.received === ZodParsedType.undefined) message = "Required";
			else message = `Expected ${issue.expected}, received ${issue.received}`;
			break;
		case ZodIssueCode.invalid_literal:
			message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
			break;
		case ZodIssueCode.unrecognized_keys:
			message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
			break;
		case ZodIssueCode.invalid_union:
			message = `Invalid input`;
			break;
		case ZodIssueCode.invalid_union_discriminator:
			message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
			break;
		case ZodIssueCode.invalid_enum_value:
			message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
			break;
		case ZodIssueCode.invalid_arguments:
			message = `Invalid function arguments`;
			break;
		case ZodIssueCode.invalid_return_type:
			message = `Invalid function return type`;
			break;
		case ZodIssueCode.invalid_date:
			message = `Invalid date`;
			break;
		case ZodIssueCode.invalid_string:
			if (typeof issue.validation === "object") if ("includes" in issue.validation) {
				message = `Invalid input: must include "${issue.validation.includes}"`;
				if (typeof issue.validation.position === "number") message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
			} else if ("startsWith" in issue.validation) message = `Invalid input: must start with "${issue.validation.startsWith}"`;
			else if ("endsWith" in issue.validation) message = `Invalid input: must end with "${issue.validation.endsWith}"`;
			else util.assertNever(issue.validation);
			else if (issue.validation !== "regex") message = `Invalid ${issue.validation}`;
			else message = "Invalid";
			break;
		case ZodIssueCode.too_small:
			if (issue.type === "array") message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
			else if (issue.type === "string") message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
			else if (issue.type === "number") message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
			else if (issue.type === "date") message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
			else message = "Invalid input";
			break;
		case ZodIssueCode.too_big:
			if (issue.type === "array") message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
			else if (issue.type === "string") message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
			else if (issue.type === "number") message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
			else if (issue.type === "bigint") message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
			else if (issue.type === "date") message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
			else message = "Invalid input";
			break;
		case ZodIssueCode.custom:
			message = `Invalid input`;
			break;
		case ZodIssueCode.invalid_intersection_types:
			message = `Intersection results could not be merged`;
			break;
		case ZodIssueCode.not_multiple_of:
			message = `Number must be a multiple of ${issue.multipleOf}`;
			break;
		case ZodIssueCode.not_finite:
			message = "Number must be finite";
			break;
		default:
			message = _ctx.defaultError;
			util.assertNever(issue);
	}
	return { message };
};
var en_default = errorMap;

//#endregion
//#region ../../node_modules/.pnpm/zod@3.25.67/node_modules/zod/dist/esm/v3/errors.js
let overrideErrorMap = en_default;
function setErrorMap(map) {
	overrideErrorMap = map;
}
function getErrorMap() {
	return overrideErrorMap;
}

//#endregion
//#region ../../node_modules/.pnpm/zod@3.25.67/node_modules/zod/dist/esm/v3/helpers/parseUtil.js
const makeIssue = (params) => {
	const { data, path, errorMaps, issueData } = params;
	const fullPath = [...path, ...issueData.path || []];
	const fullIssue = {
		...issueData,
		path: fullPath
	};
	if (issueData.message !== void 0) return {
		...issueData,
		path: fullPath,
		message: issueData.message
	};
	let errorMessage = "";
	const maps = errorMaps.filter((m) => !!m).slice().reverse();
	for (const map of maps) errorMessage = map(fullIssue, {
		data,
		defaultError: errorMessage
	}).message;
	return {
		...issueData,
		path: fullPath,
		message: errorMessage
	};
};
const EMPTY_PATH = [];
function addIssueToContext(ctx$1, issueData) {
	const overrideMap = getErrorMap();
	const issue = makeIssue({
		issueData,
		data: ctx$1.data,
		path: ctx$1.path,
		errorMaps: [
			ctx$1.common.contextualErrorMap,
			ctx$1.schemaErrorMap,
			overrideMap,
			overrideMap === en_default ? void 0 : en_default
		].filter((x) => !!x)
	});
	ctx$1.common.issues.push(issue);
}
var ParseStatus = class ParseStatus {
	constructor() {
		this.value = "valid";
	}
	dirty() {
		if (this.value === "valid") this.value = "dirty";
	}
	abort() {
		if (this.value !== "aborted") this.value = "aborted";
	}
	static mergeArray(status, results) {
		const arrayValue = [];
		for (const s of results) {
			if (s.status === "aborted") return INVALID;
			if (s.status === "dirty") status.dirty();
			arrayValue.push(s.value);
		}
		return {
			status: status.value,
			value: arrayValue
		};
	}
	static async mergeObjectAsync(status, pairs) {
		const syncPairs = [];
		for (const pair of pairs) {
			const key = await pair.key;
			const value = await pair.value;
			syncPairs.push({
				key,
				value
			});
		}
		return ParseStatus.mergeObjectSync(status, syncPairs);
	}
	static mergeObjectSync(status, pairs) {
		const finalObject = {};
		for (const pair of pairs) {
			const { key, value } = pair;
			if (key.status === "aborted") return INVALID;
			if (value.status === "aborted") return INVALID;
			if (key.status === "dirty") status.dirty();
			if (value.status === "dirty") status.dirty();
			if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) finalObject[key.value] = value.value;
		}
		return {
			status: status.value,
			value: finalObject
		};
	}
};
const INVALID = Object.freeze({ status: "aborted" });
const DIRTY = (value) => ({
	status: "dirty",
	value
});
const OK = (value) => ({
	status: "valid",
	value
});
const isAborted = (x) => x.status === "aborted";
const isDirty = (x) => x.status === "dirty";
const isValid$2 = (x) => x.status === "valid";
const isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;

//#endregion
//#region ../../node_modules/.pnpm/zod@3.25.67/node_modules/zod/dist/esm/v3/helpers/errorUtil.js
var errorUtil;
(function(errorUtil$1) {
	errorUtil$1.errToObj = (message) => typeof message === "string" ? { message } : message || {};
	errorUtil$1.toString = (message) => typeof message === "string" ? message : message?.message;
})(errorUtil || (errorUtil = {}));

//#endregion
//#region ../../node_modules/.pnpm/zod@3.25.67/node_modules/zod/dist/esm/v3/types.js
var ParseInputLazyPath = class {
	constructor(parent, value, path, key) {
		this._cachedPath = [];
		this.parent = parent;
		this.data = value;
		this._path = path;
		this._key = key;
	}
	get path() {
		if (!this._cachedPath.length) if (Array.isArray(this._key)) this._cachedPath.push(...this._path, ...this._key);
		else this._cachedPath.push(...this._path, this._key);
		return this._cachedPath;
	}
};
const handleResult = (ctx$1, result) => {
	if (isValid$2(result)) return {
		success: true,
		data: result.value
	};
	else {
		if (!ctx$1.common.issues.length) throw new Error("Validation failed but no issues detected.");
		return {
			success: false,
			get error() {
				if (this._error) return this._error;
				const error = new ZodError(ctx$1.common.issues);
				this._error = error;
				return this._error;
			}
		};
	}
};
function processCreateParams(params) {
	if (!params) return {};
	const { errorMap: errorMap$1, invalid_type_error, required_error, description } = params;
	if (errorMap$1 && (invalid_type_error || required_error)) throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
	if (errorMap$1) return {
		errorMap: errorMap$1,
		description
	};
	const customMap = (iss, ctx$1) => {
		const { message } = params;
		if (iss.code === "invalid_enum_value") return { message: message ?? ctx$1.defaultError };
		if (typeof ctx$1.data === "undefined") return { message: message ?? required_error ?? ctx$1.defaultError };
		if (iss.code !== "invalid_type") return { message: ctx$1.defaultError };
		return { message: message ?? invalid_type_error ?? ctx$1.defaultError };
	};
	return {
		errorMap: customMap,
		description
	};
}
var ZodType = class {
	get description() {
		return this._def.description;
	}
	_getType(input) {
		return getParsedType(input.data);
	}
	_getOrReturnCtx(input, ctx$1) {
		return ctx$1 || {
			common: input.parent.common,
			data: input.data,
			parsedType: getParsedType(input.data),
			schemaErrorMap: this._def.errorMap,
			path: input.path,
			parent: input.parent
		};
	}
	_processInputParams(input) {
		return {
			status: new ParseStatus(),
			ctx: {
				common: input.parent.common,
				data: input.data,
				parsedType: getParsedType(input.data),
				schemaErrorMap: this._def.errorMap,
				path: input.path,
				parent: input.parent
			}
		};
	}
	_parseSync(input) {
		const result = this._parse(input);
		if (isAsync(result)) throw new Error("Synchronous parse encountered promise.");
		return result;
	}
	_parseAsync(input) {
		const result = this._parse(input);
		return Promise.resolve(result);
	}
	parse(data, params) {
		const result = this.safeParse(data, params);
		if (result.success) return result.data;
		throw result.error;
	}
	safeParse(data, params) {
		const ctx$1 = {
			common: {
				issues: [],
				async: params?.async ?? false,
				contextualErrorMap: params?.errorMap
			},
			path: params?.path || [],
			schemaErrorMap: this._def.errorMap,
			parent: null,
			data,
			parsedType: getParsedType(data)
		};
		const result = this._parseSync({
			data,
			path: ctx$1.path,
			parent: ctx$1
		});
		return handleResult(ctx$1, result);
	}
	"~validate"(data) {
		const ctx$1 = {
			common: {
				issues: [],
				async: !!this["~standard"].async
			},
			path: [],
			schemaErrorMap: this._def.errorMap,
			parent: null,
			data,
			parsedType: getParsedType(data)
		};
		if (!this["~standard"].async) try {
			const result = this._parseSync({
				data,
				path: [],
				parent: ctx$1
			});
			return isValid$2(result) ? { value: result.value } : { issues: ctx$1.common.issues };
		} catch (err) {
			if (err?.message?.toLowerCase()?.includes("encountered")) this["~standard"].async = true;
			ctx$1.common = {
				issues: [],
				async: true
			};
		}
		return this._parseAsync({
			data,
			path: [],
			parent: ctx$1
		}).then((result) => isValid$2(result) ? { value: result.value } : { issues: ctx$1.common.issues });
	}
	async parseAsync(data, params) {
		const result = await this.safeParseAsync(data, params);
		if (result.success) return result.data;
		throw result.error;
	}
	async safeParseAsync(data, params) {
		const ctx$1 = {
			common: {
				issues: [],
				contextualErrorMap: params?.errorMap,
				async: true
			},
			path: params?.path || [],
			schemaErrorMap: this._def.errorMap,
			parent: null,
			data,
			parsedType: getParsedType(data)
		};
		const maybeAsyncResult = this._parse({
			data,
			path: ctx$1.path,
			parent: ctx$1
		});
		const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
		return handleResult(ctx$1, result);
	}
	refine(check, message) {
		const getIssueProperties = (val) => {
			if (typeof message === "string" || typeof message === "undefined") return { message };
			else if (typeof message === "function") return message(val);
			else return message;
		};
		return this._refinement((val, ctx$1) => {
			const result = check(val);
			const setError = () => ctx$1.addIssue({
				code: ZodIssueCode.custom,
				...getIssueProperties(val)
			});
			if (typeof Promise !== "undefined" && result instanceof Promise) return result.then((data) => {
				if (!data) {
					setError();
					return false;
				} else return true;
			});
			if (!result) {
				setError();
				return false;
			} else return true;
		});
	}
	refinement(check, refinementData) {
		return this._refinement((val, ctx$1) => {
			if (!check(val)) {
				ctx$1.addIssue(typeof refinementData === "function" ? refinementData(val, ctx$1) : refinementData);
				return false;
			} else return true;
		});
	}
	_refinement(refinement) {
		return new ZodEffects({
			schema: this,
			typeName: ZodFirstPartyTypeKind.ZodEffects,
			effect: {
				type: "refinement",
				refinement
			}
		});
	}
	superRefine(refinement) {
		return this._refinement(refinement);
	}
	constructor(def) {
		/** Alias of safeParseAsync */
		this.spa = this.safeParseAsync;
		this._def = def;
		this.parse = this.parse.bind(this);
		this.safeParse = this.safeParse.bind(this);
		this.parseAsync = this.parseAsync.bind(this);
		this.safeParseAsync = this.safeParseAsync.bind(this);
		this.spa = this.spa.bind(this);
		this.refine = this.refine.bind(this);
		this.refinement = this.refinement.bind(this);
		this.superRefine = this.superRefine.bind(this);
		this.optional = this.optional.bind(this);
		this.nullable = this.nullable.bind(this);
		this.nullish = this.nullish.bind(this);
		this.array = this.array.bind(this);
		this.promise = this.promise.bind(this);
		this.or = this.or.bind(this);
		this.and = this.and.bind(this);
		this.transform = this.transform.bind(this);
		this.brand = this.brand.bind(this);
		this.default = this.default.bind(this);
		this.catch = this.catch.bind(this);
		this.describe = this.describe.bind(this);
		this.pipe = this.pipe.bind(this);
		this.readonly = this.readonly.bind(this);
		this.isNullable = this.isNullable.bind(this);
		this.isOptional = this.isOptional.bind(this);
		this["~standard"] = {
			version: 1,
			vendor: "zod",
			validate: (data) => this["~validate"](data)
		};
	}
	optional() {
		return ZodOptional.create(this, this._def);
	}
	nullable() {
		return ZodNullable.create(this, this._def);
	}
	nullish() {
		return this.nullable().optional();
	}
	array() {
		return ZodArray.create(this);
	}
	promise() {
		return ZodPromise.create(this, this._def);
	}
	or(option) {
		return ZodUnion.create([this, option], this._def);
	}
	and(incoming) {
		return ZodIntersection.create(this, incoming, this._def);
	}
	transform(transform) {
		return new ZodEffects({
			...processCreateParams(this._def),
			schema: this,
			typeName: ZodFirstPartyTypeKind.ZodEffects,
			effect: {
				type: "transform",
				transform
			}
		});
	}
	default(def) {
		const defaultValueFunc = typeof def === "function" ? def : () => def;
		return new ZodDefault({
			...processCreateParams(this._def),
			innerType: this,
			defaultValue: defaultValueFunc,
			typeName: ZodFirstPartyTypeKind.ZodDefault
		});
	}
	brand() {
		return new ZodBranded({
			typeName: ZodFirstPartyTypeKind.ZodBranded,
			type: this,
			...processCreateParams(this._def)
		});
	}
	catch(def) {
		const catchValueFunc = typeof def === "function" ? def : () => def;
		return new ZodCatch({
			...processCreateParams(this._def),
			innerType: this,
			catchValue: catchValueFunc,
			typeName: ZodFirstPartyTypeKind.ZodCatch
		});
	}
	describe(description) {
		const This = this.constructor;
		return new This({
			...this._def,
			description
		});
	}
	pipe(target) {
		return ZodPipeline.create(this, target);
	}
	readonly() {
		return ZodReadonly.create(this);
	}
	isOptional() {
		return this.safeParse(void 0).success;
	}
	isNullable() {
		return this.safeParse(null).success;
	}
};
const cuidRegex = /^c[^\s-]{8,}$/i;
const cuid2Regex = /^[0-9a-z]+$/;
const ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
const uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
const nanoidRegex = /^[a-z0-9_-]{21}$/i;
const jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
const durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
const emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
const _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
let emojiRegex;
const ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
const ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
const ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
const ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
const base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
const base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
const dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
const dateRegex = /* @__PURE__ */ new RegExp(`^${dateRegexSource}$`);
function timeRegexSource(args) {
	let secondsRegexSource = `[0-5]\\d`;
	if (args.precision) secondsRegexSource = `${secondsRegexSource}\\.\\d{${args.precision}}`;
	else if (args.precision == null) secondsRegexSource = `${secondsRegexSource}(\\.\\d+)?`;
	const secondsQuantifier = args.precision ? "+" : "?";
	return `([01]\\d|2[0-3]):[0-5]\\d(:${secondsRegexSource})${secondsQuantifier}`;
}
function timeRegex(args) {
	return /* @__PURE__ */ new RegExp(`^${timeRegexSource(args)}$`);
}
function datetimeRegex(args) {
	let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
	const opts = [];
	opts.push(args.local ? `Z?` : `Z`);
	if (args.offset) opts.push(`([+-]\\d{2}:?\\d{2})`);
	regex = `${regex}(${opts.join("|")})`;
	return /* @__PURE__ */ new RegExp(`^${regex}$`);
}
function isValidIP(ip, version$1) {
	if ((version$1 === "v4" || !version$1) && ipv4Regex.test(ip)) return true;
	if ((version$1 === "v6" || !version$1) && ipv6Regex.test(ip)) return true;
	return false;
}
function isValidJWT(jwt, alg) {
	if (!jwtRegex.test(jwt)) return false;
	try {
		const [header] = jwt.split(".");
		const base64 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
		const decoded = JSON.parse(atob(base64));
		if (typeof decoded !== "object" || decoded === null) return false;
		if ("typ" in decoded && decoded?.typ !== "JWT") return false;
		if (!decoded.alg) return false;
		if (alg && decoded.alg !== alg) return false;
		return true;
	} catch {
		return false;
	}
}
function isValidCidr(ip, version$1) {
	if ((version$1 === "v4" || !version$1) && ipv4CidrRegex.test(ip)) return true;
	if ((version$1 === "v6" || !version$1) && ipv6CidrRegex.test(ip)) return true;
	return false;
}
var ZodString = class ZodString extends ZodType {
	_parse(input) {
		if (this._def.coerce) input.data = String(input.data);
		const parsedType = this._getType(input);
		if (parsedType !== ZodParsedType.string) {
			const ctx$2 = this._getOrReturnCtx(input);
			addIssueToContext(ctx$2, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.string,
				received: ctx$2.parsedType
			});
			return INVALID;
		}
		const status = new ParseStatus();
		let ctx$1 = void 0;
		for (const check of this._def.checks) if (check.kind === "min") {
			if (input.data.length < check.value) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					code: ZodIssueCode.too_small,
					minimum: check.value,
					type: "string",
					inclusive: true,
					exact: false,
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "max") {
			if (input.data.length > check.value) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					code: ZodIssueCode.too_big,
					maximum: check.value,
					type: "string",
					inclusive: true,
					exact: false,
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "length") {
			const tooBig = input.data.length > check.value;
			const tooSmall = input.data.length < check.value;
			if (tooBig || tooSmall) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				if (tooBig) addIssueToContext(ctx$1, {
					code: ZodIssueCode.too_big,
					maximum: check.value,
					type: "string",
					inclusive: true,
					exact: true,
					message: check.message
				});
				else if (tooSmall) addIssueToContext(ctx$1, {
					code: ZodIssueCode.too_small,
					minimum: check.value,
					type: "string",
					inclusive: true,
					exact: true,
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "email") {
			if (!emailRegex.test(input.data)) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					validation: "email",
					code: ZodIssueCode.invalid_string,
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "emoji") {
			if (!emojiRegex) emojiRegex = new RegExp(_emojiRegex, "u");
			if (!emojiRegex.test(input.data)) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					validation: "emoji",
					code: ZodIssueCode.invalid_string,
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "uuid") {
			if (!uuidRegex.test(input.data)) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					validation: "uuid",
					code: ZodIssueCode.invalid_string,
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "nanoid") {
			if (!nanoidRegex.test(input.data)) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					validation: "nanoid",
					code: ZodIssueCode.invalid_string,
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "cuid") {
			if (!cuidRegex.test(input.data)) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					validation: "cuid",
					code: ZodIssueCode.invalid_string,
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "cuid2") {
			if (!cuid2Regex.test(input.data)) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					validation: "cuid2",
					code: ZodIssueCode.invalid_string,
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "ulid") {
			if (!ulidRegex.test(input.data)) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					validation: "ulid",
					code: ZodIssueCode.invalid_string,
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "url") try {
			new URL(input.data);
		} catch {
			ctx$1 = this._getOrReturnCtx(input, ctx$1);
			addIssueToContext(ctx$1, {
				validation: "url",
				code: ZodIssueCode.invalid_string,
				message: check.message
			});
			status.dirty();
		}
		else if (check.kind === "regex") {
			check.regex.lastIndex = 0;
			const testResult = check.regex.test(input.data);
			if (!testResult) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					validation: "regex",
					code: ZodIssueCode.invalid_string,
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "trim") input.data = input.data.trim();
		else if (check.kind === "includes") {
			if (!input.data.includes(check.value, check.position)) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					code: ZodIssueCode.invalid_string,
					validation: {
						includes: check.value,
						position: check.position
					},
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "toLowerCase") input.data = input.data.toLowerCase();
		else if (check.kind === "toUpperCase") input.data = input.data.toUpperCase();
		else if (check.kind === "startsWith") {
			if (!input.data.startsWith(check.value)) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					code: ZodIssueCode.invalid_string,
					validation: { startsWith: check.value },
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "endsWith") {
			if (!input.data.endsWith(check.value)) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					code: ZodIssueCode.invalid_string,
					validation: { endsWith: check.value },
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "datetime") {
			const regex = datetimeRegex(check);
			if (!regex.test(input.data)) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					code: ZodIssueCode.invalid_string,
					validation: "datetime",
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "date") {
			const regex = dateRegex;
			if (!regex.test(input.data)) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					code: ZodIssueCode.invalid_string,
					validation: "date",
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "time") {
			const regex = timeRegex(check);
			if (!regex.test(input.data)) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					code: ZodIssueCode.invalid_string,
					validation: "time",
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "duration") {
			if (!durationRegex.test(input.data)) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					validation: "duration",
					code: ZodIssueCode.invalid_string,
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "ip") {
			if (!isValidIP(input.data, check.version)) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					validation: "ip",
					code: ZodIssueCode.invalid_string,
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "jwt") {
			if (!isValidJWT(input.data, check.alg)) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					validation: "jwt",
					code: ZodIssueCode.invalid_string,
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "cidr") {
			if (!isValidCidr(input.data, check.version)) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					validation: "cidr",
					code: ZodIssueCode.invalid_string,
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "base64") {
			if (!base64Regex.test(input.data)) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					validation: "base64",
					code: ZodIssueCode.invalid_string,
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "base64url") {
			if (!base64urlRegex.test(input.data)) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					validation: "base64url",
					code: ZodIssueCode.invalid_string,
					message: check.message
				});
				status.dirty();
			}
		} else util.assertNever(check);
		return {
			status: status.value,
			value: input.data
		};
	}
	_regex(regex, validation, message) {
		return this.refinement((data) => regex.test(data), {
			validation,
			code: ZodIssueCode.invalid_string,
			...errorUtil.errToObj(message)
		});
	}
	_addCheck(check) {
		return new ZodString({
			...this._def,
			checks: [...this._def.checks, check]
		});
	}
	email(message) {
		return this._addCheck({
			kind: "email",
			...errorUtil.errToObj(message)
		});
	}
	url(message) {
		return this._addCheck({
			kind: "url",
			...errorUtil.errToObj(message)
		});
	}
	emoji(message) {
		return this._addCheck({
			kind: "emoji",
			...errorUtil.errToObj(message)
		});
	}
	uuid(message) {
		return this._addCheck({
			kind: "uuid",
			...errorUtil.errToObj(message)
		});
	}
	nanoid(message) {
		return this._addCheck({
			kind: "nanoid",
			...errorUtil.errToObj(message)
		});
	}
	cuid(message) {
		return this._addCheck({
			kind: "cuid",
			...errorUtil.errToObj(message)
		});
	}
	cuid2(message) {
		return this._addCheck({
			kind: "cuid2",
			...errorUtil.errToObj(message)
		});
	}
	ulid(message) {
		return this._addCheck({
			kind: "ulid",
			...errorUtil.errToObj(message)
		});
	}
	base64(message) {
		return this._addCheck({
			kind: "base64",
			...errorUtil.errToObj(message)
		});
	}
	base64url(message) {
		return this._addCheck({
			kind: "base64url",
			...errorUtil.errToObj(message)
		});
	}
	jwt(options) {
		return this._addCheck({
			kind: "jwt",
			...errorUtil.errToObj(options)
		});
	}
	ip(options) {
		return this._addCheck({
			kind: "ip",
			...errorUtil.errToObj(options)
		});
	}
	cidr(options) {
		return this._addCheck({
			kind: "cidr",
			...errorUtil.errToObj(options)
		});
	}
	datetime(options) {
		if (typeof options === "string") return this._addCheck({
			kind: "datetime",
			precision: null,
			offset: false,
			local: false,
			message: options
		});
		return this._addCheck({
			kind: "datetime",
			precision: typeof options?.precision === "undefined" ? null : options?.precision,
			offset: options?.offset ?? false,
			local: options?.local ?? false,
			...errorUtil.errToObj(options?.message)
		});
	}
	date(message) {
		return this._addCheck({
			kind: "date",
			message
		});
	}
	time(options) {
		if (typeof options === "string") return this._addCheck({
			kind: "time",
			precision: null,
			message: options
		});
		return this._addCheck({
			kind: "time",
			precision: typeof options?.precision === "undefined" ? null : options?.precision,
			...errorUtil.errToObj(options?.message)
		});
	}
	duration(message) {
		return this._addCheck({
			kind: "duration",
			...errorUtil.errToObj(message)
		});
	}
	regex(regex, message) {
		return this._addCheck({
			kind: "regex",
			regex,
			...errorUtil.errToObj(message)
		});
	}
	includes(value, options) {
		return this._addCheck({
			kind: "includes",
			value,
			position: options?.position,
			...errorUtil.errToObj(options?.message)
		});
	}
	startsWith(value, message) {
		return this._addCheck({
			kind: "startsWith",
			value,
			...errorUtil.errToObj(message)
		});
	}
	endsWith(value, message) {
		return this._addCheck({
			kind: "endsWith",
			value,
			...errorUtil.errToObj(message)
		});
	}
	min(minLength, message) {
		return this._addCheck({
			kind: "min",
			value: minLength,
			...errorUtil.errToObj(message)
		});
	}
	max(maxLength, message) {
		return this._addCheck({
			kind: "max",
			value: maxLength,
			...errorUtil.errToObj(message)
		});
	}
	length(len, message) {
		return this._addCheck({
			kind: "length",
			value: len,
			...errorUtil.errToObj(message)
		});
	}
	/**
	* Equivalent to `.min(1)`
	*/
	nonempty(message) {
		return this.min(1, errorUtil.errToObj(message));
	}
	trim() {
		return new ZodString({
			...this._def,
			checks: [...this._def.checks, { kind: "trim" }]
		});
	}
	toLowerCase() {
		return new ZodString({
			...this._def,
			checks: [...this._def.checks, { kind: "toLowerCase" }]
		});
	}
	toUpperCase() {
		return new ZodString({
			...this._def,
			checks: [...this._def.checks, { kind: "toUpperCase" }]
		});
	}
	get isDatetime() {
		return !!this._def.checks.find((ch) => ch.kind === "datetime");
	}
	get isDate() {
		return !!this._def.checks.find((ch) => ch.kind === "date");
	}
	get isTime() {
		return !!this._def.checks.find((ch) => ch.kind === "time");
	}
	get isDuration() {
		return !!this._def.checks.find((ch) => ch.kind === "duration");
	}
	get isEmail() {
		return !!this._def.checks.find((ch) => ch.kind === "email");
	}
	get isURL() {
		return !!this._def.checks.find((ch) => ch.kind === "url");
	}
	get isEmoji() {
		return !!this._def.checks.find((ch) => ch.kind === "emoji");
	}
	get isUUID() {
		return !!this._def.checks.find((ch) => ch.kind === "uuid");
	}
	get isNANOID() {
		return !!this._def.checks.find((ch) => ch.kind === "nanoid");
	}
	get isCUID() {
		return !!this._def.checks.find((ch) => ch.kind === "cuid");
	}
	get isCUID2() {
		return !!this._def.checks.find((ch) => ch.kind === "cuid2");
	}
	get isULID() {
		return !!this._def.checks.find((ch) => ch.kind === "ulid");
	}
	get isIP() {
		return !!this._def.checks.find((ch) => ch.kind === "ip");
	}
	get isCIDR() {
		return !!this._def.checks.find((ch) => ch.kind === "cidr");
	}
	get isBase64() {
		return !!this._def.checks.find((ch) => ch.kind === "base64");
	}
	get isBase64url() {
		return !!this._def.checks.find((ch) => ch.kind === "base64url");
	}
	get minLength() {
		let min = null;
		for (const ch of this._def.checks) if (ch.kind === "min") {
			if (min === null || ch.value > min) min = ch.value;
		}
		return min;
	}
	get maxLength() {
		let max = null;
		for (const ch of this._def.checks) if (ch.kind === "max") {
			if (max === null || ch.value < max) max = ch.value;
		}
		return max;
	}
};
ZodString.create = (params) => {
	return new ZodString({
		checks: [],
		typeName: ZodFirstPartyTypeKind.ZodString,
		coerce: params?.coerce ?? false,
		...processCreateParams(params)
	});
};
function floatSafeRemainder(val, step) {
	const valDecCount = (val.toString().split(".")[1] || "").length;
	const stepDecCount = (step.toString().split(".")[1] || "").length;
	const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
	const valInt = Number.parseInt(val.toFixed(decCount).replace(".", ""));
	const stepInt = Number.parseInt(step.toFixed(decCount).replace(".", ""));
	return valInt % stepInt / 10 ** decCount;
}
var ZodNumber = class ZodNumber extends ZodType {
	constructor() {
		super(...arguments);
		this.min = this.gte;
		this.max = this.lte;
		this.step = this.multipleOf;
	}
	_parse(input) {
		if (this._def.coerce) input.data = Number(input.data);
		const parsedType = this._getType(input);
		if (parsedType !== ZodParsedType.number) {
			const ctx$2 = this._getOrReturnCtx(input);
			addIssueToContext(ctx$2, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.number,
				received: ctx$2.parsedType
			});
			return INVALID;
		}
		let ctx$1 = void 0;
		const status = new ParseStatus();
		for (const check of this._def.checks) if (check.kind === "int") {
			if (!util.isInteger(input.data)) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					code: ZodIssueCode.invalid_type,
					expected: "integer",
					received: "float",
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "min") {
			const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
			if (tooSmall) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					code: ZodIssueCode.too_small,
					minimum: check.value,
					type: "number",
					inclusive: check.inclusive,
					exact: false,
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "max") {
			const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
			if (tooBig) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					code: ZodIssueCode.too_big,
					maximum: check.value,
					type: "number",
					inclusive: check.inclusive,
					exact: false,
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "multipleOf") {
			if (floatSafeRemainder(input.data, check.value) !== 0) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					code: ZodIssueCode.not_multiple_of,
					multipleOf: check.value,
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "finite") {
			if (!Number.isFinite(input.data)) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					code: ZodIssueCode.not_finite,
					message: check.message
				});
				status.dirty();
			}
		} else util.assertNever(check);
		return {
			status: status.value,
			value: input.data
		};
	}
	gte(value, message) {
		return this.setLimit("min", value, true, errorUtil.toString(message));
	}
	gt(value, message) {
		return this.setLimit("min", value, false, errorUtil.toString(message));
	}
	lte(value, message) {
		return this.setLimit("max", value, true, errorUtil.toString(message));
	}
	lt(value, message) {
		return this.setLimit("max", value, false, errorUtil.toString(message));
	}
	setLimit(kind, value, inclusive, message) {
		return new ZodNumber({
			...this._def,
			checks: [...this._def.checks, {
				kind,
				value,
				inclusive,
				message: errorUtil.toString(message)
			}]
		});
	}
	_addCheck(check) {
		return new ZodNumber({
			...this._def,
			checks: [...this._def.checks, check]
		});
	}
	int(message) {
		return this._addCheck({
			kind: "int",
			message: errorUtil.toString(message)
		});
	}
	positive(message) {
		return this._addCheck({
			kind: "min",
			value: 0,
			inclusive: false,
			message: errorUtil.toString(message)
		});
	}
	negative(message) {
		return this._addCheck({
			kind: "max",
			value: 0,
			inclusive: false,
			message: errorUtil.toString(message)
		});
	}
	nonpositive(message) {
		return this._addCheck({
			kind: "max",
			value: 0,
			inclusive: true,
			message: errorUtil.toString(message)
		});
	}
	nonnegative(message) {
		return this._addCheck({
			kind: "min",
			value: 0,
			inclusive: true,
			message: errorUtil.toString(message)
		});
	}
	multipleOf(value, message) {
		return this._addCheck({
			kind: "multipleOf",
			value,
			message: errorUtil.toString(message)
		});
	}
	finite(message) {
		return this._addCheck({
			kind: "finite",
			message: errorUtil.toString(message)
		});
	}
	safe(message) {
		return this._addCheck({
			kind: "min",
			inclusive: true,
			value: Number.MIN_SAFE_INTEGER,
			message: errorUtil.toString(message)
		})._addCheck({
			kind: "max",
			inclusive: true,
			value: Number.MAX_SAFE_INTEGER,
			message: errorUtil.toString(message)
		});
	}
	get minValue() {
		let min = null;
		for (const ch of this._def.checks) if (ch.kind === "min") {
			if (min === null || ch.value > min) min = ch.value;
		}
		return min;
	}
	get maxValue() {
		let max = null;
		for (const ch of this._def.checks) if (ch.kind === "max") {
			if (max === null || ch.value < max) max = ch.value;
		}
		return max;
	}
	get isInt() {
		return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
	}
	get isFinite() {
		let max = null;
		let min = null;
		for (const ch of this._def.checks) if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") return true;
		else if (ch.kind === "min") {
			if (min === null || ch.value > min) min = ch.value;
		} else if (ch.kind === "max") {
			if (max === null || ch.value < max) max = ch.value;
		}
		return Number.isFinite(min) && Number.isFinite(max);
	}
};
ZodNumber.create = (params) => {
	return new ZodNumber({
		checks: [],
		typeName: ZodFirstPartyTypeKind.ZodNumber,
		coerce: params?.coerce || false,
		...processCreateParams(params)
	});
};
var ZodBigInt = class ZodBigInt extends ZodType {
	constructor() {
		super(...arguments);
		this.min = this.gte;
		this.max = this.lte;
	}
	_parse(input) {
		if (this._def.coerce) try {
			input.data = BigInt(input.data);
		} catch {
			return this._getInvalidInput(input);
		}
		const parsedType = this._getType(input);
		if (parsedType !== ZodParsedType.bigint) return this._getInvalidInput(input);
		let ctx$1 = void 0;
		const status = new ParseStatus();
		for (const check of this._def.checks) if (check.kind === "min") {
			const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
			if (tooSmall) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					code: ZodIssueCode.too_small,
					type: "bigint",
					minimum: check.value,
					inclusive: check.inclusive,
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "max") {
			const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
			if (tooBig) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					code: ZodIssueCode.too_big,
					type: "bigint",
					maximum: check.value,
					inclusive: check.inclusive,
					message: check.message
				});
				status.dirty();
			}
		} else if (check.kind === "multipleOf") {
			if (input.data % check.value !== BigInt(0)) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					code: ZodIssueCode.not_multiple_of,
					multipleOf: check.value,
					message: check.message
				});
				status.dirty();
			}
		} else util.assertNever(check);
		return {
			status: status.value,
			value: input.data
		};
	}
	_getInvalidInput(input) {
		const ctx$1 = this._getOrReturnCtx(input);
		addIssueToContext(ctx$1, {
			code: ZodIssueCode.invalid_type,
			expected: ZodParsedType.bigint,
			received: ctx$1.parsedType
		});
		return INVALID;
	}
	gte(value, message) {
		return this.setLimit("min", value, true, errorUtil.toString(message));
	}
	gt(value, message) {
		return this.setLimit("min", value, false, errorUtil.toString(message));
	}
	lte(value, message) {
		return this.setLimit("max", value, true, errorUtil.toString(message));
	}
	lt(value, message) {
		return this.setLimit("max", value, false, errorUtil.toString(message));
	}
	setLimit(kind, value, inclusive, message) {
		return new ZodBigInt({
			...this._def,
			checks: [...this._def.checks, {
				kind,
				value,
				inclusive,
				message: errorUtil.toString(message)
			}]
		});
	}
	_addCheck(check) {
		return new ZodBigInt({
			...this._def,
			checks: [...this._def.checks, check]
		});
	}
	positive(message) {
		return this._addCheck({
			kind: "min",
			value: BigInt(0),
			inclusive: false,
			message: errorUtil.toString(message)
		});
	}
	negative(message) {
		return this._addCheck({
			kind: "max",
			value: BigInt(0),
			inclusive: false,
			message: errorUtil.toString(message)
		});
	}
	nonpositive(message) {
		return this._addCheck({
			kind: "max",
			value: BigInt(0),
			inclusive: true,
			message: errorUtil.toString(message)
		});
	}
	nonnegative(message) {
		return this._addCheck({
			kind: "min",
			value: BigInt(0),
			inclusive: true,
			message: errorUtil.toString(message)
		});
	}
	multipleOf(value, message) {
		return this._addCheck({
			kind: "multipleOf",
			value,
			message: errorUtil.toString(message)
		});
	}
	get minValue() {
		let min = null;
		for (const ch of this._def.checks) if (ch.kind === "min") {
			if (min === null || ch.value > min) min = ch.value;
		}
		return min;
	}
	get maxValue() {
		let max = null;
		for (const ch of this._def.checks) if (ch.kind === "max") {
			if (max === null || ch.value < max) max = ch.value;
		}
		return max;
	}
};
ZodBigInt.create = (params) => {
	return new ZodBigInt({
		checks: [],
		typeName: ZodFirstPartyTypeKind.ZodBigInt,
		coerce: params?.coerce ?? false,
		...processCreateParams(params)
	});
};
var ZodBoolean = class extends ZodType {
	_parse(input) {
		if (this._def.coerce) input.data = Boolean(input.data);
		const parsedType = this._getType(input);
		if (parsedType !== ZodParsedType.boolean) {
			const ctx$1 = this._getOrReturnCtx(input);
			addIssueToContext(ctx$1, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.boolean,
				received: ctx$1.parsedType
			});
			return INVALID;
		}
		return OK(input.data);
	}
};
ZodBoolean.create = (params) => {
	return new ZodBoolean({
		typeName: ZodFirstPartyTypeKind.ZodBoolean,
		coerce: params?.coerce || false,
		...processCreateParams(params)
	});
};
var ZodDate = class ZodDate extends ZodType {
	_parse(input) {
		if (this._def.coerce) input.data = new Date(input.data);
		const parsedType = this._getType(input);
		if (parsedType !== ZodParsedType.date) {
			const ctx$2 = this._getOrReturnCtx(input);
			addIssueToContext(ctx$2, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.date,
				received: ctx$2.parsedType
			});
			return INVALID;
		}
		if (Number.isNaN(input.data.getTime())) {
			const ctx$2 = this._getOrReturnCtx(input);
			addIssueToContext(ctx$2, { code: ZodIssueCode.invalid_date });
			return INVALID;
		}
		const status = new ParseStatus();
		let ctx$1 = void 0;
		for (const check of this._def.checks) if (check.kind === "min") {
			if (input.data.getTime() < check.value) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					code: ZodIssueCode.too_small,
					message: check.message,
					inclusive: true,
					exact: false,
					minimum: check.value,
					type: "date"
				});
				status.dirty();
			}
		} else if (check.kind === "max") {
			if (input.data.getTime() > check.value) {
				ctx$1 = this._getOrReturnCtx(input, ctx$1);
				addIssueToContext(ctx$1, {
					code: ZodIssueCode.too_big,
					message: check.message,
					inclusive: true,
					exact: false,
					maximum: check.value,
					type: "date"
				});
				status.dirty();
			}
		} else util.assertNever(check);
		return {
			status: status.value,
			value: new Date(input.data.getTime())
		};
	}
	_addCheck(check) {
		return new ZodDate({
			...this._def,
			checks: [...this._def.checks, check]
		});
	}
	min(minDate, message) {
		return this._addCheck({
			kind: "min",
			value: minDate.getTime(),
			message: errorUtil.toString(message)
		});
	}
	max(maxDate, message) {
		return this._addCheck({
			kind: "max",
			value: maxDate.getTime(),
			message: errorUtil.toString(message)
		});
	}
	get minDate() {
		let min = null;
		for (const ch of this._def.checks) if (ch.kind === "min") {
			if (min === null || ch.value > min) min = ch.value;
		}
		return min != null ? new Date(min) : null;
	}
	get maxDate() {
		let max = null;
		for (const ch of this._def.checks) if (ch.kind === "max") {
			if (max === null || ch.value < max) max = ch.value;
		}
		return max != null ? new Date(max) : null;
	}
};
ZodDate.create = (params) => {
	return new ZodDate({
		checks: [],
		coerce: params?.coerce || false,
		typeName: ZodFirstPartyTypeKind.ZodDate,
		...processCreateParams(params)
	});
};
var ZodSymbol = class extends ZodType {
	_parse(input) {
		const parsedType = this._getType(input);
		if (parsedType !== ZodParsedType.symbol) {
			const ctx$1 = this._getOrReturnCtx(input);
			addIssueToContext(ctx$1, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.symbol,
				received: ctx$1.parsedType
			});
			return INVALID;
		}
		return OK(input.data);
	}
};
ZodSymbol.create = (params) => {
	return new ZodSymbol({
		typeName: ZodFirstPartyTypeKind.ZodSymbol,
		...processCreateParams(params)
	});
};
var ZodUndefined = class extends ZodType {
	_parse(input) {
		const parsedType = this._getType(input);
		if (parsedType !== ZodParsedType.undefined) {
			const ctx$1 = this._getOrReturnCtx(input);
			addIssueToContext(ctx$1, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.undefined,
				received: ctx$1.parsedType
			});
			return INVALID;
		}
		return OK(input.data);
	}
};
ZodUndefined.create = (params) => {
	return new ZodUndefined({
		typeName: ZodFirstPartyTypeKind.ZodUndefined,
		...processCreateParams(params)
	});
};
var ZodNull = class extends ZodType {
	_parse(input) {
		const parsedType = this._getType(input);
		if (parsedType !== ZodParsedType.null) {
			const ctx$1 = this._getOrReturnCtx(input);
			addIssueToContext(ctx$1, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.null,
				received: ctx$1.parsedType
			});
			return INVALID;
		}
		return OK(input.data);
	}
};
ZodNull.create = (params) => {
	return new ZodNull({
		typeName: ZodFirstPartyTypeKind.ZodNull,
		...processCreateParams(params)
	});
};
var ZodAny = class extends ZodType {
	constructor() {
		super(...arguments);
		this._any = true;
	}
	_parse(input) {
		return OK(input.data);
	}
};
ZodAny.create = (params) => {
	return new ZodAny({
		typeName: ZodFirstPartyTypeKind.ZodAny,
		...processCreateParams(params)
	});
};
var ZodUnknown = class extends ZodType {
	constructor() {
		super(...arguments);
		this._unknown = true;
	}
	_parse(input) {
		return OK(input.data);
	}
};
ZodUnknown.create = (params) => {
	return new ZodUnknown({
		typeName: ZodFirstPartyTypeKind.ZodUnknown,
		...processCreateParams(params)
	});
};
var ZodNever = class extends ZodType {
	_parse(input) {
		const ctx$1 = this._getOrReturnCtx(input);
		addIssueToContext(ctx$1, {
			code: ZodIssueCode.invalid_type,
			expected: ZodParsedType.never,
			received: ctx$1.parsedType
		});
		return INVALID;
	}
};
ZodNever.create = (params) => {
	return new ZodNever({
		typeName: ZodFirstPartyTypeKind.ZodNever,
		...processCreateParams(params)
	});
};
var ZodVoid = class extends ZodType {
	_parse(input) {
		const parsedType = this._getType(input);
		if (parsedType !== ZodParsedType.undefined) {
			const ctx$1 = this._getOrReturnCtx(input);
			addIssueToContext(ctx$1, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.void,
				received: ctx$1.parsedType
			});
			return INVALID;
		}
		return OK(input.data);
	}
};
ZodVoid.create = (params) => {
	return new ZodVoid({
		typeName: ZodFirstPartyTypeKind.ZodVoid,
		...processCreateParams(params)
	});
};
var ZodArray = class ZodArray extends ZodType {
	_parse(input) {
		const { ctx: ctx$1, status } = this._processInputParams(input);
		const def = this._def;
		if (ctx$1.parsedType !== ZodParsedType.array) {
			addIssueToContext(ctx$1, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.array,
				received: ctx$1.parsedType
			});
			return INVALID;
		}
		if (def.exactLength !== null) {
			const tooBig = ctx$1.data.length > def.exactLength.value;
			const tooSmall = ctx$1.data.length < def.exactLength.value;
			if (tooBig || tooSmall) {
				addIssueToContext(ctx$1, {
					code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
					minimum: tooSmall ? def.exactLength.value : void 0,
					maximum: tooBig ? def.exactLength.value : void 0,
					type: "array",
					inclusive: true,
					exact: true,
					message: def.exactLength.message
				});
				status.dirty();
			}
		}
		if (def.minLength !== null) {
			if (ctx$1.data.length < def.minLength.value) {
				addIssueToContext(ctx$1, {
					code: ZodIssueCode.too_small,
					minimum: def.minLength.value,
					type: "array",
					inclusive: true,
					exact: false,
					message: def.minLength.message
				});
				status.dirty();
			}
		}
		if (def.maxLength !== null) {
			if (ctx$1.data.length > def.maxLength.value) {
				addIssueToContext(ctx$1, {
					code: ZodIssueCode.too_big,
					maximum: def.maxLength.value,
					type: "array",
					inclusive: true,
					exact: false,
					message: def.maxLength.message
				});
				status.dirty();
			}
		}
		if (ctx$1.common.async) return Promise.all([...ctx$1.data].map((item, i) => {
			return def.type._parseAsync(new ParseInputLazyPath(ctx$1, item, ctx$1.path, i));
		})).then((result$1) => {
			return ParseStatus.mergeArray(status, result$1);
		});
		const result = [...ctx$1.data].map((item, i) => {
			return def.type._parseSync(new ParseInputLazyPath(ctx$1, item, ctx$1.path, i));
		});
		return ParseStatus.mergeArray(status, result);
	}
	get element() {
		return this._def.type;
	}
	min(minLength, message) {
		return new ZodArray({
			...this._def,
			minLength: {
				value: minLength,
				message: errorUtil.toString(message)
			}
		});
	}
	max(maxLength, message) {
		return new ZodArray({
			...this._def,
			maxLength: {
				value: maxLength,
				message: errorUtil.toString(message)
			}
		});
	}
	length(len, message) {
		return new ZodArray({
			...this._def,
			exactLength: {
				value: len,
				message: errorUtil.toString(message)
			}
		});
	}
	nonempty(message) {
		return this.min(1, message);
	}
};
ZodArray.create = (schema, params) => {
	return new ZodArray({
		type: schema,
		minLength: null,
		maxLength: null,
		exactLength: null,
		typeName: ZodFirstPartyTypeKind.ZodArray,
		...processCreateParams(params)
	});
};
function deepPartialify(schema) {
	if (schema instanceof ZodObject) {
		const newShape = {};
		for (const key in schema.shape) {
			const fieldSchema = schema.shape[key];
			newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
		}
		return new ZodObject({
			...schema._def,
			shape: () => newShape
		});
	} else if (schema instanceof ZodArray) return new ZodArray({
		...schema._def,
		type: deepPartialify(schema.element)
	});
	else if (schema instanceof ZodOptional) return ZodOptional.create(deepPartialify(schema.unwrap()));
	else if (schema instanceof ZodNullable) return ZodNullable.create(deepPartialify(schema.unwrap()));
	else if (schema instanceof ZodTuple) return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
	else return schema;
}
var ZodObject = class ZodObject extends ZodType {
	constructor() {
		super(...arguments);
		this._cached = null;
		/**
		* @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.
		* If you want to pass through unknown properties, use `.passthrough()` instead.
		*/
		this.nonstrict = this.passthrough;
		/**
		* @deprecated Use `.extend` instead
		*  */
		this.augment = this.extend;
	}
	_getCached() {
		if (this._cached !== null) return this._cached;
		const shape = this._def.shape();
		const keys = util.objectKeys(shape);
		this._cached = {
			shape,
			keys
		};
		return this._cached;
	}
	_parse(input) {
		const parsedType = this._getType(input);
		if (parsedType !== ZodParsedType.object) {
			const ctx$2 = this._getOrReturnCtx(input);
			addIssueToContext(ctx$2, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.object,
				received: ctx$2.parsedType
			});
			return INVALID;
		}
		const { status, ctx: ctx$1 } = this._processInputParams(input);
		const { shape, keys: shapeKeys } = this._getCached();
		const extraKeys = [];
		if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
			for (const key in ctx$1.data) if (!shapeKeys.includes(key)) extraKeys.push(key);
		}
		const pairs = [];
		for (const key of shapeKeys) {
			const keyValidator = shape[key];
			const value = ctx$1.data[key];
			pairs.push({
				key: {
					status: "valid",
					value: key
				},
				value: keyValidator._parse(new ParseInputLazyPath(ctx$1, value, ctx$1.path, key)),
				alwaysSet: key in ctx$1.data
			});
		}
		if (this._def.catchall instanceof ZodNever) {
			const unknownKeys = this._def.unknownKeys;
			if (unknownKeys === "passthrough") for (const key of extraKeys) pairs.push({
				key: {
					status: "valid",
					value: key
				},
				value: {
					status: "valid",
					value: ctx$1.data[key]
				}
			});
			else if (unknownKeys === "strict") {
				if (extraKeys.length > 0) {
					addIssueToContext(ctx$1, {
						code: ZodIssueCode.unrecognized_keys,
						keys: extraKeys
					});
					status.dirty();
				}
			} else if (unknownKeys === "strip") {} else throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
		} else {
			const catchall = this._def.catchall;
			for (const key of extraKeys) {
				const value = ctx$1.data[key];
				pairs.push({
					key: {
						status: "valid",
						value: key
					},
					value: catchall._parse(new ParseInputLazyPath(ctx$1, value, ctx$1.path, key)),
					alwaysSet: key in ctx$1.data
				});
			}
		}
		if (ctx$1.common.async) return Promise.resolve().then(async () => {
			const syncPairs = [];
			for (const pair of pairs) {
				const key = await pair.key;
				const value = await pair.value;
				syncPairs.push({
					key,
					value,
					alwaysSet: pair.alwaysSet
				});
			}
			return syncPairs;
		}).then((syncPairs) => {
			return ParseStatus.mergeObjectSync(status, syncPairs);
		});
		else return ParseStatus.mergeObjectSync(status, pairs);
	}
	get shape() {
		return this._def.shape();
	}
	strict(message) {
		errorUtil.errToObj;
		return new ZodObject({
			...this._def,
			unknownKeys: "strict",
			...message !== void 0 ? { errorMap: (issue, ctx$1) => {
				const defaultError = this._def.errorMap?.(issue, ctx$1).message ?? ctx$1.defaultError;
				if (issue.code === "unrecognized_keys") return { message: errorUtil.errToObj(message).message ?? defaultError };
				return { message: defaultError };
			} } : {}
		});
	}
	strip() {
		return new ZodObject({
			...this._def,
			unknownKeys: "strip"
		});
	}
	passthrough() {
		return new ZodObject({
			...this._def,
			unknownKeys: "passthrough"
		});
	}
	extend(augmentation) {
		return new ZodObject({
			...this._def,
			shape: () => ({
				...this._def.shape(),
				...augmentation
			})
		});
	}
	/**
	* Prior to zod@1.0.12 there was a bug in the
	* inferred type of merged objects. Please
	* upgrade if you are experiencing issues.
	*/
	merge(merging) {
		const merged = new ZodObject({
			unknownKeys: merging._def.unknownKeys,
			catchall: merging._def.catchall,
			shape: () => ({
				...this._def.shape(),
				...merging._def.shape()
			}),
			typeName: ZodFirstPartyTypeKind.ZodObject
		});
		return merged;
	}
	setKey(key, schema) {
		return this.augment({ [key]: schema });
	}
	catchall(index) {
		return new ZodObject({
			...this._def,
			catchall: index
		});
	}
	pick(mask$1) {
		const shape = {};
		for (const key of util.objectKeys(mask$1)) if (mask$1[key] && this.shape[key]) shape[key] = this.shape[key];
		return new ZodObject({
			...this._def,
			shape: () => shape
		});
	}
	omit(mask$1) {
		const shape = {};
		for (const key of util.objectKeys(this.shape)) if (!mask$1[key]) shape[key] = this.shape[key];
		return new ZodObject({
			...this._def,
			shape: () => shape
		});
	}
	/**
	* @deprecated
	*/
	deepPartial() {
		return deepPartialify(this);
	}
	partial(mask$1) {
		const newShape = {};
		for (const key of util.objectKeys(this.shape)) {
			const fieldSchema = this.shape[key];
			if (mask$1 && !mask$1[key]) newShape[key] = fieldSchema;
			else newShape[key] = fieldSchema.optional();
		}
		return new ZodObject({
			...this._def,
			shape: () => newShape
		});
	}
	required(mask$1) {
		const newShape = {};
		for (const key of util.objectKeys(this.shape)) if (mask$1 && !mask$1[key]) newShape[key] = this.shape[key];
		else {
			const fieldSchema = this.shape[key];
			let newField = fieldSchema;
			while (newField instanceof ZodOptional) newField = newField._def.innerType;
			newShape[key] = newField;
		}
		return new ZodObject({
			...this._def,
			shape: () => newShape
		});
	}
	keyof() {
		return createZodEnum(util.objectKeys(this.shape));
	}
};
ZodObject.create = (shape, params) => {
	return new ZodObject({
		shape: () => shape,
		unknownKeys: "strip",
		catchall: ZodNever.create(),
		typeName: ZodFirstPartyTypeKind.ZodObject,
		...processCreateParams(params)
	});
};
ZodObject.strictCreate = (shape, params) => {
	return new ZodObject({
		shape: () => shape,
		unknownKeys: "strict",
		catchall: ZodNever.create(),
		typeName: ZodFirstPartyTypeKind.ZodObject,
		...processCreateParams(params)
	});
};
ZodObject.lazycreate = (shape, params) => {
	return new ZodObject({
		shape,
		unknownKeys: "strip",
		catchall: ZodNever.create(),
		typeName: ZodFirstPartyTypeKind.ZodObject,
		...processCreateParams(params)
	});
};
var ZodUnion = class extends ZodType {
	_parse(input) {
		const { ctx: ctx$1 } = this._processInputParams(input);
		const options = this._def.options;
		function handleResults(results) {
			for (const result of results) if (result.result.status === "valid") return result.result;
			for (const result of results) if (result.result.status === "dirty") {
				ctx$1.common.issues.push(...result.ctx.common.issues);
				return result.result;
			}
			const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
			addIssueToContext(ctx$1, {
				code: ZodIssueCode.invalid_union,
				unionErrors
			});
			return INVALID;
		}
		if (ctx$1.common.async) return Promise.all(options.map(async (option) => {
			const childCtx = {
				...ctx$1,
				common: {
					...ctx$1.common,
					issues: []
				},
				parent: null
			};
			return {
				result: await option._parseAsync({
					data: ctx$1.data,
					path: ctx$1.path,
					parent: childCtx
				}),
				ctx: childCtx
			};
		})).then(handleResults);
		else {
			let dirty = void 0;
			const issues = [];
			for (const option of options) {
				const childCtx = {
					...ctx$1,
					common: {
						...ctx$1.common,
						issues: []
					},
					parent: null
				};
				const result = option._parseSync({
					data: ctx$1.data,
					path: ctx$1.path,
					parent: childCtx
				});
				if (result.status === "valid") return result;
				else if (result.status === "dirty" && !dirty) dirty = {
					result,
					ctx: childCtx
				};
				if (childCtx.common.issues.length) issues.push(childCtx.common.issues);
			}
			if (dirty) {
				ctx$1.common.issues.push(...dirty.ctx.common.issues);
				return dirty.result;
			}
			const unionErrors = issues.map((issues$1) => new ZodError(issues$1));
			addIssueToContext(ctx$1, {
				code: ZodIssueCode.invalid_union,
				unionErrors
			});
			return INVALID;
		}
	}
	get options() {
		return this._def.options;
	}
};
ZodUnion.create = (types, params) => {
	return new ZodUnion({
		options: types,
		typeName: ZodFirstPartyTypeKind.ZodUnion,
		...processCreateParams(params)
	});
};
const getDiscriminator = (type) => {
	if (type instanceof ZodLazy) return getDiscriminator(type.schema);
	else if (type instanceof ZodEffects) return getDiscriminator(type.innerType());
	else if (type instanceof ZodLiteral) return [type.value];
	else if (type instanceof ZodEnum) return type.options;
	else if (type instanceof ZodNativeEnum) return util.objectValues(type.enum);
	else if (type instanceof ZodDefault) return getDiscriminator(type._def.innerType);
	else if (type instanceof ZodUndefined) return [void 0];
	else if (type instanceof ZodNull) return [null];
	else if (type instanceof ZodOptional) return [void 0, ...getDiscriminator(type.unwrap())];
	else if (type instanceof ZodNullable) return [null, ...getDiscriminator(type.unwrap())];
	else if (type instanceof ZodBranded) return getDiscriminator(type.unwrap());
	else if (type instanceof ZodReadonly) return getDiscriminator(type.unwrap());
	else if (type instanceof ZodCatch) return getDiscriminator(type._def.innerType);
	else return [];
};
var ZodDiscriminatedUnion = class ZodDiscriminatedUnion extends ZodType {
	_parse(input) {
		const { ctx: ctx$1 } = this._processInputParams(input);
		if (ctx$1.parsedType !== ZodParsedType.object) {
			addIssueToContext(ctx$1, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.object,
				received: ctx$1.parsedType
			});
			return INVALID;
		}
		const discriminator = this.discriminator;
		const discriminatorValue = ctx$1.data[discriminator];
		const option = this.optionsMap.get(discriminatorValue);
		if (!option) {
			addIssueToContext(ctx$1, {
				code: ZodIssueCode.invalid_union_discriminator,
				options: Array.from(this.optionsMap.keys()),
				path: [discriminator]
			});
			return INVALID;
		}
		if (ctx$1.common.async) return option._parseAsync({
			data: ctx$1.data,
			path: ctx$1.path,
			parent: ctx$1
		});
		else return option._parseSync({
			data: ctx$1.data,
			path: ctx$1.path,
			parent: ctx$1
		});
	}
	get discriminator() {
		return this._def.discriminator;
	}
	get options() {
		return this._def.options;
	}
	get optionsMap() {
		return this._def.optionsMap;
	}
	/**
	* The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
	* However, it only allows a union of objects, all of which need to share a discriminator property. This property must
	* have a different value for each object in the union.
	* @param discriminator the name of the discriminator property
	* @param types an array of object schemas
	* @param params
	*/
	static create(discriminator, options, params) {
		const optionsMap = /* @__PURE__ */ new Map();
		for (const type of options) {
			const discriminatorValues = getDiscriminator(type.shape[discriminator]);
			if (!discriminatorValues.length) throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
			for (const value of discriminatorValues) {
				if (optionsMap.has(value)) throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
				optionsMap.set(value, type);
			}
		}
		return new ZodDiscriminatedUnion({
			typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
			discriminator,
			options,
			optionsMap,
			...processCreateParams(params)
		});
	}
};
function mergeValues(a, b) {
	const aType = getParsedType(a);
	const bType = getParsedType(b);
	if (a === b) return {
		valid: true,
		data: a
	};
	else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
		const bKeys = util.objectKeys(b);
		const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
		const newObj = {
			...a,
			...b
		};
		for (const key of sharedKeys) {
			const sharedValue = mergeValues(a[key], b[key]);
			if (!sharedValue.valid) return { valid: false };
			newObj[key] = sharedValue.data;
		}
		return {
			valid: true,
			data: newObj
		};
	} else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
		if (a.length !== b.length) return { valid: false };
		const newArray = [];
		for (let index = 0; index < a.length; index++) {
			const itemA = a[index];
			const itemB = b[index];
			const sharedValue = mergeValues(itemA, itemB);
			if (!sharedValue.valid) return { valid: false };
			newArray.push(sharedValue.data);
		}
		return {
			valid: true,
			data: newArray
		};
	} else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) return {
		valid: true,
		data: a
	};
	else return { valid: false };
}
var ZodIntersection = class extends ZodType {
	_parse(input) {
		const { status, ctx: ctx$1 } = this._processInputParams(input);
		const handleParsed = (parsedLeft, parsedRight) => {
			if (isAborted(parsedLeft) || isAborted(parsedRight)) return INVALID;
			const merged = mergeValues(parsedLeft.value, parsedRight.value);
			if (!merged.valid) {
				addIssueToContext(ctx$1, { code: ZodIssueCode.invalid_intersection_types });
				return INVALID;
			}
			if (isDirty(parsedLeft) || isDirty(parsedRight)) status.dirty();
			return {
				status: status.value,
				value: merged.data
			};
		};
		if (ctx$1.common.async) return Promise.all([this._def.left._parseAsync({
			data: ctx$1.data,
			path: ctx$1.path,
			parent: ctx$1
		}), this._def.right._parseAsync({
			data: ctx$1.data,
			path: ctx$1.path,
			parent: ctx$1
		})]).then(([left, right]) => handleParsed(left, right));
		else return handleParsed(this._def.left._parseSync({
			data: ctx$1.data,
			path: ctx$1.path,
			parent: ctx$1
		}), this._def.right._parseSync({
			data: ctx$1.data,
			path: ctx$1.path,
			parent: ctx$1
		}));
	}
};
ZodIntersection.create = (left, right, params) => {
	return new ZodIntersection({
		left,
		right,
		typeName: ZodFirstPartyTypeKind.ZodIntersection,
		...processCreateParams(params)
	});
};
var ZodTuple = class ZodTuple extends ZodType {
	_parse(input) {
		const { status, ctx: ctx$1 } = this._processInputParams(input);
		if (ctx$1.parsedType !== ZodParsedType.array) {
			addIssueToContext(ctx$1, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.array,
				received: ctx$1.parsedType
			});
			return INVALID;
		}
		if (ctx$1.data.length < this._def.items.length) {
			addIssueToContext(ctx$1, {
				code: ZodIssueCode.too_small,
				minimum: this._def.items.length,
				inclusive: true,
				exact: false,
				type: "array"
			});
			return INVALID;
		}
		const rest = this._def.rest;
		if (!rest && ctx$1.data.length > this._def.items.length) {
			addIssueToContext(ctx$1, {
				code: ZodIssueCode.too_big,
				maximum: this._def.items.length,
				inclusive: true,
				exact: false,
				type: "array"
			});
			status.dirty();
		}
		const items = [...ctx$1.data].map((item, itemIndex) => {
			const schema = this._def.items[itemIndex] || this._def.rest;
			if (!schema) return null;
			return schema._parse(new ParseInputLazyPath(ctx$1, item, ctx$1.path, itemIndex));
		}).filter((x) => !!x);
		if (ctx$1.common.async) return Promise.all(items).then((results) => {
			return ParseStatus.mergeArray(status, results);
		});
		else return ParseStatus.mergeArray(status, items);
	}
	get items() {
		return this._def.items;
	}
	rest(rest) {
		return new ZodTuple({
			...this._def,
			rest
		});
	}
};
ZodTuple.create = (schemas, params) => {
	if (!Array.isArray(schemas)) throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
	return new ZodTuple({
		items: schemas,
		typeName: ZodFirstPartyTypeKind.ZodTuple,
		rest: null,
		...processCreateParams(params)
	});
};
var ZodRecord = class ZodRecord extends ZodType {
	get keySchema() {
		return this._def.keyType;
	}
	get valueSchema() {
		return this._def.valueType;
	}
	_parse(input) {
		const { status, ctx: ctx$1 } = this._processInputParams(input);
		if (ctx$1.parsedType !== ZodParsedType.object) {
			addIssueToContext(ctx$1, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.object,
				received: ctx$1.parsedType
			});
			return INVALID;
		}
		const pairs = [];
		const keyType = this._def.keyType;
		const valueType = this._def.valueType;
		for (const key in ctx$1.data) pairs.push({
			key: keyType._parse(new ParseInputLazyPath(ctx$1, key, ctx$1.path, key)),
			value: valueType._parse(new ParseInputLazyPath(ctx$1, ctx$1.data[key], ctx$1.path, key)),
			alwaysSet: key in ctx$1.data
		});
		if (ctx$1.common.async) return ParseStatus.mergeObjectAsync(status, pairs);
		else return ParseStatus.mergeObjectSync(status, pairs);
	}
	get element() {
		return this._def.valueType;
	}
	static create(first, second, third) {
		if (second instanceof ZodType) return new ZodRecord({
			keyType: first,
			valueType: second,
			typeName: ZodFirstPartyTypeKind.ZodRecord,
			...processCreateParams(third)
		});
		return new ZodRecord({
			keyType: ZodString.create(),
			valueType: first,
			typeName: ZodFirstPartyTypeKind.ZodRecord,
			...processCreateParams(second)
		});
	}
};
var ZodMap = class extends ZodType {
	get keySchema() {
		return this._def.keyType;
	}
	get valueSchema() {
		return this._def.valueType;
	}
	_parse(input) {
		const { status, ctx: ctx$1 } = this._processInputParams(input);
		if (ctx$1.parsedType !== ZodParsedType.map) {
			addIssueToContext(ctx$1, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.map,
				received: ctx$1.parsedType
			});
			return INVALID;
		}
		const keyType = this._def.keyType;
		const valueType = this._def.valueType;
		const pairs = [...ctx$1.data.entries()].map(([key, value], index) => {
			return {
				key: keyType._parse(new ParseInputLazyPath(ctx$1, key, ctx$1.path, [index, "key"])),
				value: valueType._parse(new ParseInputLazyPath(ctx$1, value, ctx$1.path, [index, "value"]))
			};
		});
		if (ctx$1.common.async) {
			const finalMap = /* @__PURE__ */ new Map();
			return Promise.resolve().then(async () => {
				for (const pair of pairs) {
					const key = await pair.key;
					const value = await pair.value;
					if (key.status === "aborted" || value.status === "aborted") return INVALID;
					if (key.status === "dirty" || value.status === "dirty") status.dirty();
					finalMap.set(key.value, value.value);
				}
				return {
					status: status.value,
					value: finalMap
				};
			});
		} else {
			const finalMap = /* @__PURE__ */ new Map();
			for (const pair of pairs) {
				const key = pair.key;
				const value = pair.value;
				if (key.status === "aborted" || value.status === "aborted") return INVALID;
				if (key.status === "dirty" || value.status === "dirty") status.dirty();
				finalMap.set(key.value, value.value);
			}
			return {
				status: status.value,
				value: finalMap
			};
		}
	}
};
ZodMap.create = (keyType, valueType, params) => {
	return new ZodMap({
		valueType,
		keyType,
		typeName: ZodFirstPartyTypeKind.ZodMap,
		...processCreateParams(params)
	});
};
var ZodSet = class ZodSet extends ZodType {
	_parse(input) {
		const { status, ctx: ctx$1 } = this._processInputParams(input);
		if (ctx$1.parsedType !== ZodParsedType.set) {
			addIssueToContext(ctx$1, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.set,
				received: ctx$1.parsedType
			});
			return INVALID;
		}
		const def = this._def;
		if (def.minSize !== null) {
			if (ctx$1.data.size < def.minSize.value) {
				addIssueToContext(ctx$1, {
					code: ZodIssueCode.too_small,
					minimum: def.minSize.value,
					type: "set",
					inclusive: true,
					exact: false,
					message: def.minSize.message
				});
				status.dirty();
			}
		}
		if (def.maxSize !== null) {
			if (ctx$1.data.size > def.maxSize.value) {
				addIssueToContext(ctx$1, {
					code: ZodIssueCode.too_big,
					maximum: def.maxSize.value,
					type: "set",
					inclusive: true,
					exact: false,
					message: def.maxSize.message
				});
				status.dirty();
			}
		}
		const valueType = this._def.valueType;
		function finalizeSet(elements$1) {
			const parsedSet = /* @__PURE__ */ new Set();
			for (const element of elements$1) {
				if (element.status === "aborted") return INVALID;
				if (element.status === "dirty") status.dirty();
				parsedSet.add(element.value);
			}
			return {
				status: status.value,
				value: parsedSet
			};
		}
		const elements = [...ctx$1.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx$1, item, ctx$1.path, i)));
		if (ctx$1.common.async) return Promise.all(elements).then((elements$1) => finalizeSet(elements$1));
		else return finalizeSet(elements);
	}
	min(minSize, message) {
		return new ZodSet({
			...this._def,
			minSize: {
				value: minSize,
				message: errorUtil.toString(message)
			}
		});
	}
	max(maxSize, message) {
		return new ZodSet({
			...this._def,
			maxSize: {
				value: maxSize,
				message: errorUtil.toString(message)
			}
		});
	}
	size(size, message) {
		return this.min(size, message).max(size, message);
	}
	nonempty(message) {
		return this.min(1, message);
	}
};
ZodSet.create = (valueType, params) => {
	return new ZodSet({
		valueType,
		minSize: null,
		maxSize: null,
		typeName: ZodFirstPartyTypeKind.ZodSet,
		...processCreateParams(params)
	});
};
var ZodFunction = class ZodFunction extends ZodType {
	constructor() {
		super(...arguments);
		this.validate = this.implement;
	}
	_parse(input) {
		const { ctx: ctx$1 } = this._processInputParams(input);
		if (ctx$1.parsedType !== ZodParsedType.function) {
			addIssueToContext(ctx$1, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.function,
				received: ctx$1.parsedType
			});
			return INVALID;
		}
		function makeArgsIssue(args, error) {
			return makeIssue({
				data: args,
				path: ctx$1.path,
				errorMaps: [
					ctx$1.common.contextualErrorMap,
					ctx$1.schemaErrorMap,
					getErrorMap(),
					en_default
				].filter((x) => !!x),
				issueData: {
					code: ZodIssueCode.invalid_arguments,
					argumentsError: error
				}
			});
		}
		function makeReturnsIssue(returns, error) {
			return makeIssue({
				data: returns,
				path: ctx$1.path,
				errorMaps: [
					ctx$1.common.contextualErrorMap,
					ctx$1.schemaErrorMap,
					getErrorMap(),
					en_default
				].filter((x) => !!x),
				issueData: {
					code: ZodIssueCode.invalid_return_type,
					returnTypeError: error
				}
			});
		}
		const params = { errorMap: ctx$1.common.contextualErrorMap };
		const fn = ctx$1.data;
		if (this._def.returns instanceof ZodPromise) {
			const me = this;
			return OK(async function(...args) {
				const error = new ZodError([]);
				const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {
					error.addIssue(makeArgsIssue(args, e));
					throw error;
				});
				const result = await Reflect.apply(fn, this, parsedArgs);
				const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {
					error.addIssue(makeReturnsIssue(result, e));
					throw error;
				});
				return parsedReturns;
			});
		} else {
			const me = this;
			return OK(function(...args) {
				const parsedArgs = me._def.args.safeParse(args, params);
				if (!parsedArgs.success) throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
				const result = Reflect.apply(fn, this, parsedArgs.data);
				const parsedReturns = me._def.returns.safeParse(result, params);
				if (!parsedReturns.success) throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
				return parsedReturns.data;
			});
		}
	}
	parameters() {
		return this._def.args;
	}
	returnType() {
		return this._def.returns;
	}
	args(...items) {
		return new ZodFunction({
			...this._def,
			args: ZodTuple.create(items).rest(ZodUnknown.create())
		});
	}
	returns(returnType) {
		return new ZodFunction({
			...this._def,
			returns: returnType
		});
	}
	implement(func) {
		const validatedFunc = this.parse(func);
		return validatedFunc;
	}
	strictImplement(func) {
		const validatedFunc = this.parse(func);
		return validatedFunc;
	}
	static create(args, returns, params) {
		return new ZodFunction({
			args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
			returns: returns || ZodUnknown.create(),
			typeName: ZodFirstPartyTypeKind.ZodFunction,
			...processCreateParams(params)
		});
	}
};
var ZodLazy = class extends ZodType {
	get schema() {
		return this._def.getter();
	}
	_parse(input) {
		const { ctx: ctx$1 } = this._processInputParams(input);
		const lazySchema = this._def.getter();
		return lazySchema._parse({
			data: ctx$1.data,
			path: ctx$1.path,
			parent: ctx$1
		});
	}
};
ZodLazy.create = (getter, params) => {
	return new ZodLazy({
		getter,
		typeName: ZodFirstPartyTypeKind.ZodLazy,
		...processCreateParams(params)
	});
};
var ZodLiteral = class extends ZodType {
	_parse(input) {
		if (input.data !== this._def.value) {
			const ctx$1 = this._getOrReturnCtx(input);
			addIssueToContext(ctx$1, {
				received: ctx$1.data,
				code: ZodIssueCode.invalid_literal,
				expected: this._def.value
			});
			return INVALID;
		}
		return {
			status: "valid",
			value: input.data
		};
	}
	get value() {
		return this._def.value;
	}
};
ZodLiteral.create = (value, params) => {
	return new ZodLiteral({
		value,
		typeName: ZodFirstPartyTypeKind.ZodLiteral,
		...processCreateParams(params)
	});
};
function createZodEnum(values, params) {
	return new ZodEnum({
		values,
		typeName: ZodFirstPartyTypeKind.ZodEnum,
		...processCreateParams(params)
	});
}
var ZodEnum = class ZodEnum extends ZodType {
	_parse(input) {
		if (typeof input.data !== "string") {
			const ctx$1 = this._getOrReturnCtx(input);
			const expectedValues = this._def.values;
			addIssueToContext(ctx$1, {
				expected: util.joinValues(expectedValues),
				received: ctx$1.parsedType,
				code: ZodIssueCode.invalid_type
			});
			return INVALID;
		}
		if (!this._cache) this._cache = new Set(this._def.values);
		if (!this._cache.has(input.data)) {
			const ctx$1 = this._getOrReturnCtx(input);
			const expectedValues = this._def.values;
			addIssueToContext(ctx$1, {
				received: ctx$1.data,
				code: ZodIssueCode.invalid_enum_value,
				options: expectedValues
			});
			return INVALID;
		}
		return OK(input.data);
	}
	get options() {
		return this._def.values;
	}
	get enum() {
		const enumValues = {};
		for (const val of this._def.values) enumValues[val] = val;
		return enumValues;
	}
	get Values() {
		const enumValues = {};
		for (const val of this._def.values) enumValues[val] = val;
		return enumValues;
	}
	get Enum() {
		const enumValues = {};
		for (const val of this._def.values) enumValues[val] = val;
		return enumValues;
	}
	extract(values, newDef = this._def) {
		return ZodEnum.create(values, {
			...this._def,
			...newDef
		});
	}
	exclude(values, newDef = this._def) {
		return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
			...this._def,
			...newDef
		});
	}
};
ZodEnum.create = createZodEnum;
var ZodNativeEnum = class extends ZodType {
	_parse(input) {
		const nativeEnumValues = util.getValidEnumValues(this._def.values);
		const ctx$1 = this._getOrReturnCtx(input);
		if (ctx$1.parsedType !== ZodParsedType.string && ctx$1.parsedType !== ZodParsedType.number) {
			const expectedValues = util.objectValues(nativeEnumValues);
			addIssueToContext(ctx$1, {
				expected: util.joinValues(expectedValues),
				received: ctx$1.parsedType,
				code: ZodIssueCode.invalid_type
			});
			return INVALID;
		}
		if (!this._cache) this._cache = new Set(util.getValidEnumValues(this._def.values));
		if (!this._cache.has(input.data)) {
			const expectedValues = util.objectValues(nativeEnumValues);
			addIssueToContext(ctx$1, {
				received: ctx$1.data,
				code: ZodIssueCode.invalid_enum_value,
				options: expectedValues
			});
			return INVALID;
		}
		return OK(input.data);
	}
	get enum() {
		return this._def.values;
	}
};
ZodNativeEnum.create = (values, params) => {
	return new ZodNativeEnum({
		values,
		typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
		...processCreateParams(params)
	});
};
var ZodPromise = class extends ZodType {
	unwrap() {
		return this._def.type;
	}
	_parse(input) {
		const { ctx: ctx$1 } = this._processInputParams(input);
		if (ctx$1.parsedType !== ZodParsedType.promise && ctx$1.common.async === false) {
			addIssueToContext(ctx$1, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.promise,
				received: ctx$1.parsedType
			});
			return INVALID;
		}
		const promisified = ctx$1.parsedType === ZodParsedType.promise ? ctx$1.data : Promise.resolve(ctx$1.data);
		return OK(promisified.then((data) => {
			return this._def.type.parseAsync(data, {
				path: ctx$1.path,
				errorMap: ctx$1.common.contextualErrorMap
			});
		}));
	}
};
ZodPromise.create = (schema, params) => {
	return new ZodPromise({
		type: schema,
		typeName: ZodFirstPartyTypeKind.ZodPromise,
		...processCreateParams(params)
	});
};
var ZodEffects = class extends ZodType {
	innerType() {
		return this._def.schema;
	}
	sourceType() {
		return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
	}
	_parse(input) {
		const { status, ctx: ctx$1 } = this._processInputParams(input);
		const effect = this._def.effect || null;
		const checkCtx = {
			addIssue: (arg) => {
				addIssueToContext(ctx$1, arg);
				if (arg.fatal) status.abort();
				else status.dirty();
			},
			get path() {
				return ctx$1.path;
			}
		};
		checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
		if (effect.type === "preprocess") {
			const processed = effect.transform(ctx$1.data, checkCtx);
			if (ctx$1.common.async) return Promise.resolve(processed).then(async (processed$1) => {
				if (status.value === "aborted") return INVALID;
				const result = await this._def.schema._parseAsync({
					data: processed$1,
					path: ctx$1.path,
					parent: ctx$1
				});
				if (result.status === "aborted") return INVALID;
				if (result.status === "dirty") return DIRTY(result.value);
				if (status.value === "dirty") return DIRTY(result.value);
				return result;
			});
			else {
				if (status.value === "aborted") return INVALID;
				const result = this._def.schema._parseSync({
					data: processed,
					path: ctx$1.path,
					parent: ctx$1
				});
				if (result.status === "aborted") return INVALID;
				if (result.status === "dirty") return DIRTY(result.value);
				if (status.value === "dirty") return DIRTY(result.value);
				return result;
			}
		}
		if (effect.type === "refinement") {
			const executeRefinement = (acc) => {
				const result = effect.refinement(acc, checkCtx);
				if (ctx$1.common.async) return Promise.resolve(result);
				if (result instanceof Promise) throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
				return acc;
			};
			if (ctx$1.common.async === false) {
				const inner = this._def.schema._parseSync({
					data: ctx$1.data,
					path: ctx$1.path,
					parent: ctx$1
				});
				if (inner.status === "aborted") return INVALID;
				if (inner.status === "dirty") status.dirty();
				executeRefinement(inner.value);
				return {
					status: status.value,
					value: inner.value
				};
			} else return this._def.schema._parseAsync({
				data: ctx$1.data,
				path: ctx$1.path,
				parent: ctx$1
			}).then((inner) => {
				if (inner.status === "aborted") return INVALID;
				if (inner.status === "dirty") status.dirty();
				return executeRefinement(inner.value).then(() => {
					return {
						status: status.value,
						value: inner.value
					};
				});
			});
		}
		if (effect.type === "transform") if (ctx$1.common.async === false) {
			const base$1 = this._def.schema._parseSync({
				data: ctx$1.data,
				path: ctx$1.path,
				parent: ctx$1
			});
			if (!isValid$2(base$1)) return INVALID;
			const result = effect.transform(base$1.value, checkCtx);
			if (result instanceof Promise) throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
			return {
				status: status.value,
				value: result
			};
		} else return this._def.schema._parseAsync({
			data: ctx$1.data,
			path: ctx$1.path,
			parent: ctx$1
		}).then((base$1) => {
			if (!isValid$2(base$1)) return INVALID;
			return Promise.resolve(effect.transform(base$1.value, checkCtx)).then((result) => ({
				status: status.value,
				value: result
			}));
		});
		util.assertNever(effect);
	}
};
ZodEffects.create = (schema, effect, params) => {
	return new ZodEffects({
		schema,
		typeName: ZodFirstPartyTypeKind.ZodEffects,
		effect,
		...processCreateParams(params)
	});
};
ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
	return new ZodEffects({
		schema,
		effect: {
			type: "preprocess",
			transform: preprocess
		},
		typeName: ZodFirstPartyTypeKind.ZodEffects,
		...processCreateParams(params)
	});
};
var ZodOptional = class extends ZodType {
	_parse(input) {
		const parsedType = this._getType(input);
		if (parsedType === ZodParsedType.undefined) return OK(void 0);
		return this._def.innerType._parse(input);
	}
	unwrap() {
		return this._def.innerType;
	}
};
ZodOptional.create = (type, params) => {
	return new ZodOptional({
		innerType: type,
		typeName: ZodFirstPartyTypeKind.ZodOptional,
		...processCreateParams(params)
	});
};
var ZodNullable = class extends ZodType {
	_parse(input) {
		const parsedType = this._getType(input);
		if (parsedType === ZodParsedType.null) return OK(null);
		return this._def.innerType._parse(input);
	}
	unwrap() {
		return this._def.innerType;
	}
};
ZodNullable.create = (type, params) => {
	return new ZodNullable({
		innerType: type,
		typeName: ZodFirstPartyTypeKind.ZodNullable,
		...processCreateParams(params)
	});
};
var ZodDefault = class extends ZodType {
	_parse(input) {
		const { ctx: ctx$1 } = this._processInputParams(input);
		let data = ctx$1.data;
		if (ctx$1.parsedType === ZodParsedType.undefined) data = this._def.defaultValue();
		return this._def.innerType._parse({
			data,
			path: ctx$1.path,
			parent: ctx$1
		});
	}
	removeDefault() {
		return this._def.innerType;
	}
};
ZodDefault.create = (type, params) => {
	return new ZodDefault({
		innerType: type,
		typeName: ZodFirstPartyTypeKind.ZodDefault,
		defaultValue: typeof params.default === "function" ? params.default : () => params.default,
		...processCreateParams(params)
	});
};
var ZodCatch = class extends ZodType {
	_parse(input) {
		const { ctx: ctx$1 } = this._processInputParams(input);
		const newCtx = {
			...ctx$1,
			common: {
				...ctx$1.common,
				issues: []
			}
		};
		const result = this._def.innerType._parse({
			data: newCtx.data,
			path: newCtx.path,
			parent: { ...newCtx }
		});
		if (isAsync(result)) return result.then((result$1) => {
			return {
				status: "valid",
				value: result$1.status === "valid" ? result$1.value : this._def.catchValue({
					get error() {
						return new ZodError(newCtx.common.issues);
					},
					input: newCtx.data
				})
			};
		});
		else return {
			status: "valid",
			value: result.status === "valid" ? result.value : this._def.catchValue({
				get error() {
					return new ZodError(newCtx.common.issues);
				},
				input: newCtx.data
			})
		};
	}
	removeCatch() {
		return this._def.innerType;
	}
};
ZodCatch.create = (type, params) => {
	return new ZodCatch({
		innerType: type,
		typeName: ZodFirstPartyTypeKind.ZodCatch,
		catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
		...processCreateParams(params)
	});
};
var ZodNaN = class extends ZodType {
	_parse(input) {
		const parsedType = this._getType(input);
		if (parsedType !== ZodParsedType.nan) {
			const ctx$1 = this._getOrReturnCtx(input);
			addIssueToContext(ctx$1, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.nan,
				received: ctx$1.parsedType
			});
			return INVALID;
		}
		return {
			status: "valid",
			value: input.data
		};
	}
};
ZodNaN.create = (params) => {
	return new ZodNaN({
		typeName: ZodFirstPartyTypeKind.ZodNaN,
		...processCreateParams(params)
	});
};
const BRAND = Symbol("zod_brand");
var ZodBranded = class extends ZodType {
	_parse(input) {
		const { ctx: ctx$1 } = this._processInputParams(input);
		const data = ctx$1.data;
		return this._def.type._parse({
			data,
			path: ctx$1.path,
			parent: ctx$1
		});
	}
	unwrap() {
		return this._def.type;
	}
};
var ZodPipeline = class ZodPipeline extends ZodType {
	_parse(input) {
		const { status, ctx: ctx$1 } = this._processInputParams(input);
		if (ctx$1.common.async) {
			const handleAsync = async () => {
				const inResult = await this._def.in._parseAsync({
					data: ctx$1.data,
					path: ctx$1.path,
					parent: ctx$1
				});
				if (inResult.status === "aborted") return INVALID;
				if (inResult.status === "dirty") {
					status.dirty();
					return DIRTY(inResult.value);
				} else return this._def.out._parseAsync({
					data: inResult.value,
					path: ctx$1.path,
					parent: ctx$1
				});
			};
			return handleAsync();
		} else {
			const inResult = this._def.in._parseSync({
				data: ctx$1.data,
				path: ctx$1.path,
				parent: ctx$1
			});
			if (inResult.status === "aborted") return INVALID;
			if (inResult.status === "dirty") {
				status.dirty();
				return {
					status: "dirty",
					value: inResult.value
				};
			} else return this._def.out._parseSync({
				data: inResult.value,
				path: ctx$1.path,
				parent: ctx$1
			});
		}
	}
	static create(a, b) {
		return new ZodPipeline({
			in: a,
			out: b,
			typeName: ZodFirstPartyTypeKind.ZodPipeline
		});
	}
};
var ZodReadonly = class extends ZodType {
	_parse(input) {
		const result = this._def.innerType._parse(input);
		const freeze = (data) => {
			if (isValid$2(data)) data.value = Object.freeze(data.value);
			return data;
		};
		return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);
	}
	unwrap() {
		return this._def.innerType;
	}
};
ZodReadonly.create = (type, params) => {
	return new ZodReadonly({
		innerType: type,
		typeName: ZodFirstPartyTypeKind.ZodReadonly,
		...processCreateParams(params)
	});
};
function cleanParams(params, data) {
	const p = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
	const p2 = typeof p === "string" ? { message: p } : p;
	return p2;
}
function custom(check, _params = {}, fatal) {
	if (check) return ZodAny.create().superRefine((data, ctx$1) => {
		const r = check(data);
		if (r instanceof Promise) return r.then((r$1) => {
			if (!r$1) {
				const params = cleanParams(_params, data);
				const _fatal = params.fatal ?? fatal ?? true;
				ctx$1.addIssue({
					code: "custom",
					...params,
					fatal: _fatal
				});
			}
		});
		if (!r) {
			const params = cleanParams(_params, data);
			const _fatal = params.fatal ?? fatal ?? true;
			ctx$1.addIssue({
				code: "custom",
				...params,
				fatal: _fatal
			});
		}
		return;
	});
	return ZodAny.create();
}
const late = { object: ZodObject.lazycreate };
var ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind$1) {
	ZodFirstPartyTypeKind$1["ZodString"] = "ZodString";
	ZodFirstPartyTypeKind$1["ZodNumber"] = "ZodNumber";
	ZodFirstPartyTypeKind$1["ZodNaN"] = "ZodNaN";
	ZodFirstPartyTypeKind$1["ZodBigInt"] = "ZodBigInt";
	ZodFirstPartyTypeKind$1["ZodBoolean"] = "ZodBoolean";
	ZodFirstPartyTypeKind$1["ZodDate"] = "ZodDate";
	ZodFirstPartyTypeKind$1["ZodSymbol"] = "ZodSymbol";
	ZodFirstPartyTypeKind$1["ZodUndefined"] = "ZodUndefined";
	ZodFirstPartyTypeKind$1["ZodNull"] = "ZodNull";
	ZodFirstPartyTypeKind$1["ZodAny"] = "ZodAny";
	ZodFirstPartyTypeKind$1["ZodUnknown"] = "ZodUnknown";
	ZodFirstPartyTypeKind$1["ZodNever"] = "ZodNever";
	ZodFirstPartyTypeKind$1["ZodVoid"] = "ZodVoid";
	ZodFirstPartyTypeKind$1["ZodArray"] = "ZodArray";
	ZodFirstPartyTypeKind$1["ZodObject"] = "ZodObject";
	ZodFirstPartyTypeKind$1["ZodUnion"] = "ZodUnion";
	ZodFirstPartyTypeKind$1["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
	ZodFirstPartyTypeKind$1["ZodIntersection"] = "ZodIntersection";
	ZodFirstPartyTypeKind$1["ZodTuple"] = "ZodTuple";
	ZodFirstPartyTypeKind$1["ZodRecord"] = "ZodRecord";
	ZodFirstPartyTypeKind$1["ZodMap"] = "ZodMap";
	ZodFirstPartyTypeKind$1["ZodSet"] = "ZodSet";
	ZodFirstPartyTypeKind$1["ZodFunction"] = "ZodFunction";
	ZodFirstPartyTypeKind$1["ZodLazy"] = "ZodLazy";
	ZodFirstPartyTypeKind$1["ZodLiteral"] = "ZodLiteral";
	ZodFirstPartyTypeKind$1["ZodEnum"] = "ZodEnum";
	ZodFirstPartyTypeKind$1["ZodEffects"] = "ZodEffects";
	ZodFirstPartyTypeKind$1["ZodNativeEnum"] = "ZodNativeEnum";
	ZodFirstPartyTypeKind$1["ZodOptional"] = "ZodOptional";
	ZodFirstPartyTypeKind$1["ZodNullable"] = "ZodNullable";
	ZodFirstPartyTypeKind$1["ZodDefault"] = "ZodDefault";
	ZodFirstPartyTypeKind$1["ZodCatch"] = "ZodCatch";
	ZodFirstPartyTypeKind$1["ZodPromise"] = "ZodPromise";
	ZodFirstPartyTypeKind$1["ZodBranded"] = "ZodBranded";
	ZodFirstPartyTypeKind$1["ZodPipeline"] = "ZodPipeline";
	ZodFirstPartyTypeKind$1["ZodReadonly"] = "ZodReadonly";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
const instanceOfType = (cls, params = { message: `Input not instance of ${cls.name}` }) => custom((data) => data instanceof cls, params);
const stringType = ZodString.create;
const numberType = ZodNumber.create;
const nanType = ZodNaN.create;
const bigIntType = ZodBigInt.create;
const booleanType = ZodBoolean.create;
const dateType = ZodDate.create;
const symbolType = ZodSymbol.create;
const undefinedType = ZodUndefined.create;
const nullType = ZodNull.create;
const anyType = ZodAny.create;
const unknownType = ZodUnknown.create;
const neverType = ZodNever.create;
const voidType = ZodVoid.create;
const arrayType = ZodArray.create;
const objectType = ZodObject.create;
const strictObjectType = ZodObject.strictCreate;
const unionType = ZodUnion.create;
const discriminatedUnionType = ZodDiscriminatedUnion.create;
const intersectionType = ZodIntersection.create;
const tupleType = ZodTuple.create;
const recordType = ZodRecord.create;
const mapType = ZodMap.create;
const setType = ZodSet.create;
const functionType = ZodFunction.create;
const lazyType = ZodLazy.create;
const literalType = ZodLiteral.create;
const enumType = ZodEnum.create;
const nativeEnumType = ZodNativeEnum.create;
const promiseType = ZodPromise.create;
const effectsType = ZodEffects.create;
const optionalType = ZodOptional.create;
const nullableType = ZodNullable.create;
const preprocessType = ZodEffects.createWithPreprocess;
const pipelineType = ZodPipeline.create;
const ostring = () => stringType().optional();
const onumber = () => numberType().optional();
const oboolean = () => booleanType().optional();
const coerce = {
	string: (arg) => ZodString.create({
		...arg,
		coerce: true
	}),
	number: (arg) => ZodNumber.create({
		...arg,
		coerce: true
	}),
	boolean: (arg) => ZodBoolean.create({
		...arg,
		coerce: true
	}),
	bigint: (arg) => ZodBigInt.create({
		...arg,
		coerce: true
	}),
	date: (arg) => ZodDate.create({
		...arg,
		coerce: true
	})
};
const NEVER = INVALID;

//#endregion
//#region ../../node_modules/.pnpm/zod@3.25.67/node_modules/zod/dist/esm/v3/external.js
var external_exports = {};
__export(external_exports, {
	BRAND: () => BRAND,
	DIRTY: () => DIRTY,
	EMPTY_PATH: () => EMPTY_PATH,
	INVALID: () => INVALID,
	NEVER: () => NEVER,
	OK: () => OK,
	ParseStatus: () => ParseStatus,
	Schema: () => ZodType,
	ZodAny: () => ZodAny,
	ZodArray: () => ZodArray,
	ZodBigInt: () => ZodBigInt,
	ZodBoolean: () => ZodBoolean,
	ZodBranded: () => ZodBranded,
	ZodCatch: () => ZodCatch,
	ZodDate: () => ZodDate,
	ZodDefault: () => ZodDefault,
	ZodDiscriminatedUnion: () => ZodDiscriminatedUnion,
	ZodEffects: () => ZodEffects,
	ZodEnum: () => ZodEnum,
	ZodError: () => ZodError,
	ZodFirstPartyTypeKind: () => ZodFirstPartyTypeKind,
	ZodFunction: () => ZodFunction,
	ZodIntersection: () => ZodIntersection,
	ZodIssueCode: () => ZodIssueCode,
	ZodLazy: () => ZodLazy,
	ZodLiteral: () => ZodLiteral,
	ZodMap: () => ZodMap,
	ZodNaN: () => ZodNaN,
	ZodNativeEnum: () => ZodNativeEnum,
	ZodNever: () => ZodNever,
	ZodNull: () => ZodNull,
	ZodNullable: () => ZodNullable,
	ZodNumber: () => ZodNumber,
	ZodObject: () => ZodObject,
	ZodOptional: () => ZodOptional,
	ZodParsedType: () => ZodParsedType,
	ZodPipeline: () => ZodPipeline,
	ZodPromise: () => ZodPromise,
	ZodReadonly: () => ZodReadonly,
	ZodRecord: () => ZodRecord,
	ZodSchema: () => ZodType,
	ZodSet: () => ZodSet,
	ZodString: () => ZodString,
	ZodSymbol: () => ZodSymbol,
	ZodTransformer: () => ZodEffects,
	ZodTuple: () => ZodTuple,
	ZodType: () => ZodType,
	ZodUndefined: () => ZodUndefined,
	ZodUnion: () => ZodUnion,
	ZodUnknown: () => ZodUnknown,
	ZodVoid: () => ZodVoid,
	addIssueToContext: () => addIssueToContext,
	any: () => anyType,
	array: () => arrayType,
	bigint: () => bigIntType,
	boolean: () => booleanType,
	coerce: () => coerce,
	custom: () => custom,
	date: () => dateType,
	datetimeRegex: () => datetimeRegex,
	defaultErrorMap: () => en_default,
	discriminatedUnion: () => discriminatedUnionType,
	effect: () => effectsType,
	enum: () => enumType,
	function: () => functionType,
	getErrorMap: () => getErrorMap,
	getParsedType: () => getParsedType,
	instanceof: () => instanceOfType,
	intersection: () => intersectionType,
	isAborted: () => isAborted,
	isAsync: () => isAsync,
	isDirty: () => isDirty,
	isValid: () => isValid$2,
	late: () => late,
	lazy: () => lazyType,
	literal: () => literalType,
	makeIssue: () => makeIssue,
	map: () => mapType,
	nan: () => nanType,
	nativeEnum: () => nativeEnumType,
	never: () => neverType,
	null: () => nullType,
	nullable: () => nullableType,
	number: () => numberType,
	object: () => objectType,
	objectUtil: () => objectUtil,
	oboolean: () => oboolean,
	onumber: () => onumber,
	optional: () => optionalType,
	ostring: () => ostring,
	pipeline: () => pipelineType,
	preprocess: () => preprocessType,
	promise: () => promiseType,
	quotelessJson: () => quotelessJson,
	record: () => recordType,
	set: () => setType,
	setErrorMap: () => setErrorMap,
	strictObject: () => strictObjectType,
	string: () => stringType,
	symbol: () => symbolType,
	transformer: () => effectsType,
	tuple: () => tupleType,
	undefined: () => undefinedType,
	union: () => unionType,
	unknown: () => unknownType,
	util: () => util,
	void: () => voidType
});

//#endregion
//#region ../../node_modules/.pnpm/web3-validator@2.0.6/node_modules/web3-validator/lib/esm/errors.js
const errorFormatter = (error) => {
	if (error.message) return error.message;
	return "unspecified error";
};
var Web3ValidatorError = class extends BaseWeb3Error {
	constructor(errors) {
		super();
		this.code = ERR_VALIDATION;
		this.errors = errors;
		super.message = `Web3 validator found ${errors.length} error[s]:\n${this._compileErrors().join("\n")}`;
	}
	_compileErrors() {
		return this.errors.map(errorFormatter);
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-validator@2.0.6/node_modules/web3-validator/lib/esm/constants.js
const VALID_ETH_BASE_TYPES = [
	"bool",
	"int",
	"uint",
	"bytes",
	"string",
	"address",
	"tuple"
];

//#endregion
//#region ../../node_modules/.pnpm/web3-validator@2.0.6/node_modules/web3-validator/lib/esm/validation/abi.js
const isAbiParameterSchema = (schema) => typeof schema === "object" && "type" in schema && "name" in schema;

//#endregion
//#region ../../node_modules/.pnpm/web3-validator@2.0.6/node_modules/web3-validator/lib/esm/validation/string.js
/**
* checks input if typeof data is valid string input
*/
const isString = (value) => typeof value === "string";
const isHexStrict = (hex) => typeof hex === "string" && /^((-)?0x[0-9a-f]+|(0x))$/i.test(hex);
/**
* Is the string a hex string.
*
* @param  value
* @param  length
* @returns  output the string is a hex string
*/
function isHexString(value, length) {
	if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) return false;
	if (typeof length !== "undefined" && length > 0 && value.length !== 2 + 2 * length) return false;
	return true;
}
const isHex = (hex) => typeof hex === "number" || typeof hex === "bigint" || typeof hex === "string" && /^((-0x|0x|-)?[0-9a-f]+|(0x))$/i.test(hex);
/**
* Returns a `Boolean` on whether or not the a `String` starts with '0x'
* @param str the string input value
* @return a boolean if it is or is not hex prefixed
* @throws if the str input is not a string
*/
function isHexPrefixed$1(str) {
	if (typeof str !== "string") throw new Error(`[isHexPrefixed] input must be type 'string', received type ${typeof str}`);
	return str.startsWith("0x");
}
/**
* Checks provided Uint8Array for leading zeroes and throws if found.
*
* Examples:
*
* Valid values: 0x1, 0x, 0x01, 0x1234
* Invalid values: 0x0, 0x00, 0x001, 0x0001
*
* Note: This method is useful for validating that RLP encoded integers comply with the rule that all
* integer values encoded to RLP must be in the most compact form and contain no leading zero bytes
* @param values An object containing string keys and Uint8Array values
* @throws if any provided value is found to have leading zero bytes
*/
const validateNoLeadingZeroes = function(values) {
	for (const [k, v] of Object.entries(values)) if (v !== void 0 && v.length > 0 && v[0] === 0) throw new Error(`${k} cannot have leading zeroes, received: ${v.toString()}`);
};

//#endregion
//#region ../../node_modules/.pnpm/web3-validator@2.0.6/node_modules/web3-validator/lib/esm/utils.js
var utils_exports = {};
__export(utils_exports, {
	abiSchemaToJsonSchema: () => abiSchemaToJsonSchema,
	codePointToInt: () => codePointToInt,
	ensureIfUint8Array: () => ensureIfUint8Array,
	ethAbiToJsonSchema: () => ethAbiToJsonSchema,
	fetchArrayElement: () => fetchArrayElement,
	hexToNumber: () => hexToNumber$2,
	hexToUint8Array: () => hexToUint8Array,
	numberToHex: () => numberToHex$2,
	padLeft: () => padLeft$1,
	parseBaseType: () => parseBaseType$1,
	transformJsonDataToAbiFormat: () => transformJsonDataToAbiFormat,
	uint8ArrayToHexString: () => uint8ArrayToHexString$1
});
const extraTypes = [
	"hex",
	"number",
	"blockNumber",
	"blockNumberOrTag",
	"filter",
	"bloom"
];
const parseBaseType$1 = (type) => {
	let strippedType = type.replace(/ /, "");
	let baseTypeSize;
	let isArray = false;
	let arraySizes = [];
	if (type.includes("[")) {
		strippedType = strippedType.slice(0, strippedType.indexOf("["));
		arraySizes = [...type.matchAll(/(?:\[(\d*)\])/g)].map((match) => parseInt(match[1], 10)).map((size) => Number.isNaN(size) ? -1 : size);
		isArray = arraySizes.length > 0;
	}
	if (VALID_ETH_BASE_TYPES.includes(strippedType)) return {
		baseType: strippedType,
		isArray,
		baseTypeSize,
		arraySizes
	};
	if (strippedType.startsWith("int")) {
		baseTypeSize = parseInt(strippedType.substring(3), 10);
		strippedType = "int";
	} else if (strippedType.startsWith("uint")) {
		baseTypeSize = parseInt(type.substring(4), 10);
		strippedType = "uint";
	} else if (strippedType.startsWith("bytes")) {
		baseTypeSize = parseInt(strippedType.substring(5), 10);
		strippedType = "bytes";
	} else return {
		baseType: void 0,
		isArray: false,
		baseTypeSize: void 0,
		arraySizes
	};
	return {
		baseType: strippedType,
		isArray,
		baseTypeSize,
		arraySizes
	};
};
const convertEthType = (type, parentSchema = {}) => {
	const typePropertyPresent = Object.keys(parentSchema).includes("type");
	if (typePropertyPresent) throw new Web3ValidatorError([{
		keyword: "eth",
		message: "Either \"eth\" or \"type\" can be presented in schema",
		params: { eth: type },
		instancePath: "",
		schemaPath: ""
	}]);
	const { baseType, baseTypeSize } = parseBaseType$1(type);
	if (!baseType && !extraTypes.includes(type)) throw new Web3ValidatorError([{
		keyword: "eth",
		message: `Eth data type "${type}" is not valid`,
		params: { eth: type },
		instancePath: "",
		schemaPath: ""
	}]);
	if (baseType) {
		if (baseType === "tuple") throw new Error("\"tuple\" type is not implemented directly.");
		return {
			format: `${baseType}${baseTypeSize !== null && baseTypeSize !== void 0 ? baseTypeSize : ""}`,
			required: true
		};
	}
	if (type) return {
		format: type,
		required: true
	};
	return {};
};
const abiSchemaToJsonSchema = (abis, level = "/0") => {
	const schema = {
		type: "array",
		items: [],
		maxItems: abis.length,
		minItems: abis.length
	};
	for (const [index, abi] of abis.entries()) {
		let abiType;
		let abiName;
		let abiComponents = [];
		if (isAbiParameterSchema(abi)) {
			abiType = abi.type;
			abiName = abi.name || `${level}/${index}`;
			abiComponents = abi.components;
		} else if (typeof abi === "string") {
			abiType = abi;
			abiName = `${level}/${index}`;
		} else if (Array.isArray(abi)) if (abi[0] && typeof abi[0] === "string" && abi[0].startsWith("tuple") && !Array.isArray(abi[0]) && abi[1] && Array.isArray(abi[1])) {
			abiType = abi[0];
			abiName = `${level}/${index}`;
			abiComponents = abi[1];
		} else {
			abiType = "tuple";
			abiName = `${level}/${index}`;
			abiComponents = abi;
		}
		const { baseType, isArray, arraySizes } = parseBaseType$1(abiType);
		let childSchema;
		let lastSchema = schema;
		for (let i = arraySizes.length - 1; i > 0; i -= 1) {
			childSchema = {
				type: "array",
				$id: abiName,
				items: [],
				maxItems: arraySizes[i],
				minItems: arraySizes[i]
			};
			if (arraySizes[i] < 0) {
				delete childSchema.maxItems;
				delete childSchema.minItems;
			}
			if (!Array.isArray(lastSchema.items)) lastSchema.items = [lastSchema.items, childSchema];
			else if (lastSchema.items.length === 0) lastSchema.items = [childSchema];
			else lastSchema.items.push(childSchema);
			lastSchema = childSchema;
		}
		if (baseType === "tuple" && !isArray) {
			const nestedTuple = abiSchemaToJsonSchema(abiComponents, abiName);
			nestedTuple.$id = abiName;
			lastSchema.items.push(nestedTuple);
		} else if (baseType === "tuple" && isArray) {
			const arraySize = arraySizes[0];
			const item = Object.assign({
				type: "array",
				$id: abiName,
				items: abiSchemaToJsonSchema(abiComponents, abiName)
			}, arraySize >= 0 && {
				minItems: arraySize,
				maxItems: arraySize
			});
			lastSchema.items.push(item);
		} else if (isArray) {
			const arraySize = arraySizes[0];
			const item = Object.assign({
				type: "array",
				$id: abiName,
				items: convertEthType(abiType)
			}, arraySize >= 0 && {
				minItems: arraySize,
				maxItems: arraySize
			});
			lastSchema.items.push(item);
		} else if (Array.isArray(lastSchema.items)) lastSchema.items.push(Object.assign({ $id: abiName }, convertEthType(abiType)));
		else lastSchema.items.push(Object.assign({ $id: abiName }, convertEthType(abiType)));
		lastSchema = schema;
	}
	return schema;
};
const ethAbiToJsonSchema = (abis) => abiSchemaToJsonSchema(abis);
const fetchArrayElement = (data, level) => {
	if (level === 1) return data;
	return fetchArrayElement(data[0], level - 1);
};
const transformJsonDataToAbiFormat = (abis, data, transformedData) => {
	const newData = [];
	for (const [index, abi] of abis.entries()) {
		let abiType;
		let abiName;
		let abiComponents = [];
		if (isAbiParameterSchema(abi)) {
			abiType = abi.type;
			abiName = abi.name;
			abiComponents = abi.components;
		} else if (typeof abi === "string") abiType = abi;
		else if (Array.isArray(abi)) if (abi[1] && Array.isArray(abi[1])) {
			abiType = abi[0];
			abiComponents = abi[1];
		} else {
			abiType = "tuple";
			abiComponents = abi;
		}
		const { baseType, isArray, arraySizes } = parseBaseType$1(abiType);
		const dataItem = Array.isArray(data) ? data[index] : data[abiName];
		if (baseType === "tuple" && !isArray) newData.push(transformJsonDataToAbiFormat(abiComponents, dataItem, transformedData));
		else if (baseType === "tuple" && isArray) {
			const tupleData = [];
			for (const tupleItem of dataItem) if (arraySizes.length > 1) {
				const nestedItems = fetchArrayElement(tupleItem, arraySizes.length - 1);
				const nestedData = [];
				for (const nestedItem of nestedItems) nestedData.push(transformJsonDataToAbiFormat(abiComponents, nestedItem, transformedData));
				tupleData.push(nestedData);
			} else tupleData.push(transformJsonDataToAbiFormat(abiComponents, tupleItem, transformedData));
			newData.push(tupleData);
		} else newData.push(dataItem);
	}
	transformedData = transformedData !== null && transformedData !== void 0 ? transformedData : [];
	transformedData.push(...newData);
	return transformedData;
};
/**
* Code points to int
*/
const codePointToInt = (codePoint) => {
	if (codePoint >= 48 && codePoint <= 57) return codePoint - 48;
	if (codePoint >= 65 && codePoint <= 70) return codePoint - 55;
	if (codePoint >= 97 && codePoint <= 102) return codePoint - 87;
	throw new Error(`Invalid code point: ${codePoint}`);
};
/**
* Converts value to it's number representation
*/
const hexToNumber$2 = (value) => {
	if (!isHexStrict(value)) throw new Error("Invalid hex string");
	const [negative, hexValue] = value.startsWith("-") ? [true, value.slice(1)] : [false, value];
	const num = BigInt(hexValue);
	if (num > Number.MAX_SAFE_INTEGER) return negative ? -num : num;
	if (num < Number.MIN_SAFE_INTEGER) return num;
	return negative ? -1 * Number(num) : Number(num);
};
/**
* Converts value to it's hex representation
*/
const numberToHex$2 = (value) => {
	if ((typeof value === "number" || typeof value === "bigint") && value < 0) return `-0x${value.toString(16).slice(1)}`;
	if ((typeof value === "number" || typeof value === "bigint") && value >= 0) return `0x${value.toString(16)}`;
	if (typeof value === "string" && isHexStrict(value)) {
		const [negative, hex] = value.startsWith("-") ? [true, value.slice(1)] : [false, value];
		const hexValue = hex.split(/^(-)?0(x|X)/).slice(-1)[0];
		return `${negative ? "-" : ""}0x${hexValue.replace(/^0+/, "").toLowerCase()}`;
	}
	if (typeof value === "string" && !isHexStrict(value)) return numberToHex$2(BigInt(value));
	throw new InvalidNumberError(value);
};
/**
* Adds a padding on the left of a string, if value is a integer or bigInt will be converted to a hex string.
*/
const padLeft$1 = (value, characterAmount, sign$5 = "0") => {
	if (typeof value === "string" && !isHexStrict(value)) return value.padStart(characterAmount, sign$5);
	const hex = typeof value === "string" && isHexStrict(value) ? value : numberToHex$2(value);
	const [prefix$1, hexValue] = hex.startsWith("-") ? ["-0x", hex.slice(3)] : ["0x", hex.slice(2)];
	return `${prefix$1}${hexValue.padStart(characterAmount, sign$5)}`;
};
function uint8ArrayToHexString$1(uint8Array) {
	let hexString = "0x";
	for (const e of uint8Array) {
		const hex = e.toString(16);
		hexString += hex.length === 1 ? `0${hex}` : hex;
	}
	return hexString;
}
const charCodeMap = {
	zero: 48,
	nine: 57,
	A: 65,
	F: 70,
	a: 97,
	f: 102
};
function charCodeToBase16(char) {
	if (char >= charCodeMap.zero && char <= charCodeMap.nine) return char - charCodeMap.zero;
	if (char >= charCodeMap.A && char <= charCodeMap.F) return char - (charCodeMap.A - 10);
	if (char >= charCodeMap.a && char <= charCodeMap.f) return char - (charCodeMap.a - 10);
	return void 0;
}
function hexToUint8Array(hex) {
	let offset = 0;
	if (hex.startsWith("0") && (hex[1] === "x" || hex[1] === "X")) offset = 2;
	if (hex.length % 2 !== 0) throw new InvalidBytesError(`hex string has odd length: ${hex}`);
	const length = (hex.length - offset) / 2;
	const bytes$1 = new Uint8Array(length);
	for (let index = 0, j = offset; index < length; index += 1) {
		const nibbleLeft = charCodeToBase16(hex.charCodeAt(j++));
		const nibbleRight = charCodeToBase16(hex.charCodeAt(j++));
		if (nibbleLeft === void 0 || nibbleRight === void 0) throw new InvalidBytesError(`Invalid byte sequence ("${hex[j - 2]}${hex[j - 1]}" in "${hex}").`);
		bytes$1[index] = nibbleLeft * 16 + nibbleRight;
	}
	return bytes$1;
}
function ensureIfUint8Array(data) {
	var _a$3;
	if (!(data instanceof Uint8Array) && ((_a$3 = data === null || data === void 0 ? void 0 : data.constructor) === null || _a$3 === void 0 ? void 0 : _a$3.name) === "Uint8Array") return Uint8Array.from(data);
	return data;
}

//#endregion
//#region ../../node_modules/.pnpm/web3-validator@2.0.6/node_modules/web3-validator/lib/esm/validation/bytes.js
/**
* checks input if typeof data is valid Uint8Array input
*/
const isUint8Array$1 = (data) => {
	var _a$3, _b;
	return data instanceof Uint8Array || ((_a$3 = data === null || data === void 0 ? void 0 : data.constructor) === null || _a$3 === void 0 ? void 0 : _a$3.name) === "Uint8Array" || ((_b = data === null || data === void 0 ? void 0 : data.constructor) === null || _b === void 0 ? void 0 : _b.name) === "Buffer";
};
const isBytes = (value, options = { abiType: "bytes" }) => {
	if (typeof value !== "string" && !Array.isArray(value) && !isUint8Array$1(value)) return false;
	if (typeof value === "string" && isHexStrict(value) && value.startsWith("-")) return false;
	if (typeof value === "string" && !isHexStrict(value)) return false;
	let valueToCheck;
	if (typeof value === "string") {
		if (value.length % 2 !== 0) return false;
		valueToCheck = hexToUint8Array(value);
	} else if (Array.isArray(value)) {
		if (value.some((d) => d < 0 || d > 255 || !Number.isInteger(d))) return false;
		valueToCheck = new Uint8Array(value);
	} else valueToCheck = value;
	if (options === null || options === void 0 ? void 0 : options.abiType) {
		const { baseTypeSize } = parseBaseType$1(options.abiType);
		return baseTypeSize ? valueToCheck.length === baseTypeSize : true;
	}
	if (options === null || options === void 0 ? void 0 : options.size) return valueToCheck.length === (options === null || options === void 0 ? void 0 : options.size);
	return true;
};

//#endregion
//#region ../../node_modules/.pnpm/web3-validator@2.0.6/node_modules/web3-validator/lib/esm/validation/address.js
/**
* Checks the checksum of a given address. Will also return false on non-checksum addresses.
*/
const checkAddressCheckSum = (data) => {
	if (!/^(0x)?[0-9a-f]{40}$/i.test(data)) return false;
	const address = data.slice(2);
	const updatedData = utf8ToBytes$3(address.toLowerCase());
	const addressHash = uint8ArrayToHexString$1(keccak256(ensureIfUint8Array(updatedData))).slice(2);
	for (let i = 0; i < 40; i += 1) if (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i] || parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i]) return false;
	return true;
};
/**
* Checks if a given string is a valid Ethereum address. It will also check the checksum, if the address has upper and lowercase letters.
*/
const isAddress = (value, checkChecksum = true) => {
	if (typeof value !== "string" && !isUint8Array$1(value)) return false;
	let valueToCheck;
	if (isUint8Array$1(value)) valueToCheck = uint8ArrayToHexString$1(value);
	else if (typeof value === "string" && !isHexStrict(value)) valueToCheck = value.toLowerCase().startsWith("0x") ? value : `0x${value}`;
	else valueToCheck = value;
	if (!/^(0x)?[0-9a-f]{40}$/i.test(valueToCheck)) return false;
	if (/^(0x|0X)?[0-9a-f]{40}$/.test(valueToCheck) || /^(0x|0X)?[0-9A-F]{40}$/.test(valueToCheck)) return true;
	return checkChecksum ? checkAddressCheckSum(valueToCheck) : true;
};

//#endregion
//#region ../../node_modules/.pnpm/web3-validator@2.0.6/node_modules/web3-validator/lib/esm/validation/numbers.js
/** @internal */
const bigintPower = (base$1, expo) => {
	if (expo === BigInt(0)) return BigInt(1);
	let res = base$1;
	for (let index = 1; index < expo; index += 1) res *= base$1;
	return res;
};
const isUInt = (value, options = { abiType: "uint" }) => {
	if (![
		"number",
		"string",
		"bigint"
	].includes(typeof value) || typeof value === "string" && value.length === 0) return false;
	let size;
	if (options === null || options === void 0 ? void 0 : options.abiType) {
		const { baseTypeSize } = parseBaseType$1(options.abiType);
		if (baseTypeSize) size = baseTypeSize;
	} else if (options.bitSize) size = options.bitSize;
	const maxSize = bigintPower(BigInt(2), BigInt(size !== null && size !== void 0 ? size : 256)) - BigInt(1);
	try {
		const valueToCheck = typeof value === "string" && isHexStrict(value) ? BigInt(hexToNumber$2(value)) : BigInt(value);
		return valueToCheck >= 0 && valueToCheck <= maxSize;
	} catch (error) {
		return false;
	}
};
const isInt = (value, options = { abiType: "int" }) => {
	if (![
		"number",
		"string",
		"bigint"
	].includes(typeof value)) return false;
	if (typeof value === "number" && value > Number.MAX_SAFE_INTEGER) return false;
	let size;
	if (options === null || options === void 0 ? void 0 : options.abiType) {
		const { baseTypeSize, baseType } = parseBaseType$1(options.abiType);
		if (baseType !== "int") return false;
		if (baseTypeSize) size = baseTypeSize;
	} else if (options.bitSize) size = options.bitSize;
	const maxSize = bigintPower(BigInt(2), BigInt((size !== null && size !== void 0 ? size : 256) - 1));
	const minSize = BigInt(-1) * bigintPower(BigInt(2), BigInt((size !== null && size !== void 0 ? size : 256) - 1));
	try {
		const valueToCheck = typeof value === "string" && isHexStrict(value) ? BigInt(hexToNumber$2(value)) : BigInt(value);
		return valueToCheck >= minSize && valueToCheck <= maxSize;
	} catch (error) {
		return false;
	}
};
const isNumber = (value) => {
	if (isInt(value)) return true;
	if (typeof value === "string" && /[0-9.]/.test(value) && value.indexOf(".") === value.lastIndexOf(".")) return true;
	if (typeof value === "number") return true;
	return false;
};

//#endregion
//#region ../../node_modules/.pnpm/web3-validator@2.0.6/node_modules/web3-validator/lib/esm/validation/block.js
const isBlockNumber = (value) => isUInt(value);
/**
* Returns true if the given blockNumber is 'latest', 'pending', 'earliest, 'safe' or 'finalized'
*/
const isBlockTag = (value) => Object.values(BlockTags).includes(value);
/**
* Returns true if given value is valid hex string and not negative, or is a valid BlockTag
*/
const isBlockNumberOrTag = (value) => isBlockTag(value) || isBlockNumber(value);

//#endregion
//#region ../../node_modules/.pnpm/web3-validator@2.0.6/node_modules/web3-validator/lib/esm/validation/bloom.js
/**
* Returns true if the bloom is a valid bloom
* https://github.com/joshstevens19/ethereum-bloom-filters/blob/fbeb47b70b46243c3963fe1c2988d7461ef17236/src/index.ts#L7
*/
const isBloom = (bloom) => {
	if (typeof bloom !== "string") return false;
	if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) return false;
	if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) return true;
	return false;
};
/**
* Returns true if the value is part of the given bloom
* note: false positives are possible.
*/
const isInBloom = (bloom, value) => {
	if (typeof value === "string" && !isHexStrict(value)) return false;
	if (!isBloom(bloom)) return false;
	const uint8Array = typeof value === "string" ? hexToUint8Array(value) : value;
	const hash$1 = uint8ArrayToHexString$1(keccak256(uint8Array)).slice(2);
	for (let i = 0; i < 12; i += 4) {
		const bitpos = (parseInt(hash$1.slice(i, i + 2), 16) << 8) + parseInt(hash$1.slice(i + 2, i + 4), 16) & 2047;
		const code = codePointToInt(bloom.charCodeAt(bloom.length - 1 - Math.floor(bitpos / 4)));
		const offset = 1 << bitpos % 4;
		if ((code & offset) !== offset) return false;
	}
	return true;
};
/**
* Returns true if the ethereum users address is part of the given bloom note: false positives are possible.
*/
const isUserEthereumAddressInBloom = (bloom, ethereumAddress) => {
	if (!isBloom(bloom)) return false;
	if (!isAddress(ethereumAddress)) return false;
	const address = padLeft$1(ethereumAddress, 64);
	return isInBloom(bloom, address);
};
/**
* Returns true if the contract address is part of the given bloom.
* note: false positives are possible.
*/
const isContractAddressInBloom = (bloom, contractAddress) => {
	if (!isBloom(bloom)) return false;
	if (!isAddress(contractAddress)) return false;
	return isInBloom(bloom, contractAddress);
};

//#endregion
//#region ../../node_modules/.pnpm/web3-validator@2.0.6/node_modules/web3-validator/lib/esm/validation/boolean.js
const isBoolean = (value) => {
	if (![
		"number",
		"string",
		"boolean"
	].includes(typeof value)) return false;
	if (typeof value === "boolean") return true;
	if (typeof value === "string" && !isHexStrict(value)) return value === "1" || value === "0";
	if (typeof value === "string" && isHexStrict(value)) return value === "0x1" || value === "0x0";
	return value === 1 || value === 0;
};

//#endregion
//#region ../../node_modules/.pnpm/web3-validator@2.0.6/node_modules/web3-validator/lib/esm/validation/object.js
const isNullish$1 = (item) => item === void 0 || item === null;
const isObject = (item) => typeof item === "object" && !isNullish$1(item) && !Array.isArray(item) && !(item instanceof TypedArray);

//#endregion
//#region ../../node_modules/.pnpm/web3-validator@2.0.6/node_modules/web3-validator/lib/esm/validation/topic.js
/**
* Checks if its a valid topic
*/
const isTopic = (topic) => {
	if (typeof topic !== "string") return false;
	if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) return false;
	if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) return true;
	return false;
};
/**
* Returns true if the topic is part of the given bloom.
* note: false positives are possible.
*/
const isTopicInBloom = (bloom, topic) => {
	if (!isBloom(bloom)) return false;
	if (!isTopic(topic)) return false;
	return isInBloom(bloom, topic);
};

//#endregion
//#region ../../node_modules/.pnpm/web3-validator@2.0.6/node_modules/web3-validator/lib/esm/validation/filter.js
/**
* First we check if all properties in the provided value are expected,
* then because all Filter properties are optional, we check if the expected properties
* are defined. If defined and they're not the expected type, we immediately return false,
* otherwise we return true after all checks pass.
*/
const isFilterObject = (value) => {
	const expectedFilterProperties = [
		"fromBlock",
		"toBlock",
		"address",
		"topics",
		"blockHash"
	];
	if (isNullish$1(value) || typeof value !== "object") return false;
	if (!Object.keys(value).every((property) => expectedFilterProperties.includes(property))) return false;
	if (!isNullish$1(value.fromBlock) && !isBlockNumberOrTag(value.fromBlock) || !isNullish$1(value.toBlock) && !isBlockNumberOrTag(value.toBlock)) return false;
	if (!isNullish$1(value.address)) {
		if (Array.isArray(value.address)) {
			if (!value.address.every((address) => isAddress(address))) return false;
		} else if (!isAddress(value.address)) return false;
	}
	if (!isNullish$1(value.topics)) {
		if (!value.topics.every((topic) => {
			if (isNullish$1(topic)) return true;
			if (Array.isArray(topic)) return topic.every((nestedTopic) => isTopic(nestedTopic));
			if (isTopic(topic)) return true;
			return false;
		})) return false;
	}
	return true;
};

//#endregion
//#region ../../node_modules/.pnpm/web3-validator@2.0.6/node_modules/web3-validator/lib/esm/formats.js
const formats = {
	address: (data) => isAddress(data),
	bloom: (data) => isBloom(data),
	blockNumber: (data) => isBlockNumber(data),
	blockTag: (data) => isBlockTag(data),
	blockNumberOrTag: (data) => isBlockNumberOrTag(data),
	bool: (data) => isBoolean(data),
	bytes: (data) => isBytes(data),
	filter: (data) => isFilterObject(data),
	hex: (data) => isHexStrict(data),
	uint: (data) => isUInt(data),
	int: (data) => isInt(data),
	number: (data) => isNumber(data),
	string: (data) => isString(data)
};
for (let bitSize = 8; bitSize <= 256; bitSize += 8) {
	formats[`int${bitSize}`] = (data) => isInt(data, { bitSize });
	formats[`uint${bitSize}`] = (data) => isUInt(data, { bitSize });
}
for (let size = 1; size <= 32; size += 1) formats[`bytes${size}`] = (data) => isBytes(data, { size });
formats.bytes256 = formats.bytes;
var formats_default = formats;

//#endregion
//#region ../../node_modules/.pnpm/web3-validator@2.0.6/node_modules/web3-validator/lib/esm/validator.js
const convertToZod = (schema) => {
	if ((!(schema === null || schema === void 0 ? void 0 : schema.type) || (schema === null || schema === void 0 ? void 0 : schema.type) === "object") && (schema === null || schema === void 0 ? void 0 : schema.properties)) {
		const obj = {};
		for (const name$1 of Object.keys(schema.properties)) {
			const zItem = convertToZod(schema.properties[name$1]);
			if (zItem) obj[name$1] = zItem;
		}
		if (Array.isArray(schema.required)) return objectType(obj).partial().required(schema.required.reduce((acc, v) => Object.assign(Object.assign({}, acc), { [v]: true }), {}));
		return objectType(obj).partial();
	}
	if ((schema === null || schema === void 0 ? void 0 : schema.type) === "array" && (schema === null || schema === void 0 ? void 0 : schema.items)) {
		if (Array.isArray(schema.items) && schema.items.length > 1 && schema.maxItems !== void 0 && new Set(schema.items.map((item) => item.$id)).size === schema.items.length) {
			const arr = [];
			for (const item of schema.items) {
				const zItem = convertToZod(item);
				if (zItem) arr.push(zItem);
			}
			return tupleType(arr);
		}
		const nextSchema = Array.isArray(schema.items) ? schema.items[0] : schema.items;
		let zodArraySchema = arrayType(convertToZod(nextSchema));
		zodArraySchema = schema.minItems !== void 0 ? zodArraySchema.min(schema.minItems) : zodArraySchema;
		zodArraySchema = schema.maxItems !== void 0 ? zodArraySchema.max(schema.maxItems) : zodArraySchema;
		return zodArraySchema;
	}
	if (schema.oneOf && Array.isArray(schema.oneOf)) return unionType(schema.oneOf.map((oneOfSchema) => convertToZod(oneOfSchema)));
	if (schema === null || schema === void 0 ? void 0 : schema.format) {
		if (!formats_default[schema.format]) throw new SchemaFormatError(schema.format);
		return anyType().refine(formats_default[schema.format], (value) => ({ params: {
			value,
			format: schema.format
		} }));
	}
	if ((schema === null || schema === void 0 ? void 0 : schema.type) && (schema === null || schema === void 0 ? void 0 : schema.type) !== "object" && typeof external_exports[String(schema.type)] === "function") return external_exports[String(schema.type)]();
	return objectType({ data: anyType() }).partial();
};
var Validator = class Validator {
	static factory() {
		if (!Validator.validatorInstance) Validator.validatorInstance = new Validator();
		return Validator.validatorInstance;
	}
	validate(schema, data, options) {
		var _a$3, _b;
		const zod = convertToZod(schema);
		const result = zod.safeParse(data);
		if (!result.success) {
			const errors = this.convertErrors((_b = (_a$3 = result.error) === null || _a$3 === void 0 ? void 0 : _a$3.issues) !== null && _b !== void 0 ? _b : []);
			if (errors) {
				if (options === null || options === void 0 ? void 0 : options.silent) return errors;
				throw new Web3ValidatorError(errors);
			}
		}
		return void 0;
	}
	convertErrors(errors) {
		if (errors && Array.isArray(errors) && errors.length > 0) return errors.map((error) => {
			var _a$3;
			let message;
			let keyword;
			let params;
			let schemaPath;
			schemaPath = error.path.join("/");
			const field = String(error.path[error.path.length - 1]);
			const instancePath = error.path.join("/");
			if (error.code === ZodIssueCode.too_big) {
				keyword = "maxItems";
				schemaPath = `${instancePath}/maxItems`;
				params = { limit: error.maximum };
				message = `must NOT have more than ${error.maximum} items`;
			} else if (error.code === ZodIssueCode.too_small) {
				keyword = "minItems";
				schemaPath = `${instancePath}/minItems`;
				params = { limit: error.minimum };
				message = `must NOT have fewer than ${error.minimum} items`;
			} else if (error.code === ZodIssueCode.custom) {
				const { value, format: format$1 } = (_a$3 = error.params) !== null && _a$3 !== void 0 ? _a$3 : {};
				if (typeof value === "undefined") message = `value at "/${schemaPath}" is required`;
				else message = `value "${typeof value === "object" ? JSON.stringify(value) : value}" at "/${schemaPath}" must pass "${format$1}" validation`;
				params = { value };
			}
			return {
				keyword: keyword !== null && keyword !== void 0 ? keyword : field,
				instancePath: instancePath ? `/${instancePath}` : "",
				schemaPath: schemaPath ? `#${schemaPath}` : "#",
				params: params !== null && params !== void 0 ? params : { value: error.message },
				message: message !== null && message !== void 0 ? message : error.message
			};
		});
		return void 0;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-validator@2.0.6/node_modules/web3-validator/lib/esm/web3_validator.js
var Web3Validator = class {
	constructor() {
		this._validator = Validator.factory();
	}
	validateJSONSchema(schema, data, options) {
		return this._validator.validate(schema, data, options);
	}
	validate(schema, data, options = { silent: false }) {
		var _a$3, _b;
		const jsonSchema = ethAbiToJsonSchema(schema);
		if (Array.isArray(jsonSchema.items) && ((_a$3 = jsonSchema.items) === null || _a$3 === void 0 ? void 0 : _a$3.length) === 0 && data.length === 0) return void 0;
		if (Array.isArray(jsonSchema.items) && ((_b = jsonSchema.items) === null || _b === void 0 ? void 0 : _b.length) === 0 && data.length !== 0) throw new Web3ValidatorError([{
			instancePath: "/0",
			schemaPath: "/",
			keyword: "required",
			message: "empty schema against data can not be validated",
			params: data
		}]);
		return this._validator.validate(jsonSchema, data, options);
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-validator@2.0.6/node_modules/web3-validator/lib/esm/default_validator.js
const validator = new Web3Validator();

//#endregion
//#region ../../node_modules/.pnpm/web3-utils@4.3.3/node_modules/web3-utils/lib/esm/uint8array.js
function isUint8Array(data) {
	var _a$3, _b;
	return data instanceof Uint8Array || ((_a$3 = data === null || data === void 0 ? void 0 : data.constructor) === null || _a$3 === void 0 ? void 0 : _a$3.name) === "Uint8Array" || ((_b = data === null || data === void 0 ? void 0 : data.constructor) === null || _b === void 0 ? void 0 : _b.name) === "Buffer";
}
function uint8ArrayConcat(...parts) {
	const length = parts.reduce((prev, part) => {
		const agg = prev + part.length;
		return agg;
	}, 0);
	const result = new Uint8Array(length);
	let offset = 0;
	for (const part of parts) {
		result.set(part, offset);
		offset += part.length;
	}
	return result;
}
/**
* Returns true if the two passed Uint8Arrays have the same content
*/
function uint8ArrayEquals(a, b) {
	if (a === b) return true;
	if (a.byteLength !== b.byteLength) return false;
	for (let i = 0; i < a.byteLength; i += 1) if (a[i] !== b[i]) return false;
	return true;
}

//#endregion
//#region ../../node_modules/.pnpm/web3-utils@4.3.3/node_modules/web3-utils/lib/esm/converters.js
/** @internal */
const ethUnitMap = {
	noether: BigInt(0),
	wei: BigInt(1),
	kwei: BigInt(1e3),
	Kwei: BigInt(1e3),
	babbage: BigInt(1e3),
	femtoether: BigInt(1e3),
	mwei: BigInt(1e6),
	Mwei: BigInt(1e6),
	lovelace: BigInt(1e6),
	picoether: BigInt(1e6),
	gwei: BigInt(1e9),
	Gwei: BigInt(1e9),
	shannon: BigInt(1e9),
	nanoether: BigInt(1e9),
	nano: BigInt(1e9),
	szabo: BigInt(1e12),
	microether: BigInt(1e12),
	micro: BigInt(1e12),
	finney: BigInt(1e15),
	milliether: BigInt(1e15),
	milli: BigInt(1e15),
	ether: BigInt("1000000000000000000"),
	kether: BigInt("1000000000000000000000"),
	grand: BigInt("1000000000000000000000"),
	mether: BigInt("1000000000000000000000000"),
	gether: BigInt("1000000000000000000000000000"),
	tether: BigInt("1000000000000000000000000000000")
};
const PrecisionLossWarning = "Warning: Using type `number` with values that are large or contain many decimals may cause loss of precision, it is recommended to use type `string` or `BigInt` when using conversion methods";
/**
* Convert a value from bytes to Uint8Array
* @param data - Data to be converted
* @returns - The Uint8Array representation of the input data
*
* @example
* ```ts
* console.log(web3.utils.bytesToUint8Array("0xab")));
* > Uint8Array(1) [ 171 ]
* ```
*/
const bytesToUint8Array = (data) => {
	validator.validate(["bytes"], [data]);
	if (isUint8Array(data)) return data;
	if (Array.isArray(data)) return new Uint8Array(data);
	if (typeof data === "string") return hexToUint8Array(data);
	throw new InvalidBytesError(data);
};
/**
* @internal
*/
const { uint8ArrayToHexString } = utils_exports;
/**
* Convert a byte array to a hex string
* @param bytes - Byte array to be converted
* @returns - The hex string representation of the input byte array
*
* @example
* ```ts
* console.log(web3.utils.bytesToHex(new Uint8Array([72, 12])));
* > "0x480c"
*
*/
const bytesToHex = (bytes$1) => uint8ArrayToHexString(bytesToUint8Array(bytes$1));
/**
* Convert a hex string to a byte array
* @param hex - Hex string to be converted
* @returns - The byte array representation of the input hex string
*
* @example
* ```ts
* console.log(web3.utils.hexToBytes('0x74657374'));
* > Uint8Array(4) [ 116, 101, 115, 116 ]
* ```
*/
const hexToBytes = (bytes$1) => {
	if (typeof bytes$1 === "string" && bytes$1.slice(0, 2).toLowerCase() !== "0x") return bytesToUint8Array(`0x${bytes$1}`);
	return bytesToUint8Array(bytes$1);
};
/**
* Converts value to it's number representation
* @param value - Hex string to be converted
* @returns - The number representation of the input value
*
* @example
* ```ts
* conoslle.log(web3.utils.hexToNumber('0xa'));
* > 10
* ```
*/
const hexToNumber = (value) => {
	validator.validate(["hex"], [value]);
	return hexToNumber$2(value);
};
/**
* Converts value to it's number representation @alias `hexToNumber`
*/
const toDecimal = hexToNumber;
/**
* Converts value to it's hex representation
* @param value - Value to be converted
* @param hexstrict - Add padding to converted value if odd, to make it hexstrict
* @returns - The hex representation of the input value
*
* @example
* ```ts
* console.log(web3.utils.numberToHex(10));
* > "0xa"
* ```
*/
const numberToHex = (value, hexstrict) => {
	if (typeof value !== "bigint") validator.validate(["int"], [value]);
	let updatedValue = numberToHex$2(value);
	if (hexstrict) {
		if (!updatedValue.startsWith("-") && updatedValue.length % 2 === 1) updatedValue = "0x0".concat(updatedValue.slice(2));
		else if (updatedValue.length % 2 === 0 && updatedValue.startsWith("-")) updatedValue = "-0x0".concat(updatedValue.slice(3));
	}
	return updatedValue;
};
/**
* Converts value to it's hex representation @alias `numberToHex`
*
*/
const fromDecimal = numberToHex;
/**
* Converts value to it's decimal representation in string
* @param value - Hex string to be converted
* @returns - The decimal representation of the input value
*
* @example
* ```ts
* console.log(web3.utils.hexToNumberString('0xa'));
* > "10"
* ```
*/
const hexToNumberString = (data) => hexToNumber(data).toString();
/**
* Should be called to get hex representation (prefixed by 0x) of utf8 string
* @param str - Utf8 string to be converted
* @returns - The hex representation of the input string
*
* @example
* ```ts
* console.log(utf8ToHex('web3.js'));
* > "0x776562332e6a73"
* ```
*
*/
const utf8ToHex = (str) => {
	validator.validate(["string"], [str]);
	let strWithoutNullCharacter = str.replace(/^(?:\u0000)/, "");
	strWithoutNullCharacter = strWithoutNullCharacter.replace(/(?:\u0000)$/, "");
	return bytesToHex(new TextEncoder().encode(strWithoutNullCharacter));
};
/**
* @alias utf8ToHex
*/
const fromUtf8 = utf8ToHex;
/**
* @alias utf8ToHex
*/
const stringToHex = utf8ToHex;
/**
* Should be called to get utf8 from it's hex representation
* @param str - Hex string to be converted
* @returns - Utf8 string
*
* @example
* ```ts
* console.log(web3.utils.hexToUtf8('0x48656c6c6f20576f726c64'));
* > Hello World
* ```
*/
const hexToUtf8 = (str) => bytesToUtf8(hexToBytes(str));
/**
* @alias hexToUtf8
*/
const toUtf8 = (input) => {
	if (typeof input === "string") return hexToUtf8(input);
	validator.validate(["bytes"], [input]);
	return bytesToUtf8(input);
};
const utf8ToBytes = utf8ToBytes$3;
/**
* @alias hexToUtf8
*/
const hexToString = hexToUtf8;
/**
* Should be called to get hex representation (prefixed by 0x) of ascii string
* @param str - String to be converted to hex
* @returns - Hex string
*
* @example
* ```ts
* console.log(web3.utils.asciiToHex('Hello World'));
* > 0x48656c6c6f20576f726c64
* ```
*/
const asciiToHex = (str) => {
	validator.validate(["string"], [str]);
	let hexString = "";
	for (let i = 0; i < str.length; i += 1) {
		const hexCharCode = str.charCodeAt(i).toString(16);
		hexString += hexCharCode.length % 2 !== 0 ? `0${hexCharCode}` : hexCharCode;
	}
	return `0x${hexString}`;
};
/**
* @alias asciiToHex
*/
const fromAscii = asciiToHex;
/**
* Should be called to get ascii from it's hex representation
* @param str - Hex string to be converted to ascii
* @returns - Ascii string
*
* @example
* ```ts
* console.log(web3.utils.hexToAscii('0x48656c6c6f20576f726c64'));
* > Hello World
* ```
*/
const hexToAscii = (str) => {
	const decoder = new TextDecoder("ascii");
	return decoder.decode(hexToBytes(str));
};
/**
* @alias hexToAscii
*/
const toAscii = hexToAscii;
/**
* Auto converts any given value into it's hex representation.
* @param value - Value to be converted to hex
* @param returnType - If true, it will return the type of the value
*
* @example
* ```ts
* console.log(web3.utils.toHex(10));
* > 0xa
*
* console.log(web3.utils.toHex('0x123', true));
* > bytes
*```
*/
const toHex = (value, returnType) => {
	if (typeof value === "string" && isAddress(value)) return returnType ? "address" : `0x${value.toLowerCase().replace(/^0x/i, "")}`;
	if (typeof value === "boolean") return returnType ? "bool" : value ? "0x01" : "0x00";
	if (typeof value === "number") return returnType ? value < 0 ? "int256" : "uint256" : numberToHex(value);
	if (typeof value === "bigint") return returnType ? "bigint" : numberToHex(value);
	if (isUint8Array(value)) return returnType ? "bytes" : bytesToHex(value);
	if (typeof value === "object" && !!value) return returnType ? "string" : utf8ToHex(JSON.stringify(value));
	if (typeof value === "string") {
		if (value.startsWith("-0x") || value.startsWith("-0X")) return returnType ? "int256" : numberToHex(value);
		if (isHexStrict(value)) return returnType ? "bytes" : value;
		if (isHex(value) && !isInt(value) && !isUInt(value)) return returnType ? "bytes" : `0x${value}`;
		if (isHex(value) && !isInt(value) && isUInt(value)) return returnType ? "uint" : numberToHex(value);
		if (!Number.isFinite(value)) return returnType ? "string" : utf8ToHex(value);
	}
	throw new HexProcessingError(value);
};
/**
* Converts any given value into it's number representation, if possible, else into it's bigint representation.
* @param value - The value to convert
* @returns - Returns the value in number or bigint representation
*
* @example
* ```ts
* console.log(web3.utils.toNumber(1));
* > 1
* console.log(web3.utils.toNumber(Number.MAX_SAFE_INTEGER));
* > 9007199254740991
*
* console.log(web3.utils.toNumber(BigInt(Number.MAX_SAFE_INTEGER)));
* > 9007199254740991
*
* console.log(web3.utils.toNumber(BigInt(Number.MAX_SAFE_INTEGER) + BigInt(1)));
* > 9007199254740992n
*
* ```
*/
const toNumber = (value) => {
	if (typeof value === "number") {
		if (value > 1e20) {
			console.warn(PrecisionLossWarning);
			return BigInt(value);
		}
		return value;
	}
	if (typeof value === "bigint") return value >= Number.MIN_SAFE_INTEGER && value <= Number.MAX_SAFE_INTEGER ? Number(value) : value;
	if (typeof value === "string" && isHexStrict(value)) return hexToNumber(value);
	try {
		return toNumber(BigInt(value));
	} catch (_a$3) {
		throw new InvalidNumberError(value);
	}
};
/**
* Auto converts any given value into it's bigint representation
*
* @param value - The value to convert
* @returns - Returns the value in bigint representation

* @example
* ```ts
* console.log(web3.utils.toBigInt(1));
* > 1n
* ```
*/
const toBigInt = (value) => {
	if (typeof value === "number") return BigInt(value);
	if (typeof value === "bigint") return value;
	if (typeof value === "string" && isHex(value)) {
		if (value.startsWith("-")) return -BigInt(value.substring(1));
		return BigInt(value);
	}
	throw new InvalidNumberError(value);
};
/**
* Takes a number of wei and converts it to any other ether unit.
* @param number - The value in wei
* @param unit - The unit to convert to
* @returns - Returns the converted value in the given unit
*
* @example
* ```ts
* console.log(web3.utils.fromWei("1", "ether"));
* > 0.000000000000000001
*
* console.log(web3.utils.fromWei("1", "shannon"));
* > 0.000000001
* ```
*/
const fromWei = (number$1, unit) => {
	let denomination;
	if (typeof unit === "string") {
		denomination = ethUnitMap[unit];
		if (!denomination) throw new InvalidUnitError(unit);
	} else {
		if (unit < 0 || !Number.isInteger(unit)) throw new InvalidIntegerError(unit);
		denomination = bigintPower(BigInt(10), BigInt(unit));
	}
	const value = String(toNumber(number$1));
	const numberOfZerosInDenomination = denomination.toString().length - 1;
	if (numberOfZerosInDenomination <= 0) return value.toString();
	const zeroPaddedValue = value.padStart(numberOfZerosInDenomination, "0");
	const integer = zeroPaddedValue.slice(0, -numberOfZerosInDenomination);
	const fraction = zeroPaddedValue.slice(-numberOfZerosInDenomination).replace(/\.?0+$/, "");
	if (integer === "") return fraction ? `0.${fraction}` : "0";
	if (fraction === "") return integer;
	const updatedValue = `${integer}.${fraction}`;
	return updatedValue.slice(0, integer.length + numberOfZerosInDenomination + 1);
};
/**
* Takes a number of a unit and converts it to wei.
*
* @param number - The number to convert.
* @param unit - {@link EtherUnits} The unit of the number passed.
* @returns The number converted to wei.
*
* @example
* ```ts
* console.log(web3.utils.toWei("0.001", "ether"));
* > 1000000000000000 //(wei)
* ```
*/
const toWei = (number$1, unit) => {
	validator.validate(["number"], [number$1]);
	let denomination;
	if (typeof unit === "string") {
		denomination = ethUnitMap[unit];
		if (!denomination) throw new InvalidUnitError(unit);
	} else {
		if (unit < 0 || !Number.isInteger(unit)) throw new InvalidIntegerError(unit);
		denomination = bigintPower(BigInt(10), BigInt(unit));
	}
	let parsedNumber = number$1;
	if (typeof parsedNumber === "number") {
		if (parsedNumber < 1e-15) console.warn(PrecisionLossWarning);
		if (parsedNumber > 1e20) {
			console.warn(PrecisionLossWarning);
			parsedNumber = BigInt(parsedNumber);
		} else parsedNumber = parsedNumber.toLocaleString("fullwide", {
			useGrouping: false,
			maximumFractionDigits: 20
		});
	}
	const [integer, fraction] = String(typeof parsedNumber === "string" && !isHexStrict(parsedNumber) ? parsedNumber : toNumber(parsedNumber)).split(".").concat("");
	const value = BigInt(`${integer}${fraction}`);
	const updatedValue = value * denomination;
	const decimals = fraction.length;
	if (decimals === 0) return updatedValue.toString();
	return updatedValue.toString().slice(0, -decimals);
};
/**
* Will convert an upper or lowercase Ethereum address to a checksum address.
* @param address - An address string
* @returns	The checksum address
* @example
* ```ts
* web3.utils.toChecksumAddress('0xc1912fee45d61c87cc5ea59dae31190fffff232d');
* > "0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d"
* ```
*/
const toChecksumAddress = (address) => {
	if (!isAddress(address, false)) throw new InvalidAddressError(address);
	const lowerCaseAddress = address.toLowerCase().replace(/^0x/i, "");
	const hash$1 = uint8ArrayToHexString$1(keccak256(ensureIfUint8Array(utf8ToBytes(lowerCaseAddress))));
	if (isNullish$1(hash$1) || hash$1 === "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470") return "";
	let checksumAddress = "0x";
	const addressHash = hash$1.replace(/^0x/i, "");
	for (let i = 0; i < lowerCaseAddress.length; i += 1) if (parseInt(addressHash[i], 16) > 7) checksumAddress += lowerCaseAddress[i].toUpperCase();
	else checksumAddress += lowerCaseAddress[i];
	return checksumAddress;
};
const toBool = (value) => {
	if (typeof value === "boolean") return value;
	if (typeof value === "number" && (value === 0 || value === 1)) return Boolean(value);
	if (typeof value === "bigint" && (value === BigInt(0) || value === BigInt(1))) return Boolean(value);
	if (typeof value === "string" && !isHexStrict(value) && (value === "1" || value === "0" || value === "false" || value === "true")) {
		if (value === "true") return true;
		if (value === "false") return false;
		return Boolean(Number(value));
	}
	if (typeof value === "string" && isHexStrict(value) && (value === "0x1" || value === "0x0")) return Boolean(toNumber(value));
	throw new InvalidBooleanError(value);
};

//#endregion
//#region ../../node_modules/.pnpm/eventemitter3@5.0.1/node_modules/eventemitter3/index.js
var require_eventemitter3 = __commonJS({ "../../node_modules/.pnpm/eventemitter3@5.0.1/node_modules/eventemitter3/index.js"(exports, module) {
	var has = Object.prototype.hasOwnProperty, prefix = "~";
	/**
	* Constructor to create a storage for our `EE` objects.
	* An `Events` instance is a plain object whose properties are event names.
	*
	* @constructor
	* @private
	*/
	function Events() {}
	if (Object.create) {
		Events.prototype = Object.create(null);
		if (!new Events().__proto__) prefix = false;
	}
	/**
	* Representation of a single event listener.
	*
	* @param {Function} fn The listener function.
	* @param {*} context The context to invoke the listener with.
	* @param {Boolean} [once=false] Specify if the listener is a one-time listener.
	* @constructor
	* @private
	*/
	function EE(fn, context, once) {
		this.fn = fn;
		this.context = context;
		this.once = once || false;
	}
	/**
	* Add a listener for a given event.
	*
	* @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
	* @param {(String|Symbol)} event The event name.
	* @param {Function} fn The listener function.
	* @param {*} context The context to invoke the listener with.
	* @param {Boolean} once Specify if the listener is a one-time listener.
	* @returns {EventEmitter}
	* @private
	*/
	function addListener(emitter, event, fn, context, once) {
		if (typeof fn !== "function") throw new TypeError("The listener must be a function");
		var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
		if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
		else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
		else emitter._events[evt] = [emitter._events[evt], listener];
		return emitter;
	}
	/**
	* Clear event by name.
	*
	* @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
	* @param {(String|Symbol)} evt The Event name.
	* @private
	*/
	function clearEvent(emitter, evt) {
		if (--emitter._eventsCount === 0) emitter._events = new Events();
		else delete emitter._events[evt];
	}
	/**
	* Minimal `EventEmitter` interface that is molded against the Node.js
	* `EventEmitter` interface.
	*
	* @constructor
	* @public
	*/
	function EventEmitter$3() {
		this._events = new Events();
		this._eventsCount = 0;
	}
	/**
	* Return an array listing the events for which the emitter has registered
	* listeners.
	*
	* @returns {Array}
	* @public
	*/
	EventEmitter$3.prototype.eventNames = function eventNames() {
		var names = [], events, name$1;
		if (this._eventsCount === 0) return names;
		for (name$1 in events = this._events) if (has.call(events, name$1)) names.push(prefix ? name$1.slice(1) : name$1);
		if (Object.getOwnPropertySymbols) return names.concat(Object.getOwnPropertySymbols(events));
		return names;
	};
	/**
	* Return the listeners registered for a given event.
	*
	* @param {(String|Symbol)} event The event name.
	* @returns {Array} The registered listeners.
	* @public
	*/
	EventEmitter$3.prototype.listeners = function listeners(event) {
		var evt = prefix ? prefix + event : event, handlers = this._events[evt];
		if (!handlers) return [];
		if (handlers.fn) return [handlers.fn];
		for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) ee[i] = handlers[i].fn;
		return ee;
	};
	/**
	* Return the number of listeners listening to a given event.
	*
	* @param {(String|Symbol)} event The event name.
	* @returns {Number} The number of listeners.
	* @public
	*/
	EventEmitter$3.prototype.listenerCount = function listenerCount(event) {
		var evt = prefix ? prefix + event : event, listeners = this._events[evt];
		if (!listeners) return 0;
		if (listeners.fn) return 1;
		return listeners.length;
	};
	/**
	* Calls each of the listeners registered for a given event.
	*
	* @param {(String|Symbol)} event The event name.
	* @returns {Boolean} `true` if the event had listeners, else `false`.
	* @public
	*/
	EventEmitter$3.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
		var evt = prefix ? prefix + event : event;
		if (!this._events[evt]) return false;
		var listeners = this._events[evt], len = arguments.length, args, i;
		if (listeners.fn) {
			if (listeners.once) this.removeListener(event, listeners.fn, void 0, true);
			switch (len) {
				case 1: return listeners.fn.call(listeners.context), true;
				case 2: return listeners.fn.call(listeners.context, a1), true;
				case 3: return listeners.fn.call(listeners.context, a1, a2), true;
				case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
				case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
				case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
			}
			for (i = 1, args = new Array(len - 1); i < len; i++) args[i - 1] = arguments[i];
			listeners.fn.apply(listeners.context, args);
		} else {
			var length = listeners.length, j;
			for (i = 0; i < length; i++) {
				if (listeners[i].once) this.removeListener(event, listeners[i].fn, void 0, true);
				switch (len) {
					case 1:
						listeners[i].fn.call(listeners[i].context);
						break;
					case 2:
						listeners[i].fn.call(listeners[i].context, a1);
						break;
					case 3:
						listeners[i].fn.call(listeners[i].context, a1, a2);
						break;
					case 4:
						listeners[i].fn.call(listeners[i].context, a1, a2, a3);
						break;
					default:
						if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) args[j - 1] = arguments[j];
						listeners[i].fn.apply(listeners[i].context, args);
				}
			}
		}
		return true;
	};
	/**
	* Add a listener for a given event.
	*
	* @param {(String|Symbol)} event The event name.
	* @param {Function} fn The listener function.
	* @param {*} [context=this] The context to invoke the listener with.
	* @returns {EventEmitter} `this`.
	* @public
	*/
	EventEmitter$3.prototype.on = function on(event, fn, context) {
		return addListener(this, event, fn, context, false);
	};
	/**
	* Add a one-time listener for a given event.
	*
	* @param {(String|Symbol)} event The event name.
	* @param {Function} fn The listener function.
	* @param {*} [context=this] The context to invoke the listener with.
	* @returns {EventEmitter} `this`.
	* @public
	*/
	EventEmitter$3.prototype.once = function once(event, fn, context) {
		return addListener(this, event, fn, context, true);
	};
	/**
	* Remove the listeners of a given event.
	*
	* @param {(String|Symbol)} event The event name.
	* @param {Function} fn Only remove the listeners that match this function.
	* @param {*} context Only remove the listeners that have this context.
	* @param {Boolean} once Only remove one-time listeners.
	* @returns {EventEmitter} `this`.
	* @public
	*/
	EventEmitter$3.prototype.removeListener = function removeListener(event, fn, context, once) {
		var evt = prefix ? prefix + event : event;
		if (!this._events[evt]) return this;
		if (!fn) {
			clearEvent(this, evt);
			return this;
		}
		var listeners = this._events[evt];
		if (listeners.fn) {
			if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) clearEvent(this, evt);
		} else {
			for (var i = 0, events = [], length = listeners.length; i < length; i++) if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) events.push(listeners[i]);
			if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
			else clearEvent(this, evt);
		}
		return this;
	};
	/**
	* Remove all listeners, or those of the specified event.
	*
	* @param {(String|Symbol)} [event] The event name.
	* @returns {EventEmitter} `this`.
	* @public
	*/
	EventEmitter$3.prototype.removeAllListeners = function removeAllListeners(event) {
		var evt;
		if (event) {
			evt = prefix ? prefix + event : event;
			if (this._events[evt]) clearEvent(this, evt);
		} else {
			this._events = new Events();
			this._eventsCount = 0;
		}
		return this;
	};
	EventEmitter$3.prototype.off = EventEmitter$3.prototype.removeListener;
	EventEmitter$3.prototype.addListener = EventEmitter$3.prototype.on;
	EventEmitter$3.prefixed = prefix;
	EventEmitter$3.EventEmitter = EventEmitter$3;
	if ("undefined" !== typeof module) module.exports = EventEmitter$3;
} });

//#endregion
//#region ../../node_modules/.pnpm/eventemitter3@5.0.1/node_modules/eventemitter3/index.mjs
var import_eventemitter3 = __toESM(require_eventemitter3(), 1);
var eventemitter3_default = import_eventemitter3.default;

//#endregion
//#region ../../node_modules/.pnpm/web3-utils@4.3.3/node_modules/web3-utils/lib/esm/event_emitter.js
/**
* This class copy the behavior of Node.js EventEmitter class.
* It is used to provide the same interface for the browser environment.
*/
var EventEmitter = class extends eventemitter3_default {
	constructor() {
		super(...arguments);
		this.maxListeners = Number.MAX_SAFE_INTEGER;
	}
	setMaxListeners(maxListeners) {
		this.maxListeners = maxListeners;
		return this;
	}
	getMaxListeners() {
		return this.maxListeners;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-utils@4.3.3/node_modules/web3-utils/lib/esm/validation.js
/**
* @deprecated Will be removed in next release. Please use `web3-validator` package instead.
*/
const isHexStrict$1 = isHexStrict;
/**
* returns true if input is a hexstring, number or bigint
*
* @deprecated Will be removed in next release. Please use `web3-validator` package instead.
*/
const isHex$1 = isHex;
/**
* Checks the checksum of a given address. Will also return false on non-checksum addresses.
*
* @deprecated Will be removed in next release. Please use `web3-validator` package instead.
*/
const checkAddressCheckSum$1 = checkAddressCheckSum;
/**
* Checks if a given string is a valid Ethereum address. It will also check the checksum, if the address has upper and lowercase letters.
*
* @deprecated Will be removed in next release. Please use `web3-validator` package instead.
*/
const isAddress$1 = isAddress;
/**
* Returns true if the bloom is a valid bloom
* https://github.com/joshstevens19/ethereum-bloom-filters/blob/fbeb47b70b46243c3963fe1c2988d7461ef17236/src/index.ts#L7
*
* @deprecated Will be removed in next release. Please use `web3-validator` package instead.
*/
const isBloom$1 = isBloom;
/**
* Returns true if the value is part of the given bloom
* note: false positives are possible.
*
* @deprecated Will be removed in next release. Please use `web3-validator` package instead.
*/
const isInBloom$1 = isInBloom;
/**
* Returns true if the ethereum users address is part of the given bloom note: false positives are possible.
*
* @deprecated Will be removed in next release. Please use `web3-validator` package instead.
*/
const isUserEthereumAddressInBloom$1 = isUserEthereumAddressInBloom;
/**
* Returns true if the contract address is part of the given bloom.
* note: false positives are possible.
*
* @deprecated Will be removed in next release. Please use `web3-validator` package instead.
*/
const isContractAddressInBloom$1 = isContractAddressInBloom;
/**
* Checks if its a valid topic
*
* @deprecated Will be removed in next release. Please use `web3-validator` package instead.
*/
const isTopic$1 = isTopic;
/**
* Returns true if the topic is part of the given bloom.
* note: false positives are possible.
*
* @deprecated Will be removed in next release. Please use `web3-validator` package instead.
*/
const isTopicInBloom$1 = isTopicInBloom;
/**
* Compares between block A and block B
* @param blockA - Block number or string
* @param blockB - Block number or string
*
* @returns - Returns -1 if a \< b, returns 1 if a \> b and returns 0 if a == b
*
* @example
* ```ts
* console.log(web3.utils.compareBlockNumbers('latest', 'pending'));
* > -1
*
* console.log(web3.utils.compareBlockNumbers(12, 11));
* > 1
* ```
*/
const compareBlockNumbers = (blockA, blockB) => {
	const isABlockTag = typeof blockA === "string" && isBlockTag(blockA);
	const isBBlockTag = typeof blockB === "string" && isBlockTag(blockB);
	if (blockA === blockB || (blockA === "earliest" || blockA === 0) && (blockB === "earliest" || blockB === 0)) return 0;
	if (blockA === "earliest") return -1;
	if (blockB === "earliest") return 1;
	if (isABlockTag && isBBlockTag) {
		const tagsOrder = {
			[BlockTags.EARLIEST]: 1,
			[BlockTags.FINALIZED]: 2,
			[BlockTags.SAFE]: 3,
			[BlockTags.LATEST]: 4,
			[BlockTags.PENDING]: 5
		};
		if (tagsOrder[blockA] < tagsOrder[blockB]) return -1;
		return 1;
	}
	if (isABlockTag && !isBBlockTag || !isABlockTag && isBBlockTag) throw new InvalidBlockError("Cannot compare blocktag with provided non-blocktag input.");
	const bigIntA = BigInt(blockA);
	const bigIntB = BigInt(blockB);
	if (bigIntA < bigIntB) return -1;
	if (bigIntA === bigIntB) return 0;
	return 1;
};
const isContractInitOptions = (options) => typeof options === "object" && !isNullish$1(options) && Object.keys(options).length !== 0 && [
	"input",
	"data",
	"from",
	"gas",
	"gasPrice",
	"gasLimit",
	"address",
	"jsonInterface",
	"syncWithContext",
	"dataInputFill"
].some((key) => key in options);
const isNullish = isNullish$1;

//#endregion
//#region ../../node_modules/.pnpm/web3-utils@4.3.3/node_modules/web3-utils/lib/esm/objects.js
const isIterable = (item) => typeof item === "object" && !isNullish$1(item) && !Array.isArray(item) && !(item instanceof TypedArray);
/**
* Deep merge two objects.
* @param destination - The destination object.
* @param sources - An array of source objects.
* @returns - The merged object.
*/
const mergeDeep = (destination, ...sources) => {
	if (!isIterable(destination)) return destination;
	const result = Object.assign({}, destination);
	for (const src of sources) for (const key in src) if (isIterable(src[key])) {
		if (!result[key]) result[key] = {};
		result[key] = mergeDeep(result[key], src[key]);
	} else if (!isNullish$1(src[key]) && Object.hasOwnProperty.call(src, key)) if (Array.isArray(src[key]) || src[key] instanceof TypedArray) result[key] = src[key].slice(0);
	else result[key] = src[key];
	return result;
};

//#endregion
//#region ../../node_modules/.pnpm/web3-utils@4.3.3/node_modules/web3-utils/lib/esm/string_manipulation.js
/**
* Adds a padding on the left of a string, if value is a integer or bigInt will be converted to a hex string.
* @param value - The value to be padded.
* @param characterAmount - The amount of characters the string should have.
* @param sign - The sign to be added (default is 0).
* @returns The padded string.
*
* @example
* ```ts
*
* console.log(web3.utils.padLeft('0x123', 10));
* >0x0000000123
* ```
*/
const padLeft = (value, characterAmount, sign$5 = "0") => {
	if (typeof value === "string") {
		if (!isHexStrict(value)) return value.padStart(characterAmount, sign$5);
		return padLeft$1(value, characterAmount, sign$5);
	}
	validator.validate(["int"], [value]);
	return padLeft$1(value, characterAmount, sign$5);
};
/**
* Adds a padding on the right of a string, if value is a integer or bigInt will be converted to a hex string.
* @param value - The value to be padded.
* @param characterAmount - The amount of characters the string should have.
* @param sign - The sign to be added (default is 0).
* @returns The padded string.
*
* @example
* ```ts
* console.log(web3.utils.padRight('0x123', 10));
* > 0x1230000000
*
* console.log(web3.utils.padRight('0x123', 10, '1'));
* > 0x1231111111
* ```
*/
const padRight = (value, characterAmount, sign$5 = "0") => {
	if (typeof value === "string" && !isHexStrict(value)) return value.padEnd(characterAmount, sign$5);
	const hexString = typeof value === "string" && isHexStrict(value) ? value : numberToHex(value);
	const prefixLength = hexString.startsWith("-") ? 3 : 2;
	validator.validate([hexString.startsWith("-") ? "int" : "uint"], [value]);
	return hexString.padEnd(characterAmount + prefixLength, sign$5);
};
/**
* Adds a padding on the right of a string, if value is a integer or bigInt will be converted to a hex string. @alias `padRight`
*/
const rightPad = padRight;
/**
* Adds a padding on the left of a string, if value is a integer or bigInt will be converted to a hex string. @alias `padLeft`
*/
const leftPad = padLeft;
/**
* Converts a negative number into the two’s complement and return a hexstring of 64 nibbles.
* @param value - The value to be converted.
* @param nibbleWidth - The nibble width of the hex string (default is 64).
*
* @returns The hex string of the two’s complement.
*
* @example
* ```ts
* console.log(web3.utils.toTwosComplement(13, 32));
* > 0x0000000000000000000000000000000d
*
* console.log(web3.utils.toTwosComplement('-0x1', 32));
* > 0xffffffffffffffffffffffffffffffff
*
* console.log(web3.utils.toTwosComplement(BigInt('9007199254740992'), 32));
* > 0x00000000000000000020000000000000
* ```
*/
const toTwosComplement = (value, nibbleWidth = 64) => {
	validator.validate(["int"], [value]);
	const val = toNumber(value);
	if (val >= 0) return padLeft(toHex(val), nibbleWidth);
	const largestBit = bigintPower(BigInt(2), BigInt(nibbleWidth * 4));
	if (-val >= largestBit) throw new NibbleWidthError(`value: ${value}, nibbleWidth: ${nibbleWidth}`);
	const updatedVal = BigInt(val);
	const complement = updatedVal + largestBit;
	return padLeft(numberToHex(complement), nibbleWidth);
};
/**
* Converts the twos complement into a decimal number or big int.
* @param value - The value to be converted.
* @param nibbleWidth - The nibble width of the hex string (default is 64).
* @returns The decimal number or big int.
*
* @example
* ```ts
* console.log(web3.utils.fromTwosComplement('0x0000000000000000000000000000000d', 32'));
* > 13
*
* console.log(web3.utils.fromTwosComplement('0x00000000000000000020000000000000', 32));
* > 9007199254740992n
* ```
*/
const fromTwosComplement = (value, nibbleWidth = 64) => {
	validator.validate(["int"], [value]);
	const val = toNumber(value);
	if (val < 0) return val;
	const largestBit = Math.ceil(Math.log(Number(val)) / Math.log(2));
	if (largestBit > nibbleWidth * 4) throw new NibbleWidthError(`value: "${value}", nibbleWidth: "${nibbleWidth}"`);
	if (nibbleWidth * 4 !== largestBit) return val;
	const complement = bigintPower(BigInt(2), BigInt(nibbleWidth) * BigInt(4));
	return toNumber(BigInt(val) - complement);
};

//#endregion
//#region ../../node_modules/.pnpm/web3-utils@4.3.3/node_modules/web3-utils/lib/esm/formatter.js
const { parseBaseType } = utils_exports;
const isDataFormat = (dataFormat) => typeof dataFormat === "object" && !isNullish$1(dataFormat) && "number" in dataFormat && "bytes" in dataFormat;
/**
* Finds the schema that corresponds to a specific data path within a larger JSON schema.
* It works by iterating over the dataPath array and traversing the JSON schema one step at a time until it reaches the end of the path.
*
* @param schema - represents a JSON schema, which is an object that describes the structure of JSON data
* @param dataPath - represents an array of strings that specifies the path to the data within the JSON schema
* @param oneOfPath - represents an optional array of two-element tuples that specifies the "oneOf" option to choose, if the schema has oneOf and the data path can match multiple subschemas
* @returns the JSON schema that matches the data path
*
*/
const findSchemaByDataPath = (schema, dataPath, oneOfPath = []) => {
	let result = Object.assign({}, schema);
	let previousDataPath;
	for (const dataPart of dataPath) {
		if (result.oneOf && previousDataPath) {
			const currentDataPath = previousDataPath;
			const path = oneOfPath.find(([key]) => key === currentDataPath);
			if (path && path[0] === previousDataPath) result = result.oneOf[path[1]];
		}
		if (!result.properties && !result.items) return void 0;
		if (result.properties) result = result.properties[dataPart];
		else if (result.items && result.items.properties) {
			const node = result.items.properties;
			result = node[dataPart];
		} else if (result.items && isObject(result.items)) result = result.items;
		else if (result.items && Array.isArray(result.items)) result = result.items[parseInt(dataPart, 10)];
		if (result && dataPart) previousDataPath = dataPart;
	}
	return result;
};
/**
* Converts a value depending on the format
* @param value - value to convert
* @param ethType - The type of the value to be parsed
* @param format - The format to be converted to
* @returns - The value converted to the specified format
*/
const convertScalarValue = (value, ethType, format$1) => {
	try {
		const { baseType, baseTypeSize } = parseBaseType(ethType);
		if (baseType === "int" || baseType === "uint") switch (format$1.number) {
			case FMT_NUMBER.NUMBER: return Number(toBigInt(value));
			case FMT_NUMBER.HEX: return numberToHex(toBigInt(value));
			case FMT_NUMBER.STR: return toBigInt(value).toString();
			case FMT_NUMBER.BIGINT: return toBigInt(value);
			default: throw new FormatterError(`Invalid format: ${String(format$1.number)}`);
		}
		if (baseType === "bytes") {
			let paddedValue;
			if (baseTypeSize) {
				if (typeof value === "string") paddedValue = padLeft(value, baseTypeSize * 2);
				else if (isUint8Array(value)) paddedValue = uint8ArrayConcat(new Uint8Array(baseTypeSize - value.length), value);
			} else paddedValue = value;
			switch (format$1.bytes) {
				case FMT_BYTES.HEX: return bytesToHex(bytesToUint8Array(paddedValue));
				case FMT_BYTES.UINT8ARRAY: return bytesToUint8Array(paddedValue);
				default: throw new FormatterError(`Invalid format: ${String(format$1.bytes)}`);
			}
		}
		if (baseType === "string") return String(value);
	} catch (error) {
		return value;
	}
	return value;
};
const convertArray = ({ value, schemaProp, schema, object, key, dataPath, format: format$1, oneOfPath = [] }) => {
	var _a$3, _b;
	if (Array.isArray(value)) {
		let _schemaProp = schemaProp;
		if ((schemaProp === null || schemaProp === void 0 ? void 0 : schemaProp.oneOf) !== void 0) schemaProp.oneOf.forEach((oneOfSchemaProp, index) => {
			var _a$4, _b$1;
			if (!Array.isArray(schemaProp === null || schemaProp === void 0 ? void 0 : schemaProp.items) && (typeof value[0] === "object" && ((_a$4 = oneOfSchemaProp === null || oneOfSchemaProp === void 0 ? void 0 : oneOfSchemaProp.items) === null || _a$4 === void 0 ? void 0 : _a$4.type) === "object" || typeof value[0] === "string" && ((_b$1 = oneOfSchemaProp === null || oneOfSchemaProp === void 0 ? void 0 : oneOfSchemaProp.items) === null || _b$1 === void 0 ? void 0 : _b$1.type) !== "object")) {
				_schemaProp = oneOfSchemaProp;
				oneOfPath.push([key, index]);
			}
		});
		if (isNullish$1(_schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items)) {
			delete object[key];
			dataPath.pop();
			return true;
		}
		if (isObject(_schemaProp.items) && !isNullish$1(_schemaProp.items.format)) {
			for (let i = 0; i < value.length; i += 1) object[key][i] = convertScalarValue(value[i], (_a$3 = _schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items) === null || _a$3 === void 0 ? void 0 : _a$3.format, format$1);
			dataPath.pop();
			return true;
		}
		if (!Array.isArray(_schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items) && ((_b = _schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items) === null || _b === void 0 ? void 0 : _b.type) === "object") {
			for (const arrObject of value) convert(arrObject, schema, dataPath, format$1, oneOfPath);
			dataPath.pop();
			return true;
		}
		if (Array.isArray(_schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items)) {
			for (let i = 0; i < value.length; i += 1) object[key][i] = convertScalarValue(value[i], _schemaProp.items[i].format, format$1);
			dataPath.pop();
			return true;
		}
	}
	return false;
};
/**
* Converts the data to the specified format
* @param data - data to convert
* @param schema - The JSON schema that describes the structure of the data
* @param dataPath - A string array that specifies the path to the data within the JSON schema
* @param format  - The format to be converted to
* @param oneOfPath - An optional array of two-element tuples that specifies the "oneOf" option to choose, if the schema has oneOf and the data path can match multiple subschemas
* @returns - The data converted to the specified format
*/
const convert = (data, schema, dataPath, format$1, oneOfPath = []) => {
	var _a$3;
	if (!isObject(data) && !Array.isArray(data)) return convertScalarValue(data, schema === null || schema === void 0 ? void 0 : schema.format, format$1);
	const object = data;
	if (Array.isArray(object) && (schema === null || schema === void 0 ? void 0 : schema.type) === "array" && ((_a$3 = schema === null || schema === void 0 ? void 0 : schema.items) === null || _a$3 === void 0 ? void 0 : _a$3.type) === "object") convertArray({
		value: object,
		schemaProp: schema,
		schema,
		object,
		key: "",
		dataPath,
		format: format$1,
		oneOfPath
	});
	else for (const [key, value] of Object.entries(object)) {
		dataPath.push(key);
		let schemaProp = findSchemaByDataPath(schema, dataPath, oneOfPath);
		if (isNullish$1(schemaProp)) {
			delete object[key];
			dataPath.pop();
			continue;
		}
		if (isObject(value)) {
			convert(value, schema, dataPath, format$1, oneOfPath);
			dataPath.pop();
			continue;
		}
		if (convertArray({
			value,
			schemaProp,
			schema,
			object,
			key,
			dataPath,
			format: format$1,
			oneOfPath
		})) continue;
		if ((schemaProp === null || schemaProp === void 0 ? void 0 : schemaProp.format) === void 0 && (schemaProp === null || schemaProp === void 0 ? void 0 : schemaProp.oneOf) !== void 0) {
			for (const [_index, oneOfSchemaProp] of schemaProp.oneOf.entries()) if ((oneOfSchemaProp === null || oneOfSchemaProp === void 0 ? void 0 : oneOfSchemaProp.format) !== void 0) {
				schemaProp = oneOfSchemaProp;
				break;
			}
		}
		object[key] = convertScalarValue(value, schemaProp.format, format$1);
		dataPath.pop();
	}
	return object;
};
/**
* Given data that can be interpreted according to the provided schema, returns equivalent data that has been formatted
* according to the provided return format.
*
* @param schema - how to interpret the data
* @param data - data to be formatted
* @param returnFormat - how to format the data
* @returns - formatted data
*
* @example
*
* ```js
* import { FMT_NUMBER, utils } from "web3";
*
* console.log(
*   utils.format({ format: "uint" }, "221", { number: FMT_NUMBER.HEX }),
* );
* // 0xdd
* ```
*
*/
const format = (schema, data, returnFormat = DEFAULT_RETURN_FORMAT) => {
	let dataToParse;
	if (isObject(data)) dataToParse = mergeDeep({}, data);
	else if (Array.isArray(data)) dataToParse = [...data];
	else dataToParse = data;
	const jsonSchema = isObject(schema) ? schema : ethAbiToJsonSchema(schema);
	if (!jsonSchema.properties && !jsonSchema.items && !jsonSchema.format) throw new FormatterError("Invalid json schema for formatting");
	return convert(dataToParse, jsonSchema, [], returnFormat);
};

//#endregion
//#region ../../node_modules/.pnpm/web3-utils@4.3.3/node_modules/web3-utils/lib/esm/hash.js
const SHA3_EMPTY_BYTES = "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
/**
* A wrapper for ethereum-cryptography/keccak256 to allow hashing a `string` and a `bigint` in addition to `UInt8Array`
* @param data - the input to hash
* @returns - the Keccak-256 hash of the input
*
* @example
* ```ts
* console.log(web3.utils.keccak256Wrapper('web3.js'));
* > 0x63667efb1961039c9bb0d6ea7a5abdd223a3aca7daa5044ad894226e1f83919a
*
* console.log(web3.utils.keccak256Wrapper(1));
* > 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6
*
* console.log(web3.utils.keccak256Wrapper(0xaf12fd));
* > 0x358640fd4719fa923525d74ab5ae80a594301aba5543e3492b052bf4598b794c
* ```
*/
const keccak256Wrapper = (data) => {
	let processedData;
	if (typeof data === "bigint" || typeof data === "number") processedData = utf8ToBytes$3(data.toString());
	else if (Array.isArray(data)) processedData = new Uint8Array(data);
	else if (typeof data === "string" && !isHexStrict(data)) processedData = utf8ToBytes$3(data);
	else processedData = bytesToUint8Array(data);
	return bytesToHex(keccak256(ensureIfUint8Array(processedData)));
};
/**
* computes the Keccak-256 hash of the input and returns a hexstring
* @param data - the input to hash
* @returns - the Keccak-256 hash of the input
*
* @example
* ```ts
* console.log(web3.utils.sha3('web3.js'));
* > 0x63667efb1961039c9bb0d6ea7a5abdd223a3aca7daa5044ad894226e1f83919a
*
* console.log(web3.utils.sha3(''));
* > undefined
* ```
*/
const sha3 = (data) => {
	let updatedData;
	if (typeof data === "string") if (data.startsWith("0x") && isHexStrict(data)) updatedData = hexToBytes(data);
	else updatedData = utf8ToBytes$3(data);
	else updatedData = data;
	const hash$1 = keccak256Wrapper(updatedData);
	return hash$1 === SHA3_EMPTY_BYTES ? void 0 : hash$1;
};
/**
* Will calculate the sha3 of the input but does return the hash value instead of null if for example a empty string is passed.
* @param data - the input to hash
* @returns - the Keccak-256 hash of the input
*
* @example
* ```ts
* conosle.log(web3.utils.sha3Raw('web3.js'));
* > 0x63667efb1961039c9bb0d6ea7a5abdd223a3aca7daa5044ad894226e1f83919a
*
* console.log(web3.utils.sha3Raw(''));
* > 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470
* ```
*/
const sha3Raw = (data) => {
	const hash$1 = sha3(data);
	if (isNullish$1(hash$1)) return SHA3_EMPTY_BYTES;
	return hash$1;
};
/**
* returns type and value
* @param arg - the input to return the type and value
* @returns - the type and value of the input
*/
const getType = (arg) => {
	if (Array.isArray(arg)) throw new Error("Autodetection of array types is not supported.");
	let type;
	let value;
	if (typeof arg === "object" && ("t" in arg || "type" in arg) && ("v" in arg || "value" in arg)) {
		type = "t" in arg ? arg.t : arg.type;
		value = "v" in arg ? arg.v : arg.value;
		type = type.toLowerCase() === "bigint" ? "int" : type;
	} else if (typeof arg === "bigint") return ["int", arg];
	else {
		type = toHex(arg, true);
		value = toHex(arg);
		if (!type.startsWith("int") && !type.startsWith("uint")) type = "bytes";
	}
	if ((type.startsWith("int") || type.startsWith("uint")) && typeof value === "string" && !/^(-)?0x/i.test(value)) value = toBigInt(value);
	return [type, value];
};
/**
* returns the type with size if uint or int
* @param name - the input to return the type with size
* @returns - the type with size of the input
*/
const elementaryName = (name$1) => {
	if (name$1.startsWith("int[")) return `int256${name$1.slice(3)}`;
	if (name$1 === "int") return "int256";
	if (name$1.startsWith("uint[")) return `uint256'${name$1.slice(4)}`;
	if (name$1 === "uint") return "uint256";
	return name$1;
};
/**
* returns the size of the value of type 'byte'
*/
const parseTypeN = (value, typeLength) => {
	const typesize = /^(\d+).*$/.exec(value.slice(typeLength));
	return typesize ? parseInt(typesize[1], 10) : 0;
};
/**
* returns the bit length of the value
* @param value - the input to return the bit length
* @returns - the bit length of the input
*/
const bitLength = (value) => {
	const updatedVal = value.toString(2);
	return updatedVal.length;
};
/**
* Pads the value based on size and type
* returns a string of the padded value
* @param type - the input to pad
* @returns = the padded value
*/
const solidityPack = (type, val) => {
	const value = val.toString();
	if (type === "string") {
		if (typeof val === "string") return utf8ToHex(val);
		throw new InvalidStringError(val);
	}
	if (type === "bool" || type === "boolean") {
		if (typeof val === "boolean") return val ? "01" : "00";
		throw new InvalidBooleanError(val);
	}
	if (type === "address") {
		if (!isAddress(value)) throw new InvalidAddressError(value);
		return value;
	}
	const name$1 = elementaryName(type);
	if (type.startsWith("uint")) {
		const size = parseTypeN(name$1, 4);
		if (size % 8 || size < 8 || size > 256) throw new InvalidSizeError(value);
		const num = toNumber(value);
		if (bitLength(num) > size) throw new InvalidLargeValueError(value);
		if (num < BigInt(0)) throw new InvalidUnsignedIntegerError(value);
		return size ? leftPad(num.toString(16), size / 8 * 2) : num.toString(16);
	}
	if (type.startsWith("int")) {
		const size = parseTypeN(name$1, 3);
		if (size % 8 || size < 8 || size > 256) throw new InvalidSizeError(type);
		const num = toNumber(value);
		if (bitLength(num) > size) throw new InvalidLargeValueError(value);
		if (num < BigInt(0)) return toTwosComplement(num.toString(), size / 8 * 2);
		return size ? leftPad(num.toString(16), size / 4) : num.toString(16);
	}
	if (name$1 === "bytes") {
		if (value.replace(/^0x/i, "").length % 2 !== 0) throw new InvalidBytesError(value);
		return value;
	}
	if (type.startsWith("bytes")) {
		if (value.replace(/^0x/i, "").length % 2 !== 0) throw new InvalidBytesError(value);
		const size = parseTypeN(type, 5);
		if (!size || size < 1 || size > 64 || size < value.replace(/^0x/i, "").length / 2) throw new InvalidBytesError(value);
		return rightPad(value, size * 2);
	}
	return "";
};
/**
* returns a string of the tightly packed value given based on the type
* @param arg - the input to return the tightly packed value
* @returns - the tightly packed value
*/
const processSolidityEncodePackedArgs = (arg) => {
	const [type, val] = getType(arg);
	if (Array.isArray(val)) {
		const hexArg$1 = val.map((v) => solidityPack(type, v).replace("0x", ""));
		return hexArg$1.join("");
	}
	const hexArg = solidityPack(type, val);
	return hexArg.replace("0x", "");
};
/**
* Encode packed arguments to a hexstring
*/
const encodePacked = (...values) => {
	const hexArgs = values.map(processSolidityEncodePackedArgs);
	return `0x${hexArgs.join("").toLowerCase()}`;
};
/**
* Will tightly pack values given in the same way solidity would then hash.
* returns a hash string, or null if input is empty
* @param values - the input to return the tightly packed values
* @returns - the keccack246 of the tightly packed values
*
* @example
* ```ts
* console.log(web3.utils.soliditySha3({ type: "string", value: "31323334" }));
* > 0xf15f8da2ad27e486d632dc37d24912f634398918d6f9913a0a0ff84e388be62b
* ```
*/
const soliditySha3 = (...values) => sha3(encodePacked(...values));
/**
* Will tightly pack values given in the same way solidity would then hash.
* returns a hash string, if input is empty will return `0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470`
* @param values - the input to return the tightly packed values
* @returns - the keccack246 of the tightly packed values
*
* @example
* ```ts
* console.log(web3.utils.soliditySha3Raw({ type: "string", value: "helloworld" }))
* > 0xfa26db7ca85ead399216e7c6316bc50ed24393c3122b582735e7f3b0f91b93f0
* ```
*/
const soliditySha3Raw = (...values) => sha3Raw(encodePacked(...values));
/**
* Get slot number for storage long string in contract. Basically for getStorage method
* returns slotNumber where will data placed
* @param mainSlotNumber - the slot number where will be stored hash of long string
* @returns - the slot number where will be stored long string
*/
const getStorageSlotNumForLongString = (mainSlotNumber) => sha3(`0x${(typeof mainSlotNumber === "number" ? mainSlotNumber.toString() : mainSlotNumber).padStart(64, "0")}`);

//#endregion
//#region ../../node_modules/.pnpm/ethereum-cryptography@2.2.1/node_modules/ethereum-cryptography/esm/random.js
function getRandomBytesSync(bytes$1) {
	return randomBytes$1(bytes$1);
}

//#endregion
//#region ../../node_modules/.pnpm/web3-utils@4.3.3/node_modules/web3-utils/lib/esm/random.js
/**
* Returns a random byte array by the given bytes size
* @param size - The size of the random byte array returned
* @returns - random byte array
*
* @example
* ```ts
* console.log(web3.utils.randomBytes(32));
* > Uint8Array(32) [
*       93, 172, 226,  32,  33, 176, 156, 156,
*       182,  30, 240,   2,  69,  96, 174, 197,
*       33, 136, 194, 241, 197, 156, 110, 111,
*       66,  87,  17,  88,  67,  48, 245, 183
*    ]
* ```
*/
const randomBytes = (size) => getRandomBytesSync(size);
/**
* Returns a random hex string by the given bytes size
* @param byteSize - The size of the random hex string returned
* @returns - random hex string
*
* ```ts
* console.log(web3.utils.randomHex(32));
* > 0x139f5b88b72a25eab053d3b57fe1f8a9dbc62a526b1cb1774d0d7db1c3e7ce9e
* ```
*/
const randomHex = (byteSize) => bytesToHex(randomBytes(byteSize));

//#endregion
//#region ../../node_modules/.pnpm/web3-utils@4.3.3/node_modules/web3-utils/lib/esm/promise_helpers.js
var __awaiter$43 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
/**
* An alternative to the node function `isPromise` that exists in `util/types` because it is not available on the browser.
* @param object - to check if it is a `Promise`
* @returns `true` if it is an `object` or a `function` that has a `then` function. And returns `false` otherwise.
*/
function isPromise(object) {
	return (typeof object === "object" || typeof object === "function") && typeof object.then === "function";
}
/**
* Wait for a promise but interrupt it if it did not resolve within a given timeout.
* If the timeout reached, before the promise code resolve, either throw an error if an error object was provided, or return `undefined`.
* @param awaitable - The promise or function to wait for.
* @param timeout - The timeout in milliseconds.
* @param error - (Optional) The error to throw if the timeout reached.
*/
function waitWithTimeout(awaitable, timeout, error) {
	return __awaiter$43(this, void 0, void 0, function* () {
		let timeoutId;
		const result = yield Promise.race([awaitable instanceof Promise ? awaitable : awaitable(), new Promise((resolve, reject) => {
			timeoutId = setTimeout(() => error ? reject(error) : resolve(void 0), timeout);
		})]);
		if (timeoutId) clearTimeout(timeoutId);
		if (result instanceof Error) throw result;
		return result;
	});
}
/**
* Repeatedly calls an async function with a given interval until the result of the function is defined (not undefined or null),
* or until a timeout is reached. It returns promise and intervalId.
* @param func - The function to call.
* @param interval - The interval in milliseconds.
*/
function pollTillDefinedAndReturnIntervalId(func, interval) {
	let intervalId;
	const polledRes = new Promise((resolve, reject) => {
		intervalId = setInterval(function intervalCallbackFunc() {
			__awaiter$43(this, void 0, void 0, function* () {
				try {
					const res = yield waitWithTimeout(func, interval);
					if (!isNullish$1(res)) {
						clearInterval(intervalId);
						resolve(res);
					}
				} catch (error) {
					clearInterval(intervalId);
					reject(error);
				}
			});
			return intervalCallbackFunc;
		}(), interval);
	});
	return [polledRes, intervalId];
}
/**
* Repeatedly calls an async function with a given interval until the result of the function is defined (not undefined or null),
* or until a timeout is reached.
* pollTillDefinedAndReturnIntervalId() function should be used instead of pollTillDefined if you need IntervalId in result.
* This function will be deprecated in next major release so use pollTillDefinedAndReturnIntervalId().
* @param func - The function to call.
* @param interval - The interval in milliseconds.
*/
function pollTillDefined(func, interval) {
	return __awaiter$43(this, void 0, void 0, function* () {
		return pollTillDefinedAndReturnIntervalId(func, interval)[0];
	});
}
/**
* Enforce a timeout on a promise, so that it can be rejected if it takes too long to complete
* @param timeout - The timeout to enforced in milliseconds.
* @param error - The error to throw if the timeout is reached.
* @returns A tuple of the timeout id and the promise that will be rejected if the timeout is reached.
*
* @example
* ```ts
* const [timerId, promise] = web3.utils.rejectIfTimeout(100, new Error('time out'));
* ```
*/
function rejectIfTimeout(timeout, error) {
	let timeoutId;
	const rejectOnTimeout = new Promise((_, reject) => {
		timeoutId = setTimeout(() => {
			reject(error);
		}, timeout);
	});
	return [timeoutId, rejectOnTimeout];
}
/**
* Sets an interval that repeatedly executes the given cond function with the specified interval between each call.
* If the condition is met, the interval is cleared and a Promise that rejects with the returned value is returned.
* @param cond - The function/condition to call.
* @param interval - The interval in milliseconds.
* @returns - an array with the interval ID and the Promise.
*/
function rejectIfConditionAtInterval(cond, interval) {
	let intervalId;
	const rejectIfCondition = new Promise((_, reject) => {
		intervalId = setInterval(() => {
			__awaiter$43(this, void 0, void 0, function* () {
				const error = yield cond();
				if (error) {
					clearInterval(intervalId);
					reject(error);
				}
			});
		}, interval);
	});
	return [intervalId, rejectIfCondition];
}

//#endregion
//#region ../../node_modules/.pnpm/web3-utils@4.3.3/node_modules/web3-utils/lib/esm/uuid.js
/**
* Generate a version 4 (random) uuid
* https://github.com/uuidjs/uuid/blob/main/src/v4.js#L5
* @returns - A version 4 uuid of the form xxxxxxxx-xxxx-4xxx-xxxx-xxxxxxxxxxxx
* @example
* ```ts
* console.log(web3.utils.uuidV4());
* > "1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed"
* ```
*/
const uuidV4 = () => {
	const bytes$1 = randomBytes(16);
	bytes$1[6] = bytes$1[6] & 15 | 64;
	bytes$1[8] = bytes$1[8] & 63 | 128;
	const hexString = bytesToHex(bytes$1);
	return [
		hexString.substring(2, 10),
		hexString.substring(10, 14),
		hexString.substring(14, 18),
		hexString.substring(18, 22),
		hexString.substring(22, 34)
	].join("-");
};

//#endregion
//#region ../../node_modules/.pnpm/web3-utils@4.3.3/node_modules/web3-utils/lib/esm/json_rpc.js
var json_rpc_exports = {};
__export(json_rpc_exports, {
	isBatchRequest: () => isBatchRequest,
	isBatchResponse: () => isBatchResponse,
	isResponseRpcError: () => isResponseRpcError,
	isResponseWithError: () => isResponseWithError,
	isResponseWithNotification: () => isResponseWithNotification,
	isResponseWithResult: () => isResponseWithResult,
	isSubscriptionResult: () => isSubscriptionResult,
	isValidResponse: () => isValidResponse,
	setRequestIdStart: () => setRequestIdStart,
	toBatchPayload: () => toBatchPayload,
	toPayload: () => toPayload,
	validateResponse: () => validateResponse
});
const isResponseRpcError = (rpcError) => {
	const errorCode = rpcError.error.code;
	return rpcErrorsMap.has(errorCode) || errorCode >= -32099 && errorCode <= -32e3;
};
const isResponseWithResult = (response) => !Array.isArray(response) && !!response && response.jsonrpc === "2.0" && "result" in response && isNullish$1(response.error) && (typeof response.id === "number" || typeof response.id === "string");
const isResponseWithError = (response) => !Array.isArray(response) && response.jsonrpc === "2.0" && !!response && isNullish$1(response.result) && "error" in response && (typeof response.id === "number" || typeof response.id === "string");
const isResponseWithNotification = (response) => !Array.isArray(response) && !!response && response.jsonrpc === "2.0" && !isNullish$1(response.params) && !isNullish$1(response.method);
const isSubscriptionResult = (response) => !Array.isArray(response) && !!response && response.jsonrpc === "2.0" && "id" in response && "result" in response;
const validateResponse = (response) => isResponseWithResult(response) || isResponseWithError(response);
const isValidResponse = (response) => Array.isArray(response) ? response.every(validateResponse) : validateResponse(response);
const isBatchResponse = (response) => Array.isArray(response) && response.length > 0 && isValidResponse(response);
let requestIdSeed;
/**
* Optionally use to make the jsonrpc `id` start from a specific number.
* Without calling this function, the `id` will be filled with a Uuid.
* But after this being called with a number, the `id` will be a number starting from the provided `start` variable.
* However, if `undefined` was passed to this function, the `id` will be a Uuid again.
* @param start - a number to start incrementing from.
* 	Or `undefined` to use a new Uuid (this is the default behavior)
*/
const setRequestIdStart = (start) => {
	requestIdSeed = start;
};
const toPayload = (request) => {
	var _a$3, _b, _c, _d;
	if (typeof requestIdSeed !== "undefined") requestIdSeed += 1;
	return {
		jsonrpc: (_a$3 = request.jsonrpc) !== null && _a$3 !== void 0 ? _a$3 : "2.0",
		id: (_c = (_b = request.id) !== null && _b !== void 0 ? _b : requestIdSeed) !== null && _c !== void 0 ? _c : uuidV4(),
		method: request.method,
		params: (_d = request.params) !== null && _d !== void 0 ? _d : void 0
	};
};
const toBatchPayload = (requests) => requests.map((request) => toPayload(request));
const isBatchRequest = (request) => Array.isArray(request) && request.length > 0;

//#endregion
//#region ../../node_modules/.pnpm/web3-utils@4.3.3/node_modules/web3-utils/lib/esm/web3_deferred_promise.js
var __awaiter$42 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
var _a$2;
/**
* The class is a simple implementation of a deferred promise with optional timeout functionality,
* which can be useful when dealing with asynchronous tasks.
*
*/
var Web3DeferredPromise = class {
	/**
	*
	* @param timeout - (optional) The timeout in milliseconds.
	* @param eagerStart - (optional) If true, the timer starts as soon as the promise is created.
	* @param timeoutMessage - (optional) The message to include in the timeout erro that is thrown when the promise times out.
	*/
	constructor({ timeout, eagerStart, timeoutMessage } = {
		timeout: 0,
		eagerStart: false,
		timeoutMessage: "DeferredPromise timed out"
	}) {
		this[_a$2] = "Promise";
		this._state = "pending";
		this._promise = new Promise((resolve, reject) => {
			this._resolve = resolve;
			this._reject = reject;
		});
		this._timeoutMessage = timeoutMessage;
		this._timeoutInterval = timeout;
		if (eagerStart) this.startTimer();
	}
	/**
	* Returns the current state of the promise.
	* @returns 'pending' | 'fulfilled' | 'rejected'
	*/
	get state() {
		return this._state;
	}
	/**
	*
	* @param onfulfilled - (optional) The callback to execute when the promise is fulfilled.
	* @param onrejected  - (optional) The callback to execute when the promise is rejected.
	* @returns
	*/
	then(onfulfilled, onrejected) {
		return __awaiter$42(this, void 0, void 0, function* () {
			return this._promise.then(onfulfilled, onrejected);
		});
	}
	/**
	*
	* @param onrejected - (optional) The callback to execute when the promise is rejected.
	* @returns
	*/
	catch(onrejected) {
		return __awaiter$42(this, void 0, void 0, function* () {
			return this._promise.catch(onrejected);
		});
	}
	/**
	*
	* @param onfinally - (optional) The callback to execute when the promise is settled (fulfilled or rejected).
	* @returns
	*/
	finally(onfinally) {
		return __awaiter$42(this, void 0, void 0, function* () {
			return this._promise.finally(onfinally);
		});
	}
	/**
	* Resolves the current promise.
	* @param value - The value to resolve the promise with.
	*/
	resolve(value) {
		this._resolve(value);
		this._state = "fulfilled";
		this._clearTimeout();
	}
	/**
	* Rejects the current promise.
	* @param reason - The reason to reject the promise with.
	*/
	reject(reason) {
		this._reject(reason);
		this._state = "rejected";
		this._clearTimeout();
	}
	/**
	* Starts the timeout timer for the promise.
	*/
	startTimer() {
		if (this._timeoutInterval && this._timeoutInterval > 0) this._timeoutId = setTimeout(this._checkTimeout.bind(this), this._timeoutInterval);
	}
	_checkTimeout() {
		if (this._state === "pending" && this._timeoutId) this.reject(new OperationTimeoutError(this._timeoutMessage));
	}
	_clearTimeout() {
		if (this._timeoutId) clearTimeout(this._timeoutId);
	}
};
_a$2 = Symbol.toStringTag;

//#endregion
//#region ../../node_modules/.pnpm/web3-utils@4.3.3/node_modules/web3-utils/lib/esm/chunk_response_parser.js
var ChunkResponseParser = class {
	constructor(eventEmitter, autoReconnect) {
		this.eventEmitter = eventEmitter;
		this.autoReconnect = autoReconnect;
		this.chunkTimeout = 1e3 * 15;
	}
	clearQueues() {
		if (typeof this._clearQueues === "function") this._clearQueues();
	}
	onError(clearQueues) {
		this._clearQueues = clearQueues;
	}
	parseResponse(data) {
		const returnValues = [];
		const dechunkedData = data.replace(/\}[\n\r]?\{/g, "}|--|{").replace(/\}\][\n\r]?\[\{/g, "}]|--|[{").replace(/\}[\n\r]?\[\{/g, "}|--|[{").replace(/\}\][\n\r]?\{/g, "}]|--|{").split("|--|");
		dechunkedData.forEach((_chunkData) => {
			let chunkData = _chunkData;
			if (this.lastChunk) chunkData = this.lastChunk + chunkData;
			let result;
			try {
				result = JSON.parse(chunkData);
			} catch (e) {
				this.lastChunk = chunkData;
				if (this.lastChunkTimeout) clearTimeout(this.lastChunkTimeout);
				this.lastChunkTimeout = setTimeout(() => {
					if (this.autoReconnect) return;
					this.clearQueues();
					this.eventEmitter.emit("error", new InvalidResponseError({
						id: 1,
						jsonrpc: "2.0",
						error: {
							code: 2,
							message: "Chunk timeout"
						}
					}));
				}, this.chunkTimeout);
				return;
			}
			clearTimeout(this.lastChunkTimeout);
			this.lastChunk = void 0;
			if (result) returnValues.push(result);
		});
		return returnValues;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-utils@4.3.3/node_modules/web3-utils/lib/esm/web3_eip1193_provider.js
var __awaiter$41 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
/**
* This is an abstract class, which extends {@link Web3BaseProvider} class. This class is used to implement a provider that adheres to the EIP-1193 standard for Ethereum providers.
*/
var Eip1193Provider = class extends Web3BaseProvider {
	constructor() {
		super(...arguments);
		this._eventEmitter = new import_eventemitter3.default();
		this._chainId = "";
		this._accounts = [];
	}
	_getChainId() {
		return __awaiter$41(this, void 0, void 0, function* () {
			var _a$3;
			const data = yield this.request(toPayload({
				method: "eth_chainId",
				params: []
			}));
			return (_a$3 = data === null || data === void 0 ? void 0 : data.result) !== null && _a$3 !== void 0 ? _a$3 : "";
		});
	}
	_getAccounts() {
		return __awaiter$41(this, void 0, void 0, function* () {
			var _a$3;
			const data = yield this.request(toPayload({
				method: "eth_accounts",
				params: []
			}));
			return (_a$3 = data === null || data === void 0 ? void 0 : data.result) !== null && _a$3 !== void 0 ? _a$3 : [];
		});
	}
	_onConnect() {
		Promise.all([this._getChainId().then((chainId) => {
			if (chainId !== this._chainId) {
				this._chainId = chainId;
				this._eventEmitter.emit("chainChanged", this._chainId);
			}
		}).catch((err) => {
			console.error(err);
		}), this._getAccounts().then((accounts) => {
			if (!(this._accounts.length === accounts.length && accounts.every((v) => accounts.includes(v)))) {
				this._accounts = accounts;
				this._onAccountsChanged();
			}
		}).catch((err) => {
			console.error(err);
		})]).then(() => this._eventEmitter.emit("connect", { chainId: this._chainId })).catch((err) => {
			console.error(err);
		});
	}
	_onDisconnect(code, data) {
		this._eventEmitter.emit("disconnect", new EIP1193ProviderRpcError(code, data));
	}
	_onAccountsChanged() {
		this._eventEmitter.emit("accountsChanged", this._accounts);
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-utils@4.3.3/node_modules/web3-utils/lib/esm/socket_provider.js
var __awaiter$40 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
const DEFAULT_RECONNECTION_OPTIONS = {
	autoReconnect: true,
	delay: 5e3,
	maxAttempts: 5
};
const NORMAL_CLOSE_CODE = 1e3;
var SocketProvider = class extends Eip1193Provider {
	get SocketConnection() {
		return this._socketConnection;
	}
	/**
	* This is an abstract class for implementing a socket provider (e.g. WebSocket, IPC). It extends the EIP-1193 provider {@link EIP1193Provider}.
	* @param socketPath - The path to the socket (e.g. /ipc/path or ws://localhost:8546)
	* @param socketOptions - The options for the socket connection. Its type is supposed to be specified in the inherited classes.
	* @param reconnectOptions - The options for the socket reconnection {@link ReconnectOptions}
	*/
	constructor(socketPath, socketOptions, reconnectOptions) {
		super();
		this._connectionStatus = "connecting";
		this._onMessageHandler = this._onMessage.bind(this);
		this._onOpenHandler = this._onConnect.bind(this);
		this._onCloseHandler = this._onCloseEvent.bind(this);
		this._onErrorHandler = this._onError.bind(this);
		if (!this._validateProviderPath(socketPath)) throw new InvalidClientError(socketPath);
		this._socketPath = socketPath;
		this._socketOptions = socketOptions;
		this._reconnectOptions = Object.assign(Object.assign({}, DEFAULT_RECONNECTION_OPTIONS), reconnectOptions !== null && reconnectOptions !== void 0 ? reconnectOptions : {});
		this._pendingRequestsQueue = /* @__PURE__ */ new Map();
		this._sentRequestsQueue = /* @__PURE__ */ new Map();
		this._init();
		this.connect();
		this.chunkResponseParser = new ChunkResponseParser(this._eventEmitter, this._reconnectOptions.autoReconnect);
		this.chunkResponseParser.onError(() => {
			this._clearQueues();
		});
		this.isReconnecting = false;
	}
	_init() {
		this._reconnectAttempts = 0;
	}
	/**
	* Try to establish a connection to the socket
	*/
	connect() {
		try {
			this._openSocketConnection();
			this._connectionStatus = "connecting";
			this._addSocketListeners();
		} catch (e) {
			if (!this.isReconnecting) {
				this._connectionStatus = "disconnected";
				if (e && e.message) throw new ConnectionError(`Error while connecting to ${this._socketPath}. Reason: ${e.message}`);
				else throw new InvalidClientError(this._socketPath);
			} else setImmediate(() => {
				this._reconnect();
			});
		}
	}
	_validateProviderPath(path) {
		return !!path;
	}
	/**
	*
	* @returns the pendingRequestQueue size
	*/
	getPendingRequestQueueSize() {
		return this._pendingRequestsQueue.size;
	}
	/**
	*
	* @returns the sendPendingRequests size
	*/
	getSentRequestsQueueSize() {
		return this._sentRequestsQueue.size;
	}
	/**
	*
	* @returns `true` if the socket supports subscriptions
	*/
	supportsSubscriptions() {
		return true;
	}
	on(type, listener) {
		this._eventEmitter.on(type, listener);
	}
	once(type, listener) {
		this._eventEmitter.once(type, listener);
	}
	removeListener(type, listener) {
		this._eventEmitter.removeListener(type, listener);
	}
	_onDisconnect(code, data) {
		this._connectionStatus = "disconnected";
		super._onDisconnect(code, data);
	}
	/**
	* Disconnects the socket
	* @param code - The code to be sent to the server
	* @param data - The data to be sent to the server
	*/
	disconnect(code, data) {
		const disconnectCode = code !== null && code !== void 0 ? code : NORMAL_CLOSE_CODE;
		this._removeSocketListeners();
		if (this.getStatus() !== "disconnected") this._closeSocketConnection(disconnectCode, data);
		this._onDisconnect(disconnectCode, data);
	}
	/**
	* Safely disconnects the socket, async and waits for request size to be 0 before disconnecting
	* @param forceDisconnect - If true, will clear queue after 5 attempts of waiting for both pending and sent queue to be 0
	* @param ms - Determines the ms of setInterval
	* @param code - The code to be sent to the server
	* @param data - The data to be sent to the server
	*/
	safeDisconnect(code_1, data_1) {
		return __awaiter$40(this, arguments, void 0, function* (code, data, forceDisconnect = false, ms = 1e3) {
			let retryAttempt = 0;
			const checkQueue = () => __awaiter$40(this, void 0, void 0, function* () {
				return new Promise((resolve) => {
					const interval = setInterval(() => {
						if (forceDisconnect && retryAttempt >= 5) this.clearQueues();
						if (this.getPendingRequestQueueSize() === 0 && this.getSentRequestsQueueSize() === 0) {
							clearInterval(interval);
							resolve(true);
						}
						retryAttempt += 1;
					}, ms);
				});
			});
			yield checkQueue();
			this.disconnect(code, data);
		});
	}
	/**
	* Removes all listeners for the specified event type.
	* @param type - The event type to remove the listeners for
	*/
	removeAllListeners(type) {
		this._eventEmitter.removeAllListeners(type);
	}
	_onError(event) {
		if (this.isReconnecting) this._reconnect();
		else this._eventEmitter.emit("error", event);
	}
	/**
	* Resets the socket, removing all listeners and pending requests
	*/
	reset() {
		this._sentRequestsQueue.clear();
		this._pendingRequestsQueue.clear();
		this._init();
		this._removeSocketListeners();
		this._addSocketListeners();
	}
	_reconnect() {
		if (this.isReconnecting) return;
		this.isReconnecting = true;
		if (this._sentRequestsQueue.size > 0) this._sentRequestsQueue.forEach((request, key) => {
			request.deferredPromise.reject(new PendingRequestsOnReconnectingError());
			this._sentRequestsQueue.delete(key);
		});
		if (this._reconnectAttempts < this._reconnectOptions.maxAttempts) {
			this._reconnectAttempts += 1;
			setTimeout(() => {
				this._removeSocketListeners();
				this.connect();
				this.isReconnecting = false;
			}, this._reconnectOptions.delay);
		} else {
			this.isReconnecting = false;
			this._clearQueues();
			this._removeSocketListeners();
			this._eventEmitter.emit("error", new MaxAttemptsReachedOnReconnectingError(this._reconnectOptions.maxAttempts));
		}
	}
	/**
	*  Creates a request object to be sent to the server
	*/
	request(request) {
		return __awaiter$40(this, void 0, void 0, function* () {
			if (isNullish(this._socketConnection)) throw new Error("Connection is undefined");
			if (this.getStatus() === "disconnected") this.connect();
			const requestId = isBatchRequest(request) ? request[0].id : request.id;
			if (!requestId) throw new Web3WSProviderError("Request Id not defined");
			if (this._sentRequestsQueue.has(requestId)) throw new RequestAlreadySentError(requestId);
			const deferredPromise = new Web3DeferredPromise();
			deferredPromise.catch((error) => {
				this._eventEmitter.emit("error", error);
			});
			const reqItem = {
				payload: request,
				deferredPromise
			};
			if (this.getStatus() === "connecting") {
				this._pendingRequestsQueue.set(requestId, reqItem);
				return reqItem.deferredPromise;
			}
			this._sentRequestsQueue.set(requestId, reqItem);
			try {
				this._sendToSocket(reqItem.payload);
			} catch (error) {
				this._sentRequestsQueue.delete(requestId);
				this._eventEmitter.emit("error", error);
			}
			return deferredPromise;
		});
	}
	_onConnect() {
		this._connectionStatus = "connected";
		this._reconnectAttempts = 0;
		super._onConnect();
		this._sendPendingRequests();
	}
	_sendPendingRequests() {
		for (const [id, value] of this._pendingRequestsQueue.entries()) try {
			this._sendToSocket(value.payload);
			this._pendingRequestsQueue.delete(id);
			this._sentRequestsQueue.set(id, value);
		} catch (error) {
			this._pendingRequestsQueue.delete(id);
			this._eventEmitter.emit("error", error);
		}
	}
	_onMessage(event) {
		const responses = this._parseResponses(event);
		if (isNullish(responses) || responses.length === 0) return;
		for (const response of responses) {
			if (isResponseWithNotification(response) && response.method.endsWith("_subscription")) {
				this._eventEmitter.emit("message", response);
				return;
			}
			const requestId = isBatchResponse(response) ? response[0].id : response.id;
			const requestItem = this._sentRequestsQueue.get(requestId);
			if (!requestItem) return;
			if (isBatchResponse(response) || isResponseWithResult(response) || isResponseWithError(response)) {
				this._eventEmitter.emit("message", response);
				requestItem.deferredPromise.resolve(response);
			}
			this._sentRequestsQueue.delete(requestId);
		}
	}
	clearQueues(event) {
		this._clearQueues(event);
	}
	_clearQueues(event) {
		if (this._pendingRequestsQueue.size > 0) this._pendingRequestsQueue.forEach((request, key) => {
			request.deferredPromise.reject(new ConnectionNotOpenError(event));
			this._pendingRequestsQueue.delete(key);
		});
		if (this._sentRequestsQueue.size > 0) this._sentRequestsQueue.forEach((request, key) => {
			request.deferredPromise.reject(new ConnectionNotOpenError(event));
			this._sentRequestsQueue.delete(key);
		});
		this._removeSocketListeners();
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-utils@4.3.3/node_modules/web3-utils/lib/esm/index.js
var esm_exports = {};
__export(esm_exports, {
	ChunkResponseParser: () => ChunkResponseParser,
	Eip1193Provider: () => Eip1193Provider,
	EventEmitter: () => EventEmitter,
	SocketProvider: () => SocketProvider,
	Web3DeferredPromise: () => Web3DeferredPromise,
	asciiToHex: () => asciiToHex,
	bytesToHex: () => bytesToHex,
	bytesToUint8Array: () => bytesToUint8Array,
	checkAddressCheckSum: () => checkAddressCheckSum$1,
	compareBlockNumbers: () => compareBlockNumbers,
	convert: () => convert,
	convertScalarValue: () => convertScalarValue,
	encodePacked: () => encodePacked,
	ethUnitMap: () => ethUnitMap,
	format: () => format,
	fromAscii: () => fromAscii,
	fromDecimal: () => fromDecimal,
	fromTwosComplement: () => fromTwosComplement,
	fromUtf8: () => fromUtf8,
	fromWei: () => fromWei,
	getStorageSlotNumForLongString: () => getStorageSlotNumForLongString,
	hexToAscii: () => hexToAscii,
	hexToBytes: () => hexToBytes,
	hexToNumber: () => hexToNumber,
	hexToNumberString: () => hexToNumberString,
	hexToString: () => hexToString,
	hexToUtf8: () => hexToUtf8,
	isAddress: () => isAddress$1,
	isBatchRequest: () => isBatchRequest,
	isBatchResponse: () => isBatchResponse,
	isBloom: () => isBloom$1,
	isContractAddressInBloom: () => isContractAddressInBloom$1,
	isContractInitOptions: () => isContractInitOptions,
	isDataFormat: () => isDataFormat,
	isHex: () => isHex$1,
	isHexStrict: () => isHexStrict$1,
	isInBloom: () => isInBloom$1,
	isNullish: () => isNullish,
	isPromise: () => isPromise,
	isResponseRpcError: () => isResponseRpcError,
	isResponseWithError: () => isResponseWithError,
	isResponseWithNotification: () => isResponseWithNotification,
	isResponseWithResult: () => isResponseWithResult,
	isSubscriptionResult: () => isSubscriptionResult,
	isTopic: () => isTopic$1,
	isTopicInBloom: () => isTopicInBloom$1,
	isUint8Array: () => isUint8Array,
	isUserEthereumAddressInBloom: () => isUserEthereumAddressInBloom$1,
	isValidResponse: () => isValidResponse,
	jsonRpc: () => json_rpc_exports,
	keccak256: () => keccak256Wrapper,
	keccak256Wrapper: () => keccak256Wrapper,
	leftPad: () => leftPad,
	mergeDeep: () => mergeDeep,
	numberToHex: () => numberToHex,
	padLeft: () => padLeft,
	padRight: () => padRight,
	pollTillDefined: () => pollTillDefined,
	pollTillDefinedAndReturnIntervalId: () => pollTillDefinedAndReturnIntervalId,
	processSolidityEncodePackedArgs: () => processSolidityEncodePackedArgs,
	randomBytes: () => randomBytes,
	randomHex: () => randomHex,
	rejectIfConditionAtInterval: () => rejectIfConditionAtInterval,
	rejectIfTimeout: () => rejectIfTimeout,
	rightPad: () => rightPad,
	setRequestIdStart: () => setRequestIdStart,
	sha3: () => sha3,
	sha3Raw: () => sha3Raw,
	soliditySha3: () => soliditySha3,
	soliditySha3Raw: () => soliditySha3Raw,
	stringToHex: () => stringToHex,
	toAscii: () => toAscii,
	toBatchPayload: () => toBatchPayload,
	toBigInt: () => toBigInt,
	toBool: () => toBool,
	toChecksumAddress: () => toChecksumAddress,
	toDecimal: () => toDecimal,
	toHex: () => toHex,
	toNumber: () => toNumber,
	toPayload: () => toPayload,
	toTwosComplement: () => toTwosComplement,
	toUtf8: () => toUtf8,
	toWei: () => toWei,
	uint8ArrayConcat: () => uint8ArrayConcat,
	uint8ArrayEquals: () => uint8ArrayEquals,
	utf8ToBytes: () => utf8ToBytes,
	utf8ToHex: () => utf8ToHex,
	uuidV4: () => uuidV4,
	validateResponse: () => validateResponse,
	waitWithTimeout: () => waitWithTimeout
});

//#endregion
//#region ../../node_modules/.pnpm/web3-core@4.7.1/node_modules/web3-core/lib/esm/web3_event_emitter.js
var Web3EventEmitter = class {
	constructor() {
		this._emitter = new EventEmitter();
	}
	on(eventName, fn) {
		this._emitter.on(eventName, fn);
	}
	once(eventName, fn) {
		this._emitter.once(eventName, fn);
	}
	off(eventName, fn) {
		this._emitter.off(eventName, fn);
	}
	emit(eventName, params) {
		this._emitter.emit(eventName, params);
	}
	listenerCount(eventName) {
		return this._emitter.listenerCount(eventName);
	}
	listeners(eventName) {
		return this._emitter.listeners(eventName);
	}
	eventNames() {
		return this._emitter.eventNames();
	}
	removeAllListeners() {
		return this._emitter.removeAllListeners();
	}
	setMaxListenerWarningThreshold(maxListenersWarningThreshold) {
		this._emitter.setMaxListeners(maxListenersWarningThreshold);
	}
	getMaxListeners() {
		return this._emitter.getMaxListeners();
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-core@4.7.1/node_modules/web3-core/lib/esm/web3_config.js
var Web3ConfigEvent;
(function(Web3ConfigEvent$1) {
	Web3ConfigEvent$1["CONFIG_CHANGE"] = "CONFIG_CHANGE";
})(Web3ConfigEvent || (Web3ConfigEvent = {}));
var Web3Config = class extends Web3EventEmitter {
	constructor(options) {
		super();
		this.config = {
			handleRevert: false,
			defaultAccount: void 0,
			defaultBlock: "latest",
			transactionBlockTimeout: 50,
			transactionConfirmationBlocks: 24,
			transactionPollingInterval: 1e3,
			transactionPollingTimeout: 750 * 1e3,
			transactionReceiptPollingInterval: void 0,
			transactionSendTimeout: 750 * 1e3,
			transactionConfirmationPollingInterval: void 0,
			blockHeaderTimeout: 10,
			maxListenersWarningThreshold: 100,
			contractDataInputFill: "data",
			defaultNetworkId: void 0,
			defaultChain: "mainnet",
			defaultHardfork: "london",
			defaultCommon: void 0,
			defaultTransactionType: "0x2",
			defaultMaxPriorityFeePerGas: toHex(25e8),
			enableExperimentalFeatures: {
				useSubscriptionWhenCheckingBlockTimeout: false,
				useRpcCallSpecification: false
			},
			transactionBuilder: void 0,
			transactionTypeParser: void 0,
			customTransactionSchema: void 0,
			defaultReturnFormat: DEFAULT_RETURN_FORMAT,
			ignoreGasPricing: false
		};
		this.setConfig(options !== null && options !== void 0 ? options : {});
	}
	setConfig(options) {
		const keys = Object.keys(options);
		for (const key of keys) {
			this._triggerConfigChange(key, options[key]);
			if (!isNullish(options[key]) && typeof options[key] === "number" && key === "maxListenersWarningThreshold") this.setMaxListenerWarningThreshold(Number(options[key]));
		}
		Object.assign(this.config, options);
	}
	/**
	* The `handleRevert` options property returns the revert reason string if enabled for the following methods:
	* - web3.eth.sendTransaction()
	* - web3.eth.call()
	* - myContract.methods.myMethod().call()
	* - myContract.methods.myMethod().send()
	* Default is `false`.
	*
	* `Note`: At the moment `handleRevert` is only supported for `sendTransaction` and not for `sendSignedTransaction`
	*/
	get handleRevert() {
		return this.config.handleRevert;
	}
	/**
	* Will set the handleRevert
	*/
	set handleRevert(val) {
		this._triggerConfigChange("handleRevert", val);
		this.config.handleRevert = val;
	}
	/**
	* The `contractDataInputFill` options property will allow you to set the hash of the method signature and encoded parameters to the property
	* either `data`, `input` or both within your contract.
	* This will affect the contracts send, call and estimateGas methods
	* Default is `data`.
	*/
	get contractDataInputFill() {
		return this.config.contractDataInputFill;
	}
	/**
	* Will set the contractDataInputFill
	*/
	set contractDataInputFill(val) {
		this._triggerConfigChange("contractDataInputFill", val);
		this.config.contractDataInputFill = val;
	}
	/**
	* This default address is used as the default `from` property, if no `from` property is specified in for the following methods:
	* - web3.eth.sendTransaction()
	* - web3.eth.call()
	* - myContract.methods.myMethod().call()
	* - myContract.methods.myMethod().send()
	*/
	get defaultAccount() {
		return this.config.defaultAccount;
	}
	/**
	* Will set the default account.
	*/
	set defaultAccount(val) {
		this._triggerConfigChange("defaultAccount", val);
		this.config.defaultAccount = val;
	}
	/**
	* The default block is used for certain methods. You can override it by passing in the defaultBlock as last parameter. The default value is `"latest"`.
	* - web3.eth.getBalance()
	* - web3.eth.getCode()
	* - web3.eth.getTransactionCount()
	* - web3.eth.getStorageAt()
	* - web3.eth.call()
	* - myContract.methods.myMethod().call()
	*/
	get defaultBlock() {
		return this.config.defaultBlock;
	}
	/**
	* Will set the default block.
	*
	* - A block number
	* - `"earliest"` - String: The genesis block
	* - `"latest"` - String: The latest block (current head of the blockchain)
	* - `"pending"` - String: The currently mined block (including pending transactions)
	* - `"finalized"` - String: (For POS networks) The finalized block is one which has been accepted as canonical by greater than 2/3 of validators
	* - `"safe"` - String: (For POS networks) The safe head block is one which under normal network conditions, is expected to be included in the canonical chain. Under normal network conditions the safe head and the actual tip of the chain will be equivalent (with safe head trailing only by a few seconds). Safe heads will be less likely to be reorged than the proof of work network's latest blocks.
	*/
	set defaultBlock(val) {
		this._triggerConfigChange("defaultBlock", val);
		this.config.defaultBlock = val;
	}
	/**
	* The time used to wait for Ethereum Node to return the sent transaction result.
	* Note: If the RPC call stuck at the Node and therefor timed-out, the transaction may still be pending or even mined by the Network. We recommend checking the pending transactions in such a case.
	* Default is `750` seconds (12.5 minutes).
	*/
	get transactionSendTimeout() {
		return this.config.transactionSendTimeout;
	}
	/**
	* Will set the transactionSendTimeout.
	*/
	set transactionSendTimeout(val) {
		this._triggerConfigChange("transactionSendTimeout", val);
		this.config.transactionSendTimeout = val;
	}
	/**
	* The `transactionBlockTimeout` is used over socket-based connections. This option defines the amount of new blocks it should wait until the first confirmation happens, otherwise the PromiEvent rejects with a timeout error.
	* Default is `50`.
	*/
	get transactionBlockTimeout() {
		return this.config.transactionBlockTimeout;
	}
	/**
	* Will set the transactionBlockTimeout.
	*/
	set transactionBlockTimeout(val) {
		this._triggerConfigChange("transactionBlockTimeout", val);
		this.config.transactionBlockTimeout = val;
	}
	/**
	* This defines the number of blocks it requires until a transaction is considered confirmed.
	* Default is `24`.
	*/
	get transactionConfirmationBlocks() {
		return this.config.transactionConfirmationBlocks;
	}
	/**
	* Will set the transactionConfirmationBlocks.
	*/
	set transactionConfirmationBlocks(val) {
		this._triggerConfigChange("transactionConfirmationBlocks", val);
		this.config.transactionConfirmationBlocks = val;
	}
	/**
	* Used over HTTP connections. This option defines the number of seconds between Web3 calls for a receipt which confirms that a transaction was mined by the network.
	* Default is `1000` ms.
	*/
	get transactionPollingInterval() {
		return this.config.transactionPollingInterval;
	}
	/**
	* Will set the transactionPollingInterval.
	*/
	set transactionPollingInterval(val) {
		this._triggerConfigChange("transactionPollingInterval", val);
		this.config.transactionPollingInterval = val;
		this.transactionReceiptPollingInterval = val;
		this.transactionConfirmationPollingInterval = val;
	}
	/**
	* Used over HTTP connections. This option defines the number of seconds Web3 will wait for a receipt which confirms that a transaction was mined by the network. Note: If this method times out, the transaction may still be pending.
	* Default is `750` seconds (12.5 minutes).
	*/
	get transactionPollingTimeout() {
		return this.config.transactionPollingTimeout;
	}
	/**
	* Will set the transactionPollingTimeout.
	*/
	set transactionPollingTimeout(val) {
		this._triggerConfigChange("transactionPollingTimeout", val);
		this.config.transactionPollingTimeout = val;
	}
	/**
	* The `transactionPollingInterval` is used over HTTP connections. This option defines the number of seconds between Web3 calls for a receipt which confirms that a transaction was mined by the network.
	* Default is `undefined`
	*/
	get transactionReceiptPollingInterval() {
		return this.config.transactionReceiptPollingInterval;
	}
	/**
	* Will set the transactionReceiptPollingInterval
	*/
	set transactionReceiptPollingInterval(val) {
		this._triggerConfigChange("transactionReceiptPollingInterval", val);
		this.config.transactionReceiptPollingInterval = val;
	}
	get transactionConfirmationPollingInterval() {
		return this.config.transactionConfirmationPollingInterval;
	}
	set transactionConfirmationPollingInterval(val) {
		this._triggerConfigChange("transactionConfirmationPollingInterval", val);
		this.config.transactionConfirmationPollingInterval = val;
	}
	/**
	* The blockHeaderTimeout is used over socket-based connections. This option defines the amount seconds it should wait for `'newBlockHeaders'` event before falling back to polling to fetch transaction receipt.
	* Default is `10` seconds.
	*/
	get blockHeaderTimeout() {
		return this.config.blockHeaderTimeout;
	}
	/**
	* Will set the blockHeaderTimeout
	*/
	set blockHeaderTimeout(val) {
		this._triggerConfigChange("blockHeaderTimeout", val);
		this.config.blockHeaderTimeout = val;
	}
	/**
	* The enableExperimentalFeatures is used to enable trying new experimental features that are still not fully implemented or not fully tested or still have some related issues.
	* Default is `false` for every feature.
	*/
	get enableExperimentalFeatures() {
		return this.config.enableExperimentalFeatures;
	}
	/**
	* Will set the enableExperimentalFeatures
	*/
	set enableExperimentalFeatures(val) {
		this._triggerConfigChange("enableExperimentalFeatures", val);
		this.config.enableExperimentalFeatures = val;
	}
	get maxListenersWarningThreshold() {
		return this.config.maxListenersWarningThreshold;
	}
	set maxListenersWarningThreshold(val) {
		this._triggerConfigChange("maxListenersWarningThreshold", val);
		this.setMaxListenerWarningThreshold(val);
		this.config.maxListenersWarningThreshold = val;
	}
	get defaultReturnFormat() {
		return this.config.defaultReturnFormat;
	}
	set defaultReturnFormat(val) {
		this._triggerConfigChange("defaultReturnFormat", val);
		this.config.defaultReturnFormat = val;
	}
	get defaultNetworkId() {
		return this.config.defaultNetworkId;
	}
	set defaultNetworkId(val) {
		this._triggerConfigChange("defaultNetworkId", val);
		this.config.defaultNetworkId = val;
	}
	get defaultChain() {
		return this.config.defaultChain;
	}
	set defaultChain(val) {
		if (!isNullish(this.config.defaultCommon) && !isNullish(this.config.defaultCommon.baseChain) && val !== this.config.defaultCommon.baseChain) throw new ConfigChainMismatchError(this.config.defaultChain, val);
		this._triggerConfigChange("defaultChain", val);
		this.config.defaultChain = val;
	}
	/**
	* Will return the default hardfork. Default is `london`
	* The default hardfork property can be one of the following:
	* - `chainstart`
	* - `homestead`
	* - `dao`
	* - `tangerineWhistle`
	* - `spuriousDragon`
	* - `byzantium`
	* - `constantinople`
	* - `petersburg`
	* - `istanbul`
	* - `berlin`
	* - `london`
	* - 'arrowGlacier',
	* - 'tangerineWhistle',
	* - 'muirGlacier'
	*
	*/
	get defaultHardfork() {
		return this.config.defaultHardfork;
	}
	/**
	* Will set the default hardfork.
	*
	*/
	set defaultHardfork(val) {
		if (!isNullish(this.config.defaultCommon) && !isNullish(this.config.defaultCommon.hardfork) && val !== this.config.defaultCommon.hardfork) throw new ConfigHardforkMismatchError(this.config.defaultCommon.hardfork, val);
		this._triggerConfigChange("defaultHardfork", val);
		this.config.defaultHardfork = val;
	}
	/**
	*
	* Will get the default common property
	* The default common property does contain the following Common object:
	* - `customChain` - `Object`: The custom chain properties
	* 	- `name` - `string`: (optional) The name of the chain
	* 	- `networkId` - `number`: Network ID of the custom chain
	* 	- `chainId` - `number`: Chain ID of the custom chain
	* - `baseChain` - `string`: (optional) mainnet, goerli, kovan, rinkeby, or ropsten
	* - `hardfork` - `string`: (optional) chainstart, homestead, dao, tangerineWhistle, spuriousDragon, byzantium, constantinople, petersburg, istanbul, berlin, or london
	* Default is `undefined`.
	*
	*/
	get defaultCommon() {
		return this.config.defaultCommon;
	}
	/**
	* Will set the default common property
	*
	*/
	set defaultCommon(val) {
		if (!isNullish(this.config.defaultHardfork) && !isNullish(val) && !isNullish(val.hardfork) && this.config.defaultHardfork !== val.hardfork) throw new ConfigHardforkMismatchError(this.config.defaultHardfork, val.hardfork);
		if (!isNullish(this.config.defaultChain) && !isNullish(val) && !isNullish(val.baseChain) && this.config.defaultChain !== val.baseChain) throw new ConfigChainMismatchError(this.config.defaultChain, val.baseChain);
		this._triggerConfigChange("defaultCommon", val);
		this.config.defaultCommon = val;
	}
	/**
	*  Will get the ignoreGasPricing property. When true, the gasPrice, maxPriorityFeePerGas, and maxFeePerGas will not be autofilled in the transaction object.
	*  Useful when you want wallets to handle gas pricing.
	*/
	get ignoreGasPricing() {
		return this.config.ignoreGasPricing;
	}
	set ignoreGasPricing(val) {
		this._triggerConfigChange("ignoreGasPricing", val);
		this.config.ignoreGasPricing = val;
	}
	get defaultTransactionType() {
		return this.config.defaultTransactionType;
	}
	set defaultTransactionType(val) {
		this._triggerConfigChange("defaultTransactionType", val);
		this.config.defaultTransactionType = val;
	}
	get defaultMaxPriorityFeePerGas() {
		return this.config.defaultMaxPriorityFeePerGas;
	}
	set defaultMaxPriorityFeePerGas(val) {
		this._triggerConfigChange("defaultMaxPriorityFeePerGas", val);
		this.config.defaultMaxPriorityFeePerGas = val;
	}
	get transactionBuilder() {
		return this.config.transactionBuilder;
	}
	set transactionBuilder(val) {
		this._triggerConfigChange("transactionBuilder", val);
		this.config.transactionBuilder = val;
	}
	get transactionTypeParser() {
		return this.config.transactionTypeParser;
	}
	set transactionTypeParser(val) {
		this._triggerConfigChange("transactionTypeParser", val);
		this.config.transactionTypeParser = val;
	}
	get customTransactionSchema() {
		return this.config.customTransactionSchema;
	}
	set customTransactionSchema(schema) {
		this._triggerConfigChange("customTransactionSchema", schema);
		this.config.customTransactionSchema = schema;
	}
	_triggerConfigChange(config, newValue) {
		this.emit(Web3ConfigEvent.CONFIG_CHANGE, {
			name: config,
			oldValue: this.config[config],
			newValue
		});
	}
};

//#endregion
//#region ../../node_modules/.pnpm/cross-fetch@4.1.0/node_modules/cross-fetch/dist/browser-ponyfill.js
var require_browser_ponyfill = __commonJS({ "../../node_modules/.pnpm/cross-fetch@4.1.0/node_modules/cross-fetch/dist/browser-ponyfill.js"(exports, module) {
	var __global__ = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || typeof global !== "undefined" && global;
	var __globalThis__ = function() {
		function F() {
			this.fetch = false;
			this.DOMException = __global__.DOMException;
		}
		F.prototype = __global__;
		return new F();
	}();
	(function(globalThis$1) {
		var irrelevant = function(exports$1) {
			var g = typeof globalThis$1 !== "undefined" && globalThis$1 || typeof self !== "undefined" && self || typeof global !== "undefined" && global || {};
			var support = {
				searchParams: "URLSearchParams" in g,
				iterable: "Symbol" in g && "iterator" in Symbol,
				blob: "FileReader" in g && "Blob" in g && function() {
					try {
						new Blob();
						return true;
					} catch (e) {
						return false;
					}
				}(),
				formData: "FormData" in g,
				arrayBuffer: "ArrayBuffer" in g
			};
			function isDataView(obj) {
				return obj && DataView.prototype.isPrototypeOf(obj);
			}
			if (support.arrayBuffer) {
				var viewClasses = [
					"[object Int8Array]",
					"[object Uint8Array]",
					"[object Uint8ClampedArray]",
					"[object Int16Array]",
					"[object Uint16Array]",
					"[object Int32Array]",
					"[object Uint32Array]",
					"[object Float32Array]",
					"[object Float64Array]"
				];
				var isArrayBufferView = ArrayBuffer.isView || function(obj) {
					return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
				};
			}
			function normalizeName(name$1) {
				if (typeof name$1 !== "string") name$1 = String(name$1);
				if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name$1) || name$1 === "") throw new TypeError("Invalid character in header field name: \"" + name$1 + "\"");
				return name$1.toLowerCase();
			}
			function normalizeValue(value) {
				if (typeof value !== "string") value = String(value);
				return value;
			}
			function iteratorFor(items) {
				var iterator = { next: function() {
					var value = items.shift();
					return {
						done: value === void 0,
						value
					};
				} };
				if (support.iterable) iterator[Symbol.iterator] = function() {
					return iterator;
				};
				return iterator;
			}
			function Headers(headers) {
				this.map = {};
				if (headers instanceof Headers) headers.forEach(function(value, name$1) {
					this.append(name$1, value);
				}, this);
				else if (Array.isArray(headers)) headers.forEach(function(header) {
					if (header.length != 2) throw new TypeError("Headers constructor: expected name/value pair to be length 2, found" + header.length);
					this.append(header[0], header[1]);
				}, this);
				else if (headers) Object.getOwnPropertyNames(headers).forEach(function(name$1) {
					this.append(name$1, headers[name$1]);
				}, this);
			}
			Headers.prototype.append = function(name$1, value) {
				name$1 = normalizeName(name$1);
				value = normalizeValue(value);
				var oldValue = this.map[name$1];
				this.map[name$1] = oldValue ? oldValue + ", " + value : value;
			};
			Headers.prototype["delete"] = function(name$1) {
				delete this.map[normalizeName(name$1)];
			};
			Headers.prototype.get = function(name$1) {
				name$1 = normalizeName(name$1);
				return this.has(name$1) ? this.map[name$1] : null;
			};
			Headers.prototype.has = function(name$1) {
				return this.map.hasOwnProperty(normalizeName(name$1));
			};
			Headers.prototype.set = function(name$1, value) {
				this.map[normalizeName(name$1)] = normalizeValue(value);
			};
			Headers.prototype.forEach = function(callback, thisArg) {
				for (var name$1 in this.map) if (this.map.hasOwnProperty(name$1)) callback.call(thisArg, this.map[name$1], name$1, this);
			};
			Headers.prototype.keys = function() {
				var items = [];
				this.forEach(function(value, name$1) {
					items.push(name$1);
				});
				return iteratorFor(items);
			};
			Headers.prototype.values = function() {
				var items = [];
				this.forEach(function(value) {
					items.push(value);
				});
				return iteratorFor(items);
			};
			Headers.prototype.entries = function() {
				var items = [];
				this.forEach(function(value, name$1) {
					items.push([name$1, value]);
				});
				return iteratorFor(items);
			};
			if (support.iterable) Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
			function consumed(body) {
				if (body._noBody) return;
				if (body.bodyUsed) return Promise.reject(/* @__PURE__ */ new TypeError("Already read"));
				body.bodyUsed = true;
			}
			function fileReaderReady(reader) {
				return new Promise(function(resolve, reject) {
					reader.onload = function() {
						resolve(reader.result);
					};
					reader.onerror = function() {
						reject(reader.error);
					};
				});
			}
			function readBlobAsArrayBuffer(blob) {
				var reader = new FileReader();
				var promise = fileReaderReady(reader);
				reader.readAsArrayBuffer(blob);
				return promise;
			}
			function readBlobAsText(blob) {
				var reader = new FileReader();
				var promise = fileReaderReady(reader);
				var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
				var encoding = match ? match[1] : "utf-8";
				reader.readAsText(blob, encoding);
				return promise;
			}
			function readArrayBufferAsText(buf) {
				var view = new Uint8Array(buf);
				var chars = new Array(view.length);
				for (var i = 0; i < view.length; i++) chars[i] = String.fromCharCode(view[i]);
				return chars.join("");
			}
			function bufferClone(buf) {
				if (buf.slice) return buf.slice(0);
				else {
					var view = new Uint8Array(buf.byteLength);
					view.set(new Uint8Array(buf));
					return view.buffer;
				}
			}
			function Body() {
				this.bodyUsed = false;
				this._initBody = function(body) {
					this.bodyUsed = this.bodyUsed;
					this._bodyInit = body;
					if (!body) {
						this._noBody = true;
						this._bodyText = "";
					} else if (typeof body === "string") this._bodyText = body;
					else if (support.blob && Blob.prototype.isPrototypeOf(body)) this._bodyBlob = body;
					else if (support.formData && FormData.prototype.isPrototypeOf(body)) this._bodyFormData = body;
					else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) this._bodyText = body.toString();
					else if (support.arrayBuffer && support.blob && isDataView(body)) {
						this._bodyArrayBuffer = bufferClone(body.buffer);
						this._bodyInit = new Blob([this._bodyArrayBuffer]);
					} else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) this._bodyArrayBuffer = bufferClone(body);
					else this._bodyText = body = Object.prototype.toString.call(body);
					if (!this.headers.get("content-type")) {
						if (typeof body === "string") this.headers.set("content-type", "text/plain;charset=UTF-8");
						else if (this._bodyBlob && this._bodyBlob.type) this.headers.set("content-type", this._bodyBlob.type);
						else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
					}
				};
				if (support.blob) this.blob = function() {
					var rejected = consumed(this);
					if (rejected) return rejected;
					if (this._bodyBlob) return Promise.resolve(this._bodyBlob);
					else if (this._bodyArrayBuffer) return Promise.resolve(new Blob([this._bodyArrayBuffer]));
					else if (this._bodyFormData) throw new Error("could not read FormData body as blob");
					else return Promise.resolve(new Blob([this._bodyText]));
				};
				this.arrayBuffer = function() {
					if (this._bodyArrayBuffer) {
						var isConsumed = consumed(this);
						if (isConsumed) return isConsumed;
						else if (ArrayBuffer.isView(this._bodyArrayBuffer)) return Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset, this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength));
						else return Promise.resolve(this._bodyArrayBuffer);
					} else if (support.blob) return this.blob().then(readBlobAsArrayBuffer);
					else throw new Error("could not read as ArrayBuffer");
				};
				this.text = function() {
					var rejected = consumed(this);
					if (rejected) return rejected;
					if (this._bodyBlob) return readBlobAsText(this._bodyBlob);
					else if (this._bodyArrayBuffer) return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
					else if (this._bodyFormData) throw new Error("could not read FormData body as text");
					else return Promise.resolve(this._bodyText);
				};
				if (support.formData) this.formData = function() {
					return this.text().then(decode$1);
				};
				this.json = function() {
					return this.text().then(JSON.parse);
				};
				return this;
			}
			var methods = [
				"CONNECT",
				"DELETE",
				"GET",
				"HEAD",
				"OPTIONS",
				"PATCH",
				"POST",
				"PUT",
				"TRACE"
			];
			function normalizeMethod(method) {
				var upcased = method.toUpperCase();
				return methods.indexOf(upcased) > -1 ? upcased : method;
			}
			function Request(input, options) {
				if (!(this instanceof Request)) throw new TypeError("Please use the \"new\" operator, this DOM object constructor cannot be called as a function.");
				options = options || {};
				var body = options.body;
				if (input instanceof Request) {
					if (input.bodyUsed) throw new TypeError("Already read");
					this.url = input.url;
					this.credentials = input.credentials;
					if (!options.headers) this.headers = new Headers(input.headers);
					this.method = input.method;
					this.mode = input.mode;
					this.signal = input.signal;
					if (!body && input._bodyInit != null) {
						body = input._bodyInit;
						input.bodyUsed = true;
					}
				} else this.url = String(input);
				this.credentials = options.credentials || this.credentials || "same-origin";
				if (options.headers || !this.headers) this.headers = new Headers(options.headers);
				this.method = normalizeMethod(options.method || this.method || "GET");
				this.mode = options.mode || this.mode || null;
				this.signal = options.signal || this.signal || function() {
					if ("AbortController" in g) {
						var ctrl = new AbortController();
						return ctrl.signal;
					}
				}();
				this.referrer = null;
				if ((this.method === "GET" || this.method === "HEAD") && body) throw new TypeError("Body not allowed for GET or HEAD requests");
				this._initBody(body);
				if (this.method === "GET" || this.method === "HEAD") {
					if (options.cache === "no-store" || options.cache === "no-cache") {
						var reParamSearch = /([?&])_=[^&]*/;
						if (reParamSearch.test(this.url)) this.url = this.url.replace(reParamSearch, "$1_=" + (/* @__PURE__ */ new Date()).getTime());
						else {
							var reQueryString = /\?/;
							this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + (/* @__PURE__ */ new Date()).getTime();
						}
					}
				}
			}
			Request.prototype.clone = function() {
				return new Request(this, { body: this._bodyInit });
			};
			function decode$1(body) {
				var form = new FormData();
				body.trim().split("&").forEach(function(bytes$1) {
					if (bytes$1) {
						var split$2 = bytes$1.split("=");
						var name$1 = split$2.shift().replace(/\+/g, " ");
						var value = split$2.join("=").replace(/\+/g, " ");
						form.append(decodeURIComponent(name$1), decodeURIComponent(value));
					}
				});
				return form;
			}
			function parseHeaders(rawHeaders) {
				var headers = new Headers();
				var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
				preProcessedHeaders.split("\r").map(function(header) {
					return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
				}).forEach(function(line) {
					var parts = line.split(":");
					var key = parts.shift().trim();
					if (key) {
						var value = parts.join(":").trim();
						try {
							headers.append(key, value);
						} catch (error) {
							console.warn("Response " + error.message);
						}
					}
				});
				return headers;
			}
			Body.call(Request.prototype);
			function Response(bodyInit, options) {
				if (!(this instanceof Response)) throw new TypeError("Please use the \"new\" operator, this DOM object constructor cannot be called as a function.");
				if (!options) options = {};
				this.type = "default";
				this.status = options.status === void 0 ? 200 : options.status;
				if (this.status < 200 || this.status > 599) throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
				this.ok = this.status >= 200 && this.status < 300;
				this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
				this.headers = new Headers(options.headers);
				this.url = options.url || "";
				this._initBody(bodyInit);
			}
			Body.call(Response.prototype);
			Response.prototype.clone = function() {
				return new Response(this._bodyInit, {
					status: this.status,
					statusText: this.statusText,
					headers: new Headers(this.headers),
					url: this.url
				});
			};
			Response.error = function() {
				var response = new Response(null, {
					status: 200,
					statusText: ""
				});
				response.ok = false;
				response.status = 0;
				response.type = "error";
				return response;
			};
			var redirectStatuses = [
				301,
				302,
				303,
				307,
				308
			];
			Response.redirect = function(url, status) {
				if (redirectStatuses.indexOf(status) === -1) throw new RangeError("Invalid status code");
				return new Response(null, {
					status,
					headers: { location: url }
				});
			};
			exports$1.DOMException = g.DOMException;
			try {
				new exports$1.DOMException();
			} catch (err) {
				exports$1.DOMException = function(message, name$1) {
					this.message = message;
					this.name = name$1;
					var error = Error(message);
					this.stack = error.stack;
				};
				exports$1.DOMException.prototype = Object.create(Error.prototype);
				exports$1.DOMException.prototype.constructor = exports$1.DOMException;
			}
			function fetch$1(input, init$2) {
				return new Promise(function(resolve, reject) {
					var request = new Request(input, init$2);
					if (request.signal && request.signal.aborted) return reject(new exports$1.DOMException("Aborted", "AbortError"));
					var xhr = new XMLHttpRequest();
					function abortXhr() {
						xhr.abort();
					}
					xhr.onload = function() {
						var options = {
							statusText: xhr.statusText,
							headers: parseHeaders(xhr.getAllResponseHeaders() || "")
						};
						if (request.url.indexOf("file://") === 0 && (xhr.status < 200 || xhr.status > 599)) options.status = 200;
						else options.status = xhr.status;
						options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
						var body = "response" in xhr ? xhr.response : xhr.responseText;
						setTimeout(function() {
							resolve(new Response(body, options));
						}, 0);
					};
					xhr.onerror = function() {
						setTimeout(function() {
							reject(/* @__PURE__ */ new TypeError("Network request failed"));
						}, 0);
					};
					xhr.ontimeout = function() {
						setTimeout(function() {
							reject(/* @__PURE__ */ new TypeError("Network request timed out"));
						}, 0);
					};
					xhr.onabort = function() {
						setTimeout(function() {
							reject(new exports$1.DOMException("Aborted", "AbortError"));
						}, 0);
					};
					function fixUrl(url) {
						try {
							return url === "" && g.location.href ? g.location.href : url;
						} catch (e) {
							return url;
						}
					}
					xhr.open(request.method, fixUrl(request.url), true);
					if (request.credentials === "include") xhr.withCredentials = true;
					else if (request.credentials === "omit") xhr.withCredentials = false;
					if ("responseType" in xhr) {
						if (support.blob) xhr.responseType = "blob";
						else if (support.arrayBuffer) xhr.responseType = "arraybuffer";
					}
					if (init$2 && typeof init$2.headers === "object" && !(init$2.headers instanceof Headers || g.Headers && init$2.headers instanceof g.Headers)) {
						var names = [];
						Object.getOwnPropertyNames(init$2.headers).forEach(function(name$1) {
							names.push(normalizeName(name$1));
							xhr.setRequestHeader(name$1, normalizeValue(init$2.headers[name$1]));
						});
						request.headers.forEach(function(value, name$1) {
							if (names.indexOf(name$1) === -1) xhr.setRequestHeader(name$1, value);
						});
					} else request.headers.forEach(function(value, name$1) {
						xhr.setRequestHeader(name$1, value);
					});
					if (request.signal) {
						request.signal.addEventListener("abort", abortXhr);
						xhr.onreadystatechange = function() {
							if (xhr.readyState === 4) request.signal.removeEventListener("abort", abortXhr);
						};
					}
					xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
				});
			}
			fetch$1.polyfill = true;
			if (!g.fetch) {
				g.fetch = fetch$1;
				g.Headers = Headers;
				g.Request = Request;
				g.Response = Response;
			}
			exports$1.Headers = Headers;
			exports$1.Request = Request;
			exports$1.Response = Response;
			exports$1.fetch = fetch$1;
			return exports$1;
		}({});
	})(__globalThis__);
	__globalThis__.fetch.ponyfill = true;
	delete __globalThis__.fetch.polyfill;
	var ctx = __global__.fetch ? __global__ : __globalThis__;
	exports = ctx.fetch;
	exports.default = ctx.fetch;
	exports.fetch = ctx.fetch;
	exports.Headers = ctx.Headers;
	exports.Request = ctx.Request;
	exports.Response = ctx.Response;
	module.exports = exports;
} });

//#endregion
//#region ../../node_modules/.pnpm/web3-providers-http@4.2.0/node_modules/web3-providers-http/lib/esm/index.js
var import_browser_ponyfill = __toESM(require_browser_ponyfill(), 1);
var __awaiter$39 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
var HttpProvider = class HttpProvider extends Web3BaseProvider {
	constructor(clientUrl, httpProviderOptions) {
		super();
		if (!HttpProvider.validateClientUrl(clientUrl)) throw new InvalidClientError(clientUrl);
		this.clientUrl = clientUrl;
		this.httpProviderOptions = httpProviderOptions;
	}
	static validateClientUrl(clientUrl) {
		return typeof clientUrl === "string" ? /^http(s)?:\/\//i.test(clientUrl) : false;
	}
	getStatus() {
		throw new MethodNotImplementedError();
	}
	supportsSubscriptions() {
		return false;
	}
	request(payload, requestOptions) {
		var _a$3;
		return __awaiter$39(this, void 0, void 0, function* () {
			const providerOptionsCombined = Object.assign(Object.assign({}, (_a$3 = this.httpProviderOptions) === null || _a$3 === void 0 ? void 0 : _a$3.providerOptions), requestOptions);
			const response = yield (0, import_browser_ponyfill.default)(this.clientUrl, Object.assign(Object.assign({}, providerOptionsCombined), {
				method: "POST",
				headers: Object.assign(Object.assign({}, providerOptionsCombined.headers), { "Content-Type": "application/json" }),
				body: JSON.stringify(payload)
			}));
			if (!response.ok) throw new ResponseError(yield response.json(), void 0, void 0, response.status);
			return yield response.json();
		});
	}
	on() {
		throw new MethodNotImplementedError();
	}
	removeListener() {
		throw new MethodNotImplementedError();
	}
	once() {
		throw new MethodNotImplementedError();
	}
	removeAllListeners() {
		throw new MethodNotImplementedError();
	}
	connect() {
		throw new MethodNotImplementedError();
	}
	disconnect() {
		throw new MethodNotImplementedError();
	}
	reset() {
		throw new MethodNotImplementedError();
	}
	reconnect() {
		throw new MethodNotImplementedError();
	}
};

//#endregion
//#region ../../node_modules/.pnpm/isomorphic-ws@5.0.0_ws@8.18.2/node_modules/isomorphic-ws/browser.js
var ws = null;
if (typeof WebSocket !== "undefined") ws = WebSocket;
else if (typeof MozWebSocket !== "undefined") ws = MozWebSocket;
else if (typeof global !== "undefined") ws = global.WebSocket || global.MozWebSocket;
else if (typeof window !== "undefined") ws = window.WebSocket || window.MozWebSocket;
else if (typeof self !== "undefined") ws = self.WebSocket || self.MozWebSocket;
var browser_default = ws;

//#endregion
//#region ../../node_modules/.pnpm/web3-providers-ws@4.0.8/node_modules/web3-providers-ws/lib/esm/index.js
/**
* Use WebSocketProvider to connect to a Node using a WebSocket connection, i.e. over the `ws` or `wss` protocol.
*
* @example
* ```ts
* const provider = new WebSocketProvider(
* 		`ws://localhost:8545`,
* 		{
* 			headers: {
* 				// to provide the API key if the Node requires the key to be inside the `headers` for example:
* 				'x-api-key': '<Api key>',
* 			},
* 		},
* 		{
* 			delay: 500,
* 			autoReconnect: true,
* 			maxAttempts: 10,
* 		},
* 	);
* ```
*
* The second and the third parameters are both optional. And you can for example, the second parameter could be an empty object or undefined.
*  * @example
* ```ts
* const provider = new WebSocketProvider(
* 		`ws://localhost:8545`,
* 		{},
* 		{
* 			delay: 500,
* 			autoReconnect: true,
* 			maxAttempts: 10,
* 		},
* 	);
* ```
*/
var WebSocketProvider = class extends SocketProvider {
	/**
	* This is a class used for Web Socket connections. It extends the abstract class SocketProvider {@link SocketProvider} that extends the EIP-1193 provider {@link EIP1193Provider}.
	* @param socketPath - The path to the Web Socket.
	* @param socketOptions - The options for the Web Socket client.
	* @param reconnectOptions - The options for the socket reconnection {@link ReconnectOptions}
	*/
	constructor(socketPath, socketOptions, reconnectOptions) {
		super(socketPath, socketOptions, reconnectOptions);
	}
	_validateProviderPath(providerUrl) {
		return typeof providerUrl === "string" ? /^ws(s)?:\/\//i.test(providerUrl) : false;
	}
	getStatus() {
		if (this._socketConnection && !isNullish(this._socketConnection)) switch (this._socketConnection.readyState) {
			case this._socketConnection.CONNECTING: return "connecting";
			case this._socketConnection.OPEN: return "connected";
			default: return "disconnected";
		}
		return "disconnected";
	}
	_openSocketConnection() {
		this._socketConnection = new browser_default(this._socketPath, void 0, this._socketOptions && Object.keys(this._socketOptions).length === 0 ? void 0 : this._socketOptions);
	}
	_closeSocketConnection(code, data) {
		var _a$3;
		(_a$3 = this._socketConnection) === null || _a$3 === void 0 || _a$3.close(code, data);
	}
	_sendToSocket(payload) {
		var _a$3;
		if (this.getStatus() === "disconnected") throw new ConnectionNotOpenError();
		(_a$3 = this._socketConnection) === null || _a$3 === void 0 || _a$3.send(JSON.stringify(payload));
	}
	_parseResponses(event) {
		return this.chunkResponseParser.parseResponse(event.data);
	}
	_addSocketListeners() {
		var _a$3, _b, _c, _d;
		(_a$3 = this._socketConnection) === null || _a$3 === void 0 || _a$3.addEventListener("open", this._onOpenHandler);
		(_b = this._socketConnection) === null || _b === void 0 || _b.addEventListener("message", this._onMessageHandler);
		(_c = this._socketConnection) === null || _c === void 0 || _c.addEventListener("close", (e) => this._onCloseHandler(e));
		(_d = this._socketConnection) === null || _d === void 0 || _d.addEventListener("error", this._onErrorHandler);
	}
	_removeSocketListeners() {
		var _a$3, _b, _c;
		(_a$3 = this._socketConnection) === null || _a$3 === void 0 || _a$3.removeEventListener("message", this._onMessageHandler);
		(_b = this._socketConnection) === null || _b === void 0 || _b.removeEventListener("open", this._onOpenHandler);
		(_c = this._socketConnection) === null || _c === void 0 || _c.removeEventListener("close", this._onCloseHandler);
	}
	_onCloseEvent(event) {
		var _a$3;
		if (this._reconnectOptions.autoReconnect && (![1e3, 1001].includes(event.code) || !event.wasClean)) {
			this._reconnect();
			return;
		}
		this._clearQueues(event);
		this._removeSocketListeners();
		this._onDisconnect(event.code, event.reason);
		(_a$3 = this._socketConnection) === null || _a$3 === void 0 || _a$3.removeEventListener("error", this._onErrorHandler);
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-core@4.7.1/node_modules/web3-core/lib/esm/utils.js
const isWeb3Provider = (provider) => Web3BaseProvider.isWeb3Provider(provider);
const isLegacyRequestProvider = (provider) => typeof provider !== "string" && "request" in provider && provider.request.constructor.name === "Function";
const isEIP1193Provider = (provider) => typeof provider !== "string" && "request" in provider && provider.request.constructor.name === "AsyncFunction";
const isLegacySendProvider = (provider) => typeof provider !== "string" && "send" in provider;
const isLegacySendAsyncProvider = (provider) => typeof provider !== "string" && "sendAsync" in provider;
const isSupportedProvider = (provider) => provider && (isWeb3Provider(provider) || isEIP1193Provider(provider) || isLegacyRequestProvider(provider) || isLegacySendAsyncProvider(provider) || isLegacySendProvider(provider));
const isSupportSubscriptions = (provider) => {
	if (provider && "supportsSubscriptions" in provider) return provider.supportsSubscriptions();
	if (provider && typeof provider !== "string" && "on" in provider) return true;
	return false;
};

//#endregion
//#region ../../node_modules/.pnpm/web3-core@4.7.1/node_modules/web3-core/lib/esm/web3_request_manager.js
var __awaiter$38 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
var Web3RequestManagerEvent;
(function(Web3RequestManagerEvent$1) {
	Web3RequestManagerEvent$1["PROVIDER_CHANGED"] = "PROVIDER_CHANGED";
	Web3RequestManagerEvent$1["BEFORE_PROVIDER_CHANGE"] = "BEFORE_PROVIDER_CHANGE";
})(Web3RequestManagerEvent || (Web3RequestManagerEvent = {}));
const availableProviders = {
	HttpProvider,
	WebsocketProvider: WebSocketProvider
};
var Web3RequestManager = class Web3RequestManager extends Web3EventEmitter {
	constructor(provider, useRpcCallSpecification, requestManagerMiddleware) {
		super();
		if (!isNullish(provider)) this.setProvider(provider);
		this.useRpcCallSpecification = useRpcCallSpecification;
		if (!isNullish(requestManagerMiddleware)) this.middleware = requestManagerMiddleware;
	}
	/**
	* Will return all available providers
	*/
	static get providers() {
		return availableProviders;
	}
	/**
	* Will return the current provider.
	*
	* @returns Returns the current provider
	*/
	get provider() {
		return this._provider;
	}
	/**
	* Will return all available providers
	*/
	get providers() {
		return availableProviders;
	}
	/**
	* Use to set provider. Provider can be a provider instance or a string.
	*
	* @param provider - The provider to set
	*/
	setProvider(provider) {
		let newProvider;
		if (provider && typeof provider === "string" && this.providers) if (/^http(s)?:\/\//i.test(provider)) newProvider = new this.providers.HttpProvider(provider);
		else if (/^ws(s)?:\/\//i.test(provider)) newProvider = new this.providers.WebsocketProvider(provider);
		else throw new ProviderError(`Can't autodetect provider for "${provider}"`);
		else if (isNullish(provider)) newProvider = void 0;
		else newProvider = provider;
		this.emit(Web3RequestManagerEvent.BEFORE_PROVIDER_CHANGE, this._provider);
		this._provider = newProvider;
		this.emit(Web3RequestManagerEvent.PROVIDER_CHANGED, this._provider);
		return true;
	}
	setMiddleware(requestManagerMiddleware) {
		this.middleware = requestManagerMiddleware;
	}
	/**
	*
	* Will execute a request
	*
	* @param request - {@link Web3APIRequest} The request to send
	*
	* @returns The response of the request {@link ResponseType}. If there is error
	* in the response, will throw an error
	*/
	send(request) {
		return __awaiter$38(this, void 0, void 0, function* () {
			const requestObj = Object.assign({}, request);
			let response = yield this._sendRequest(requestObj);
			if (!isNullish(this.middleware)) response = yield this.middleware.processResponse(response);
			if (isResponseWithResult(response)) return response.result;
			throw new ResponseError(response);
		});
	}
	/**
	* Same as send, but, will execute a batch of requests
	*
	* @param request {@link JsonRpcBatchRequest} The batch request to send
	*/
	sendBatch(request) {
		return __awaiter$38(this, void 0, void 0, function* () {
			const response = yield this._sendRequest(request);
			return response;
		});
	}
	_sendRequest(request) {
		return __awaiter$38(this, void 0, void 0, function* () {
			const { provider } = this;
			if (isNullish(provider)) throw new ProviderError("Provider not available. Use `.setProvider` or `.provider=` to initialize the provider.");
			let payload = isBatchRequest(request) ? toBatchPayload(request) : toPayload(request);
			if (!isNullish(this.middleware)) payload = yield this.middleware.processRequest(payload);
			if (isWeb3Provider(provider)) {
				let response;
				try {
					response = yield provider.request(payload);
				} catch (error) {
					response = error;
				}
				return this._processJsonRpcResponse(payload, response, {
					legacy: false,
					error: false
				});
			}
			if (isEIP1193Provider(provider)) return provider.request(payload).then((res) => this._processJsonRpcResponse(payload, res, {
				legacy: true,
				error: false
			})).catch((error) => this._processJsonRpcResponse(payload, error, {
				legacy: true,
				error: true
			}));
			if (isLegacyRequestProvider(provider)) return new Promise((resolve, reject) => {
				const rejectWithError = (err) => {
					reject(this._processJsonRpcResponse(payload, err, {
						legacy: true,
						error: true
					}));
				};
				const resolveWithResponse = (response) => resolve(this._processJsonRpcResponse(payload, response, {
					legacy: true,
					error: false
				}));
				const result = provider.request(payload, (err, response) => {
					if (err) return rejectWithError(err);
					return resolveWithResponse(response);
				});
				if (isPromise(result)) {
					const responsePromise = result;
					responsePromise.then(resolveWithResponse).catch((error) => {
						try {
							const processedError = this._processJsonRpcResponse(payload, error, {
								legacy: true,
								error: true
							});
							reject(processedError);
						} catch (processingError) {
							reject(processingError);
						}
					});
				}
			});
			if (isLegacySendProvider(provider)) return new Promise((resolve, reject) => {
				provider.send(payload, (err, response) => {
					if (err) return reject(this._processJsonRpcResponse(payload, err, {
						legacy: true,
						error: true
					}));
					if (isNullish(response)) throw new ResponseError({}, "Got a \"nullish\" response from provider.");
					return resolve(this._processJsonRpcResponse(payload, response, {
						legacy: true,
						error: false
					}));
				});
			});
			if (isLegacySendAsyncProvider(provider)) return provider.sendAsync(payload).then((response) => this._processJsonRpcResponse(payload, response, {
				legacy: true,
				error: false
			})).catch((error) => this._processJsonRpcResponse(payload, error, {
				legacy: true,
				error: true
			}));
			throw new ProviderError("Provider does not have a request or send method to use.");
		});
	}
	_processJsonRpcResponse(payload, response, { legacy, error }) {
		if (isNullish(response)) return this._buildResponse(payload, null, error);
		if (isResponseWithError(response)) {
			if (this.useRpcCallSpecification && isResponseRpcError(response)) {
				const rpcErrorResponse = response;
				if (rpcErrorsMap.get(rpcErrorResponse.error.code)) {
					const Err = rpcErrorsMap.get(rpcErrorResponse.error.code).error;
					throw new Err(rpcErrorResponse);
				} else throw new RpcError(rpcErrorResponse);
			} else if (!Web3RequestManager._isReverted(response)) throw new InvalidResponseError(response, payload);
		}
		if (isResponseWithResult(response)) return response;
		if (response instanceof Error) {
			Web3RequestManager._isReverted(response);
			throw response;
		}
		if (!legacy && isBatchRequest(payload) && isBatchResponse(response)) return response;
		if (legacy && !error && isBatchRequest(payload)) return response;
		if (legacy && error && isBatchRequest(payload)) throw response;
		if (legacy && !isResponseWithError(response) && !isResponseWithResult(response)) return this._buildResponse(payload, response, error);
		if (isBatchRequest(payload) && !Array.isArray(response)) throw new ResponseError(response, "Got normal response for a batch request.");
		if (!isBatchRequest(payload) && Array.isArray(response)) throw new ResponseError(response, "Got batch response for a normal request.");
		throw new ResponseError(response, "Invalid response");
	}
	static _isReverted(response) {
		let error;
		if (isResponseWithError(response)) error = response.error;
		else if (response instanceof Error) error = response;
		if (error === null || error === void 0 ? void 0 : error.message.includes("revert")) throw new ContractExecutionError(error);
		return false;
	}
	_buildResponse(payload, response, error) {
		const res = {
			jsonrpc: "2.0",
			id: isBatchRequest(payload) ? payload[0].id : "id" in payload ? payload.id : null
		};
		if (error) return Object.assign(Object.assign({}, res), { error: response });
		return Object.assign(Object.assign({}, res), { result: response });
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-core@4.7.1/node_modules/web3-core/lib/esm/web3_subscription_manager.js
var __awaiter$37 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
var Web3SubscriptionManager = class {
	constructor(requestManager, registeredSubscriptions$1, tolerateUnlinkedSubscription = false) {
		this.requestManager = requestManager;
		this.registeredSubscriptions = registeredSubscriptions$1;
		this.tolerateUnlinkedSubscription = tolerateUnlinkedSubscription;
		this._subscriptions = /* @__PURE__ */ new Map();
		this.requestManager.on(Web3RequestManagerEvent.BEFORE_PROVIDER_CHANGE, () => __awaiter$37(this, void 0, void 0, function* () {
			yield this.unsubscribe();
		}));
		this.requestManager.on(Web3RequestManagerEvent.PROVIDER_CHANGED, () => {
			this.clear();
			this.listenToProviderEvents();
		});
		this.listenToProviderEvents();
	}
	listenToProviderEvents() {
		const providerAsWebProvider = this.requestManager.provider;
		if (!this.requestManager.provider || typeof (providerAsWebProvider === null || providerAsWebProvider === void 0 ? void 0 : providerAsWebProvider.supportsSubscriptions) === "function" && !(providerAsWebProvider === null || providerAsWebProvider === void 0 ? void 0 : providerAsWebProvider.supportsSubscriptions())) return;
		if (typeof this.requestManager.provider.on === "function") if (typeof this.requestManager.provider.request === "function") this.requestManager.provider.on("message", (message) => this.messageListener(message));
		else providerAsWebProvider.on("data", (data) => this.messageListener(data));
	}
	messageListener(data) {
		var _a$3, _b, _c;
		if (!data) throw new SubscriptionError("Should not call messageListener with no data. Type was");
		const subscriptionId = ((_a$3 = data.params) === null || _a$3 === void 0 ? void 0 : _a$3.subscription) || ((_b = data.data) === null || _b === void 0 ? void 0 : _b.subscription) || ((_c = data.id) === null || _c === void 0 ? void 0 : _c.toString(16));
		if (subscriptionId) {
			const sub = this._subscriptions.get(subscriptionId);
			sub === null || sub === void 0 || sub.processSubscriptionData(data);
		}
	}
	/**
	* Will create a new subscription
	*
	* @param name - The subscription you want to subscribe to
	* @param args - Optional additional parameters, depending on the subscription type
	* @param returnFormat- ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
	*
	* Will subscribe to a specific topic (note: name)
	* @returns The subscription object
	*/
	subscribe(name_1, args_1) {
		return __awaiter$37(this, arguments, void 0, function* (name$1, args, returnFormat = DEFAULT_RETURN_FORMAT) {
			const Klass = this.registeredSubscriptions[name$1];
			if (!Klass) throw new SubscriptionError("Invalid subscription type");
			const subscription = new Klass(args !== null && args !== void 0 ? args : void 0, {
				subscriptionManager: this,
				returnFormat
			});
			yield this.addSubscription(subscription);
			return subscription;
		});
	}
	/**
	* Will returns all subscriptions.
	*/
	get subscriptions() {
		return this._subscriptions;
	}
	/**
	*
	* Adds an instance of {@link Web3Subscription} and subscribes to it
	*
	* @param sub - A {@link Web3Subscription} object
	*/
	addSubscription(sub) {
		return __awaiter$37(this, void 0, void 0, function* () {
			if (!this.requestManager.provider) throw new ProviderError("Provider not available");
			if (!this.supportsSubscriptions()) throw new SubscriptionError("The current provider does not support subscriptions");
			if (sub.id && this._subscriptions.has(sub.id)) throw new SubscriptionError(`Subscription with id "${sub.id}" already exists`);
			yield sub.sendSubscriptionRequest();
			if (isNullish(sub.id)) throw new SubscriptionError("Subscription is not subscribed yet.");
			this._subscriptions.set(sub.id, sub);
			return sub.id;
		});
	}
	/**
	* Will clear a subscription
	*
	* @param id - The subscription of type {@link Web3Subscription}  to remove
	*/
	removeSubscription(sub) {
		return __awaiter$37(this, void 0, void 0, function* () {
			const { id } = sub;
			if (isNullish(id)) throw new SubscriptionError("Subscription is not subscribed yet. Or, had already been unsubscribed but not through the Subscription Manager.");
			if (!this._subscriptions.has(id) && !this.tolerateUnlinkedSubscription) throw new SubscriptionError(`Subscription with id "${id.toString()}" does not exists`);
			yield sub.sendUnsubscribeRequest();
			this._subscriptions.delete(id);
			return id;
		});
	}
	/**
	* Will unsubscribe all subscriptions that fulfill the condition
	*
	* @param condition - A function that access and `id` and a `subscription` and return `true` or `false`
	* @returns An array of all the un-subscribed subscriptions
	*/
	unsubscribe(condition) {
		return __awaiter$37(this, void 0, void 0, function* () {
			const result = [];
			for (const [id, sub] of this.subscriptions.entries()) if (!condition || typeof condition === "function" && condition({
				id,
				sub
			})) result.push(this.removeSubscription(sub));
			return Promise.all(result);
		});
	}
	/**
	* Clears all subscriptions
	*/
	clear() {
		this._subscriptions.clear();
	}
	/**
	* Check whether the current provider supports subscriptions.
	*
	* @returns `true` or `false` depending on if the current provider supports subscriptions
	*/
	supportsSubscriptions() {
		return isNullish(this.requestManager.provider) ? false : isSupportSubscriptions(this.requestManager.provider);
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-core@4.7.1/node_modules/web3-core/lib/esm/web3_subscriptions.js
var __awaiter$36 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
var Web3Subscription = class extends Web3EventEmitter {
	constructor(args, options) {
		var _a$3;
		super();
		this.args = args;
		const { requestManager } = options;
		const { subscriptionManager } = options;
		if (requestManager) this._subscriptionManager = new Web3SubscriptionManager(requestManager, {}, true);
		else this._subscriptionManager = subscriptionManager;
		this._returnFormat = (_a$3 = options === null || options === void 0 ? void 0 : options.returnFormat) !== null && _a$3 !== void 0 ? _a$3 : DEFAULT_RETURN_FORMAT;
	}
	get id() {
		return this._id;
	}
	get lastBlock() {
		return this._lastBlock;
	}
	subscribe() {
		return __awaiter$36(this, void 0, void 0, function* () {
			return this._subscriptionManager.addSubscription(this);
		});
	}
	processSubscriptionData(data) {
		var _a$3, _b;
		if (data === null || data === void 0 ? void 0 : data.data) this._processSubscriptionResult((_b = (_a$3 = data === null || data === void 0 ? void 0 : data.data) === null || _a$3 === void 0 ? void 0 : _a$3.result) !== null && _b !== void 0 ? _b : data === null || data === void 0 ? void 0 : data.data);
		else if (data && isResponseWithNotification(data)) this._processSubscriptionResult(data === null || data === void 0 ? void 0 : data.params.result);
	}
	sendSubscriptionRequest() {
		return __awaiter$36(this, void 0, void 0, function* () {
			this._id = yield this._subscriptionManager.requestManager.send({
				method: "eth_subscribe",
				params: this._buildSubscriptionParams()
			});
			this.emit("connected", this._id);
			return this._id;
		});
	}
	get returnFormat() {
		return this._returnFormat;
	}
	get subscriptionManager() {
		return this._subscriptionManager;
	}
	resubscribe() {
		return __awaiter$36(this, void 0, void 0, function* () {
			yield this.unsubscribe();
			yield this.subscribe();
		});
	}
	unsubscribe() {
		return __awaiter$36(this, void 0, void 0, function* () {
			if (!this.id) return;
			yield this._subscriptionManager.removeSubscription(this);
		});
	}
	sendUnsubscribeRequest() {
		return __awaiter$36(this, void 0, void 0, function* () {
			yield this._subscriptionManager.requestManager.send({
				method: "eth_unsubscribe",
				params: [this.id]
			});
			this._id = void 0;
		});
	}
	formatSubscriptionResult(data) {
		return data;
	}
	_processSubscriptionResult(data) {
		this.emit("data", this.formatSubscriptionResult(data));
	}
	_processSubscriptionError(error) {
		this.emit("error", error);
	}
	_buildSubscriptionParams() {
		throw new Error("Implement in the child class");
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/wallet.js
var __awaiter$35 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
/**
* Wallet is an in memory `wallet` that can hold multiple accounts.
* These accounts can be used when using web3.eth.sendTransaction() or web3.eth.contract.methods.contractfunction().send();
*
* For using Wallet functionality, install Web3 package using `npm i web3` or `yarn add web3`.
* After that, Wallet functionality will be available as mentioned below.
*
* ```ts
* import { Web3 } from 'web3';
* const web3 = new Web3('http://127.0.0.1:7545');
*
* const wallet = await web3.eth.accounts.wallet.create(2);
*
* const signature = wallet.at(0).sign("Test Data"); // use wallet
*
* // fund account before sending following transaction ...
*
* const receipt = await web3.eth.sendTransaction({ // internally sign transaction using wallet
*    from: wallet.at(0).address,
*    to: "0xdAC17F958D2ee523a2206206994597C13D831ec7",
*    value: 1
*    //....
* });
* ```
*/
var Wallet$1 = class Wallet$1 extends Web3BaseWallet {
	constructor() {
		super(...arguments);
		this._addressMap = /* @__PURE__ */ new Map();
		this._defaultKeyName = "web3js_wallet";
	}
	/**
	* Get the storage object of the browser
	*
	* @returns the storage
	*/
	static getStorage() {
		let storage;
		try {
			storage = window.localStorage;
			const x = "__storage_test__";
			storage.setItem(x, x);
			storage.removeItem(x);
			return storage;
		} catch (e) {
			return e && (e.code === 22 || e.code === 1014 || e.name === "QuotaExceededError" || e.name === "NS_ERROR_DOM_QUOTA_REACHED") && !isNullish$1(storage) && storage.length !== 0 ? storage : void 0;
		}
	}
	/**
	* Generates one or more accounts in the wallet. If wallets already exist they will not be overridden.
	*
	* @param numberOfAccounts - Number of accounts to create. Leave empty to create an empty wallet.
	* @returns The wallet
	* ```ts
	* web3.eth.accounts.wallet.create(2)
	* > Wallet(2) [
	*   {
	*     address: '0xde38310a42B751AE57d30cFFF4a0A3c52A442fCE',
	*     privateKey: '0x6422c9d28efdcbee93c1d32a5fc6fd6fa081b985487885296cf8c9bbb5872600',
	*     signTransaction: [Function: signTransaction],
	*     sign: [Function: sign],
	*     encrypt: [Function: encrypt]
	*   },
	*   {
	*     address: '0x766BF755246d924B1d017Fdb5390f38a60166691',
	*     privateKey: '0x756530f13c0eb636ebdda655335f5dea9921e3362e2e588b0ad59e556f7751f0',
	*     signTransaction: [Function: signTransaction],
	*     sign: [Function: sign],
	*     encrypt: [Function: encrypt]
	*   },
	*   _accountProvider: {
	*     create: [Function: create],
	*     privateKeyToAccount: [Function: privateKeyToAccount],
	*     decrypt: [Function: decrypt]
	*   },
	*   _addressMap: Map(2) {
	*     '0xde38310a42b751ae57d30cfff4a0a3c52a442fce' => 0,
	*     '0x766bf755246d924b1d017fdb5390f38a60166691' => 1
	*   },
	*   _defaultKeyName: 'web3js_wallet'
	* ]
	*
	* ```
	*/
	create(numberOfAccounts) {
		for (let i = 0; i < numberOfAccounts; i += 1) this.add(this._accountProvider.create());
		return this;
	}
	/**
	* Adds an account using a private key or account object to the wallet.
	*
	* @param account - A private key or account object
	* @returns The wallet
	*
	* ```ts
	* web3.eth.accounts.wallet.add('0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387');
	* > Wallet(1) [
	*   {
	*     address: '0x85D70633b90e03e0276B98880286D0D055685ed7',
	*     privateKey: '0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387',
	*     signTransaction: [Function: signTransaction],
	*     sign: [Function: sign],
	*     encrypt: [Function: encrypt]
	*   },
	*   _accountProvider: {
	*     create: [Function: create],
	*     privateKeyToAccount: [Function: privateKeyToAccount],
	*     decrypt: [Function: decrypt]
	*   },
	*   _addressMap: Map(1) { '0x85d70633b90e03e0276b98880286d0d055685ed7' => 0 },
	*   _defaultKeyName: 'web3js_wallet'
	* ]
	* ```
	*/
	add(account) {
		var _a$3;
		if (typeof account === "string") return this.add(this._accountProvider.privateKeyToAccount(account));
		let index = this.length;
		const existAccount = this.get(account.address);
		if (existAccount) {
			console.warn(`Account ${account.address.toLowerCase()} already exists.`);
			index = (_a$3 = this._addressMap.get(account.address.toLowerCase())) !== null && _a$3 !== void 0 ? _a$3 : index;
		}
		this._addressMap.set(account.address.toLowerCase(), index);
		this[index] = account;
		return this;
	}
	/**
	* Get the account of the wallet with either the index or public address.
	*
	* @param addressOrIndex - A string of the address or number index within the wallet.
	* @returns The account object or undefined if the account doesn't exist
	*/
	get(addressOrIndex) {
		if (typeof addressOrIndex === "string") {
			const index = this._addressMap.get(addressOrIndex.toLowerCase());
			if (!isNullish$1(index)) return this[index];
			return void 0;
		}
		return this[addressOrIndex];
	}
	/**
	* Removes an account from the wallet.
	*
	* @param addressOrIndex - The account address, or index in the wallet.
	* @returns true if the wallet was removed. false if it couldn't be found.
	* ```ts
	* web3.eth.accounts.wallet.add('0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387');
	*
	* web3.eth.accounts.wallet.remove('0x85D70633b90e03e0276B98880286D0D055685ed7');
	* > true
	* web3.eth.accounts.wallet
	* > Wallet(0) [
	* _accountProvider: {
	*   create: [Function: create],
	*   privateKeyToAccount: [Function: privateKeyToAccount],
	*   decrypt: [Function: decrypt]
	* },
	* _addressMap: Map(0) {},
	* _defaultKeyName: 'web3js_wallet'
	* ]
	* ```
	*/
	remove(addressOrIndex) {
		if (typeof addressOrIndex === "string") {
			const index = this._addressMap.get(addressOrIndex.toLowerCase());
			if (isNullish$1(index)) return false;
			this._addressMap.delete(addressOrIndex.toLowerCase());
			this.splice(index, 1);
			return true;
		}
		if (this[addressOrIndex]) {
			this.splice(addressOrIndex, 1);
			return true;
		}
		return false;
	}
	/**
	* Securely empties the wallet and removes all its accounts.
	* Use this with *caution as it will remove all accounts stored in local wallet.
	*
	* @returns The wallet object
	* ```ts
	*
	* web3.eth.accounts.wallet.clear();
	* > Wallet(0) [
	* _accountProvider: {
	*   create: [Function: create],
	*   privateKeyToAccount: [Function: privateKeyToAccount],
	*   decrypt: [Function: decrypt]
	* },
	* _addressMap: Map(0) {},
	* _defaultKeyName: 'web3js_wallet'
	* ]
	* ```
	*/
	clear() {
		this._addressMap.clear();
		this.length = 0;
		return this;
	}
	/**
	* Encrypts all wallet accounts to an array of encrypted keystore v3 objects.
	*
	* @param password - The password which will be used for encryption
	* @param options - encryption options
	* @returns An array of the encrypted keystore v3.
	*
	* ```ts
	* web3.eth.accounts.wallet.create(1)
	* web3.eth.accounts.wallet.encrypt("abc").then(console.log);
	* > [
	* '{"version":3,"id":"fa46e213-a7c3-4844-b903-dd14d39cc7db",
	* "address":"fa3e41a401609103c241431cbdee8623ae2a321a","crypto":
	* {"ciphertext":"8d179a911d6146ad2924e86bf493ed89b8ff3596ffec0816e761c542016ab13c",
	* "cipherparams":{"iv":"acc888c6cf4a19b86846cef0185a7164"},"cipher":"aes-128-ctr",
	* "kdf":"scrypt","kdfparams":{"n":8192,"r":8,"p":1,"dklen":32,"salt":"6a743c9b367d15f4758e4f3f3378ff0fd443708d1c64854e07588ea5331823ae"},
	* "mac":"410544c8307e3691fda305eb3722d82c3431f212a87daa119a21587d96698b57"}}'
	* ]
	* ```
	*/
	encrypt(password, options) {
		return __awaiter$35(this, void 0, void 0, function* () {
			return Promise.all(this.map((account) => __awaiter$35(this, void 0, void 0, function* () {
				return account.encrypt(password, options);
			})));
		});
	}
	/**
	* Decrypts keystore v3 objects.
	*
	* @param encryptedWallets - An array of encrypted keystore v3 objects to decrypt
	* @param password - The password to encrypt with
	* @param options - decrypt options for the wallets
	* @returns The decrypted wallet object
	*
	* ```ts
	* web3.eth.accounts.wallet.decrypt([
	* { version: 3,
	* id: '83191a81-aaca-451f-b63d-0c5f3b849289',
	* address: '06f702337909c06c82b09b7a22f0a2f0855d1f68',
	* crypto:
	* { ciphertext: '7d34deae112841fba86e3e6cf08f5398dda323a8e4d29332621534e2c4069e8d',
	*   cipherparams: { iv: '497f4d26997a84d570778eae874b2333' },
	*   cipher: 'aes-128-ctr',
	*   kdf: 'scrypt',
	*   kdfparams:
	*    { dklen: 32,
	*      salt: '208dd732a27aa4803bb760228dff18515d5313fd085bbce60594a3919ae2d88d',
	*      n: 262144,
	*      r: 8,
	*      p: 1 },
	*   mac: '0062a853de302513c57bfe3108ab493733034bf3cb313326f42cf26ea2619cf9' } },
	* { version: 3,
	* id: '7d6b91fa-3611-407b-b16b-396efb28f97e',
	* address: 'b5d89661b59a9af0b34f58d19138baa2de48baaf',
	* crypto:
	* { ciphertext: 'cb9712d1982ff89f571fa5dbef447f14b7e5f142232bd2a913aac833730eeb43',
	*   cipherparams: { iv: '8cccb91cb84e435437f7282ec2ffd2db' },
	*   cipher: 'aes-128-ctr',
	*   kdf: 'scrypt',
	*   kdfparams:
	*    { dklen: 32,
	*      salt: '08ba6736363c5586434cd5b895e6fe41ea7db4785bd9b901dedce77a1514e8b8',
	*      n: 262144,
	*      r: 8,
	*      p: 1 },
	*   mac: 'd2eb068b37e2df55f56fa97a2bf4f55e072bef0dd703bfd917717d9dc54510f0' } }
	* ], 'test').then(console.log)
	* > Wallet {
	*   _accountProvider: {
	*     create: [Function: create],
	*     privateKeyToAccount: [Function: privateKeyToAccount],
	*     decrypt: [Function: decrypt]
	*   },
	*   _defaultKeyName: 'web3js_wallet',
	*   _accounts: {
	*     '0x85d70633b90e03e0276b98880286d0d055685ed7': {
	*       address: '0x85D70633b90e03e0276B98880286D0D055685ed7',
	*       privateKey: '0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387',
	*       signTransaction: [Function: signTransaction],
	*       sign: [Function: sign],
	*       encrypt: [Function: encrypt]
	*     },
	*     '0x06f702337909c06c82b09b7a22f0a2f0855d1f68': {
	*       address: '0x06F702337909C06C82B09B7A22F0a2f0855d1F68',
	*       privateKey: '87a51da18900da7398b3bab03996833138f269f8f66dd1237b98df6b9ce14573',
	*       signTransaction: [Function: signTransaction],
	*       sign: [Function: sign],
	*       encrypt: [Function: encrypt]
	*     },
	*     '0xb5d89661b59a9af0b34f58d19138baa2de48baaf': {
	*       address: '0xB5d89661B59a9aF0b34f58D19138bAa2de48BAaf',
	*       privateKey: '7ee61c5282979aae9dd795bb6a54e8bdc2bfe009acb64eb9a67322eec3b3da6e',
	*       signTransaction: [Function: signTransaction],
	*       sign: [Function: sign],
	*       encrypt: [Function: encrypt]
	*     }
	*   }
	* }
	* ```
	*/
	decrypt(encryptedWallets, password, options) {
		return __awaiter$35(this, void 0, void 0, function* () {
			const results = yield Promise.all(encryptedWallets.map((wallet) => __awaiter$35(this, void 0, void 0, function* () {
				return this._accountProvider.decrypt(wallet, password, options);
			})));
			for (const res of results) this.add(res);
			return this;
		});
	}
	/**
	* Stores the wallet encrypted and as string in local storage.
	* **__NOTE:__** Browser only
	*
	* @param password - The password to encrypt the wallet
	* @param keyName - (optional) The key used for the local storage position, defaults to `"web3js_wallet"`.
	* @returns Will return boolean value true if saved properly
	* ```ts
	* web3.eth.accounts.wallet.save('test#!$');
	* >true
	* ```
	*/
	save(password, keyName) {
		return __awaiter$35(this, void 0, void 0, function* () {
			const storage = Wallet$1.getStorage();
			if (!storage) throw new Error("Local storage not available.");
			storage.setItem(keyName !== null && keyName !== void 0 ? keyName : this._defaultKeyName, JSON.stringify(yield this.encrypt(password)));
			return true;
		});
	}
	/**
	* Loads a wallet from local storage and decrypts it.
	* **__NOTE:__** Browser only
	*
	* @param password - The password to decrypt the wallet.
	* @param keyName - (optional)The key used for local storage position, defaults to `web3js_wallet"`
	* @returns Returns the wallet object
	*
	* ```ts
	* web3.eth.accounts.wallet.save('test#!$');
	* > true
	* web3.eth.accounts.wallet.load('test#!$');
	* { defaultKeyName: "web3js_wallet",
	*   length: 0,
	*   _accounts: Accounts {_requestManager: RequestManager, givenProvider: Proxy, providers: {…}, _provider: WebsocketProvider, …},
	*   [[Prototype]]: Object
	* }
	* ```
	*/
	load(password, keyName) {
		return __awaiter$35(this, void 0, void 0, function* () {
			const storage = Wallet$1.getStorage();
			if (!storage) throw new Error("Local storage not available.");
			const keystore = storage.getItem(keyName !== null && keyName !== void 0 ? keyName : this._defaultKeyName);
			if (keystore) yield this.decrypt(JSON.parse(keystore) || [], password);
			return this;
		});
	}
};

//#endregion
//#region ../../node_modules/.pnpm/ethereum-cryptography@2.2.1/node_modules/ethereum-cryptography/esm/aes.js
const crypto$1 = { web: crypto };
function validateOpt(key, iv, mode) {
	if (!mode.startsWith("aes-")) throw new Error(`AES submodule doesn't support mode ${mode}`);
	if (iv.length !== 16) throw new Error("AES: wrong IV length");
	if (mode.startsWith("aes-128") && key.length !== 16 || mode.startsWith("aes-256") && key.length !== 32) throw new Error("AES: wrong key length");
}
async function getBrowserKey(mode, key, iv) {
	if (!crypto$1.web) throw new Error("Browser crypto not available.");
	let keyMode;
	if (["aes-128-cbc", "aes-256-cbc"].includes(mode)) keyMode = "cbc";
	if (["aes-128-ctr", "aes-256-ctr"].includes(mode)) keyMode = "ctr";
	if (!keyMode) throw new Error("AES: unsupported mode");
	const wKey = await crypto$1.web.subtle.importKey("raw", key, {
		name: `AES-${keyMode.toUpperCase()}`,
		length: key.length * 8
	}, true, ["encrypt", "decrypt"]);
	return [wKey, {
		name: `aes-${keyMode}`,
		iv,
		counter: iv,
		length: 128
	}];
}
async function encrypt$1(msg, key, iv, mode = "aes-128-ctr", pkcs7PaddingEnabled = true) {
	validateOpt(key, iv, mode);
	if (crypto$1.web) {
		const [wKey, wOpt] = await getBrowserKey(mode, key, iv);
		const cipher = await crypto$1.web.subtle.encrypt(wOpt, wKey, msg);
		let res = new Uint8Array(cipher);
		if (!pkcs7PaddingEnabled && wOpt.name === "aes-cbc" && !(msg.length % 16)) res = res.slice(0, -16);
		return res;
	} else if (crypto$1.node) {
		const cipher = crypto$1.node.createCipheriv(mode, key, iv);
		cipher.setAutoPadding(pkcs7PaddingEnabled);
		return concatBytes$1(cipher.update(msg), cipher.final());
	} else throw new Error("The environment doesn't have AES module");
}
async function getPadding(cypherText, key, iv, mode) {
	const lastBlock = cypherText.slice(-16);
	for (let i = 0; i < 16; i++) lastBlock[i] ^= iv[i] ^ 16;
	const res = await encrypt$1(lastBlock, key, iv, mode);
	return res.slice(0, 16);
}
async function decrypt$1(cypherText, key, iv, mode = "aes-128-ctr", pkcs7PaddingEnabled = true) {
	validateOpt(key, iv, mode);
	if (crypto$1.web) {
		const [wKey, wOpt] = await getBrowserKey(mode, key, iv);
		if (!pkcs7PaddingEnabled && wOpt.name === "aes-cbc") {
			const padding = await getPadding(cypherText, key, iv, mode);
			cypherText = concatBytes$1(cypherText, padding);
		}
		const msg = await crypto$1.web.subtle.decrypt(wOpt, wKey, cypherText);
		const msgBytes = new Uint8Array(msg);
		if (wOpt.name === "aes-cbc") {
			const encrypted = await encrypt$1(msgBytes, key, iv, mode);
			if (!equalsBytes(encrypted, cypherText)) throw new Error("AES: wrong padding");
		}
		return msgBytes;
	} else if (crypto$1.node) {
		const decipher = crypto$1.node.createDecipheriv(mode, key, iv);
		decipher.setAutoPadding(pkcs7PaddingEnabled);
		return concatBytes$1(decipher.update(cypherText), decipher.final());
	} else throw new Error("The environment doesn't have AES module");
}

//#endregion
//#region ../../node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/esm/hmac.js
var HMAC = class extends Hash {
	constructor(hash$1, _key) {
		super();
		this.finished = false;
		this.destroyed = false;
		hash(hash$1);
		const key = toBytes$1(_key);
		this.iHash = hash$1.create();
		if (typeof this.iHash.update !== "function") throw new Error("Expected instance of class which extends utils.Hash");
		this.blockLen = this.iHash.blockLen;
		this.outputLen = this.iHash.outputLen;
		const blockLen = this.blockLen;
		const pad = new Uint8Array(blockLen);
		pad.set(key.length > blockLen ? hash$1.create().update(key).digest() : key);
		for (let i = 0; i < pad.length; i++) pad[i] ^= 54;
		this.iHash.update(pad);
		this.oHash = hash$1.create();
		for (let i = 0; i < pad.length; i++) pad[i] ^= 106;
		this.oHash.update(pad);
		pad.fill(0);
	}
	update(buf) {
		exists(this);
		this.iHash.update(buf);
		return this;
	}
	digestInto(out) {
		exists(this);
		bytes(out, this.outputLen);
		this.finished = true;
		this.iHash.digestInto(out);
		this.oHash.update(out);
		this.oHash.digestInto(out);
		this.destroy();
	}
	digest() {
		const out = new Uint8Array(this.oHash.outputLen);
		this.digestInto(out);
		return out;
	}
	_cloneInto(to) {
		to || (to = Object.create(Object.getPrototypeOf(this), {}));
		const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
		to = to;
		to.finished = finished;
		to.destroyed = destroyed;
		to.blockLen = blockLen;
		to.outputLen = outputLen;
		to.oHash = oHash._cloneInto(to.oHash);
		to.iHash = iHash._cloneInto(to.iHash);
		return to;
	}
	destroy() {
		this.destroyed = true;
		this.oHash.destroy();
		this.iHash.destroy();
	}
};
/**
* HMAC: RFC2104 message authentication code.
* @param hash - function that would be used e.g. sha256
* @param key - message key
* @param message - message data
*/
const hmac = (hash$1, key, message) => new HMAC(hash$1, key).update(message).digest();
hmac.create = (hash$1, key) => new HMAC(hash$1, key);

//#endregion
//#region ../../node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/esm/pbkdf2.js
function pbkdf2Init(hash$1, _password, _salt, _opts) {
	hash(hash$1);
	const opts = checkOpts({
		dkLen: 32,
		asyncTick: 10
	}, _opts);
	const { c, dkLen, asyncTick } = opts;
	number(c);
	number(dkLen);
	number(asyncTick);
	if (c < 1) throw new Error("PBKDF2: iterations (c) should be >= 1");
	const password = toBytes$1(_password);
	const salt = toBytes$1(_salt);
	const DK = new Uint8Array(dkLen);
	const PRF = hmac.create(hash$1, password);
	const PRFSalt = PRF._cloneInto().update(salt);
	return {
		c,
		dkLen,
		asyncTick,
		DK,
		PRF,
		PRFSalt
	};
}
function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
	PRF.destroy();
	PRFSalt.destroy();
	if (prfW) prfW.destroy();
	u.fill(0);
	return DK;
}
/**
* PBKDF2-HMAC: RFC 2898 key derivation function
* @param hash - hash function that would be used e.g. sha256
* @param password - password from which a derived key is generated
* @param salt - cryptographic salt
* @param opts - {c, dkLen} where c is work factor and dkLen is output message size
*/
function pbkdf2(hash$1, password, salt, opts) {
	const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash$1, password, salt, opts);
	let prfW;
	const arr = new Uint8Array(4);
	const view = createView(arr);
	const u = new Uint8Array(PRF.outputLen);
	for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
		const Ti = DK.subarray(pos, pos + PRF.outputLen);
		view.setInt32(0, ti, false);
		(prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
		Ti.set(u.subarray(0, Ti.length));
		for (let ui = 1; ui < c; ui++) {
			PRF._cloneInto(prfW).update(u).digestInto(u);
			for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];
		}
	}
	return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
}

//#endregion
//#region ../../node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/esm/_md.js
function setBigUint64(view, byteOffset, value, isLE$1) {
	if (typeof view.setBigUint64 === "function") return view.setBigUint64(byteOffset, value, isLE$1);
	const _32n$1 = BigInt(32);
	const _u32_max = BigInt(4294967295);
	const wh = Number(value >> _32n$1 & _u32_max);
	const wl = Number(value & _u32_max);
	const h = isLE$1 ? 4 : 0;
	const l = isLE$1 ? 0 : 4;
	view.setUint32(byteOffset + h, wh, isLE$1);
	view.setUint32(byteOffset + l, wl, isLE$1);
}
const Chi = (a, b, c) => a & b ^ ~a & c;
const Maj = (a, b, c) => a & b ^ a & c ^ b & c;
/**
* Merkle-Damgard hash construction base class.
* Could be used to create MD5, RIPEMD, SHA1, SHA2.
*/
var HashMD = class extends Hash {
	constructor(blockLen, outputLen, padOffset, isLE$1) {
		super();
		this.blockLen = blockLen;
		this.outputLen = outputLen;
		this.padOffset = padOffset;
		this.isLE = isLE$1;
		this.finished = false;
		this.length = 0;
		this.pos = 0;
		this.destroyed = false;
		this.buffer = new Uint8Array(blockLen);
		this.view = createView(this.buffer);
	}
	update(data) {
		exists(this);
		const { view, buffer, blockLen } = this;
		data = toBytes$1(data);
		const len = data.length;
		for (let pos = 0; pos < len;) {
			const take = Math.min(blockLen - this.pos, len - pos);
			if (take === blockLen) {
				const dataView = createView(data);
				for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);
				continue;
			}
			buffer.set(data.subarray(pos, pos + take), this.pos);
			this.pos += take;
			pos += take;
			if (this.pos === blockLen) {
				this.process(view, 0);
				this.pos = 0;
			}
		}
		this.length += data.length;
		this.roundClean();
		return this;
	}
	digestInto(out) {
		exists(this);
		output(out, this);
		this.finished = true;
		const { buffer, view, blockLen, isLE: isLE$1 } = this;
		let { pos } = this;
		buffer[pos++] = 128;
		this.buffer.subarray(pos).fill(0);
		if (this.padOffset > blockLen - pos) {
			this.process(view, 0);
			pos = 0;
		}
		for (let i = pos; i < blockLen; i++) buffer[i] = 0;
		setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE$1);
		this.process(view, 0);
		const oview = createView(out);
		const len = this.outputLen;
		if (len % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
		const outLen = len / 4;
		const state = this.get();
		if (outLen > state.length) throw new Error("_sha2: outputLen bigger than state");
		for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE$1);
	}
	digest() {
		const { buffer, outputLen } = this;
		this.digestInto(buffer);
		const res = buffer.slice(0, outputLen);
		this.destroy();
		return res;
	}
	_cloneInto(to) {
		to || (to = new this.constructor());
		to.set(...this.get());
		const { blockLen, buffer, length, finished, destroyed, pos } = this;
		to.length = length;
		to.pos = pos;
		to.finished = finished;
		to.destroyed = destroyed;
		if (length % blockLen) to.buffer.set(buffer);
		return to;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/esm/sha256.js
const SHA256_K = /* @__PURE__ */ new Uint32Array([
	1116352408,
	1899447441,
	3049323471,
	3921009573,
	961987163,
	1508970993,
	2453635748,
	2870763221,
	3624381080,
	310598401,
	607225278,
	1426881987,
	1925078388,
	2162078206,
	2614888103,
	3248222580,
	3835390401,
	4022224774,
	264347078,
	604807628,
	770255983,
	1249150122,
	1555081692,
	1996064986,
	2554220882,
	2821834349,
	2952996808,
	3210313671,
	3336571891,
	3584528711,
	113926993,
	338241895,
	666307205,
	773529912,
	1294757372,
	1396182291,
	1695183700,
	1986661051,
	2177026350,
	2456956037,
	2730485921,
	2820302411,
	3259730800,
	3345764771,
	3516065817,
	3600352804,
	4094571909,
	275423344,
	430227734,
	506948616,
	659060556,
	883997877,
	958139571,
	1322822218,
	1537002063,
	1747873779,
	1955562222,
	2024104815,
	2227730452,
	2361852424,
	2428436474,
	2756734187,
	3204031479,
	3329325298
]);
const SHA256_IV = /* @__PURE__ */ new Uint32Array([
	1779033703,
	3144134277,
	1013904242,
	2773480762,
	1359893119,
	2600822924,
	528734635,
	1541459225
]);
const SHA256_W = /* @__PURE__ */ new Uint32Array(64);
var SHA256 = class extends HashMD {
	constructor() {
		super(64, 32, 8, false);
		this.A = SHA256_IV[0] | 0;
		this.B = SHA256_IV[1] | 0;
		this.C = SHA256_IV[2] | 0;
		this.D = SHA256_IV[3] | 0;
		this.E = SHA256_IV[4] | 0;
		this.F = SHA256_IV[5] | 0;
		this.G = SHA256_IV[6] | 0;
		this.H = SHA256_IV[7] | 0;
	}
	get() {
		const { A, B, C, D, E, F, G, H } = this;
		return [
			A,
			B,
			C,
			D,
			E,
			F,
			G,
			H
		];
	}
	set(A, B, C, D, E, F, G, H) {
		this.A = A | 0;
		this.B = B | 0;
		this.C = C | 0;
		this.D = D | 0;
		this.E = E | 0;
		this.F = F | 0;
		this.G = G | 0;
		this.H = H | 0;
	}
	process(view, offset) {
		for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);
		for (let i = 16; i < 64; i++) {
			const W15 = SHA256_W[i - 15];
			const W2 = SHA256_W[i - 2];
			const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
			const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;
			SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
		}
		let { A, B, C, D, E, F, G, H } = this;
		for (let i = 0; i < 64; i++) {
			const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
			const T1$1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
			const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
			const T2 = sigma0 + Maj(A, B, C) | 0;
			H = G;
			G = F;
			F = E;
			E = D + T1$1 | 0;
			D = C;
			C = B;
			B = A;
			A = T1$1 + T2 | 0;
		}
		A = A + this.A | 0;
		B = B + this.B | 0;
		C = C + this.C | 0;
		D = D + this.D | 0;
		E = E + this.E | 0;
		F = F + this.F | 0;
		G = G + this.G | 0;
		H = H + this.H | 0;
		this.set(A, B, C, D, E, F, G, H);
	}
	roundClean() {
		SHA256_W.fill(0);
	}
	destroy() {
		this.set(0, 0, 0, 0, 0, 0, 0, 0);
		this.buffer.fill(0);
	}
};
/**
* SHA2-256 hash function
* @param message - data that would be hashed
*/
const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());

//#endregion
//#region ../../node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/esm/sha512.js
const [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => _u64_default.split([
	"0x428a2f98d728ae22",
	"0x7137449123ef65cd",
	"0xb5c0fbcfec4d3b2f",
	"0xe9b5dba58189dbbc",
	"0x3956c25bf348b538",
	"0x59f111f1b605d019",
	"0x923f82a4af194f9b",
	"0xab1c5ed5da6d8118",
	"0xd807aa98a3030242",
	"0x12835b0145706fbe",
	"0x243185be4ee4b28c",
	"0x550c7dc3d5ffb4e2",
	"0x72be5d74f27b896f",
	"0x80deb1fe3b1696b1",
	"0x9bdc06a725c71235",
	"0xc19bf174cf692694",
	"0xe49b69c19ef14ad2",
	"0xefbe4786384f25e3",
	"0x0fc19dc68b8cd5b5",
	"0x240ca1cc77ac9c65",
	"0x2de92c6f592b0275",
	"0x4a7484aa6ea6e483",
	"0x5cb0a9dcbd41fbd4",
	"0x76f988da831153b5",
	"0x983e5152ee66dfab",
	"0xa831c66d2db43210",
	"0xb00327c898fb213f",
	"0xbf597fc7beef0ee4",
	"0xc6e00bf33da88fc2",
	"0xd5a79147930aa725",
	"0x06ca6351e003826f",
	"0x142929670a0e6e70",
	"0x27b70a8546d22ffc",
	"0x2e1b21385c26c926",
	"0x4d2c6dfc5ac42aed",
	"0x53380d139d95b3df",
	"0x650a73548baf63de",
	"0x766a0abb3c77b2a8",
	"0x81c2c92e47edaee6",
	"0x92722c851482353b",
	"0xa2bfe8a14cf10364",
	"0xa81a664bbc423001",
	"0xc24b8b70d0f89791",
	"0xc76c51a30654be30",
	"0xd192e819d6ef5218",
	"0xd69906245565a910",
	"0xf40e35855771202a",
	"0x106aa07032bbd1b8",
	"0x19a4c116b8d2d0c8",
	"0x1e376c085141ab53",
	"0x2748774cdf8eeb99",
	"0x34b0bcb5e19b48a8",
	"0x391c0cb3c5c95a63",
	"0x4ed8aa4ae3418acb",
	"0x5b9cca4f7763e373",
	"0x682e6ff3d6b2b8a3",
	"0x748f82ee5defb2fc",
	"0x78a5636f43172f60",
	"0x84c87814a1f0ab72",
	"0x8cc702081a6439ec",
	"0x90befffa23631e28",
	"0xa4506cebde82bde9",
	"0xbef9a3f7b2c67915",
	"0xc67178f2e372532b",
	"0xca273eceea26619c",
	"0xd186b8c721c0c207",
	"0xeada7dd6cde0eb1e",
	"0xf57d4f7fee6ed178",
	"0x06f067aa72176fba",
	"0x0a637dc5a2c898a6",
	"0x113f9804bef90dae",
	"0x1b710b35131c471b",
	"0x28db77f523047d84",
	"0x32caab7b40c72493",
	"0x3c9ebe0a15c9bebc",
	"0x431d67c49c100d4c",
	"0x4cc5d4becb3e42b6",
	"0x597f299cfc657e2a",
	"0x5fcb6fab3ad6faec",
	"0x6c44198c4a475817"
].map((n) => BigInt(n))))();
const SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);
const SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);
var SHA512 = class extends HashMD {
	constructor() {
		super(128, 64, 16, false);
		this.Ah = 1779033703;
		this.Al = -205731576;
		this.Bh = -1150833019;
		this.Bl = -2067093701;
		this.Ch = 1013904242;
		this.Cl = -23791573;
		this.Dh = -1521486534;
		this.Dl = 1595750129;
		this.Eh = 1359893119;
		this.El = -1377402159;
		this.Fh = -1694144372;
		this.Fl = 725511199;
		this.Gh = 528734635;
		this.Gl = -79577749;
		this.Hh = 1541459225;
		this.Hl = 327033209;
	}
	get() {
		const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
		return [
			Ah,
			Al,
			Bh,
			Bl,
			Ch,
			Cl,
			Dh,
			Dl,
			Eh,
			El,
			Fh,
			Fl,
			Gh,
			Gl,
			Hh,
			Hl
		];
	}
	set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
		this.Ah = Ah | 0;
		this.Al = Al | 0;
		this.Bh = Bh | 0;
		this.Bl = Bl | 0;
		this.Ch = Ch | 0;
		this.Cl = Cl | 0;
		this.Dh = Dh | 0;
		this.Dl = Dl | 0;
		this.Eh = Eh | 0;
		this.El = El | 0;
		this.Fh = Fh | 0;
		this.Fl = Fl | 0;
		this.Gh = Gh | 0;
		this.Gl = Gl | 0;
		this.Hh = Hh | 0;
		this.Hl = Hl | 0;
	}
	process(view, offset) {
		for (let i = 0; i < 16; i++, offset += 4) {
			SHA512_W_H[i] = view.getUint32(offset);
			SHA512_W_L[i] = view.getUint32(offset += 4);
		}
		for (let i = 16; i < 80; i++) {
			const W15h = SHA512_W_H[i - 15] | 0;
			const W15l = SHA512_W_L[i - 15] | 0;
			const s0h = _u64_default.rotrSH(W15h, W15l, 1) ^ _u64_default.rotrSH(W15h, W15l, 8) ^ _u64_default.shrSH(W15h, W15l, 7);
			const s0l = _u64_default.rotrSL(W15h, W15l, 1) ^ _u64_default.rotrSL(W15h, W15l, 8) ^ _u64_default.shrSL(W15h, W15l, 7);
			const W2h = SHA512_W_H[i - 2] | 0;
			const W2l = SHA512_W_L[i - 2] | 0;
			const s1h = _u64_default.rotrSH(W2h, W2l, 19) ^ _u64_default.rotrBH(W2h, W2l, 61) ^ _u64_default.shrSH(W2h, W2l, 6);
			const s1l = _u64_default.rotrSL(W2h, W2l, 19) ^ _u64_default.rotrBL(W2h, W2l, 61) ^ _u64_default.shrSL(W2h, W2l, 6);
			const SUMl = _u64_default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
			const SUMh = _u64_default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
			SHA512_W_H[i] = SUMh | 0;
			SHA512_W_L[i] = SUMl | 0;
		}
		let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
		for (let i = 0; i < 80; i++) {
			const sigma1h = _u64_default.rotrSH(Eh, El, 14) ^ _u64_default.rotrSH(Eh, El, 18) ^ _u64_default.rotrBH(Eh, El, 41);
			const sigma1l = _u64_default.rotrSL(Eh, El, 14) ^ _u64_default.rotrSL(Eh, El, 18) ^ _u64_default.rotrBL(Eh, El, 41);
			const CHIh = Eh & Fh ^ ~Eh & Gh;
			const CHIl = El & Fl ^ ~El & Gl;
			const T1ll = _u64_default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
			const T1h = _u64_default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
			const T1l = T1ll | 0;
			const sigma0h = _u64_default.rotrSH(Ah, Al, 28) ^ _u64_default.rotrBH(Ah, Al, 34) ^ _u64_default.rotrBH(Ah, Al, 39);
			const sigma0l = _u64_default.rotrSL(Ah, Al, 28) ^ _u64_default.rotrBL(Ah, Al, 34) ^ _u64_default.rotrBL(Ah, Al, 39);
			const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
			const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
			Hh = Gh | 0;
			Hl = Gl | 0;
			Gh = Fh | 0;
			Gl = Fl | 0;
			Fh = Eh | 0;
			Fl = El | 0;
			({h: Eh, l: El} = _u64_default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
			Dh = Ch | 0;
			Dl = Cl | 0;
			Ch = Bh | 0;
			Cl = Bl | 0;
			Bh = Ah | 0;
			Bl = Al | 0;
			const All = _u64_default.add3L(T1l, sigma0l, MAJl);
			Ah = _u64_default.add3H(All, T1h, sigma0h, MAJh);
			Al = All | 0;
		}
		({h: Ah, l: Al} = _u64_default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
		({h: Bh, l: Bl} = _u64_default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
		({h: Ch, l: Cl} = _u64_default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
		({h: Dh, l: Dl} = _u64_default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
		({h: Eh, l: El} = _u64_default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
		({h: Fh, l: Fl} = _u64_default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
		({h: Gh, l: Gl} = _u64_default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
		({h: Hh, l: Hl} = _u64_default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
		this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
	}
	roundClean() {
		SHA512_W_H.fill(0);
		SHA512_W_L.fill(0);
	}
	destroy() {
		this.buffer.fill(0);
		this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
	}
};
const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());

//#endregion
//#region ../../node_modules/.pnpm/ethereum-cryptography@2.2.1/node_modules/ethereum-cryptography/esm/pbkdf2.js
function pbkdf2Sync(password, salt, iterations, keylen, digest) {
	if (!["sha256", "sha512"].includes(digest)) throw new Error("Only sha256 and sha512 are supported");
	assertBytes(password);
	assertBytes(salt);
	return pbkdf2(digest === "sha256" ? sha256 : sha512, password, salt, {
		c: iterations,
		dkLen: keylen
	});
}

//#endregion
//#region ../../node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/esm/scrypt.js
function XorAndSalsa(prev, pi, input, ii, out, oi) {
	let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
	let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
	let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
	let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
	let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
	let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
	let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
	let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
	let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
	for (let i = 0; i < 8; i += 2) {
		x04 ^= rotl(x00 + x12 | 0, 7);
		x08 ^= rotl(x04 + x00 | 0, 9);
		x12 ^= rotl(x08 + x04 | 0, 13);
		x00 ^= rotl(x12 + x08 | 0, 18);
		x09 ^= rotl(x05 + x01 | 0, 7);
		x13 ^= rotl(x09 + x05 | 0, 9);
		x01 ^= rotl(x13 + x09 | 0, 13);
		x05 ^= rotl(x01 + x13 | 0, 18);
		x14 ^= rotl(x10 + x06 | 0, 7);
		x02 ^= rotl(x14 + x10 | 0, 9);
		x06 ^= rotl(x02 + x14 | 0, 13);
		x10 ^= rotl(x06 + x02 | 0, 18);
		x03 ^= rotl(x15 + x11 | 0, 7);
		x07 ^= rotl(x03 + x15 | 0, 9);
		x11 ^= rotl(x07 + x03 | 0, 13);
		x15 ^= rotl(x11 + x07 | 0, 18);
		x01 ^= rotl(x00 + x03 | 0, 7);
		x02 ^= rotl(x01 + x00 | 0, 9);
		x03 ^= rotl(x02 + x01 | 0, 13);
		x00 ^= rotl(x03 + x02 | 0, 18);
		x06 ^= rotl(x05 + x04 | 0, 7);
		x07 ^= rotl(x06 + x05 | 0, 9);
		x04 ^= rotl(x07 + x06 | 0, 13);
		x05 ^= rotl(x04 + x07 | 0, 18);
		x11 ^= rotl(x10 + x09 | 0, 7);
		x08 ^= rotl(x11 + x10 | 0, 9);
		x09 ^= rotl(x08 + x11 | 0, 13);
		x10 ^= rotl(x09 + x08 | 0, 18);
		x12 ^= rotl(x15 + x14 | 0, 7);
		x13 ^= rotl(x12 + x15 | 0, 9);
		x14 ^= rotl(x13 + x12 | 0, 13);
		x15 ^= rotl(x14 + x13 | 0, 18);
	}
	out[oi++] = y00 + x00 | 0;
	out[oi++] = y01 + x01 | 0;
	out[oi++] = y02 + x02 | 0;
	out[oi++] = y03 + x03 | 0;
	out[oi++] = y04 + x04 | 0;
	out[oi++] = y05 + x05 | 0;
	out[oi++] = y06 + x06 | 0;
	out[oi++] = y07 + x07 | 0;
	out[oi++] = y08 + x08 | 0;
	out[oi++] = y09 + x09 | 0;
	out[oi++] = y10 + x10 | 0;
	out[oi++] = y11 + x11 | 0;
	out[oi++] = y12 + x12 | 0;
	out[oi++] = y13 + x13 | 0;
	out[oi++] = y14 + x14 | 0;
	out[oi++] = y15 + x15 | 0;
}
function BlockMix(input, ii, out, oi, r) {
	let head = oi + 0;
	let tail = oi + 16 * r;
	for (let i = 0; i < 16; i++) out[tail + i] = input[ii + (2 * r - 1) * 16 + i];
	for (let i = 0; i < r; i++, head += 16, ii += 16) {
		XorAndSalsa(out, tail, input, ii, out, head);
		if (i > 0) tail += 16;
		XorAndSalsa(out, head, input, ii += 16, out, tail);
	}
}
function scryptInit(password, salt, _opts) {
	const opts = checkOpts({
		dkLen: 32,
		asyncTick: 10,
		maxmem: 1024 ** 3 + 1024
	}, _opts);
	const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;
	number(N);
	number(r);
	number(p);
	number(dkLen);
	number(asyncTick);
	number(maxmem);
	if (onProgress !== void 0 && typeof onProgress !== "function") throw new Error("progressCb should be function");
	const blockSize = 128 * r;
	const blockSize32 = blockSize / 4;
	if (N <= 1 || (N & N - 1) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");
	if (p < 0 || p > (2 ** 32 - 1) * 32 / blockSize) throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
	if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
	const memUsed = blockSize * (N + p);
	if (memUsed > maxmem) throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
	const B = pbkdf2(sha256, password, salt, {
		c: 1,
		dkLen: blockSize * p
	});
	const B32 = u32(B);
	const V = u32(new Uint8Array(blockSize * N));
	const tmp = u32(new Uint8Array(blockSize));
	let blockMixCb = () => {};
	if (onProgress) {
		const totalBlockMix = 2 * N * p;
		const callbackPer = Math.max(Math.floor(totalBlockMix / 1e4), 1);
		let blockMixCnt = 0;
		blockMixCb = () => {
			blockMixCnt++;
			if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix)) onProgress(blockMixCnt / totalBlockMix);
		};
	}
	return {
		N,
		r,
		p,
		dkLen,
		blockSize32,
		V,
		B32,
		B,
		tmp,
		blockMixCb,
		asyncTick
	};
}
function scryptOutput(password, dkLen, B, V, tmp) {
	const res = pbkdf2(sha256, password, B, {
		c: 1,
		dkLen
	});
	B.fill(0);
	V.fill(0);
	tmp.fill(0);
	return res;
}
/**
* Scrypt KDF from RFC 7914.
* @param password - pass
* @param salt - salt
* @param opts - parameters
* - `N` is cpu/mem work factor (power of 2 e.g. 2**18)
* - `r` is block size (8 is common), fine-tunes sequential memory read size and performance
* - `p` is parallelization factor (1 is common)
* - `dkLen` is output key length in bytes e.g. 32.
* - `asyncTick` - (default: 10) max time in ms for which async function can block execution
* - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt
* - `onProgress` - callback function that would be executed for progress report
* @returns Derived key
*/
function scrypt(password, salt, opts) {
	const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);
	if (!isLE) byteSwap32(B32);
	for (let pi = 0; pi < p; pi++) {
		const Pi = blockSize32 * pi;
		for (let i = 0; i < blockSize32; i++) V[i] = B32[Pi + i];
		for (let i = 0, pos = 0; i < N - 1; i++) {
			BlockMix(V, pos, V, pos += blockSize32, r);
			blockMixCb();
		}
		BlockMix(V, (N - 1) * blockSize32, B32, Pi, r);
		blockMixCb();
		for (let i = 0; i < N; i++) {
			const j = B32[Pi + blockSize32 - 16] % N;
			for (let k = 0; k < blockSize32; k++) tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k];
			BlockMix(tmp, 0, B32, Pi, r);
			blockMixCb();
		}
	}
	if (!isLE) byteSwap32(B32);
	return scryptOutput(password, dkLen, B, V, tmp);
}

//#endregion
//#region ../../node_modules/.pnpm/ethereum-cryptography@2.2.1/node_modules/ethereum-cryptography/esm/scrypt.js
function scryptSync(password, salt, n, p, r, dkLen, onProgress) {
	assertBytes(password);
	assertBytes(salt);
	return scrypt(password, salt, {
		N: n,
		r,
		p,
		dkLen,
		onProgress
	});
}

//#endregion
//#region ../../node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/esm/abstract/utils.js
var utils_exports$1 = {};
__export(utils_exports$1, {
	abytes: () => abytes,
	bitGet: () => bitGet,
	bitLen: () => bitLen,
	bitMask: () => bitMask,
	bitSet: () => bitSet,
	bytesToHex: () => bytesToHex$2,
	bytesToNumberBE: () => bytesToNumberBE,
	bytesToNumberLE: () => bytesToNumberLE,
	concatBytes: () => concatBytes$2,
	createHmacDrbg: () => createHmacDrbg,
	ensureBytes: () => ensureBytes,
	equalBytes: () => equalBytes,
	hexToBytes: () => hexToBytes$2,
	hexToNumber: () => hexToNumber$1,
	isBytes: () => isBytes$1,
	numberToBytesBE: () => numberToBytesBE,
	numberToBytesLE: () => numberToBytesLE,
	numberToHexUnpadded: () => numberToHexUnpadded,
	numberToVarBytesBE: () => numberToVarBytesBE,
	utf8ToBytes: () => utf8ToBytes$2,
	validateObject: () => validateObject
});
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const _0n$4 = /* @__PURE__ */ BigInt(0);
const _1n$4 = /* @__PURE__ */ BigInt(1);
const _2n$3 = /* @__PURE__ */ BigInt(2);
function isBytes$1(a) {
	return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
}
function abytes(item) {
	if (!isBytes$1(item)) throw new Error("Uint8Array expected");
}
const hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
/**
* @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
*/
function bytesToHex$2(bytes$1) {
	abytes(bytes$1);
	let hex = "";
	for (let i = 0; i < bytes$1.length; i++) hex += hexes[bytes$1[i]];
	return hex;
}
function numberToHexUnpadded(num) {
	const hex = num.toString(16);
	return hex.length & 1 ? `0${hex}` : hex;
}
function hexToNumber$1(hex) {
	if (typeof hex !== "string") throw new Error("hex string expected, got " + typeof hex);
	return BigInt(hex === "" ? "0" : `0x${hex}`);
}
const asciis = {
	_0: 48,
	_9: 57,
	_A: 65,
	_F: 70,
	_a: 97,
	_f: 102
};
function asciiToBase16(char) {
	if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;
	if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);
	if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);
	return;
}
/**
* @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
*/
function hexToBytes$2(hex) {
	if (typeof hex !== "string") throw new Error("hex string expected, got " + typeof hex);
	const hl = hex.length;
	const al = hl / 2;
	if (hl % 2) throw new Error("padded hex string expected, got unpadded hex of length " + hl);
	const array = new Uint8Array(al);
	for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
		const n1 = asciiToBase16(hex.charCodeAt(hi));
		const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
		if (n1 === void 0 || n2 === void 0) {
			const char = hex[hi] + hex[hi + 1];
			throw new Error("hex string expected, got non-hex character \"" + char + "\" at index " + hi);
		}
		array[ai] = n1 * 16 + n2;
	}
	return array;
}
function bytesToNumberBE(bytes$1) {
	return hexToNumber$1(bytesToHex$2(bytes$1));
}
function bytesToNumberLE(bytes$1) {
	abytes(bytes$1);
	return hexToNumber$1(bytesToHex$2(Uint8Array.from(bytes$1).reverse()));
}
function numberToBytesBE(n, len) {
	return hexToBytes$2(n.toString(16).padStart(len * 2, "0"));
}
function numberToBytesLE(n, len) {
	return numberToBytesBE(n, len).reverse();
}
function numberToVarBytesBE(n) {
	return hexToBytes$2(numberToHexUnpadded(n));
}
/**
* Takes hex string or Uint8Array, converts to Uint8Array.
* Validates output length.
* Will throw error for other types.
* @param title descriptive title for an error e.g. 'private key'
* @param hex hex string or Uint8Array
* @param expectedLength optional, will compare to result array's length
* @returns
*/
function ensureBytes(title, hex, expectedLength) {
	let res;
	if (typeof hex === "string") try {
		res = hexToBytes$2(hex);
	} catch (e) {
		throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
	}
	else if (isBytes$1(hex)) res = Uint8Array.from(hex);
	else throw new Error(`${title} must be hex string or Uint8Array`);
	const len = res.length;
	if (typeof expectedLength === "number" && len !== expectedLength) throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
	return res;
}
/**
* Copies several Uint8Arrays into one.
*/
function concatBytes$2(...arrays) {
	let sum = 0;
	for (let i = 0; i < arrays.length; i++) {
		const a = arrays[i];
		abytes(a);
		sum += a.length;
	}
	const res = new Uint8Array(sum);
	for (let i = 0, pad = 0; i < arrays.length; i++) {
		const a = arrays[i];
		res.set(a, pad);
		pad += a.length;
	}
	return res;
}
function equalBytes(a, b) {
	if (a.length !== b.length) return false;
	let diff = 0;
	for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];
	return diff === 0;
}
/**
* @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
*/
function utf8ToBytes$2(str) {
	if (typeof str !== "string") throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
	return new Uint8Array(new TextEncoder().encode(str));
}
/**
* Calculates amount of bits in a bigint.
* Same as `n.toString(2).length`
*/
function bitLen(n) {
	let len;
	for (len = 0; n > _0n$4; n >>= _1n$4, len += 1);
	return len;
}
/**
* Gets single bit at position.
* NOTE: first bit position is 0 (same as arrays)
* Same as `!!+Array.from(n.toString(2)).reverse()[pos]`
*/
function bitGet(n, pos) {
	return n >> BigInt(pos) & _1n$4;
}
/**
* Sets single bit at position.
*/
function bitSet(n, pos, value) {
	return n | (value ? _1n$4 : _0n$4) << BigInt(pos);
}
/**
* Calculate mask for N bits. Not using ** operator with bigints because of old engines.
* Same as BigInt(`0b${Array(i).fill('1').join('')}`)
*/
const bitMask = (n) => (_2n$3 << BigInt(n - 1)) - _1n$4;
const u8n = (data) => new Uint8Array(data);
const u8fr = (arr) => Uint8Array.from(arr);
/**
* Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
* @returns function that will call DRBG until 2nd arg returns something meaningful
* @example
*   const drbg = createHmacDRBG<Key>(32, 32, hmac);
*   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined
*/
function createHmacDrbg(hashLen, qByteLen, hmacFn) {
	if (typeof hashLen !== "number" || hashLen < 2) throw new Error("hashLen must be a number");
	if (typeof qByteLen !== "number" || qByteLen < 2) throw new Error("qByteLen must be a number");
	if (typeof hmacFn !== "function") throw new Error("hmacFn must be a function");
	let v = u8n(hashLen);
	let k = u8n(hashLen);
	let i = 0;
	const reset = () => {
		v.fill(1);
		k.fill(0);
		i = 0;
	};
	const h = (...b) => hmacFn(k, v, ...b);
	const reseed = (seed = u8n()) => {
		k = h(u8fr([0]), seed);
		v = h();
		if (seed.length === 0) return;
		k = h(u8fr([1]), seed);
		v = h();
	};
	const gen$1 = () => {
		if (i++ >= 1e3) throw new Error("drbg: tried 1000 values");
		let len = 0;
		const out = [];
		while (len < qByteLen) {
			v = h();
			const sl = v.slice();
			out.push(sl);
			len += v.length;
		}
		return concatBytes$2(...out);
	};
	const genUntil = (seed, pred) => {
		reset();
		reseed(seed);
		let res = void 0;
		while (!(res = pred(gen$1()))) reseed();
		reset();
		return res;
	};
	return genUntil;
}
const validatorFns = {
	bigint: (val) => typeof val === "bigint",
	function: (val) => typeof val === "function",
	boolean: (val) => typeof val === "boolean",
	string: (val) => typeof val === "string",
	stringOrUint8Array: (val) => typeof val === "string" || isBytes$1(val),
	isSafeInteger: (val) => Number.isSafeInteger(val),
	array: (val) => Array.isArray(val),
	field: (val, object) => object.Fp.isValid(val),
	hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
};
function validateObject(object, validators, optValidators = {}) {
	const checkField = (fieldName, type, isOptional) => {
		const checkVal = validatorFns[type];
		if (typeof checkVal !== "function") throw new Error(`Invalid validator "${type}", expected function`);
		const val = object[fieldName];
		if (isOptional && val === void 0) return;
		if (!checkVal(val, object)) throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
	};
	for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type, false);
	for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type, true);
	return object;
}

//#endregion
//#region ../../node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/esm/abstract/modular.js
const _0n$3 = BigInt(0), _1n$3 = BigInt(1), _2n$2 = BigInt(2), _3n$1 = BigInt(3);
const _4n$1 = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);
const _9n = BigInt(9), _16n = BigInt(16);
function mod(a, b) {
	const result = a % b;
	return result >= _0n$3 ? result : b + result;
}
/**
* Efficiently raise num to power and do modular division.
* Unsafe in some contexts: uses ladder, so can expose bigint bits.
* @example
* pow(2n, 6n, 11n) // 64n % 11n == 9n
*/
function pow(num, power, modulo) {
	if (modulo <= _0n$3 || power < _0n$3) throw new Error("Expected power/modulo > 0");
	if (modulo === _1n$3) return _0n$3;
	let res = _1n$3;
	while (power > _0n$3) {
		if (power & _1n$3) res = res * num % modulo;
		num = num * num % modulo;
		power >>= _1n$3;
	}
	return res;
}
function pow2(x, power, modulo) {
	let res = x;
	while (power-- > _0n$3) {
		res *= res;
		res %= modulo;
	}
	return res;
}
function invert(number$1, modulo) {
	if (number$1 === _0n$3 || modulo <= _0n$3) throw new Error(`invert: expected positive integers, got n=${number$1} mod=${modulo}`);
	let a = mod(number$1, modulo);
	let b = modulo;
	let x = _0n$3, y = _1n$3, u = _1n$3, v = _0n$3;
	while (a !== _0n$3) {
		const q = b / a;
		const r = b % a;
		const m = x - u * q;
		const n = y - v * q;
		b = a, a = r, x = u, y = v, u = m, v = n;
	}
	const gcd = b;
	if (gcd !== _1n$3) throw new Error("invert: does not exist");
	return mod(x, modulo);
}
/**
* Tonelli-Shanks square root search algorithm.
* 1. https://eprint.iacr.org/2012/685.pdf (page 12)
* 2. Square Roots from 1; 24, 51, 10 to Dan Shanks
* Will start an infinite loop if field order P is not prime.
* @param P field order
* @returns function that takes field Fp (created from P) and number n
*/
function tonelliShanks(P) {
	const legendreC = (P - _1n$3) / _2n$2;
	let Q, S, Z;
	for (Q = P - _1n$3, S = 0; Q % _2n$2 === _0n$3; Q /= _2n$2, S++);
	for (Z = _2n$2; Z < P && pow(Z, legendreC, P) !== P - _1n$3; Z++);
	if (S === 1) {
		const p1div4 = (P + _1n$3) / _4n$1;
		return function tonelliFast(Fp$1, n) {
			const root = Fp$1.pow(n, p1div4);
			if (!Fp$1.eql(Fp$1.sqr(root), n)) throw new Error("Cannot find square root");
			return root;
		};
	}
	const Q1div2 = (Q + _1n$3) / _2n$2;
	return function tonelliSlow(Fp$1, n) {
		if (Fp$1.pow(n, legendreC) === Fp$1.neg(Fp$1.ONE)) throw new Error("Cannot find square root");
		let r = S;
		let g = Fp$1.pow(Fp$1.mul(Fp$1.ONE, Z), Q);
		let x = Fp$1.pow(n, Q1div2);
		let b = Fp$1.pow(n, Q);
		while (!Fp$1.eql(b, Fp$1.ONE)) {
			if (Fp$1.eql(b, Fp$1.ZERO)) return Fp$1.ZERO;
			let m = 1;
			for (let t2 = Fp$1.sqr(b); m < r; m++) {
				if (Fp$1.eql(t2, Fp$1.ONE)) break;
				t2 = Fp$1.sqr(t2);
			}
			const ge = Fp$1.pow(g, _1n$3 << BigInt(r - m - 1));
			g = Fp$1.sqr(ge);
			x = Fp$1.mul(x, ge);
			b = Fp$1.mul(b, g);
			r = m;
		}
		return x;
	};
}
function FpSqrt(P) {
	if (P % _4n$1 === _3n$1) {
		const p1div4 = (P + _1n$3) / _4n$1;
		return function sqrt3mod4(Fp$1, n) {
			const root = Fp$1.pow(n, p1div4);
			if (!Fp$1.eql(Fp$1.sqr(root), n)) throw new Error("Cannot find square root");
			return root;
		};
	}
	if (P % _8n === _5n) {
		const c1 = (P - _5n) / _8n;
		return function sqrt5mod8(Fp$1, n) {
			const n2 = Fp$1.mul(n, _2n$2);
			const v = Fp$1.pow(n2, c1);
			const nv = Fp$1.mul(n, v);
			const i = Fp$1.mul(Fp$1.mul(nv, _2n$2), v);
			const root = Fp$1.mul(nv, Fp$1.sub(i, Fp$1.ONE));
			if (!Fp$1.eql(Fp$1.sqr(root), n)) throw new Error("Cannot find square root");
			return root;
		};
	}
	if (P % _16n === _9n) {}
	return tonelliShanks(P);
}
const FIELD_FIELDS = [
	"create",
	"isValid",
	"is0",
	"neg",
	"inv",
	"sqrt",
	"sqr",
	"eql",
	"add",
	"sub",
	"mul",
	"pow",
	"div",
	"addN",
	"subN",
	"mulN",
	"sqrN"
];
function validateField(field) {
	const initial = {
		ORDER: "bigint",
		MASK: "bigint",
		BYTES: "isSafeInteger",
		BITS: "isSafeInteger"
	};
	const opts = FIELD_FIELDS.reduce((map, val) => {
		map[val] = "function";
		return map;
	}, initial);
	return validateObject(field, opts);
}
/**
* Same as `pow` but for Fp: non-constant-time.
* Unsafe in some contexts: uses ladder, so can expose bigint bits.
*/
function FpPow(f, num, power) {
	if (power < _0n$3) throw new Error("Expected power > 0");
	if (power === _0n$3) return f.ONE;
	if (power === _1n$3) return num;
	let p = f.ONE;
	let d = num;
	while (power > _0n$3) {
		if (power & _1n$3) p = f.mul(p, d);
		d = f.sqr(d);
		power >>= _1n$3;
	}
	return p;
}
/**
* Efficiently invert an array of Field elements.
* `inv(0)` will return `undefined` here: make sure to throw an error.
*/
function FpInvertBatch(f, nums) {
	const tmp = new Array(nums.length);
	const lastMultiplied = nums.reduce((acc, num, i) => {
		if (f.is0(num)) return acc;
		tmp[i] = acc;
		return f.mul(acc, num);
	}, f.ONE);
	const inverted = f.inv(lastMultiplied);
	nums.reduceRight((acc, num, i) => {
		if (f.is0(num)) return acc;
		tmp[i] = f.mul(acc, tmp[i]);
		return f.mul(acc, num);
	}, inverted);
	return tmp;
}
function nLength(n, nBitLength) {
	const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;
	const nByteLength = Math.ceil(_nBitLength / 8);
	return {
		nBitLength: _nBitLength,
		nByteLength
	};
}
/**
* Initializes a finite field over prime. **Non-primes are not supported.**
* Do not init in loop: slow. Very fragile: always run a benchmark on a change.
* Major performance optimizations:
* * a) denormalized operations like mulN instead of mul
* * b) same object shape: never add or remove keys
* * c) Object.freeze
* @param ORDER prime positive bigint
* @param bitLen how many bits the field consumes
* @param isLE (def: false) if encoding / decoding should be in little-endian
* @param redef optional faster redefinitions of sqrt and other methods
*/
function Field(ORDER, bitLen$1, isLE$1 = false, redef = {}) {
	if (ORDER <= _0n$3) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
	const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen$1);
	if (BYTES > 2048) throw new Error("Field lengths over 2048 bytes are not supported");
	const sqrtP = FpSqrt(ORDER);
	const f = Object.freeze({
		ORDER,
		BITS,
		BYTES,
		MASK: bitMask(BITS),
		ZERO: _0n$3,
		ONE: _1n$3,
		create: (num) => mod(num, ORDER),
		isValid: (num) => {
			if (typeof num !== "bigint") throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
			return _0n$3 <= num && num < ORDER;
		},
		is0: (num) => num === _0n$3,
		isOdd: (num) => (num & _1n$3) === _1n$3,
		neg: (num) => mod(-num, ORDER),
		eql: (lhs, rhs) => lhs === rhs,
		sqr: (num) => mod(num * num, ORDER),
		add: (lhs, rhs) => mod(lhs + rhs, ORDER),
		sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
		mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
		pow: (num, power) => FpPow(f, num, power),
		div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
		sqrN: (num) => num * num,
		addN: (lhs, rhs) => lhs + rhs,
		subN: (lhs, rhs) => lhs - rhs,
		mulN: (lhs, rhs) => lhs * rhs,
		inv: (num) => invert(num, ORDER),
		sqrt: redef.sqrt || ((n) => sqrtP(f, n)),
		invertBatch: (lst) => FpInvertBatch(f, lst),
		cmov: (a, b, c) => c ? b : a,
		toBytes: (num) => isLE$1 ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES),
		fromBytes: (bytes$1) => {
			if (bytes$1.length !== BYTES) throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes$1.length}`);
			return isLE$1 ? bytesToNumberLE(bytes$1) : bytesToNumberBE(bytes$1);
		}
	});
	return Object.freeze(f);
}
/**
* Returns total number of bytes consumed by the field element.
* For example, 32 bytes for usual 256-bit weierstrass curve.
* @param fieldOrder number of field elements, usually CURVE.n
* @returns byte length of field
*/
function getFieldBytesLength(fieldOrder) {
	if (typeof fieldOrder !== "bigint") throw new Error("field order must be bigint");
	const bitLength$1 = fieldOrder.toString(2).length;
	return Math.ceil(bitLength$1 / 8);
}
/**
* Returns minimal amount of bytes that can be safely reduced
* by field order.
* Should be 2^-128 for 128-bit curve such as P256.
* @param fieldOrder number of field elements, usually CURVE.n
* @returns byte length of target hash
*/
function getMinHashLength(fieldOrder) {
	const length = getFieldBytesLength(fieldOrder);
	return length + Math.ceil(length / 2);
}
/**
* "Constant-time" private key generation utility.
* Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF
* and convert them into private scalar, with the modulo bias being negligible.
* Needs at least 48 bytes of input for 32-byte private key.
* https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/
* FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final
* RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5
* @param hash hash output from SHA3 or a similar function
* @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)
* @param isLE interpret hash bytes as LE num
* @returns valid private scalar
*/
function mapHashToField(key, fieldOrder, isLE$1 = false) {
	const len = key.length;
	const fieldLen = getFieldBytesLength(fieldOrder);
	const minLen = getMinHashLength(fieldOrder);
	if (len < 16 || len < minLen || len > 1024) throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
	const num = isLE$1 ? bytesToNumberBE(key) : bytesToNumberLE(key);
	const reduced = mod(num, fieldOrder - _1n$3) + _1n$3;
	return isLE$1 ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);
}

//#endregion
//#region ../../node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/esm/abstract/curve.js
const _0n$2 = BigInt(0);
const _1n$2 = BigInt(1);
function wNAF(c, bits) {
	const constTimeNegate = (condition, item) => {
		const neg = item.negate();
		return condition ? neg : item;
	};
	const opts = (W) => {
		const windows = Math.ceil(bits / W) + 1;
		const windowSize = 2 ** (W - 1);
		return {
			windows,
			windowSize
		};
	};
	return {
		constTimeNegate,
		unsafeLadder(elm, n) {
			let p = c.ZERO;
			let d = elm;
			while (n > _0n$2) {
				if (n & _1n$2) p = p.add(d);
				d = d.double();
				n >>= _1n$2;
			}
			return p;
		},
		precomputeWindow(elm, W) {
			const { windows, windowSize } = opts(W);
			const points = [];
			let p = elm;
			let base$1 = p;
			for (let window$1 = 0; window$1 < windows; window$1++) {
				base$1 = p;
				points.push(base$1);
				for (let i = 1; i < windowSize; i++) {
					base$1 = base$1.add(p);
					points.push(base$1);
				}
				p = base$1.double();
			}
			return points;
		},
		wNAF(W, precomputes, n) {
			const { windows, windowSize } = opts(W);
			let p = c.ZERO;
			let f = c.BASE;
			const mask$1 = BigInt(2 ** W - 1);
			const maxNumber = 2 ** W;
			const shiftBy = BigInt(W);
			for (let window$1 = 0; window$1 < windows; window$1++) {
				const offset = window$1 * windowSize;
				let wbits = Number(n & mask$1);
				n >>= shiftBy;
				if (wbits > windowSize) {
					wbits -= maxNumber;
					n += _1n$2;
				}
				const offset1 = offset;
				const offset2 = offset + Math.abs(wbits) - 1;
				const cond1 = window$1 % 2 !== 0;
				const cond2 = wbits < 0;
				if (wbits === 0) f = f.add(constTimeNegate(cond1, precomputes[offset1]));
				else p = p.add(constTimeNegate(cond2, precomputes[offset2]));
			}
			return {
				p,
				f
			};
		},
		wNAFCached(P, precomputesMap, n, transform) {
			const W = P._WINDOW_SIZE || 1;
			let comp = precomputesMap.get(P);
			if (!comp) {
				comp = this.precomputeWindow(P, W);
				if (W !== 1) precomputesMap.set(P, transform(comp));
			}
			return this.wNAF(W, comp, n);
		}
	};
}
function validateBasic(curve) {
	validateField(curve.Fp);
	validateObject(curve, {
		n: "bigint",
		h: "bigint",
		Gx: "field",
		Gy: "field"
	}, {
		nBitLength: "isSafeInteger",
		nByteLength: "isSafeInteger"
	});
	return Object.freeze({
		...nLength(curve.n, curve.nBitLength),
		...curve,
		p: curve.Fp.ORDER
	});
}

//#endregion
//#region ../../node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/esm/abstract/weierstrass.js
function validatePointOpts(curve) {
	const opts = validateBasic(curve);
	validateObject(opts, {
		a: "field",
		b: "field"
	}, {
		allowedPrivateKeyLengths: "array",
		wrapPrivateKey: "boolean",
		isTorsionFree: "function",
		clearCofactor: "function",
		allowInfinityPoint: "boolean",
		fromBytes: "function",
		toBytes: "function"
	});
	const { endo, Fp: Fp$1, a } = opts;
	if (endo) {
		if (!Fp$1.eql(a, Fp$1.ZERO)) throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
		if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
	}
	return Object.freeze({ ...opts });
}
const { bytesToNumberBE: b2n, hexToBytes: h2b } = utils_exports$1;
const DER = {
	Err: class DERErr extends Error {
		constructor(m = "") {
			super(m);
		}
	},
	_parseInt(data) {
		const { Err: E } = DER;
		if (data.length < 2 || data[0] !== 2) throw new E("Invalid signature integer tag");
		const len = data[1];
		const res = data.subarray(2, len + 2);
		if (!len || res.length !== len) throw new E("Invalid signature integer: wrong length");
		if (res[0] & 128) throw new E("Invalid signature integer: negative");
		if (res[0] === 0 && !(res[1] & 128)) throw new E("Invalid signature integer: unnecessary leading zero");
		return {
			d: b2n(res),
			l: data.subarray(len + 2)
		};
	},
	toSig(hex) {
		const { Err: E } = DER;
		const data = typeof hex === "string" ? h2b(hex) : hex;
		abytes(data);
		let l = data.length;
		if (l < 2 || data[0] != 48) throw new E("Invalid signature tag");
		if (data[1] !== l - 2) throw new E("Invalid signature: incorrect length");
		const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));
		const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);
		if (rBytesLeft.length) throw new E("Invalid signature: left bytes after parsing");
		return {
			r,
			s
		};
	},
	hexFromSig(sig) {
		const slice = (s$1) => Number.parseInt(s$1[0], 16) & 8 ? "00" + s$1 : s$1;
		const h = (num) => {
			const hex = num.toString(16);
			return hex.length & 1 ? `0${hex}` : hex;
		};
		const s = slice(h(sig.s));
		const r = slice(h(sig.r));
		const shl = s.length / 2;
		const rhl = r.length / 2;
		const sl = h(shl);
		const rl = h(rhl);
		return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
	}
};
const _0n$1 = BigInt(0), _1n$1 = BigInt(1), _2n$1 = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);
function weierstrassPoints(opts) {
	const CURVE = validatePointOpts(opts);
	const { Fp: Fp$1 } = CURVE;
	const toBytes$2 = CURVE.toBytes || ((_c, point, _isCompressed) => {
		const a = point.toAffine();
		return concatBytes$2(Uint8Array.from([4]), Fp$1.toBytes(a.x), Fp$1.toBytes(a.y));
	});
	const fromBytes = CURVE.fromBytes || ((bytes$1) => {
		const tail = bytes$1.subarray(1);
		const x = Fp$1.fromBytes(tail.subarray(0, Fp$1.BYTES));
		const y = Fp$1.fromBytes(tail.subarray(Fp$1.BYTES, 2 * Fp$1.BYTES));
		return {
			x,
			y
		};
	});
	/**
	* y² = x³ + ax + b: Short weierstrass curve formula
	* @returns y²
	*/
	function weierstrassEquation(x) {
		const { a, b } = CURVE;
		const x2 = Fp$1.sqr(x);
		const x3 = Fp$1.mul(x2, x);
		return Fp$1.add(Fp$1.add(x3, Fp$1.mul(x, a)), b);
	}
	if (!Fp$1.eql(Fp$1.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx))) throw new Error("bad generator point: equation left != right");
	function isWithinCurveOrder(num) {
		return typeof num === "bigint" && _0n$1 < num && num < CURVE.n;
	}
	function assertGE(num) {
		if (!isWithinCurveOrder(num)) throw new Error("Expected valid bigint: 0 < bigint < curve.n");
	}
	function normPrivateKeyToScalar(key) {
		const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
		if (lengths && typeof key !== "bigint") {
			if (isBytes$1(key)) key = bytesToHex$2(key);
			if (typeof key !== "string" || !lengths.includes(key.length)) throw new Error("Invalid key");
			key = key.padStart(nByteLength * 2, "0");
		}
		let num;
		try {
			num = typeof key === "bigint" ? key : bytesToNumberBE(ensureBytes("private key", key, nByteLength));
		} catch (error) {
			throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
		}
		if (wrapPrivateKey) num = mod(num, n);
		assertGE(num);
		return num;
	}
	const pointPrecomputes = /* @__PURE__ */ new Map();
	function assertPrjPoint(other) {
		if (!(other instanceof Point$1)) throw new Error("ProjectivePoint expected");
	}
	/**
	* Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)
	* Default Point works in 2d / affine coordinates: (x, y)
	* We're doing calculations in projective, because its operations don't require costly inversion.
	*/
	class Point$1 {
		constructor(px, py, pz) {
			this.px = px;
			this.py = py;
			this.pz = pz;
			if (px == null || !Fp$1.isValid(px)) throw new Error("x required");
			if (py == null || !Fp$1.isValid(py)) throw new Error("y required");
			if (pz == null || !Fp$1.isValid(pz)) throw new Error("z required");
		}
		static fromAffine(p) {
			const { x, y } = p || {};
			if (!p || !Fp$1.isValid(x) || !Fp$1.isValid(y)) throw new Error("invalid affine point");
			if (p instanceof Point$1) throw new Error("projective point not allowed");
			const is0 = (i) => Fp$1.eql(i, Fp$1.ZERO);
			if (is0(x) && is0(y)) return Point$1.ZERO;
			return new Point$1(x, y, Fp$1.ONE);
		}
		get x() {
			return this.toAffine().x;
		}
		get y() {
			return this.toAffine().y;
		}
		/**
		* Takes a bunch of Projective Points but executes only one
		* inversion on all of them. Inversion is very slow operation,
		* so this improves performance massively.
		* Optimization: converts a list of projective points to a list of identical points with Z=1.
		*/
		static normalizeZ(points) {
			const toInv = Fp$1.invertBatch(points.map((p) => p.pz));
			return points.map((p, i) => p.toAffine(toInv[i])).map(Point$1.fromAffine);
		}
		/**
		* Converts hash string or Uint8Array to Point.
		* @param hex short/long ECDSA hex
		*/
		static fromHex(hex) {
			const P = Point$1.fromAffine(fromBytes(ensureBytes("pointHex", hex)));
			P.assertValidity();
			return P;
		}
		static fromPrivateKey(privateKey) {
			return Point$1.BASE.multiply(normPrivateKeyToScalar(privateKey));
		}
		_setWindowSize(windowSize) {
			this._WINDOW_SIZE = windowSize;
			pointPrecomputes.delete(this);
		}
		assertValidity() {
			if (this.is0()) {
				if (CURVE.allowInfinityPoint && !Fp$1.is0(this.py)) return;
				throw new Error("bad point: ZERO");
			}
			const { x, y } = this.toAffine();
			if (!Fp$1.isValid(x) || !Fp$1.isValid(y)) throw new Error("bad point: x or y not FE");
			const left = Fp$1.sqr(y);
			const right = weierstrassEquation(x);
			if (!Fp$1.eql(left, right)) throw new Error("bad point: equation left != right");
			if (!this.isTorsionFree()) throw new Error("bad point: not in prime-order subgroup");
		}
		hasEvenY() {
			const { y } = this.toAffine();
			if (Fp$1.isOdd) return !Fp$1.isOdd(y);
			throw new Error("Field doesn't support isOdd");
		}
		/**
		* Compare one point to another.
		*/
		equals(other) {
			assertPrjPoint(other);
			const { px: X1, py: Y1, pz: Z1 } = this;
			const { px: X2, py: Y2, pz: Z2 } = other;
			const U1 = Fp$1.eql(Fp$1.mul(X1, Z2), Fp$1.mul(X2, Z1));
			const U2 = Fp$1.eql(Fp$1.mul(Y1, Z2), Fp$1.mul(Y2, Z1));
			return U1 && U2;
		}
		/**
		* Flips point to one corresponding to (x, -y) in Affine coordinates.
		*/
		negate() {
			return new Point$1(this.px, Fp$1.neg(this.py), this.pz);
		}
		double() {
			const { a, b } = CURVE;
			const b3 = Fp$1.mul(b, _3n);
			const { px: X1, py: Y1, pz: Z1 } = this;
			let X3 = Fp$1.ZERO, Y3 = Fp$1.ZERO, Z3 = Fp$1.ZERO;
			let t0 = Fp$1.mul(X1, X1);
			let t1 = Fp$1.mul(Y1, Y1);
			let t2 = Fp$1.mul(Z1, Z1);
			let t3 = Fp$1.mul(X1, Y1);
			t3 = Fp$1.add(t3, t3);
			Z3 = Fp$1.mul(X1, Z1);
			Z3 = Fp$1.add(Z3, Z3);
			X3 = Fp$1.mul(a, Z3);
			Y3 = Fp$1.mul(b3, t2);
			Y3 = Fp$1.add(X3, Y3);
			X3 = Fp$1.sub(t1, Y3);
			Y3 = Fp$1.add(t1, Y3);
			Y3 = Fp$1.mul(X3, Y3);
			X3 = Fp$1.mul(t3, X3);
			Z3 = Fp$1.mul(b3, Z3);
			t2 = Fp$1.mul(a, t2);
			t3 = Fp$1.sub(t0, t2);
			t3 = Fp$1.mul(a, t3);
			t3 = Fp$1.add(t3, Z3);
			Z3 = Fp$1.add(t0, t0);
			t0 = Fp$1.add(Z3, t0);
			t0 = Fp$1.add(t0, t2);
			t0 = Fp$1.mul(t0, t3);
			Y3 = Fp$1.add(Y3, t0);
			t2 = Fp$1.mul(Y1, Z1);
			t2 = Fp$1.add(t2, t2);
			t0 = Fp$1.mul(t2, t3);
			X3 = Fp$1.sub(X3, t0);
			Z3 = Fp$1.mul(t2, t1);
			Z3 = Fp$1.add(Z3, Z3);
			Z3 = Fp$1.add(Z3, Z3);
			return new Point$1(X3, Y3, Z3);
		}
		add(other) {
			assertPrjPoint(other);
			const { px: X1, py: Y1, pz: Z1 } = this;
			const { px: X2, py: Y2, pz: Z2 } = other;
			let X3 = Fp$1.ZERO, Y3 = Fp$1.ZERO, Z3 = Fp$1.ZERO;
			const a = CURVE.a;
			const b3 = Fp$1.mul(CURVE.b, _3n);
			let t0 = Fp$1.mul(X1, X2);
			let t1 = Fp$1.mul(Y1, Y2);
			let t2 = Fp$1.mul(Z1, Z2);
			let t3 = Fp$1.add(X1, Y1);
			let t4 = Fp$1.add(X2, Y2);
			t3 = Fp$1.mul(t3, t4);
			t4 = Fp$1.add(t0, t1);
			t3 = Fp$1.sub(t3, t4);
			t4 = Fp$1.add(X1, Z1);
			let t5 = Fp$1.add(X2, Z2);
			t4 = Fp$1.mul(t4, t5);
			t5 = Fp$1.add(t0, t2);
			t4 = Fp$1.sub(t4, t5);
			t5 = Fp$1.add(Y1, Z1);
			X3 = Fp$1.add(Y2, Z2);
			t5 = Fp$1.mul(t5, X3);
			X3 = Fp$1.add(t1, t2);
			t5 = Fp$1.sub(t5, X3);
			Z3 = Fp$1.mul(a, t4);
			X3 = Fp$1.mul(b3, t2);
			Z3 = Fp$1.add(X3, Z3);
			X3 = Fp$1.sub(t1, Z3);
			Z3 = Fp$1.add(t1, Z3);
			Y3 = Fp$1.mul(X3, Z3);
			t1 = Fp$1.add(t0, t0);
			t1 = Fp$1.add(t1, t0);
			t2 = Fp$1.mul(a, t2);
			t4 = Fp$1.mul(b3, t4);
			t1 = Fp$1.add(t1, t2);
			t2 = Fp$1.sub(t0, t2);
			t2 = Fp$1.mul(a, t2);
			t4 = Fp$1.add(t4, t2);
			t0 = Fp$1.mul(t1, t4);
			Y3 = Fp$1.add(Y3, t0);
			t0 = Fp$1.mul(t5, t4);
			X3 = Fp$1.mul(t3, X3);
			X3 = Fp$1.sub(X3, t0);
			t0 = Fp$1.mul(t3, t1);
			Z3 = Fp$1.mul(t5, Z3);
			Z3 = Fp$1.add(Z3, t0);
			return new Point$1(X3, Y3, Z3);
		}
		subtract(other) {
			return this.add(other.negate());
		}
		is0() {
			return this.equals(Point$1.ZERO);
		}
		wNAF(n) {
			return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
				const toInv = Fp$1.invertBatch(comp.map((p) => p.pz));
				return comp.map((p, i) => p.toAffine(toInv[i])).map(Point$1.fromAffine);
			});
		}
		/**
		* Non-constant-time multiplication. Uses double-and-add algorithm.
		* It's faster, but should only be used when you don't care about
		* an exposed private key e.g. sig verification, which works over *public* keys.
		*/
		multiplyUnsafe(n) {
			const I = Point$1.ZERO;
			if (n === _0n$1) return I;
			assertGE(n);
			if (n === _1n$1) return this;
			const { endo } = CURVE;
			if (!endo) return wnaf.unsafeLadder(this, n);
			let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
			let k1p = I;
			let k2p = I;
			let d = this;
			while (k1 > _0n$1 || k2 > _0n$1) {
				if (k1 & _1n$1) k1p = k1p.add(d);
				if (k2 & _1n$1) k2p = k2p.add(d);
				d = d.double();
				k1 >>= _1n$1;
				k2 >>= _1n$1;
			}
			if (k1neg) k1p = k1p.negate();
			if (k2neg) k2p = k2p.negate();
			k2p = new Point$1(Fp$1.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
			return k1p.add(k2p);
		}
		/**
		* Constant time multiplication.
		* Uses wNAF method. Windowed method may be 10% faster,
		* but takes 2x longer to generate and consumes 2x memory.
		* Uses precomputes when available.
		* Uses endomorphism for Koblitz curves.
		* @param scalar by which the point would be multiplied
		* @returns New point
		*/
		multiply(scalar) {
			assertGE(scalar);
			let n = scalar;
			let point, fake;
			const { endo } = CURVE;
			if (endo) {
				const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
				let { p: k1p, f: f1p } = this.wNAF(k1);
				let { p: k2p, f: f2p } = this.wNAF(k2);
				k1p = wnaf.constTimeNegate(k1neg, k1p);
				k2p = wnaf.constTimeNegate(k2neg, k2p);
				k2p = new Point$1(Fp$1.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
				point = k1p.add(k2p);
				fake = f1p.add(f2p);
			} else {
				const { p, f } = this.wNAF(n);
				point = p;
				fake = f;
			}
			return Point$1.normalizeZ([point, fake])[0];
		}
		/**
		* Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
		* Not using Strauss-Shamir trick: precomputation tables are faster.
		* The trick could be useful if both P and Q are not G (not in our case).
		* @returns non-zero affine point
		*/
		multiplyAndAddUnsafe(Q, a, b) {
			const G = Point$1.BASE;
			const mul = (P, a$1) => a$1 === _0n$1 || a$1 === _1n$1 || !P.equals(G) ? P.multiplyUnsafe(a$1) : P.multiply(a$1);
			const sum = mul(this, a).add(mul(Q, b));
			return sum.is0() ? void 0 : sum;
		}
		toAffine(iz) {
			const { px: x, py: y, pz: z } = this;
			const is0 = this.is0();
			if (iz == null) iz = is0 ? Fp$1.ONE : Fp$1.inv(z);
			const ax = Fp$1.mul(x, iz);
			const ay = Fp$1.mul(y, iz);
			const zz = Fp$1.mul(z, iz);
			if (is0) return {
				x: Fp$1.ZERO,
				y: Fp$1.ZERO
			};
			if (!Fp$1.eql(zz, Fp$1.ONE)) throw new Error("invZ was invalid");
			return {
				x: ax,
				y: ay
			};
		}
		isTorsionFree() {
			const { h: cofactor, isTorsionFree } = CURVE;
			if (cofactor === _1n$1) return true;
			if (isTorsionFree) return isTorsionFree(Point$1, this);
			throw new Error("isTorsionFree() has not been declared for the elliptic curve");
		}
		clearCofactor() {
			const { h: cofactor, clearCofactor } = CURVE;
			if (cofactor === _1n$1) return this;
			if (clearCofactor) return clearCofactor(Point$1, this);
			return this.multiplyUnsafe(CURVE.h);
		}
		toRawBytes(isCompressed = true) {
			this.assertValidity();
			return toBytes$2(Point$1, this, isCompressed);
		}
		toHex(isCompressed = true) {
			return bytesToHex$2(this.toRawBytes(isCompressed));
		}
	}
	Point$1.BASE = new Point$1(CURVE.Gx, CURVE.Gy, Fp$1.ONE);
	Point$1.ZERO = new Point$1(Fp$1.ZERO, Fp$1.ONE, Fp$1.ZERO);
	const _bits = CURVE.nBitLength;
	const wnaf = wNAF(Point$1, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
	return {
		CURVE,
		ProjectivePoint: Point$1,
		normPrivateKeyToScalar,
		weierstrassEquation,
		isWithinCurveOrder
	};
}
function validateOpts(curve) {
	const opts = validateBasic(curve);
	validateObject(opts, {
		hash: "hash",
		hmac: "function",
		randomBytes: "function"
	}, {
		bits2int: "function",
		bits2int_modN: "function",
		lowS: "boolean"
	});
	return Object.freeze({
		lowS: true,
		...opts
	});
}
function weierstrass(curveDef) {
	const CURVE = validateOpts(curveDef);
	const { Fp: Fp$1, n: CURVE_ORDER } = CURVE;
	const compressedLen = Fp$1.BYTES + 1;
	const uncompressedLen = 2 * Fp$1.BYTES + 1;
	function isValidFieldElement(num) {
		return _0n$1 < num && num < Fp$1.ORDER;
	}
	function modN(a) {
		return mod(a, CURVE_ORDER);
	}
	function invN(a) {
		return invert(a, CURVE_ORDER);
	}
	const { ProjectivePoint: Point$1, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
		...CURVE,
		toBytes(_c, point, isCompressed) {
			const a = point.toAffine();
			const x = Fp$1.toBytes(a.x);
			const cat = concatBytes$2;
			if (isCompressed) return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
			else return cat(Uint8Array.from([4]), x, Fp$1.toBytes(a.y));
		},
		fromBytes(bytes$1) {
			const len = bytes$1.length;
			const head = bytes$1[0];
			const tail = bytes$1.subarray(1);
			if (len === compressedLen && (head === 2 || head === 3)) {
				const x = bytesToNumberBE(tail);
				if (!isValidFieldElement(x)) throw new Error("Point is not on curve");
				const y2 = weierstrassEquation(x);
				let y;
				try {
					y = Fp$1.sqrt(y2);
				} catch (sqrtError) {
					const suffix = sqrtError instanceof Error ? ": " + sqrtError.message : "";
					throw new Error("Point is not on curve" + suffix);
				}
				const isYOdd = (y & _1n$1) === _1n$1;
				const isHeadOdd = (head & 1) === 1;
				if (isHeadOdd !== isYOdd) y = Fp$1.neg(y);
				return {
					x,
					y
				};
			} else if (len === uncompressedLen && head === 4) {
				const x = Fp$1.fromBytes(tail.subarray(0, Fp$1.BYTES));
				const y = Fp$1.fromBytes(tail.subarray(Fp$1.BYTES, 2 * Fp$1.BYTES));
				return {
					x,
					y
				};
			} else throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
		}
	});
	const numToNByteStr = (num) => bytesToHex$2(numberToBytesBE(num, CURVE.nByteLength));
	function isBiggerThanHalfOrder(number$1) {
		const HALF = CURVE_ORDER >> _1n$1;
		return number$1 > HALF;
	}
	function normalizeS(s) {
		return isBiggerThanHalfOrder(s) ? modN(-s) : s;
	}
	const slcNum = (b, from, to) => bytesToNumberBE(b.slice(from, to));
	/**
	* ECDSA signature with its (r, s) properties. Supports DER & compact representations.
	*/
	class Signature {
		constructor(r, s, recovery) {
			this.r = r;
			this.s = s;
			this.recovery = recovery;
			this.assertValidity();
		}
		static fromCompact(hex) {
			const l = CURVE.nByteLength;
			hex = ensureBytes("compactSignature", hex, l * 2);
			return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
		}
		static fromDER(hex) {
			const { r, s } = DER.toSig(ensureBytes("DER", hex));
			return new Signature(r, s);
		}
		assertValidity() {
			if (!isWithinCurveOrder(this.r)) throw new Error("r must be 0 < r < CURVE.n");
			if (!isWithinCurveOrder(this.s)) throw new Error("s must be 0 < s < CURVE.n");
		}
		addRecoveryBit(recovery) {
			return new Signature(this.r, this.s, recovery);
		}
		recoverPublicKey(msgHash) {
			const { r, s, recovery: rec } = this;
			const h = bits2int_modN(ensureBytes("msgHash", msgHash));
			if (rec == null || ![
				0,
				1,
				2,
				3
			].includes(rec)) throw new Error("recovery id invalid");
			const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
			if (radj >= Fp$1.ORDER) throw new Error("recovery id 2 or 3 invalid");
			const prefix$1 = (rec & 1) === 0 ? "02" : "03";
			const R = Point$1.fromHex(prefix$1 + numToNByteStr(radj));
			const ir = invN(radj);
			const u1 = modN(-h * ir);
			const u2 = modN(s * ir);
			const Q = Point$1.BASE.multiplyAndAddUnsafe(R, u1, u2);
			if (!Q) throw new Error("point at infinify");
			Q.assertValidity();
			return Q;
		}
		hasHighS() {
			return isBiggerThanHalfOrder(this.s);
		}
		normalizeS() {
			return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
		}
		toDERRawBytes() {
			return hexToBytes$2(this.toDERHex());
		}
		toDERHex() {
			return DER.hexFromSig({
				r: this.r,
				s: this.s
			});
		}
		toCompactRawBytes() {
			return hexToBytes$2(this.toCompactHex());
		}
		toCompactHex() {
			return numToNByteStr(this.r) + numToNByteStr(this.s);
		}
	}
	const utils = {
		isValidPrivateKey(privateKey) {
			try {
				normPrivateKeyToScalar(privateKey);
				return true;
			} catch (error) {
				return false;
			}
		},
		normPrivateKeyToScalar,
		randomPrivateKey: () => {
			const length = getMinHashLength(CURVE.n);
			return mapHashToField(CURVE.randomBytes(length), CURVE.n);
		},
		precompute(windowSize = 8, point = Point$1.BASE) {
			point._setWindowSize(windowSize);
			point.multiply(BigInt(3));
			return point;
		}
	};
	/**
	* Computes public key for a private key. Checks for validity of the private key.
	* @param privateKey private key
	* @param isCompressed whether to return compact (default), or full key
	* @returns Public key, full when isCompressed=false; short when isCompressed=true
	*/
	function getPublicKey(privateKey, isCompressed = true) {
		return Point$1.fromPrivateKey(privateKey).toRawBytes(isCompressed);
	}
	/**
	* Quick and dirty check for item being public key. Does not validate hex, or being on-curve.
	*/
	function isProbPub(item) {
		const arr = isBytes$1(item);
		const str = typeof item === "string";
		const len = (arr || str) && item.length;
		if (arr) return len === compressedLen || len === uncompressedLen;
		if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;
		if (item instanceof Point$1) return true;
		return false;
	}
	/**
	* ECDH (Elliptic Curve Diffie Hellman).
	* Computes shared public key from private key and public key.
	* Checks: 1) private key validity 2) shared key is on-curve.
	* Does NOT hash the result.
	* @param privateA private key
	* @param publicB different public key
	* @param isCompressed whether to return compact (default), or full key
	* @returns shared public key
	*/
	function getSharedSecret(privateA, publicB, isCompressed = true) {
		if (isProbPub(privateA)) throw new Error("first arg must be private key");
		if (!isProbPub(publicB)) throw new Error("second arg must be public key");
		const b = Point$1.fromHex(publicB);
		return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
	}
	const bits2int = CURVE.bits2int || function(bytes$1) {
		const num = bytesToNumberBE(bytes$1);
		const delta = bytes$1.length * 8 - CURVE.nBitLength;
		return delta > 0 ? num >> BigInt(delta) : num;
	};
	const bits2int_modN = CURVE.bits2int_modN || function(bytes$1) {
		return modN(bits2int(bytes$1));
	};
	const ORDER_MASK = bitMask(CURVE.nBitLength);
	/**
	* Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.
	*/
	function int2octets(num) {
		if (typeof num !== "bigint") throw new Error("bigint expected");
		if (!(_0n$1 <= num && num < ORDER_MASK)) throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
		return numberToBytesBE(num, CURVE.nByteLength);
	}
	function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
		if (["recovered", "canonical"].some((k) => k in opts)) throw new Error("sign() legacy options not supported");
		const { hash: hash$1, randomBytes: randomBytes$2 } = CURVE;
		let { lowS, prehash, extraEntropy: ent } = opts;
		if (lowS == null) lowS = true;
		msgHash = ensureBytes("msgHash", msgHash);
		if (prehash) msgHash = ensureBytes("prehashed msgHash", hash$1(msgHash));
		const h1int = bits2int_modN(msgHash);
		const d = normPrivateKeyToScalar(privateKey);
		const seedArgs = [int2octets(d), int2octets(h1int)];
		if (ent != null && ent !== false) {
			const e = ent === true ? randomBytes$2(Fp$1.BYTES) : ent;
			seedArgs.push(ensureBytes("extraEntropy", e));
		}
		const seed = concatBytes$2(...seedArgs);
		const m = h1int;
		function k2sig(kBytes) {
			const k = bits2int(kBytes);
			if (!isWithinCurveOrder(k)) return;
			const ik = invN(k);
			const q = Point$1.BASE.multiply(k).toAffine();
			const r = modN(q.x);
			if (r === _0n$1) return;
			const s = modN(ik * modN(m + r * d));
			if (s === _0n$1) return;
			let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n$1);
			let normS = s;
			if (lowS && isBiggerThanHalfOrder(s)) {
				normS = normalizeS(s);
				recovery ^= 1;
			}
			return new Signature(r, normS, recovery);
		}
		return {
			seed,
			k2sig
		};
	}
	const defaultSigOpts = {
		lowS: CURVE.lowS,
		prehash: false
	};
	const defaultVerOpts = {
		lowS: CURVE.lowS,
		prehash: false
	};
	/**
	* Signs message hash with a private key.
	* ```
	* sign(m, d, k) where
	*   (x, y) = G × k
	*   r = x mod n
	*   s = (m + dr)/k mod n
	* ```
	* @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.
	* @param privKey private key
	* @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.
	* @returns signature with recovery param
	*/
	function sign$5(msgHash, privKey, opts = defaultSigOpts) {
		const { seed, k2sig } = prepSig(msgHash, privKey, opts);
		const C = CURVE;
		const drbg = createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
		return drbg(seed, k2sig);
	}
	Point$1.BASE._setWindowSize(8);
	/**
	* Verifies a signature against message hash and public key.
	* Rejects lowS signatures by default: to override,
	* specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:
	*
	* ```
	* verify(r, s, h, P) where
	*   U1 = hs^-1 mod n
	*   U2 = rs^-1 mod n
	*   R = U1⋅G - U2⋅P
	*   mod(R.x, n) == r
	* ```
	*/
	function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
		const sg = signature;
		msgHash = ensureBytes("msgHash", msgHash);
		publicKey = ensureBytes("publicKey", publicKey);
		if ("strict" in opts) throw new Error("options.strict was renamed to lowS");
		const { lowS, prehash } = opts;
		let _sig = void 0;
		let P;
		try {
			if (typeof sg === "string" || isBytes$1(sg)) try {
				_sig = Signature.fromDER(sg);
			} catch (derError) {
				if (!(derError instanceof DER.Err)) throw derError;
				_sig = Signature.fromCompact(sg);
			}
			else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
				const { r: r$1, s: s$1 } = sg;
				_sig = new Signature(r$1, s$1);
			} else throw new Error("PARSE");
			P = Point$1.fromHex(publicKey);
		} catch (error) {
			if (error.message === "PARSE") throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
			return false;
		}
		if (lowS && _sig.hasHighS()) return false;
		if (prehash) msgHash = CURVE.hash(msgHash);
		const { r, s } = _sig;
		const h = bits2int_modN(msgHash);
		const is = invN(s);
		const u1 = modN(h * is);
		const u2 = modN(r * is);
		const R = Point$1.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine();
		if (!R) return false;
		const v = modN(R.x);
		return v === r;
	}
	return {
		CURVE,
		getPublicKey,
		getSharedSecret,
		sign: sign$5,
		verify,
		ProjectivePoint: Point$1,
		Signature,
		utils
	};
}

//#endregion
//#region ../../node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/esm/_shortw_utils.js
function getHash(hash$1) {
	return {
		hash: hash$1,
		hmac: (key, ...msgs) => hmac(hash$1, key, concatBytes$1(...msgs)),
		randomBytes: randomBytes$1
	};
}
function createCurve(curveDef, defHash) {
	const create$1 = (hash$1) => weierstrass({
		...curveDef,
		...getHash(hash$1)
	});
	return Object.freeze({
		...create$1(defHash),
		create: create$1
	});
}

//#endregion
//#region ../../node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/esm/secp256k1.js
const secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
const secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
const _1n = BigInt(1);
const _2n = BigInt(2);
const divNearest = (a, b) => (a + b / _2n) / b;
/**
* √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.
* (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]
*/
function sqrtMod(y) {
	const P = secp256k1P;
	const _3n$2 = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
	const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
	const b2 = y * y * y % P;
	const b3 = b2 * b2 * y % P;
	const b6 = pow2(b3, _3n$2, P) * b3 % P;
	const b9 = pow2(b6, _3n$2, P) * b3 % P;
	const b11 = pow2(b9, _2n, P) * b2 % P;
	const b22 = pow2(b11, _11n, P) * b11 % P;
	const b44 = pow2(b22, _22n, P) * b22 % P;
	const b88 = pow2(b44, _44n, P) * b44 % P;
	const b176 = pow2(b88, _88n, P) * b88 % P;
	const b220 = pow2(b176, _44n, P) * b44 % P;
	const b223 = pow2(b220, _3n$2, P) * b3 % P;
	const t1 = pow2(b223, _23n, P) * b22 % P;
	const t2 = pow2(t1, _6n, P) * b2 % P;
	const root = pow2(t2, _2n, P);
	if (!Fp.eql(Fp.sqr(root), y)) throw new Error("Cannot find square root");
	return root;
}
const Fp = Field(secp256k1P, void 0, void 0, { sqrt: sqrtMod });
const secp256k1$1 = createCurve({
	a: BigInt(0),
	b: BigInt(7),
	Fp,
	n: secp256k1N,
	Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
	Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
	h: BigInt(1),
	lowS: true,
	endo: {
		beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
		splitScalar: (k) => {
			const n = secp256k1N;
			const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
			const b1 = -_1n * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
			const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
			const b2 = a1;
			const POW_2_128 = BigInt("0x100000000000000000000000000000000");
			const c1 = divNearest(b2 * k, n);
			const c2 = divNearest(-b1 * k, n);
			let k1 = mod(k - c1 * a1 - c2 * a2, n);
			let k2 = mod(-c1 * b1 - c2 * b2, n);
			const k1neg = k1 > POW_2_128;
			const k2neg = k2 > POW_2_128;
			if (k1neg) k1 = n - k1;
			if (k2neg) k2 = n - k2;
			if (k1 > POW_2_128 || k2 > POW_2_128) throw new Error("splitScalar: Endomorphism failed, k=" + k);
			return {
				k1neg,
				k1,
				k2neg,
				k2
			};
		}
	}
}, sha256);
const _0n = BigInt(0);
const Point = secp256k1$1.ProjectivePoint;

//#endregion
//#region ../../node_modules/.pnpm/ethereum-cryptography@2.2.1/node_modules/ethereum-cryptography/esm/secp256k1.js
var secp256k1_exports = {};
__export(secp256k1_exports, { secp256k1: () => secp256k1$1 });

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/tx/constants.js
var _a$1;
const secp256k1 = (_a$1 = secp256k1$1) !== null && _a$1 !== void 0 ? _a$1 : secp256k1_exports;
/**
* 2^64-1
*/
const MAX_UINT64 = BigInt("0xffffffffffffffff");
/**
* The max integer that the evm can handle (2^256-1)
*/
const MAX_INTEGER = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
const SECP256K1_ORDER = secp256k1.CURVE.n;
const SECP256K1_ORDER_DIV_2 = SECP256K1_ORDER / BigInt(2);

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/schemas.js
const keyStoreSchema = {
	type: "object",
	required: [
		"crypto",
		"id",
		"version",
		"address"
	],
	properties: {
		crypto: {
			type: "object",
			required: [
				"cipher",
				"ciphertext",
				"cipherparams",
				"kdf",
				"kdfparams",
				"mac"
			],
			properties: {
				cipher: { type: "string" },
				ciphertext: { type: "string" },
				cipherparams: { type: "object" },
				kdf: { type: "string" },
				kdfparams: { type: "object" },
				salt: { type: "string" },
				mac: { type: "string" }
			}
		},
		id: { type: "string" },
		version: { type: "number" },
		address: { type: "string" }
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/enums.js
var Chain;
(function(Chain$1) {
	Chain$1[Chain$1["Mainnet"] = 1] = "Mainnet";
	Chain$1[Chain$1["Goerli"] = 5] = "Goerli";
	Chain$1[Chain$1["Sepolia"] = 11155111] = "Sepolia";
})(Chain || (Chain = {}));
var Hardfork;
(function(Hardfork$1) {
	Hardfork$1["Chainstart"] = "chainstart";
	Hardfork$1["Homestead"] = "homestead";
	Hardfork$1["Dao"] = "dao";
	Hardfork$1["TangerineWhistle"] = "tangerineWhistle";
	Hardfork$1["SpuriousDragon"] = "spuriousDragon";
	Hardfork$1["Byzantium"] = "byzantium";
	Hardfork$1["Constantinople"] = "constantinople";
	Hardfork$1["Petersburg"] = "petersburg";
	Hardfork$1["Istanbul"] = "istanbul";
	Hardfork$1["MuirGlacier"] = "muirGlacier";
	Hardfork$1["Berlin"] = "berlin";
	Hardfork$1["London"] = "london";
	Hardfork$1["ArrowGlacier"] = "arrowGlacier";
	Hardfork$1["GrayGlacier"] = "grayGlacier";
	Hardfork$1["MergeForkIdTransition"] = "mergeForkIdTransition";
	Hardfork$1["Merge"] = "merge";
	Hardfork$1["Shanghai"] = "shanghai";
	Hardfork$1["ShardingForkDev"] = "shardingFork";
})(Hardfork || (Hardfork = {}));
var ConsensusType;
(function(ConsensusType$1) {
	ConsensusType$1["ProofOfStake"] = "pos";
	ConsensusType$1["ProofOfWork"] = "pow";
	ConsensusType$1["ProofOfAuthority"] = "poa";
})(ConsensusType || (ConsensusType = {}));
var ConsensusAlgorithm;
(function(ConsensusAlgorithm$1) {
	ConsensusAlgorithm$1["Ethash"] = "ethash";
	ConsensusAlgorithm$1["Clique"] = "clique";
	ConsensusAlgorithm$1["Casper"] = "casper";
})(ConsensusAlgorithm || (ConsensusAlgorithm = {}));
var CustomChain;
(function(CustomChain$1) {
	/**
	* Polygon (Matic) Mainnet
	*
	* - [Documentation](https://docs.matic.network/docs/develop/network-details/network)
	*/
	CustomChain$1["PolygonMainnet"] = "polygon-mainnet";
	/**
	* Polygon (Matic) Mumbai Testnet
	*
	* - [Documentation](https://docs.matic.network/docs/develop/network-details/network)
	*/
	CustomChain$1["PolygonMumbai"] = "polygon-mumbai";
	/**
	* Arbitrum Rinkeby Testnet
	*
	* - [Documentation](https://developer.offchainlabs.com/docs/public_testnet)
	*/
	CustomChain$1["ArbitrumRinkebyTestnet"] = "arbitrum-rinkeby-testnet";
	/**
	* Arbitrum One - mainnet for Arbitrum roll-up
	*
	* - [Documentation](https://developer.offchainlabs.com/public-chains)
	*/
	CustomChain$1["ArbitrumOne"] = "arbitrum-one";
	/**
	* xDai EVM sidechain with a native stable token
	*
	* - [Documentation](https://www.xdaichain.com/)
	*/
	CustomChain$1["xDaiChain"] = "x-dai-chain";
	/**
	* Optimistic Kovan - testnet for Optimism roll-up
	*
	* - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)
	*/
	CustomChain$1["OptimisticKovan"] = "optimistic-kovan";
	/**
	* Optimistic Ethereum - mainnet for Optimism roll-up
	*
	* - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)
	*/
	CustomChain$1["OptimisticEthereum"] = "optimistic-ethereum";
})(CustomChain || (CustomChain = {}));

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/types.js
/**
* Type output options
*/
var TypeOutput;
(function(TypeOutput$1) {
	TypeOutput$1[TypeOutput$1["Number"] = 0] = "Number";
	TypeOutput$1[TypeOutput$1["BigInt"] = 1] = "BigInt";
	TypeOutput$1[TypeOutput$1["Uint8Array"] = 2] = "Uint8Array";
	TypeOutput$1[TypeOutput$1["PrefixedHexString"] = 3] = "PrefixedHexString";
})(TypeOutput || (TypeOutput = {}));

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/utils.js
/**
* Removes '0x' from a given `String` if present
* @param str the string value
* @returns the string without 0x prefix
*/
const stripHexPrefix$1 = (str) => {
	if (typeof str !== "string") throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);
	return isHexPrefixed$1(str) ? str.slice(2) : str;
};
/**
* Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally
* @param nonce string parsed from the Geth genesis file
* @returns nonce as a 0x-prefixed 8 byte string
*/
function formatNonce(nonce) {
	if (!nonce || nonce === "0x0") return "0x0000000000000000";
	if (isHexPrefixed$1(nonce)) return `0x${stripHexPrefix$1(nonce).padStart(16, "0")}`;
	return `0x${nonce.padStart(16, "0")}`;
}
/**
* Converts a `Number` into a hex `String`
* @param {Number} i
* @return {String}
*/
const intToHex = function(i) {
	if (!Number.isSafeInteger(i) || i < 0) throw new Error(`Received an invalid integer type: ${i}`);
	return `0x${i.toString(16)}`;
};
/**
* Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object
* @param json object representing the Geth genesis file
* @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition
* hardfork, which by default is post merge as with the merged eth networks but could also come
* before merge like in kiln genesis
* @returns genesis parameters in a `CommonOpts` compliant object
*/
function parseGethParams(json, mergeForkIdPostMerge = true) {
	var _a$3, _b;
	const { name: name$1, config, difficulty, mixHash, gasLimit, coinbase, baseFeePerGas } = json;
	let { extraData, timestamp, nonce } = json;
	const genesisTimestamp = Number(timestamp);
	const { chainId } = config;
	if (extraData === "") extraData = "0x";
	if (!isHexPrefixed$1(timestamp)) timestamp = intToHex(parseInt(timestamp));
	if (nonce.length !== 18) nonce = formatNonce(nonce);
	if (config.eip155Block !== config.eip158Block) throw new Error("EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork");
	const params = {
		name: name$1,
		chainId,
		networkId: chainId,
		genesis: {
			timestamp,
			gasLimit: parseInt(gasLimit),
			difficulty: parseInt(difficulty),
			nonce,
			extraData,
			mixHash,
			coinbase,
			baseFeePerGas
		},
		hardfork: void 0,
		hardforks: [],
		bootstrapNodes: [],
		consensus: config.clique !== void 0 ? {
			type: "poa",
			algorithm: "clique",
			clique: {
				period: (_a$3 = config.clique.period) !== null && _a$3 !== void 0 ? _a$3 : config.clique.blockperiodseconds,
				epoch: (_b = config.clique.epoch) !== null && _b !== void 0 ? _b : config.clique.epochlength
			}
		} : {
			type: "pow",
			algorithm: "ethash",
			ethash: {}
		}
	};
	const forkMap = {
		[Hardfork.Homestead]: { name: "homesteadBlock" },
		[Hardfork.Dao]: { name: "daoForkBlock" },
		[Hardfork.TangerineWhistle]: { name: "eip150Block" },
		[Hardfork.SpuriousDragon]: { name: "eip155Block" },
		[Hardfork.Byzantium]: { name: "byzantiumBlock" },
		[Hardfork.Constantinople]: { name: "constantinopleBlock" },
		[Hardfork.Petersburg]: { name: "petersburgBlock" },
		[Hardfork.Istanbul]: { name: "istanbulBlock" },
		[Hardfork.MuirGlacier]: { name: "muirGlacierBlock" },
		[Hardfork.Berlin]: { name: "berlinBlock" },
		[Hardfork.London]: { name: "londonBlock" },
		[Hardfork.MergeForkIdTransition]: {
			name: "mergeForkBlock",
			postMerge: mergeForkIdPostMerge
		},
		[Hardfork.Shanghai]: {
			name: "shanghaiTime",
			postMerge: true,
			isTimestamp: true
		},
		[Hardfork.ShardingForkDev]: {
			name: "shardingForkTime",
			postMerge: true,
			isTimestamp: true
		}
	};
	const forkMapRev = Object.keys(forkMap).reduce((acc, elem) => {
		acc[forkMap[elem].name] = elem;
		return acc;
	}, {});
	const configHardforkNames = Object.keys(config).filter((key) => forkMapRev[key] !== void 0 && config[key] !== void 0 && config[key] !== null);
	params.hardforks = configHardforkNames.map((nameBlock) => ({
		name: forkMapRev[nameBlock],
		block: forkMap[forkMapRev[nameBlock]].isTimestamp === true || typeof config[nameBlock] !== "number" ? null : config[nameBlock],
		timestamp: forkMap[forkMapRev[nameBlock]].isTimestamp === true && typeof config[nameBlock] === "number" ? config[nameBlock] : void 0
	})).filter((fork) => fork.block !== null || fork.timestamp !== void 0);
	params.hardforks.sort((a, b) => {
		var _a$4, _b$1;
		return ((_a$4 = a.block) !== null && _a$4 !== void 0 ? _a$4 : Infinity) - ((_b$1 = b.block) !== null && _b$1 !== void 0 ? _b$1 : Infinity);
	});
	params.hardforks.sort((a, b) => {
		var _a$4, _b$1;
		return ((_a$4 = a.timestamp) !== null && _a$4 !== void 0 ? _a$4 : genesisTimestamp) - ((_b$1 = b.timestamp) !== null && _b$1 !== void 0 ? _b$1 : genesisTimestamp);
	});
	if (config.terminalTotalDifficulty !== void 0) {
		const mergeConfig = {
			name: Hardfork.Merge,
			ttd: config.terminalTotalDifficulty,
			block: null
		};
		const postMergeIndex = params.hardforks.findIndex((hf) => {
			var _a$4;
			return ((_a$4 = forkMap[hf.name]) === null || _a$4 === void 0 ? void 0 : _a$4.postMerge) === true;
		});
		if (postMergeIndex !== -1) params.hardforks.splice(postMergeIndex, 0, mergeConfig);
		else params.hardforks.push(mergeConfig);
	}
	const latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : void 0;
	params.hardfork = latestHardfork === null || latestHardfork === void 0 ? void 0 : latestHardfork.name;
	params.hardforks.unshift({
		name: Hardfork.Chainstart,
		block: 0
	});
	return params;
}
/**
* Parses a genesis.json exported from Geth into parameters for Common instance
* @param json representing the Geth genesis file
* @param name optional chain name
* @returns parsed params
*/
function parseGethGenesis(json, name$1, mergeForkIdPostMerge) {
	try {
		if ([
			"config",
			"difficulty",
			"gasLimit",
			"alloc"
		].some((field) => !(field in json))) throw new Error("Invalid format, expected geth genesis fields missing");
		if (name$1 !== void 0) json.name = name$1;
		return parseGethParams(json, mergeForkIdPostMerge);
	} catch (e) {
		throw new Error(`Error parsing parameters file: ${e.message}`);
	}
}
/**
* Pads a `String` to have an even length
* @param value
* @return output
*/
function padToEven$1(value) {
	let a = value;
	if (typeof a !== "string") throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`);
	if (a.length % 2) a = `0${a}`;
	return a;
}
/**
* Converts an `Number` to a `Uint8Array`
* @param {Number} i
* @return {Uint8Array}
*/
const intToUint8Array = function(i) {
	const hex = intToHex(i);
	return hexToBytes(`0x${padToEven$1(hex.slice(2))}`);
};
/**
* Attempts to turn a value into a `Uint8Array`.
* Inputs supported: `Uint8Array` `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects
* with a `toArray()` or `toUint8Array()` method.
* @param v the value
*/
const toUint8Array = function(v) {
	var _a$3;
	if (v === null || v === void 0) return new Uint8Array();
	if (v instanceof Uint8Array) return v;
	if (((_a$3 = v === null || v === void 0 ? void 0 : v.constructor) === null || _a$3 === void 0 ? void 0 : _a$3.name) === "Uint8Array") return Uint8Array.from(v);
	if (Array.isArray(v)) return Uint8Array.from(v);
	if (typeof v === "string") {
		if (!isHexString(v)) throw new Error(`Cannot convert string to Uint8Array. only supports 0x-prefixed hex strings and this string was given: ${v}`);
		return hexToBytes(padToEven$1(stripHexPrefix$1(v)));
	}
	if (typeof v === "number") return toUint8Array(numberToHex(v));
	if (typeof v === "bigint") {
		if (v < BigInt(0)) throw new Error(`Cannot convert negative bigint to Uint8Array. Given: ${v}`);
		let n = v.toString(16);
		if (n.length % 2) n = `0${n}`;
		return toUint8Array(`0x${n}`);
	}
	if (v.toArray) return Uint8Array.from(v.toArray());
	throw new Error("invalid type");
};
/**
* Converts a {@link Uint8Array} to a {@link bigint}
*/
function uint8ArrayToBigInt$1(buf) {
	const hex = bytesToHex(buf);
	if (hex === "0x") return BigInt(0);
	return BigInt(hex);
}
/**
* Converts a {@link bigint} to a {@link Uint8Array}
*/
function bigIntToUint8Array$1(num) {
	return toUint8Array(`0x${num.toString(16)}`);
}
/**
* Returns a Uint8Array filled with 0s.
* @param bytes the number of bytes the Uint8Array should be
*/
const zeros = function(bytes$1) {
	return new Uint8Array(bytes$1).fill(0);
};
/**
* Pads a `Uint8Array` with zeros till it has `length` bytes.
* Truncates the beginning or end of input if its length exceeds `length`.
* @param msg the value to pad (Uint8Array)
* @param length the number of bytes the output should be
* @param right whether to start padding form the left or right
* @return (Uint8Array)
*/
const setLength = function(msg, length, right) {
	const buf = zeros(length);
	if (right) {
		if (msg.length < length) {
			buf.set(msg);
			return buf;
		}
		return msg.subarray(0, length);
	}
	if (msg.length < length) {
		buf.set(msg, length - msg.length);
		return buf;
	}
	return msg.subarray(-length);
};
/**
* Throws if input is not a Uint8Array
* @param {Uint8Array} input value to check
*/
function assertIsUint8Array(input) {
	if (!isUint8Array(input)) {
		const msg = `This method only supports Uint8Array but input was: ${input}`;
		throw new Error(msg);
	}
}
/**
* Left Pads a `Uint8Array` with leading zeros till it has `length` bytes.
* Or it truncates the beginning if it exceeds.
* @param msg the value to pad (Uint8Array)
* @param length the number of bytes the output should be
* @return (Uint8Array)
*/
const setLengthLeft = function(msg, length) {
	assertIsUint8Array(msg);
	return setLength(msg, length, false);
};
/**
* Trims leading zeros from a `Uint8Array`, `String` or `Number[]`.
* @param a (Uint8Array|Array|String)
* @return (Uint8Array|Array|String)
*/
function stripZeros(a) {
	let first = a[0];
	while (a.length > 0 && first.toString() === "0") {
		a = a.slice(1);
		first = a[0];
	}
	return a;
}
/**
* Trims leading zeros from a `Uint8Array`.
* @param a (Uint8Array)
* @return (Uint8Array)
*/
const unpadUint8Array = function(a) {
	assertIsUint8Array(a);
	return stripZeros(a);
};
/**
* Converts a {@link bigint} to a `0x` prefixed hex string
*/
const bigIntToHex = (num) => `0x${num.toString(16)}`;
/**
* Convert value from bigint to an unpadded Uint8Array
* (useful for RLP transport)
* @param value value to convert
*/
function bigIntToUnpaddedUint8Array(value) {
	return unpadUint8Array(bigIntToUint8Array$1(value));
}
function calculateSigRecovery(v, chainId) {
	if (v === BigInt(0) || v === BigInt(1)) return v;
	if (chainId === void 0) return v - BigInt(27);
	return v - (chainId * BigInt(2) + BigInt(35));
}
function isValidSigRecovery(recovery) {
	return recovery === BigInt(0) || recovery === BigInt(1);
}
/**
* ECDSA public key recovery from signature.
* NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions
* @returns Recovered public key
*/
const ecrecover = function(msgHash, v, r, s, chainId) {
	const recovery = calculateSigRecovery(v, chainId);
	if (!isValidSigRecovery(recovery)) throw new Error("Invalid signature v value");
	const senderPubKey = new secp256k1.Signature(uint8ArrayToBigInt$1(r), uint8ArrayToBigInt$1(s)).addRecoveryBit(Number(recovery)).recoverPublicKey(msgHash).toRawBytes(false);
	return senderPubKey.slice(1);
};
function toType(input, outputType) {
	if (input === null) return null;
	if (input === void 0) return void 0;
	if (typeof input === "string" && !isHexString(input)) throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);
	else if (typeof input === "number" && !Number.isSafeInteger(input)) throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
	const output$1 = toUint8Array(input);
	switch (outputType) {
		case TypeOutput.Uint8Array: return output$1;
		case TypeOutput.BigInt: return uint8ArrayToBigInt$1(output$1);
		case TypeOutput.Number: {
			const bigInt = uint8ArrayToBigInt$1(output$1);
			if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)");
			return Number(bigInt);
		}
		case TypeOutput.PrefixedHexString: return bytesToHex(output$1);
		default: throw new Error("unknown outputType");
	}
}

//#endregion
//#region ../../node_modules/.pnpm/@ethereumjs+rlp@4.0.1/node_modules/@ethereumjs/rlp/dist/index.js
var require_dist = __commonJS({ "../../node_modules/.pnpm/@ethereumjs+rlp@4.0.1/node_modules/@ethereumjs/rlp/dist/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.RLP = exports.utils = exports.decode = exports.encode = void 0;
	/**
	* RLP Encoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/
	* This function takes in data, converts it to Uint8Array if not,
	* and adds a length for recursion.
	* @param input Will be converted to Uint8Array
	* @returns Uint8Array of encoded data
	**/
	function encode(input) {
		if (Array.isArray(input)) {
			const output$1 = [];
			let outputLength = 0;
			for (let i = 0; i < input.length; i++) {
				const encoded = encode(input[i]);
				output$1.push(encoded);
				outputLength += encoded.length;
			}
			return concatBytes(encodeLength(outputLength, 192), ...output$1);
		}
		const inputBuf = toBytes(input);
		if (inputBuf.length === 1 && inputBuf[0] < 128) return inputBuf;
		return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);
	}
	exports.encode = encode;
	/**
	* Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.
	* E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.
	* @param input
	* @param start
	* @param end
	*/
	function safeSlice(input, start, end) {
		if (end > input.length) throw new Error("invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds");
		return input.slice(start, end);
	}
	/**
	* Parse integers. Check if there is no leading zeros
	* @param v The value to parse
	*/
	function decodeLength(v) {
		if (v[0] === 0) throw new Error("invalid RLP: extra zeros");
		return parseHexByte(bytesToHex$1(v));
	}
	function encodeLength(len, offset) {
		if (len < 56) return Uint8Array.from([len + offset]);
		const hexLength = numberToHex$1(len);
		const lLength = hexLength.length / 2;
		const firstByte = numberToHex$1(offset + 55 + lLength);
		return Uint8Array.from(hexToBytes$1(firstByte + hexLength));
	}
	function decode(input, stream = false) {
		if (typeof input === "undefined" || input === null || input.length === 0) return Uint8Array.from([]);
		const inputBytes = toBytes(input);
		const decoded = _decode(inputBytes);
		if (stream) return decoded;
		if (decoded.remainder.length !== 0) throw new Error("invalid RLP: remainder must be zero");
		return decoded.data;
	}
	exports.decode = decode;
	/** Decode an input with RLP */
	function _decode(input) {
		let length, llength, data, innerRemainder, d;
		const decoded = [];
		const firstByte = input[0];
		if (firstByte <= 127) return {
			data: input.slice(0, 1),
			remainder: input.slice(1)
		};
		else if (firstByte <= 183) {
			length = firstByte - 127;
			if (firstByte === 128) data = Uint8Array.from([]);
			else data = safeSlice(input, 1, length);
			if (length === 2 && data[0] < 128) throw new Error("invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed");
			return {
				data,
				remainder: input.slice(length)
			};
		} else if (firstByte <= 191) {
			llength = firstByte - 182;
			if (input.length - 1 < llength) throw new Error("invalid RLP: not enough bytes for string length");
			length = decodeLength(safeSlice(input, 1, llength));
			if (length <= 55) throw new Error("invalid RLP: expected string length to be greater than 55");
			data = safeSlice(input, llength, length + llength);
			return {
				data,
				remainder: input.slice(length + llength)
			};
		} else if (firstByte <= 247) {
			length = firstByte - 191;
			innerRemainder = safeSlice(input, 1, length);
			while (innerRemainder.length) {
				d = _decode(innerRemainder);
				decoded.push(d.data);
				innerRemainder = d.remainder;
			}
			return {
				data: decoded,
				remainder: input.slice(length)
			};
		} else {
			llength = firstByte - 246;
			length = decodeLength(safeSlice(input, 1, llength));
			if (length < 56) throw new Error("invalid RLP: encoded list too short");
			const totalLength = llength + length;
			if (totalLength > input.length) throw new Error("invalid RLP: total length is larger than the data");
			innerRemainder = safeSlice(input, llength, totalLength);
			while (innerRemainder.length) {
				d = _decode(innerRemainder);
				decoded.push(d.data);
				innerRemainder = d.remainder;
			}
			return {
				data: decoded,
				remainder: input.slice(totalLength)
			};
		}
	}
	const cachedHexes$1 = Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, "0"));
	function bytesToHex$1(uint8a) {
		let hex = "";
		for (let i = 0; i < uint8a.length; i++) hex += cachedHexes$1[uint8a[i]];
		return hex;
	}
	function parseHexByte(hexByte) {
		const byte = Number.parseInt(hexByte, 16);
		if (Number.isNaN(byte)) throw new Error("Invalid byte sequence");
		return byte;
	}
	function hexToBytes$1(hex) {
		if (typeof hex !== "string") throw new TypeError("hexToBytes: expected string, got " + typeof hex);
		if (hex.length % 2) throw new Error("hexToBytes: received invalid unpadded hex");
		const array = new Uint8Array(hex.length / 2);
		for (let i = 0; i < array.length; i++) {
			const j = i * 2;
			array[i] = parseHexByte(hex.slice(j, j + 2));
		}
		return array;
	}
	/** Concatenates two Uint8Arrays into one. */
	function concatBytes(...arrays) {
		if (arrays.length === 1) return arrays[0];
		const length = arrays.reduce((a, arr) => a + arr.length, 0);
		const result = new Uint8Array(length);
		for (let i = 0, pad = 0; i < arrays.length; i++) {
			const arr = arrays[i];
			result.set(arr, pad);
			pad += arr.length;
		}
		return result;
	}
	function utf8ToBytes$1(utf) {
		return new TextEncoder().encode(utf);
	}
	/** Transform an integer into its hexadecimal value */
	function numberToHex$1(integer) {
		if (integer < 0) throw new Error("Invalid integer as argument, must be unsigned!");
		const hex = integer.toString(16);
		return hex.length % 2 ? `0${hex}` : hex;
	}
	/** Pad a string to be even */
	function padToEven(a) {
		return a.length % 2 ? `0${a}` : a;
	}
	/** Check if a string is prefixed by 0x */
	function isHexPrefixed(str) {
		return str.length >= 2 && str[0] === "0" && str[1] === "x";
	}
	/** Removes 0x from a given String */
	function stripHexPrefix(str) {
		if (typeof str !== "string") return str;
		return isHexPrefixed(str) ? str.slice(2) : str;
	}
	/** Transform anything into a Uint8Array */
	function toBytes(v) {
		if (v instanceof Uint8Array) return v;
		if (typeof v === "string") {
			if (isHexPrefixed(v)) return hexToBytes$1(padToEven(stripHexPrefix(v)));
			return utf8ToBytes$1(v);
		}
		if (typeof v === "number" || typeof v === "bigint") {
			if (!v) return Uint8Array.from([]);
			return hexToBytes$1(numberToHex$1(v));
		}
		if (v === null || v === void 0) return Uint8Array.from([]);
		throw new Error("toBytes: received unsupported type " + typeof v);
	}
	exports.utils = {
		bytesToHex: bytesToHex$1,
		concatBytes,
		hexToBytes: hexToBytes$1,
		utf8ToBytes: utf8ToBytes$1
	};
	exports.RLP = {
		encode,
		decode
	};
} });

//#endregion
//#region ../../node_modules/.pnpm/crc-32@1.2.2/node_modules/crc-32/crc32.js
var require_crc32 = __commonJS({ "../../node_modules/.pnpm/crc-32@1.2.2/node_modules/crc-32/crc32.js"(exports) {
	/*! crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */
	var CRC32;
	(function(factory) {
		if (typeof DO_NOT_EXPORT_CRC === "undefined") if ("object" === typeof exports) factory(exports);
		else if ("function" === typeof define && define.amd) define(function() {
			var module$1 = {};
			factory(module$1);
			return module$1;
		});
		else factory(CRC32 = {});
		else factory(CRC32 = {});
	})(function(CRC32$1) {
		CRC32$1.version = "1.2.2";
		function signed_crc_table() {
			var c = 0, table = new Array(256);
			for (var n = 0; n != 256; ++n) {
				c = n;
				c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
				c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
				c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
				c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
				c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
				c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
				c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
				c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
				table[n] = c;
			}
			return typeof Int32Array !== "undefined" ? new Int32Array(table) : table;
		}
		var T0$1 = signed_crc_table();
		function slice_by_16_tables(T) {
			var c = 0, v = 0, n = 0, table = typeof Int32Array !== "undefined" ? new Int32Array(4096) : new Array(4096);
			for (n = 0; n != 256; ++n) table[n] = T[n];
			for (n = 0; n != 256; ++n) {
				v = T[n];
				for (c = 256 + n; c < 4096; c += 256) v = table[c] = v >>> 8 ^ T[v & 255];
			}
			var out = [];
			for (n = 1; n != 16; ++n) out[n - 1] = typeof Int32Array !== "undefined" ? table.subarray(n * 256, n * 256 + 256) : table.slice(n * 256, n * 256 + 256);
			return out;
		}
		var TT = slice_by_16_tables(T0$1);
		var T1$1 = TT[0], T2 = TT[1], T3 = TT[2], T4 = TT[3], T5 = TT[4];
		var T6 = TT[5], T7 = TT[6], T8 = TT[7], T9 = TT[8], Ta = TT[9];
		var Tb = TT[10], Tc = TT[11], Td = TT[12], Te = TT[13], Tf = TT[14];
		function crc32_bstr(bstr, seed) {
			var C = seed ^ -1;
			for (var i = 0, L = bstr.length; i < L;) C = C >>> 8 ^ T0$1[(C ^ bstr.charCodeAt(i++)) & 255];
			return ~C;
		}
		function crc32_buf(B, seed) {
			var C = seed ^ -1, L = B.length - 15, i = 0;
			for (; i < L;) C = Tf[B[i++] ^ C & 255] ^ Te[B[i++] ^ C >> 8 & 255] ^ Td[B[i++] ^ C >> 16 & 255] ^ Tc[B[i++] ^ C >>> 24] ^ Tb[B[i++]] ^ Ta[B[i++]] ^ T9[B[i++]] ^ T8[B[i++]] ^ T7[B[i++]] ^ T6[B[i++]] ^ T5[B[i++]] ^ T4[B[i++]] ^ T3[B[i++]] ^ T2[B[i++]] ^ T1$1[B[i++]] ^ T0$1[B[i++]];
			L += 15;
			while (i < L) C = C >>> 8 ^ T0$1[(C ^ B[i++]) & 255];
			return ~C;
		}
		function crc32_str(str, seed) {
			var C = seed ^ -1;
			for (var i = 0, L = str.length, c = 0, d = 0; i < L;) {
				c = str.charCodeAt(i++);
				if (c < 128) C = C >>> 8 ^ T0$1[(C ^ c) & 255];
				else if (c < 2048) {
					C = C >>> 8 ^ T0$1[(C ^ (192 | c >> 6 & 31)) & 255];
					C = C >>> 8 ^ T0$1[(C ^ (128 | c & 63)) & 255];
				} else if (c >= 55296 && c < 57344) {
					c = (c & 1023) + 64;
					d = str.charCodeAt(i++) & 1023;
					C = C >>> 8 ^ T0$1[(C ^ (240 | c >> 8 & 7)) & 255];
					C = C >>> 8 ^ T0$1[(C ^ (128 | c >> 2 & 63)) & 255];
					C = C >>> 8 ^ T0$1[(C ^ (128 | d >> 6 & 15 | (c & 3) << 4)) & 255];
					C = C >>> 8 ^ T0$1[(C ^ (128 | d & 63)) & 255];
				} else {
					C = C >>> 8 ^ T0$1[(C ^ (224 | c >> 12 & 15)) & 255];
					C = C >>> 8 ^ T0$1[(C ^ (128 | c >> 6 & 63)) & 255];
					C = C >>> 8 ^ T0$1[(C ^ (128 | c & 63)) & 255];
				}
			}
			return ~C;
		}
		CRC32$1.table = T0$1;
		CRC32$1.bstr = crc32_bstr;
		CRC32$1.buf = crc32_buf;
		CRC32$1.str = crc32_str;
	});
} });

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/chains/goerli.js
var goerli_default = {
	name: "goerli",
	chainId: 5,
	networkId: 5,
	defaultHardfork: "merge",
	consensus: {
		type: "poa",
		algorithm: "clique",
		clique: {
			period: 15,
			epoch: 3e4
		}
	},
	comment: "Cross-client PoA test network",
	url: "https://github.com/goerli/testnet",
	genesis: {
		timestamp: "0x5c51a607",
		gasLimit: 10485760,
		difficulty: 1,
		nonce: "0x0000000000000000",
		extraData: "0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
	},
	hardforks: [
		{
			name: "chainstart",
			block: 0,
			forkHash: "0xa3f5ab08"
		},
		{
			name: "homestead",
			block: 0,
			forkHash: "0xa3f5ab08"
		},
		{
			name: "tangerineWhistle",
			block: 0,
			forkHash: "0xa3f5ab08"
		},
		{
			name: "spuriousDragon",
			block: 0,
			forkHash: "0xa3f5ab08"
		},
		{
			name: "byzantium",
			block: 0,
			forkHash: "0xa3f5ab08"
		},
		{
			name: "constantinople",
			block: 0,
			forkHash: "0xa3f5ab08"
		},
		{
			name: "petersburg",
			block: 0,
			forkHash: "0xa3f5ab08"
		},
		{
			name: "istanbul",
			block: 1561651,
			forkHash: "0xc25efa5c"
		},
		{
			name: "berlin",
			block: 4460644,
			forkHash: "0x757a1c47"
		},
		{
			name: "london",
			block: 5062605,
			forkHash: "0xb8c6299d"
		},
		{
			"//_comment": "The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://goerli.etherscan.io/block/7382818",
			name: "merge",
			ttd: "10790000",
			block: 7382819,
			forkHash: "0xb8c6299d"
		},
		{
			name: "mergeForkIdTransition",
			block: null,
			forkHash: null
		},
		{
			name: "shanghai",
			block: null,
			forkHash: null
		}
	],
	bootstrapNodes: [],
	dnsNetworks: ["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.goerli.ethdisco.net"]
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/chains/mainnet.js
var mainnet_default = {
	name: "mainnet",
	chainId: 1,
	networkId: 1,
	defaultHardfork: "merge",
	consensus: {
		type: "pow",
		algorithm: "ethash",
		ethash: {}
	},
	comment: "The Ethereum main chain",
	url: "https://ethstats.net/",
	genesis: {
		gasLimit: 5e3,
		difficulty: 17179869184,
		nonce: "0x0000000000000042",
		extraData: "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa"
	},
	hardforks: [
		{
			name: "chainstart",
			block: 0,
			forkHash: "0xfc64ec04"
		},
		{
			name: "homestead",
			block: 115e4,
			forkHash: "0x97c2c34c"
		},
		{
			name: "dao",
			block: 192e4,
			forkHash: "0x91d1f948"
		},
		{
			name: "tangerineWhistle",
			block: 2463e3,
			forkHash: "0x7a64da13"
		},
		{
			name: "spuriousDragon",
			block: 2675e3,
			forkHash: "0x3edd5b10"
		},
		{
			name: "byzantium",
			block: 437e4,
			forkHash: "0xa00bc324"
		},
		{
			name: "constantinople",
			block: 728e4,
			forkHash: "0x668db0af"
		},
		{
			name: "petersburg",
			block: 728e4,
			forkHash: "0x668db0af"
		},
		{
			name: "istanbul",
			block: 9069e3,
			forkHash: "0x879d6e30"
		},
		{
			name: "muirGlacier",
			block: 92e5,
			forkHash: "0xe029e991"
		},
		{
			name: "berlin",
			block: 12244e3,
			forkHash: "0x0eb440f6"
		},
		{
			name: "london",
			block: 12965e3,
			forkHash: "0xb715077d"
		},
		{
			name: "arrowGlacier",
			block: 13773e3,
			forkHash: "0x20c327fc"
		},
		{
			name: "grayGlacier",
			block: 1505e4,
			forkHash: "0xf0afd0e3"
		},
		{
			"//_comment": "The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://etherscan.io/block/15537393",
			name: "merge",
			ttd: "58750000000000000000000",
			block: 15537394,
			forkHash: "0xf0afd0e3"
		},
		{
			name: "mergeForkIdTransition",
			block: null,
			forkHash: null
		},
		{
			name: "shanghai",
			block: null,
			forkHash: null
		}
	],
	bootstrapNodes: [],
	dnsNetworks: ["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net"]
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/chains/sepolia.js
var sepolia_default = {
	name: "sepolia",
	chainId: 11155111,
	networkId: 11155111,
	defaultHardfork: "merge",
	consensus: {
		type: "pow",
		algorithm: "ethash",
		ethash: {}
	},
	comment: "PoW test network to replace Ropsten",
	url: "https://github.com/ethereum/go-ethereum/pull/23730",
	genesis: {
		timestamp: "0x6159af19",
		gasLimit: 3e7,
		difficulty: 131072,
		nonce: "0x0000000000000000",
		extraData: "0x5365706f6c69612c20417468656e732c204174746963612c2047726565636521"
	},
	hardforks: [
		{
			name: "chainstart",
			block: 0,
			forkHash: "0xfe3366e7"
		},
		{
			name: "homestead",
			block: 0,
			forkHash: "0xfe3366e7"
		},
		{
			name: "tangerineWhistle",
			block: 0,
			forkHash: "0xfe3366e7"
		},
		{
			name: "spuriousDragon",
			block: 0,
			forkHash: "0xfe3366e7"
		},
		{
			name: "byzantium",
			block: 0,
			forkHash: "0xfe3366e7"
		},
		{
			name: "constantinople",
			block: 0,
			forkHash: "0xfe3366e7"
		},
		{
			name: "petersburg",
			block: 0,
			forkHash: "0xfe3366e7"
		},
		{
			name: "istanbul",
			block: 0,
			forkHash: "0xfe3366e7"
		},
		{
			name: "muirGlacier",
			block: 0,
			forkHash: "0xfe3366e7"
		},
		{
			name: "berlin",
			block: 0,
			forkHash: "0xfe3366e7"
		},
		{
			name: "london",
			block: 0,
			forkHash: "0xfe3366e7"
		},
		{
			"//_comment": "The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://sepolia.etherscan.io/block/1450408",
			name: "merge",
			ttd: "17000000000000000",
			block: 1450409,
			forkHash: "0xfe3366e7"
		},
		{
			name: "mergeForkIdTransition",
			block: 1735371,
			forkHash: "0xb96cbd13"
		},
		{
			name: "shanghai",
			block: null,
			timestamp: "1677557088",
			forkHash: "0xf7f9bc08"
		}
	],
	bootstrapNodes: [],
	dnsNetworks: ["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.sepolia.ethdisco.net"]
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/eips/1153.js
var _1153_default = {
	name: "EIP-1153",
	number: 1153,
	comment: "Transient Storage",
	url: "https://eips.ethereum.org/EIPS/eip-1153",
	status: "Review",
	minimumHardfork: "chainstart",
	requiredEIPs: [],
	gasConfig: {},
	gasPrices: {
		tstore: {
			v: 100,
			d: "Base fee of the TSTORE opcode"
		},
		tload: {
			v: 100,
			d: "Base fee of the TLOAD opcode"
		}
	},
	vm: {},
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/eips/1559.js
var _1559_default = {
	name: "EIP-1559",
	number: 1559,
	comment: "Fee market change for ETH 1.0 chain",
	url: "https://eips.ethereum.org/EIPS/eip-1559",
	status: "Final",
	minimumHardfork: "berlin",
	requiredEIPs: [2930],
	gasConfig: {
		baseFeeMaxChangeDenominator: {
			v: 8,
			d: "Maximum base fee change denominator"
		},
		elasticityMultiplier: {
			v: 2,
			d: "Maximum block gas target elasticity"
		},
		initialBaseFee: {
			v: 1e9,
			d: "Initial base fee on first EIP1559 block"
		}
	},
	gasPrices: {},
	vm: {},
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/eips/2315.js
var _2315_default = {
	name: "EIP-2315",
	number: 2315,
	comment: "Simple subroutines for the EVM",
	url: "https://eips.ethereum.org/EIPS/eip-2315",
	status: "Draft",
	minimumHardfork: "istanbul",
	gasConfig: {},
	gasPrices: {
		beginsub: {
			v: 2,
			d: "Base fee of the BEGINSUB opcode"
		},
		returnsub: {
			v: 5,
			d: "Base fee of the RETURNSUB opcode"
		},
		jumpsub: {
			v: 10,
			d: "Base fee of the JUMPSUB opcode"
		}
	},
	vm: {},
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/eips/2537.js
var _2537_default = {
	name: "EIP-2537",
	number: 2537,
	comment: "BLS12-381 precompiles",
	url: "https://eips.ethereum.org/EIPS/eip-2537",
	status: "Draft",
	minimumHardfork: "chainstart",
	gasConfig: {},
	gasPrices: {
		Bls12381G1AddGas: {
			v: 600,
			d: "Gas cost of a single BLS12-381 G1 addition precompile-call"
		},
		Bls12381G1MulGas: {
			v: 12e3,
			d: "Gas cost of a single BLS12-381 G1 multiplication precompile-call"
		},
		Bls12381G2AddGas: {
			v: 4500,
			d: "Gas cost of a single BLS12-381 G2 addition precompile-call"
		},
		Bls12381G2MulGas: {
			v: 55e3,
			d: "Gas cost of a single BLS12-381 G2 multiplication precompile-call"
		},
		Bls12381PairingBaseGas: {
			v: 115e3,
			d: "Base gas cost of BLS12-381 pairing check"
		},
		Bls12381PairingPerPairGas: {
			v: 23e3,
			d: "Per-pair gas cost of BLS12-381 pairing check"
		},
		Bls12381MapG1Gas: {
			v: 5500,
			d: "Gas cost of BLS12-381 map field element to G1"
		},
		Bls12381MapG2Gas: {
			v: 11e4,
			d: "Gas cost of BLS12-381 map field element to G2"
		},
		Bls12381MultiExpGasDiscount: {
			v: [
				[1, 1200],
				[2, 888],
				[3, 764],
				[4, 641],
				[5, 594],
				[6, 547],
				[7, 500],
				[8, 453],
				[9, 438],
				[10, 423],
				[11, 408],
				[12, 394],
				[13, 379],
				[14, 364],
				[15, 349],
				[16, 334],
				[17, 330],
				[18, 326],
				[19, 322],
				[20, 318],
				[21, 314],
				[22, 310],
				[23, 306],
				[24, 302],
				[25, 298],
				[26, 294],
				[27, 289],
				[28, 285],
				[29, 281],
				[30, 277],
				[31, 273],
				[32, 269],
				[33, 268],
				[34, 266],
				[35, 265],
				[36, 263],
				[37, 262],
				[38, 260],
				[39, 259],
				[40, 257],
				[41, 256],
				[42, 254],
				[43, 253],
				[44, 251],
				[45, 250],
				[46, 248],
				[47, 247],
				[48, 245],
				[49, 244],
				[50, 242],
				[51, 241],
				[52, 239],
				[53, 238],
				[54, 236],
				[55, 235],
				[56, 233],
				[57, 232],
				[58, 231],
				[59, 229],
				[60, 228],
				[61, 226],
				[62, 225],
				[63, 223],
				[64, 222],
				[65, 221],
				[66, 220],
				[67, 219],
				[68, 219],
				[69, 218],
				[70, 217],
				[71, 216],
				[72, 216],
				[73, 215],
				[74, 214],
				[75, 213],
				[76, 213],
				[77, 212],
				[78, 211],
				[79, 211],
				[80, 210],
				[81, 209],
				[82, 208],
				[83, 208],
				[84, 207],
				[85, 206],
				[86, 205],
				[87, 205],
				[88, 204],
				[89, 203],
				[90, 202],
				[91, 202],
				[92, 201],
				[93, 200],
				[94, 199],
				[95, 199],
				[96, 198],
				[97, 197],
				[98, 196],
				[99, 196],
				[100, 195],
				[101, 194],
				[102, 193],
				[103, 193],
				[104, 192],
				[105, 191],
				[106, 191],
				[107, 190],
				[108, 189],
				[109, 188],
				[110, 188],
				[111, 187],
				[112, 186],
				[113, 185],
				[114, 185],
				[115, 184],
				[116, 183],
				[117, 182],
				[118, 182],
				[119, 181],
				[120, 180],
				[121, 179],
				[122, 179],
				[123, 178],
				[124, 177],
				[125, 176],
				[126, 176],
				[127, 175],
				[128, 174]
			],
			d: "Discount gas costs of calls to the MultiExp precompiles with `k` (point, scalar) pair"
		}
	},
	vm: {},
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/eips/2565.js
var _2565_default = {
	name: "EIP-2565",
	number: 2565,
	comment: "ModExp gas cost",
	url: "https://eips.ethereum.org/EIPS/eip-2565",
	status: "Final",
	minimumHardfork: "byzantium",
	gasConfig: {},
	gasPrices: { modexpGquaddivisor: {
		v: 3,
		d: "Gquaddivisor from modexp precompile for gas calculation"
	} },
	vm: {},
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/eips/2718.js
var _2718_default = {
	name: "EIP-2718",
	comment: "Typed Transaction Envelope",
	url: "https://eips.ethereum.org/EIPS/eip-2718",
	status: "Final",
	minimumHardfork: "chainstart",
	gasConfig: {},
	gasPrices: {},
	vm: {},
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/eips/2929.js
var _2929_default = {
	name: "EIP-2929",
	comment: "Gas cost increases for state access opcodes",
	url: "https://eips.ethereum.org/EIPS/eip-2929",
	status: "Final",
	minimumHardfork: "chainstart",
	gasConfig: {},
	gasPrices: {
		coldsload: {
			v: 2100,
			d: "Gas cost of the first read of storage from a given location (per transaction)"
		},
		coldaccountaccess: {
			v: 2600,
			d: "Gas cost of the first read of a given address (per transaction)"
		},
		warmstorageread: {
			v: 100,
			d: "Gas cost of reading storage locations which have already loaded 'cold'"
		},
		sstoreCleanGasEIP2200: {
			v: 2900,
			d: "Once per SSTORE operation from clean non-zero to something else"
		},
		sstoreNoopGasEIP2200: {
			v: 100,
			d: "Once per SSTORE operation if the value doesn't change"
		},
		sstoreDirtyGasEIP2200: {
			v: 100,
			d: "Once per SSTORE operation if a dirty value is changed"
		},
		sstoreInitRefundEIP2200: {
			v: 19900,
			d: "Once per SSTORE operation for resetting to the original zero value"
		},
		sstoreCleanRefundEIP2200: {
			v: 4900,
			d: "Once per SSTORE operation for resetting to the original non-zero value"
		},
		call: {
			v: 0,
			d: "Base fee of the CALL opcode"
		},
		callcode: {
			v: 0,
			d: "Base fee of the CALLCODE opcode"
		},
		delegatecall: {
			v: 0,
			d: "Base fee of the DELEGATECALL opcode"
		},
		staticcall: {
			v: 0,
			d: "Base fee of the STATICCALL opcode"
		},
		balance: {
			v: 0,
			d: "Base fee of the BALANCE opcode"
		},
		extcodesize: {
			v: 0,
			d: "Base fee of the EXTCODESIZE opcode"
		},
		extcodecopy: {
			v: 0,
			d: "Base fee of the EXTCODECOPY opcode"
		},
		extcodehash: {
			v: 0,
			d: "Base fee of the EXTCODEHASH opcode"
		},
		sload: {
			v: 0,
			d: "Base fee of the SLOAD opcode"
		},
		sstore: {
			v: 0,
			d: "Base fee of the SSTORE opcode"
		}
	},
	vm: {},
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/eips/2930.js
var _2930_default = {
	name: "EIP-2930",
	comment: "Optional access lists",
	url: "https://eips.ethereum.org/EIPS/eip-2930",
	status: "Final",
	minimumHardfork: "istanbul",
	requiredEIPs: [2718, 2929],
	gasConfig: {},
	gasPrices: {
		accessListStorageKeyCost: {
			v: 1900,
			d: "Gas cost per storage key in an Access List transaction"
		},
		accessListAddressCost: {
			v: 2400,
			d: "Gas cost per storage key in an Access List transaction"
		}
	},
	vm: {},
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/eips/3198.js
var _3198_default = {
	name: "EIP-3198",
	number: 3198,
	comment: "BASEFEE opcode",
	url: "https://eips.ethereum.org/EIPS/eip-3198",
	status: "Final",
	minimumHardfork: "london",
	gasConfig: {},
	gasPrices: { basefee: {
		v: 2,
		d: "Gas cost of the BASEFEE opcode"
	} },
	vm: {},
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/eips/3529.js
var _3529_default = {
	name: "EIP-3529",
	comment: "Reduction in refunds",
	url: "https://eips.ethereum.org/EIPS/eip-3529",
	status: "Final",
	minimumHardfork: "berlin",
	requiredEIPs: [2929],
	gasConfig: { maxRefundQuotient: {
		v: 5,
		d: "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"
	} },
	gasPrices: {
		selfdestructRefund: {
			v: 0,
			d: "Refunded following a selfdestruct operation"
		},
		sstoreClearRefundEIP2200: {
			v: 4800,
			d: "Once per SSTORE operation for clearing an originally existing storage slot"
		}
	},
	vm: {},
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/eips/3540.js
var _3540_default = {
	name: "EIP-3540",
	number: 3540,
	comment: "EVM Object Format (EOF) v1",
	url: "https://eips.ethereum.org/EIPS/eip-3540",
	status: "Review",
	minimumHardfork: "london",
	requiredEIPs: [3541],
	gasConfig: {},
	gasPrices: {},
	vm: {},
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/eips/3541.js
var _3541_default = {
	name: "EIP-3541",
	comment: "Reject new contracts starting with the 0xEF byte",
	url: "https://eips.ethereum.org/EIPS/eip-3541",
	status: "Final",
	minimumHardfork: "berlin",
	requiredEIPs: [],
	gasConfig: {},
	gasPrices: {},
	vm: {},
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/eips/3554.js
var _3554_default = {
	name: "EIP-3554",
	comment: "Reduction in refunds",
	url: "Difficulty Bomb Delay to December 1st 2021",
	status: "Final",
	minimumHardfork: "muirGlacier",
	requiredEIPs: [],
	gasConfig: {},
	gasPrices: {},
	vm: {},
	pow: { difficultyBombDelay: {
		v: 95e5,
		d: "the amount of blocks to delay the difficulty bomb with"
	} }
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/eips/3607.js
var _3607_default = {
	name: "EIP-3607",
	number: 3607,
	comment: "Reject transactions from senders with deployed code",
	url: "https://eips.ethereum.org/EIPS/eip-3607",
	status: "Final",
	minimumHardfork: "chainstart",
	requiredEIPs: [],
	gasConfig: {},
	gasPrices: {},
	vm: {},
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/eips/3651.js
var _3651_default = {
	name: "EIP-3651",
	number: 3198,
	comment: "Warm COINBASE",
	url: "https://eips.ethereum.org/EIPS/eip-3651",
	status: "Review",
	minimumHardfork: "london",
	requiredEIPs: [2929],
	gasConfig: {},
	gasPrices: {},
	vm: {},
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/eips/3670.js
var _3670_default = {
	name: "EIP-3670",
	number: 3670,
	comment: "EOF - Code Validation",
	url: "https://eips.ethereum.org/EIPS/eip-3670",
	status: "Review",
	minimumHardfork: "london",
	requiredEIPs: [3540],
	gasConfig: {},
	gasPrices: {},
	vm: {},
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/eips/3675.js
var _3675_default = {
	name: "EIP-3675",
	number: 3675,
	comment: "Upgrade consensus to Proof-of-Stake",
	url: "https://eips.ethereum.org/EIPS/eip-3675",
	status: "Final",
	minimumHardfork: "london",
	requiredEIPs: [],
	gasConfig: {},
	gasPrices: {},
	vm: {},
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/eips/3855.js
var _3855_default = {
	name: "EIP-3855",
	number: 3855,
	comment: "PUSH0 instruction",
	url: "https://eips.ethereum.org/EIPS/eip-3855",
	status: "Review",
	minimumHardfork: "chainstart",
	requiredEIPs: [],
	gasConfig: {},
	gasPrices: { push0: {
		v: 2,
		d: "Base fee of the PUSH0 opcode"
	} },
	vm: {},
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/eips/3860.js
var _3860_default = {
	name: "EIP-3860",
	number: 3860,
	comment: "Limit and meter initcode",
	url: "https://eips.ethereum.org/EIPS/eip-3860",
	status: "Review",
	minimumHardfork: "spuriousDragon",
	requiredEIPs: [],
	gasConfig: {},
	gasPrices: { initCodeWordCost: {
		v: 2,
		d: "Gas to pay for each word (32 bytes) of initcode when creating a contract"
	} },
	vm: { maxInitCodeSize: {
		v: 49152,
		d: "Maximum length of initialization code when creating a contract"
	} },
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/eips/4345.js
var _4345_default = {
	name: "EIP-4345",
	number: 4345,
	comment: "Difficulty Bomb Delay to June 2022",
	url: "https://eips.ethereum.org/EIPS/eip-4345",
	status: "Final",
	minimumHardfork: "london",
	gasConfig: {},
	gasPrices: {},
	vm: {},
	pow: { difficultyBombDelay: {
		v: 107e5,
		d: "the amount of blocks to delay the difficulty bomb with"
	} }
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/eips/4399.js
var _4399_default = {
	name: "EIP-4399",
	number: 4399,
	comment: "Supplant DIFFICULTY opcode with PREVRANDAO",
	url: "https://eips.ethereum.org/EIPS/eip-4399",
	status: "Review",
	minimumHardfork: "london",
	requiredEIPs: [],
	gasConfig: {},
	gasPrices: {},
	vm: {},
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/eips/5133.js
var _5133_default = {
	name: "EIP-5133",
	number: 5133,
	comment: "Delaying Difficulty Bomb to mid-September 2022",
	url: "https://eips.ethereum.org/EIPS/eip-5133",
	status: "Draft",
	minimumHardfork: "grayGlacier",
	gasConfig: {},
	gasPrices: {},
	vm: {},
	pow: { difficultyBombDelay: {
		v: 114e5,
		d: "the amount of blocks to delay the difficulty bomb with"
	} }
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/eips/index.js
const EIPs = {
	1153: _1153_default,
	1559: _1559_default,
	2315: _2315_default,
	2537: _2537_default,
	2565: _2565_default,
	2718: _2718_default,
	2929: _2929_default,
	2930: _2930_default,
	3198: _3198_default,
	3529: _3529_default,
	3540: _3540_default,
	3541: _3541_default,
	3554: _3554_default,
	3607: _3607_default,
	3651: _3651_default,
	3670: _3670_default,
	3675: _3675_default,
	3855: _3855_default,
	3860: _3860_default,
	4345: _4345_default,
	4399: _4399_default,
	5133: _5133_default
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/hardforks/chainstart.js
var chainstart_default = {
	name: "chainstart",
	comment: "Start of the Ethereum main chain",
	url: "",
	status: "",
	gasConfig: {
		minGasLimit: {
			v: 5e3,
			d: "Minimum the gas limit may ever be"
		},
		gasLimitBoundDivisor: {
			v: 1024,
			d: "The bound divisor of the gas limit, used in update calculations"
		},
		maxRefundQuotient: {
			v: 2,
			d: "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"
		}
	},
	gasPrices: {
		base: {
			v: 2,
			d: "Gas base cost, used e.g. for ChainID opcode (Istanbul)"
		},
		tierStep: {
			v: [
				0,
				2,
				3,
				5,
				8,
				10,
				20
			],
			d: "Once per operation, for a selection of them"
		},
		exp: {
			v: 10,
			d: "Base fee of the EXP opcode"
		},
		expByte: {
			v: 10,
			d: "Times ceil(log256(exponent)) for the EXP instruction"
		},
		sha3: {
			v: 30,
			d: "Base fee of the SHA3 opcode"
		},
		sha3Word: {
			v: 6,
			d: "Once per word of the SHA3 operation's data"
		},
		sload: {
			v: 50,
			d: "Base fee of the SLOAD opcode"
		},
		sstoreSet: {
			v: 2e4,
			d: "Once per SSTORE operation if the zeroness changes from zero"
		},
		sstoreReset: {
			v: 5e3,
			d: "Once per SSTORE operation if the zeroness does not change from zero"
		},
		sstoreRefund: {
			v: 15e3,
			d: "Once per SSTORE operation if the zeroness changes to zero"
		},
		jumpdest: {
			v: 1,
			d: "Base fee of the JUMPDEST opcode"
		},
		log: {
			v: 375,
			d: "Base fee of the LOG opcode"
		},
		logData: {
			v: 8,
			d: "Per byte in a LOG* operation's data"
		},
		logTopic: {
			v: 375,
			d: "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas"
		},
		create: {
			v: 32e3,
			d: "Base fee of the CREATE opcode"
		},
		call: {
			v: 40,
			d: "Base fee of the CALL opcode"
		},
		callStipend: {
			v: 2300,
			d: "Free gas given at beginning of call"
		},
		callValueTransfer: {
			v: 9e3,
			d: "Paid for CALL when the value transfor is non-zero"
		},
		callNewAccount: {
			v: 25e3,
			d: "Paid for CALL when the destination address didn't exist prior"
		},
		selfdestructRefund: {
			v: 24e3,
			d: "Refunded following a selfdestruct operation"
		},
		memory: {
			v: 3,
			d: "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL"
		},
		quadCoeffDiv: {
			v: 512,
			d: "Divisor for the quadratic particle of the memory cost equation"
		},
		createData: {
			v: 200,
			d: ""
		},
		tx: {
			v: 21e3,
			d: "Per transaction. NOTE: Not payable on data of calls between transactions"
		},
		txCreation: {
			v: 32e3,
			d: "The cost of creating a contract via tx"
		},
		txDataZero: {
			v: 4,
			d: "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions"
		},
		txDataNonZero: {
			v: 68,
			d: "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"
		},
		copy: {
			v: 3,
			d: "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added"
		},
		ecRecover: {
			v: 3e3,
			d: ""
		},
		sha256: {
			v: 60,
			d: ""
		},
		sha256Word: {
			v: 12,
			d: ""
		},
		ripemd160: {
			v: 600,
			d: ""
		},
		ripemd160Word: {
			v: 120,
			d: ""
		},
		identity: {
			v: 15,
			d: ""
		},
		identityWord: {
			v: 3,
			d: ""
		},
		stop: {
			v: 0,
			d: "Base fee of the STOP opcode"
		},
		add: {
			v: 3,
			d: "Base fee of the ADD opcode"
		},
		mul: {
			v: 5,
			d: "Base fee of the MUL opcode"
		},
		sub: {
			v: 3,
			d: "Base fee of the SUB opcode"
		},
		div: {
			v: 5,
			d: "Base fee of the DIV opcode"
		},
		sdiv: {
			v: 5,
			d: "Base fee of the SDIV opcode"
		},
		mod: {
			v: 5,
			d: "Base fee of the MOD opcode"
		},
		smod: {
			v: 5,
			d: "Base fee of the SMOD opcode"
		},
		addmod: {
			v: 8,
			d: "Base fee of the ADDMOD opcode"
		},
		mulmod: {
			v: 8,
			d: "Base fee of the MULMOD opcode"
		},
		signextend: {
			v: 5,
			d: "Base fee of the SIGNEXTEND opcode"
		},
		lt: {
			v: 3,
			d: "Base fee of the LT opcode"
		},
		gt: {
			v: 3,
			d: "Base fee of the GT opcode"
		},
		slt: {
			v: 3,
			d: "Base fee of the SLT opcode"
		},
		sgt: {
			v: 3,
			d: "Base fee of the SGT opcode"
		},
		eq: {
			v: 3,
			d: "Base fee of the EQ opcode"
		},
		iszero: {
			v: 3,
			d: "Base fee of the ISZERO opcode"
		},
		and: {
			v: 3,
			d: "Base fee of the AND opcode"
		},
		or: {
			v: 3,
			d: "Base fee of the OR opcode"
		},
		xor: {
			v: 3,
			d: "Base fee of the XOR opcode"
		},
		not: {
			v: 3,
			d: "Base fee of the NOT opcode"
		},
		byte: {
			v: 3,
			d: "Base fee of the BYTE opcode"
		},
		address: {
			v: 2,
			d: "Base fee of the ADDRESS opcode"
		},
		balance: {
			v: 20,
			d: "Base fee of the BALANCE opcode"
		},
		origin: {
			v: 2,
			d: "Base fee of the ORIGIN opcode"
		},
		caller: {
			v: 2,
			d: "Base fee of the CALLER opcode"
		},
		callvalue: {
			v: 2,
			d: "Base fee of the CALLVALUE opcode"
		},
		calldataload: {
			v: 3,
			d: "Base fee of the CALLDATALOAD opcode"
		},
		calldatasize: {
			v: 2,
			d: "Base fee of the CALLDATASIZE opcode"
		},
		calldatacopy: {
			v: 3,
			d: "Base fee of the CALLDATACOPY opcode"
		},
		codesize: {
			v: 2,
			d: "Base fee of the CODESIZE opcode"
		},
		codecopy: {
			v: 3,
			d: "Base fee of the CODECOPY opcode"
		},
		gasprice: {
			v: 2,
			d: "Base fee of the GASPRICE opcode"
		},
		extcodesize: {
			v: 20,
			d: "Base fee of the EXTCODESIZE opcode"
		},
		extcodecopy: {
			v: 20,
			d: "Base fee of the EXTCODECOPY opcode"
		},
		blockhash: {
			v: 20,
			d: "Base fee of the BLOCKHASH opcode"
		},
		coinbase: {
			v: 2,
			d: "Base fee of the COINBASE opcode"
		},
		timestamp: {
			v: 2,
			d: "Base fee of the TIMESTAMP opcode"
		},
		number: {
			v: 2,
			d: "Base fee of the NUMBER opcode"
		},
		difficulty: {
			v: 2,
			d: "Base fee of the DIFFICULTY opcode"
		},
		gaslimit: {
			v: 2,
			d: "Base fee of the GASLIMIT opcode"
		},
		pop: {
			v: 2,
			d: "Base fee of the POP opcode"
		},
		mload: {
			v: 3,
			d: "Base fee of the MLOAD opcode"
		},
		mstore: {
			v: 3,
			d: "Base fee of the MSTORE opcode"
		},
		mstore8: {
			v: 3,
			d: "Base fee of the MSTORE8 opcode"
		},
		sstore: {
			v: 0,
			d: "Base fee of the SSTORE opcode"
		},
		jump: {
			v: 8,
			d: "Base fee of the JUMP opcode"
		},
		jumpi: {
			v: 10,
			d: "Base fee of the JUMPI opcode"
		},
		pc: {
			v: 2,
			d: "Base fee of the PC opcode"
		},
		msize: {
			v: 2,
			d: "Base fee of the MSIZE opcode"
		},
		gas: {
			v: 2,
			d: "Base fee of the GAS opcode"
		},
		push: {
			v: 3,
			d: "Base fee of the PUSH opcode"
		},
		dup: {
			v: 3,
			d: "Base fee of the DUP opcode"
		},
		swap: {
			v: 3,
			d: "Base fee of the SWAP opcode"
		},
		callcode: {
			v: 40,
			d: "Base fee of the CALLCODE opcode"
		},
		return: {
			v: 0,
			d: "Base fee of the RETURN opcode"
		},
		invalid: {
			v: 0,
			d: "Base fee of the INVALID opcode"
		},
		selfdestruct: {
			v: 0,
			d: "Base fee of the SELFDESTRUCT opcode"
		}
	},
	vm: {
		stackLimit: {
			v: 1024,
			d: "Maximum size of VM stack allowed"
		},
		callCreateDepth: {
			v: 1024,
			d: "Maximum depth of call/create stack"
		},
		maxExtraDataSize: {
			v: 32,
			d: "Maximum size extra data may be after Genesis"
		}
	},
	pow: {
		minimumDifficulty: {
			v: 131072,
			d: "The minimum that the difficulty may ever be"
		},
		difficultyBoundDivisor: {
			v: 2048,
			d: "The bound divisor of the difficulty, used in the update calculations"
		},
		durationLimit: {
			v: 13,
			d: "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not"
		},
		epochDuration: {
			v: 3e4,
			d: "Duration between proof-of-work epochs"
		},
		timebombPeriod: {
			v: 1e5,
			d: "Exponential difficulty timebomb period"
		},
		minerReward: {
			v: "5000000000000000000",
			d: "the amount a miner get rewarded for mining a block"
		},
		difficultyBombDelay: {
			v: 0,
			d: "the amount of blocks to delay the difficulty bomb with"
		}
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/hardforks/dao.js
var dao_default = {
	name: "dao",
	comment: "DAO rescue hardfork",
	url: "https://eips.ethereum.org/EIPS/eip-779",
	status: "Final",
	gasConfig: {},
	gasPrices: {},
	vm: {},
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/hardforks/homestead.js
var homestead_default = {
	name: "homestead",
	comment: "Homestead hardfork with protocol and network changes",
	url: "https://eips.ethereum.org/EIPS/eip-606",
	status: "Final",
	gasConfig: {},
	gasPrices: { delegatecall: {
		v: 40,
		d: "Base fee of the DELEGATECALL opcode"
	} },
	vm: {},
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/hardforks/tangerineWhistle.js
var tangerineWhistle_default = {
	name: "tangerineWhistle",
	comment: "Hardfork with gas cost changes for IO-heavy operations",
	url: "https://eips.ethereum.org/EIPS/eip-608",
	status: "Final",
	gasConfig: {},
	gasPrices: {
		sload: {
			v: 200,
			d: "Once per SLOAD operation"
		},
		call: {
			v: 700,
			d: "Once per CALL operation & message call transaction"
		},
		extcodesize: {
			v: 700,
			d: "Base fee of the EXTCODESIZE opcode"
		},
		extcodecopy: {
			v: 700,
			d: "Base fee of the EXTCODECOPY opcode"
		},
		balance: {
			v: 400,
			d: "Base fee of the BALANCE opcode"
		},
		delegatecall: {
			v: 700,
			d: "Base fee of the DELEGATECALL opcode"
		},
		callcode: {
			v: 700,
			d: "Base fee of the CALLCODE opcode"
		},
		selfdestruct: {
			v: 5e3,
			d: "Base fee of the SELFDESTRUCT opcode"
		}
	},
	vm: {},
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/hardforks/spuriousDragon.js
var spuriousDragon_default = {
	name: "spuriousDragon",
	comment: "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
	url: "https://eips.ethereum.org/EIPS/eip-607",
	status: "Final",
	gasConfig: {},
	gasPrices: { expByte: {
		v: 50,
		d: "Times ceil(log256(exponent)) for the EXP instruction"
	} },
	vm: { maxCodeSize: {
		v: 24576,
		d: "Maximum length of contract code"
	} },
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/hardforks/byzantium.js
var byzantium_default = {
	name: "byzantium",
	comment: "Hardfork with new precompiles, instructions and other protocol changes",
	url: "https://eips.ethereum.org/EIPS/eip-609",
	status: "Final",
	gasConfig: {},
	gasPrices: {
		modexpGquaddivisor: {
			v: 20,
			d: "Gquaddivisor from modexp precompile for gas calculation"
		},
		ecAdd: {
			v: 500,
			d: "Gas costs for curve addition precompile"
		},
		ecMul: {
			v: 4e4,
			d: "Gas costs for curve multiplication precompile"
		},
		ecPairing: {
			v: 1e5,
			d: "Base gas costs for curve pairing precompile"
		},
		ecPairingWord: {
			v: 8e4,
			d: "Gas costs regarding curve pairing precompile input length"
		},
		revert: {
			v: 0,
			d: "Base fee of the REVERT opcode"
		},
		staticcall: {
			v: 700,
			d: "Base fee of the STATICCALL opcode"
		},
		returndatasize: {
			v: 2,
			d: "Base fee of the RETURNDATASIZE opcode"
		},
		returndatacopy: {
			v: 3,
			d: "Base fee of the RETURNDATACOPY opcode"
		}
	},
	vm: {},
	pow: {
		minerReward: {
			v: "3000000000000000000",
			d: "the amount a miner get rewarded for mining a block"
		},
		difficultyBombDelay: {
			v: 3e6,
			d: "the amount of blocks to delay the difficulty bomb with"
		}
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/hardforks/constantinople.js
var constantinople_default = {
	name: "constantinople",
	comment: "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
	url: "https://eips.ethereum.org/EIPS/eip-1013",
	status: "Final",
	gasConfig: {},
	gasPrices: {
		netSstoreNoopGas: {
			v: 200,
			d: "Once per SSTORE operation if the value doesn't change"
		},
		netSstoreInitGas: {
			v: 2e4,
			d: "Once per SSTORE operation from clean zero"
		},
		netSstoreCleanGas: {
			v: 5e3,
			d: "Once per SSTORE operation from clean non-zero"
		},
		netSstoreDirtyGas: {
			v: 200,
			d: "Once per SSTORE operation from dirty"
		},
		netSstoreClearRefund: {
			v: 15e3,
			d: "Once per SSTORE operation for clearing an originally existing storage slot"
		},
		netSstoreResetRefund: {
			v: 4800,
			d: "Once per SSTORE operation for resetting to the original non-zero value"
		},
		netSstoreResetClearRefund: {
			v: 19800,
			d: "Once per SSTORE operation for resetting to the original zero value"
		},
		shl: {
			v: 3,
			d: "Base fee of the SHL opcode"
		},
		shr: {
			v: 3,
			d: "Base fee of the SHR opcode"
		},
		sar: {
			v: 3,
			d: "Base fee of the SAR opcode"
		},
		extcodehash: {
			v: 400,
			d: "Base fee of the EXTCODEHASH opcode"
		},
		create2: {
			v: 32e3,
			d: "Base fee of the CREATE2 opcode"
		}
	},
	vm: {},
	pow: {
		minerReward: {
			v: "2000000000000000000",
			d: "The amount a miner gets rewarded for mining a block"
		},
		difficultyBombDelay: {
			v: 5e6,
			d: "the amount of blocks to delay the difficulty bomb with"
		}
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/hardforks/petersburg.js
var petersburg_default = {
	name: "petersburg",
	comment: "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
	url: "https://eips.ethereum.org/EIPS/eip-1716",
	status: "Final",
	gasConfig: {},
	gasPrices: {
		netSstoreNoopGas: {
			v: null,
			d: "Removed along EIP-1283"
		},
		netSstoreInitGas: {
			v: null,
			d: "Removed along EIP-1283"
		},
		netSstoreCleanGas: {
			v: null,
			d: "Removed along EIP-1283"
		},
		netSstoreDirtyGas: {
			v: null,
			d: "Removed along EIP-1283"
		},
		netSstoreClearRefund: {
			v: null,
			d: "Removed along EIP-1283"
		},
		netSstoreResetRefund: {
			v: null,
			d: "Removed along EIP-1283"
		},
		netSstoreResetClearRefund: {
			v: null,
			d: "Removed along EIP-1283"
		}
	},
	vm: {},
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/hardforks/istanbul.js
var istanbul_default = {
	name: "istanbul",
	comment: "HF targeted for December 2019 following the Constantinople/Petersburg HF",
	url: "https://eips.ethereum.org/EIPS/eip-1679",
	status: "Final",
	gasConfig: {},
	gasPrices: {
		blake2Round: {
			v: 1,
			d: "Gas cost per round for the Blake2 F precompile"
		},
		ecAdd: {
			v: 150,
			d: "Gas costs for curve addition precompile"
		},
		ecMul: {
			v: 6e3,
			d: "Gas costs for curve multiplication precompile"
		},
		ecPairing: {
			v: 45e3,
			d: "Base gas costs for curve pairing precompile"
		},
		ecPairingWord: {
			v: 34e3,
			d: "Gas costs regarding curve pairing precompile input length"
		},
		txDataNonZero: {
			v: 16,
			d: "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"
		},
		sstoreSentryGasEIP2200: {
			v: 2300,
			d: "Minimum gas required to be present for an SSTORE call, not consumed"
		},
		sstoreNoopGasEIP2200: {
			v: 800,
			d: "Once per SSTORE operation if the value doesn't change"
		},
		sstoreDirtyGasEIP2200: {
			v: 800,
			d: "Once per SSTORE operation if a dirty value is changed"
		},
		sstoreInitGasEIP2200: {
			v: 2e4,
			d: "Once per SSTORE operation from clean zero to non-zero"
		},
		sstoreInitRefundEIP2200: {
			v: 19200,
			d: "Once per SSTORE operation for resetting to the original zero value"
		},
		sstoreCleanGasEIP2200: {
			v: 5e3,
			d: "Once per SSTORE operation from clean non-zero to something else"
		},
		sstoreCleanRefundEIP2200: {
			v: 4200,
			d: "Once per SSTORE operation for resetting to the original non-zero value"
		},
		sstoreClearRefundEIP2200: {
			v: 15e3,
			d: "Once per SSTORE operation for clearing an originally existing storage slot"
		},
		balance: {
			v: 700,
			d: "Base fee of the BALANCE opcode"
		},
		extcodehash: {
			v: 700,
			d: "Base fee of the EXTCODEHASH opcode"
		},
		chainid: {
			v: 2,
			d: "Base fee of the CHAINID opcode"
		},
		selfbalance: {
			v: 5,
			d: "Base fee of the SELFBALANCE opcode"
		},
		sload: {
			v: 800,
			d: "Base fee of the SLOAD opcode"
		}
	},
	vm: {},
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/hardforks/muirGlacier.js
var muirGlacier_default = {
	name: "muirGlacier",
	comment: "HF to delay the difficulty bomb",
	url: "https://eips.ethereum.org/EIPS/eip-2384",
	status: "Final",
	gasConfig: {},
	gasPrices: {},
	vm: {},
	pow: { difficultyBombDelay: {
		v: 9e6,
		d: "the amount of blocks to delay the difficulty bomb with"
	} }
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/hardforks/berlin.js
var berlin_default = {
	name: "berlin",
	comment: "HF targeted for July 2020 following the Muir Glacier HF",
	url: "https://eips.ethereum.org/EIPS/eip-2070",
	status: "Final",
	eips: [
		2565,
		2929,
		2718,
		2930
	]
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/hardforks/london.js
var london_default = {
	name: "london",
	comment: "HF targeted for July 2021 following the Berlin fork",
	url: "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
	status: "Final",
	eips: [
		1559,
		3198,
		3529,
		3541
	]
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/hardforks/shanghai.js
var shanghai_default = {
	name: "shanghai",
	comment: "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
	url: "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
	status: "Final",
	eips: [
		3651,
		3855,
		3860,
		4895
	]
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/hardforks/arrowGlacier.js
var arrowGlacier_default = {
	name: "arrowGlacier",
	comment: "HF to delay the difficulty bomb",
	url: "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
	status: "Final",
	eips: [4345],
	gasConfig: {},
	gasPrices: {},
	vm: {},
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/hardforks/grayGlacier.js
var grayGlacier_default = {
	name: "grayGlacier",
	comment: "Delaying the difficulty bomb to Mid September 2022",
	url: "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
	status: "Draft",
	eips: [5133],
	gasConfig: {},
	gasPrices: {},
	vm: {},
	pow: {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/hardforks/mergeForkIdTransition.js
var mergeForkIdTransition_default = {
	name: "mergeForkIdTransition",
	comment: "Pre-merge hardfork to fork off non-upgraded clients",
	url: "https://eips.ethereum.org/EIPS/eip-3675",
	status: "Draft",
	eips: []
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/hardforks/merge.js
var merge_default = {
	name: "merge",
	comment: "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
	url: "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
	status: "Final",
	consensus: {
		type: "pos",
		algorithm: "casper",
		casper: {}
	},
	eips: [3675, 4399]
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/hardforks/index.js
const hardforks = {
	chainstart: chainstart_default,
	homestead: homestead_default,
	dao: dao_default,
	tangerineWhistle: tangerineWhistle_default,
	spuriousDragon: spuriousDragon_default,
	byzantium: byzantium_default,
	constantinople: constantinople_default,
	petersburg: petersburg_default,
	istanbul: istanbul_default,
	muirGlacier: muirGlacier_default,
	berlin: berlin_default,
	london: london_default,
	shanghai: shanghai_default,
	arrowGlacier: arrowGlacier_default,
	grayGlacier: grayGlacier_default,
	mergeForkIdTransition: mergeForkIdTransition_default,
	merge: merge_default
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/common/common.js
var import_crc32 = __toESM(require_crc32(), 1);
const { buf: crc32Uint8Array } = import_crc32.default;
/**
* Common class to access chain and hardfork parameters and to provide
* a unified and shared view on the network and hardfork state.
*
* Use the {@link Common.custom} static constructor for creating simple
* custom chain {@link Common} objects (more complete custom chain setups
* can be created via the main constructor and the {@link CommonOpts.customChains} parameter).
*/
var Common = class Common extends EventEmitter {
	/**
	* Creates a {@link Common} object for a custom chain, based on a standard one.
	*
	* It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden
	* in a provided {@link chainParamsOrName} dictionary. Some usage example:
	*
	* ```javascript
	* Common.custom({chainId: 123})
	* ```
	*
	* There are also selected supported custom chains which can be initialized by using one of the
	* {@link CustomChains} for {@link chainParamsOrName}, e.g.:
	*
	* ```javascript
	* Common.custom(CustomChains.MaticMumbai)
	* ```
	*
	* Note that these supported custom chains only provide some base parameters (usually the chain and
	* network ID and a name) and can only be used for selected use cases (e.g. sending a tx with
	* the `web3-utils/tx` library to a Layer-2 chain).
	*
	* @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain
	* @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others
	*/
	static custom(chainParamsOrName, opts = {}) {
		var _a$3;
		const baseChain = (_a$3 = opts.baseChain) !== null && _a$3 !== void 0 ? _a$3 : "mainnet";
		const standardChainParams = Object.assign({}, Common._getChainParams(baseChain));
		standardChainParams.name = "custom-chain";
		if (typeof chainParamsOrName !== "string") return new Common(Object.assign({ chain: Object.assign(Object.assign({}, standardChainParams), chainParamsOrName) }, opts));
		if (chainParamsOrName === CustomChain.PolygonMainnet) return Common.custom({
			name: CustomChain.PolygonMainnet,
			chainId: 137,
			networkId: 137
		}, opts);
		if (chainParamsOrName === CustomChain.PolygonMumbai) return Common.custom({
			name: CustomChain.PolygonMumbai,
			chainId: 80001,
			networkId: 80001
		}, opts);
		if (chainParamsOrName === CustomChain.ArbitrumRinkebyTestnet) return Common.custom({
			name: CustomChain.ArbitrumRinkebyTestnet,
			chainId: 421611,
			networkId: 421611
		}, opts);
		if (chainParamsOrName === CustomChain.ArbitrumOne) return Common.custom({
			name: CustomChain.ArbitrumOne,
			chainId: 42161,
			networkId: 42161
		}, opts);
		if (chainParamsOrName === CustomChain.xDaiChain) return Common.custom({
			name: CustomChain.xDaiChain,
			chainId: 100,
			networkId: 100
		}, opts);
		if (chainParamsOrName === CustomChain.OptimisticKovan) return Common.custom({
			name: CustomChain.OptimisticKovan,
			chainId: 69,
			networkId: 69
		}, Object.assign({ hardfork: Hardfork.Berlin }, opts));
		if (chainParamsOrName === CustomChain.OptimisticEthereum) return Common.custom({
			name: CustomChain.OptimisticEthereum,
			chainId: 10,
			networkId: 10
		}, Object.assign({ hardfork: Hardfork.Berlin }, opts));
		throw new Error(`Custom chain ${chainParamsOrName} not supported`);
	}
	/**
	* Static method to load and set common from a geth genesis json
	* @param genesisJson json of geth configuration
	* @param { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge } to further configure the common instance
	* @returns Common
	*/
	static fromGethGenesis(genesisJson, { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge }) {
		var _a$3;
		const genesisParams = parseGethGenesis(genesisJson, chain, mergeForkIdPostMerge);
		const common = new Common({
			chain: (_a$3 = genesisParams.name) !== null && _a$3 !== void 0 ? _a$3 : "custom",
			customChains: [genesisParams],
			eips,
			hardfork: hardfork !== null && hardfork !== void 0 ? hardfork : genesisParams.hardfork
		});
		if (genesisHash !== void 0) common.setForkHashes(genesisHash);
		return common;
	}
	/**
	* Static method to determine if a {@link chainId} is supported as a standard chain
	* @param chainId bigint id (`1`) of a standard chain
	* @returns boolean
	*/
	static isSupportedChainId(chainId) {
		const initializedChains = this._getInitializedChains();
		return Boolean(initializedChains.names[chainId.toString()]);
	}
	static _getChainParams(_chain, customChains) {
		let chain = _chain;
		const initializedChains = this._getInitializedChains(customChains);
		if (typeof chain === "number" || typeof chain === "bigint") {
			chain = chain.toString();
			if (initializedChains.names[chain]) {
				const name$1 = initializedChains.names[chain];
				return initializedChains[name$1];
			}
			throw new Error(`Chain with ID ${chain} not supported`);
		}
		if (initializedChains[chain] !== void 0) return initializedChains[chain];
		throw new Error(`Chain with name ${chain} not supported`);
	}
	constructor(opts) {
		var _a$3, _b;
		super();
		this._eips = [];
		this._customChains = (_a$3 = opts.customChains) !== null && _a$3 !== void 0 ? _a$3 : [];
		this._chainParams = this.setChain(opts.chain);
		this.DEFAULT_HARDFORK = (_b = this._chainParams.defaultHardfork) !== null && _b !== void 0 ? _b : Hardfork.Merge;
		this.HARDFORK_CHANGES = this.hardforks().map((hf) => [hf.name, hardforks[hf.name]]);
		this._hardfork = this.DEFAULT_HARDFORK;
		if (opts.hardfork !== void 0) this.setHardfork(opts.hardfork);
		if (opts.eips) this.setEIPs(opts.eips);
	}
	/**
	* Sets the chain
	* @param chain String ('mainnet') or Number (1) chain representation.
	*              Or, a Dictionary of chain parameters for a private network.
	* @returns The dictionary with parameters set as chain
	*/
	setChain(chain) {
		if (typeof chain === "number" || typeof chain === "bigint" || typeof chain === "string") this._chainParams = Common._getChainParams(chain, this._customChains);
		else if (typeof chain === "object") {
			if (this._customChains.length > 0) throw new Error("Chain must be a string, number, or bigint when initialized with customChains passed in");
			const required = [
				"networkId",
				"genesis",
				"hardforks",
				"bootstrapNodes"
			];
			for (const param of required) if (!(param in chain)) throw new Error(`Missing required chain parameter: ${param}`);
			this._chainParams = chain;
		} else throw new Error("Wrong input format");
		for (const hf of this.hardforks()) if (hf.block === void 0) throw new Error(`Hardfork cannot have undefined block number`);
		return this._chainParams;
	}
	/**
	* Sets the hardfork to get params for
	* @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum
	*/
	setHardfork(hardfork) {
		let existing = false;
		for (const hfChanges of this.HARDFORK_CHANGES) if (hfChanges[0] === hardfork) {
			if (this._hardfork !== hardfork) {
				this._hardfork = hardfork;
				this.emit("hardforkChanged", hardfork);
			}
			existing = true;
		}
		if (!existing) throw new Error(`Hardfork with name ${hardfork} not supported`);
	}
	/**
	* Returns the hardfork based on the block number or an optional
	* total difficulty (Merge HF) provided.
	*
	* An optional TD takes precedence in case the corresponding HF block
	* is set to `null` or otherwise needs to match (if not an error
	* will be thrown).
	*
	* @param blockNumber
	* @param td : total difficulty of the parent block (for block hf) OR of the chain latest (for chain hf)
	* @param timestamp: timestamp in seconds at which block was/is to be minted
	* @returns The name of the HF
	*/
	getHardforkByBlockNumber(_blockNumber, _td, _timestamp) {
		const blockNumber = toType(_blockNumber, TypeOutput.BigInt);
		const td = toType(_td, TypeOutput.BigInt);
		const timestamp = toType(_timestamp, TypeOutput.Number);
		const hfs = this.hardforks().filter((hf) => hf.block !== null || hf.ttd !== null && hf.ttd !== void 0 || hf.timestamp !== void 0);
		const mergeIndex = hfs.findIndex((hf) => hf.ttd !== null && hf.ttd !== void 0);
		const doubleTTDHF = hfs.slice(mergeIndex + 1).findIndex((hf) => hf.ttd !== null && hf.ttd !== void 0);
		if (doubleTTDHF >= 0) throw Error(`More than one merge hardforks found with ttd specified`);
		let hfIndex = hfs.findIndex((hf) => hf.block !== null && hf.block > blockNumber || timestamp !== void 0 && Number(hf.timestamp) > timestamp);
		if (hfIndex === -1) hfIndex = hfs.length;
		else if (hfIndex === 0) throw Error("Must have at least one hardfork at block 0");
		if (timestamp === void 0) {
			const stepBack = hfs.slice(0, hfIndex).reverse().findIndex((hf) => hf.block !== null || hf.ttd !== void 0);
			hfIndex -= stepBack;
		}
		hfIndex -= 1;
		if (hfs[hfIndex].block === null && hfs[hfIndex].timestamp === void 0) {
			if (td === void 0 || td === null || BigInt(hfs[hfIndex].ttd) > td) hfIndex -= 1;
		} else if (mergeIndex >= 0 && td !== void 0 && td !== null) {
			if (hfIndex >= mergeIndex && BigInt(hfs[mergeIndex].ttd) > td) throw Error("Maximum HF determined by total difficulty is lower than the block number HF");
			else if (hfIndex < mergeIndex && BigInt(hfs[mergeIndex].ttd) <= td) throw Error("HF determined by block number is lower than the minimum total difficulty HF");
		}
		const hfStartIndex = hfIndex;
		for (; hfIndex < hfs.length - 1; hfIndex += 1) if (hfs[hfIndex].block !== hfs[hfIndex + 1].block || hfs[hfIndex].timestamp !== hfs[hfIndex + 1].timestamp) break;
		if (timestamp) {
			const minTimeStamp = hfs.slice(0, hfStartIndex).reduce((acc, hf) => {
				var _a$3;
				return Math.max(Number((_a$3 = hf.timestamp) !== null && _a$3 !== void 0 ? _a$3 : "0"), acc);
			}, 0);
			if (minTimeStamp > timestamp) throw Error(`Maximum HF determined by timestamp is lower than the block number/ttd HF`);
			const maxTimeStamp = hfs.slice(hfIndex + 1).reduce((acc, hf) => {
				var _a$3;
				return Math.min(Number((_a$3 = hf.timestamp) !== null && _a$3 !== void 0 ? _a$3 : timestamp), acc);
			}, timestamp);
			if (maxTimeStamp < timestamp) throw Error(`Maximum HF determined by block number/ttd is lower than timestamp HF`);
		}
		const hardfork = hfs[hfIndex];
		return hardfork.name;
	}
	/**
	* Sets a new hardfork based on the block number or an optional
	* total difficulty (Merge HF) provided.
	*
	* An optional TD takes precedence in case the corresponding HF block
	* is set to `null` or otherwise needs to match (if not an error
	* will be thrown).
	*
	* @param blockNumber
	* @param td
	* @param timestamp
	* @returns The name of the HF set
	*/
	setHardforkByBlockNumber(blockNumber, td, timestamp) {
		const hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);
		this.setHardfork(hardfork);
		return hardfork;
	}
	/**
	* Internal helper function, returns the params for the given hardfork for the chain set
	* @param hardfork Hardfork name
	* @returns Dictionary with hardfork params or null if hardfork not on chain
	*/
	_getHardfork(hardfork) {
		const hfs = this.hardforks();
		for (const hf of hfs) if (hf.name === hardfork) return hf;
		return null;
	}
	/**
	* Sets the active EIPs
	* @param eips
	*/
	setEIPs(eips = []) {
		for (const eip of eips) {
			if (!(eip in EIPs)) throw new Error(`${eip} not supported`);
			const minHF = this.gteHardfork(EIPs[eip].minimumHardfork);
			if (!minHF) throw new Error(`${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`);
			if (EIPs[eip].requiredEIPs !== void 0) {
				for (const elem of EIPs[eip].requiredEIPs) if (!(eips.includes(elem) || this.isActivatedEIP(elem))) throw new Error(`${eip} requires EIP ${elem}, but is not included in the EIP list`);
			}
		}
		this._eips = eips;
	}
	/**
	* Returns a parameter for the current chain setup
	*
	* If the parameter is present in an EIP, the EIP always takes precedence.
	* Otherwise the parameter if taken from the latest applied HF with
	* a change on the respective parameter.
	*
	* @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
	* @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
	* @returns The value requested or `BigInt(0)` if not found
	*/
	param(topic, name$1) {
		let value;
		for (const eip of this._eips) {
			value = this.paramByEIP(topic, name$1, eip);
			if (value !== void 0) return value;
		}
		return this.paramByHardfork(topic, name$1, this._hardfork);
	}
	/**
	* Returns the parameter corresponding to a hardfork
	* @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
	* @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
	* @param hardfork Hardfork name
	* @returns The value requested or `BigInt(0)` if not found
	*/
	paramByHardfork(topic, name$1, hardfork) {
		let value = null;
		for (const hfChanges of this.HARDFORK_CHANGES) {
			if ("eips" in hfChanges[1]) {
				const hfEIPs = hfChanges[1].eips;
				for (const eip of hfEIPs) {
					const valueEIP = this.paramByEIP(topic, name$1, eip);
					value = typeof valueEIP === "bigint" ? valueEIP : value;
				}
			} else {
				if (hfChanges[1][topic] === void 0) throw new Error(`Topic ${topic} not defined`);
				if (hfChanges[1][topic][name$1] !== void 0) value = hfChanges[1][topic][name$1].v;
			}
			if (hfChanges[0] === hardfork) break;
		}
		return BigInt(value !== null && value !== void 0 ? value : 0);
	}
	/**
	* Returns a parameter corresponding to an EIP
	* @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
	* @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
	* @param eip Number of the EIP
	* @returns The value requested or `undefined` if not found
	*/
	paramByEIP(topic, name$1, eip) {
		if (!(eip in EIPs)) throw new Error(`${eip} not supported`);
		const eipParams = EIPs[eip];
		if (!(topic in eipParams)) throw new Error(`Topic ${topic} not defined`);
		if (eipParams[topic][name$1] === void 0) return void 0;
		const value = eipParams[topic][name$1].v;
		return BigInt(value);
	}
	/**
	* Returns a parameter for the hardfork active on block number or
	* optional provided total difficulty (Merge HF)
	* @param topic Parameter topic
	* @param name Parameter name
	* @param blockNumber Block number
	* @param td Total difficulty
	*    * @returns The value requested or `BigInt(0)` if not found
	*/
	paramByBlock(topic, name$1, blockNumber, td, timestamp) {
		const hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);
		return this.paramByHardfork(topic, name$1, hardfork);
	}
	/**
	* Checks if an EIP is activated by either being included in the EIPs
	* manually passed in with the {@link CommonOpts.eips} or in a
	* hardfork currently being active
	*
	* Note: this method only works for EIPs being supported
	* by the {@link CommonOpts.eips} constructor option
	* @param eip
	*/
	isActivatedEIP(eip) {
		if (this.eips().includes(eip)) return true;
		for (const hfChanges of this.HARDFORK_CHANGES) {
			const hf = hfChanges[1];
			if (this.gteHardfork(hf.name) && "eips" in hf) {
				if (hf.eips.includes(eip)) return true;
			}
		}
		return false;
	}
	/**
	* Checks if set or provided hardfork is active on block number
	* @param hardfork Hardfork name or null (for HF set)
	* @param blockNumber
	* @returns True if HF is active on block number
	*/
	hardforkIsActiveOnBlock(_hardfork, _blockNumber) {
		const blockNumber = toType(_blockNumber, TypeOutput.BigInt);
		const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
		const hfBlock = this.hardforkBlock(hardfork);
		if (typeof hfBlock === "bigint" && hfBlock !== BigInt(0) && blockNumber >= hfBlock) return true;
		return false;
	}
	/**
	* Alias to hardforkIsActiveOnBlock when hardfork is set
	* @param blockNumber
	* @returns True if HF is active on block number
	*/
	activeOnBlock(blockNumber) {
		return this.hardforkIsActiveOnBlock(null, blockNumber);
	}
	/**
	* Sequence based check if given or set HF1 is greater than or equal HF2
	* @param hardfork1 Hardfork name or null (if set)
	* @param hardfork2 Hardfork name
	* @param opts Hardfork options
	* @returns True if HF1 gte HF2
	*/
	hardforkGteHardfork(_hardfork1, hardfork2) {
		const hardfork1 = _hardfork1 !== null && _hardfork1 !== void 0 ? _hardfork1 : this._hardfork;
		const hardforks$1 = this.hardforks();
		let posHf1 = -1;
		let posHf2 = -1;
		let index = 0;
		for (const hf of hardforks$1) {
			if (hf.name === hardfork1) posHf1 = index;
			if (hf.name === hardfork2) posHf2 = index;
			index += 1;
		}
		return posHf1 >= posHf2 && posHf2 !== -1;
	}
	/**
	* Alias to hardforkGteHardfork when hardfork is set
	* @param hardfork Hardfork name
	* @returns True if hardfork set is greater than hardfork provided
	*/
	gteHardfork(hardfork) {
		return this.hardforkGteHardfork(null, hardfork);
	}
	/**
	* Returns the hardfork change block for hardfork provided or set
	* @param hardfork Hardfork name, optional if HF set
	* @returns Block number or null if unscheduled
	*/
	hardforkBlock(_hardfork) {
		var _a$3;
		const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
		const block = (_a$3 = this._getHardfork(hardfork)) === null || _a$3 === void 0 ? void 0 : _a$3.block;
		if (block === void 0 || block === null) return null;
		return BigInt(block);
	}
	hardforkTimestamp(_hardfork) {
		var _a$3;
		const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
		const timestamp = (_a$3 = this._getHardfork(hardfork)) === null || _a$3 === void 0 ? void 0 : _a$3.timestamp;
		if (timestamp === void 0 || timestamp === null) return null;
		return BigInt(timestamp);
	}
	/**
	* Returns the hardfork change block for eip
	* @param eip EIP number
	* @returns Block number or null if unscheduled
	*/
	eipBlock(eip) {
		for (const hfChanges of this.HARDFORK_CHANGES) {
			const hf = hfChanges[1];
			if ("eips" in hf) {
				if (hf.eips.includes(eip)) return this.hardforkBlock(typeof hfChanges[0] === "number" ? String(hfChanges[0]) : hfChanges[0]);
			}
		}
		return null;
	}
	/**
	* Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set
	* @param hardfork Hardfork name, optional if HF set
	* @returns Total difficulty or null if no set
	*/
	hardforkTTD(_hardfork) {
		var _a$3;
		const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
		const ttd = (_a$3 = this._getHardfork(hardfork)) === null || _a$3 === void 0 ? void 0 : _a$3.ttd;
		if (ttd === void 0 || ttd === null) return null;
		return BigInt(ttd);
	}
	/**
	* True if block number provided is the hardfork (given or set) change block
	* @param blockNumber Number of the block to check
	* @param hardfork Hardfork name, optional if HF set
	* @returns True if blockNumber is HF block
	* @deprecated
	*/
	isHardforkBlock(_blockNumber, _hardfork) {
		const blockNumber = toType(_blockNumber, TypeOutput.BigInt);
		const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
		const block = this.hardforkBlock(hardfork);
		return typeof block === "bigint" && block !== BigInt(0) ? block === blockNumber : false;
	}
	/**
	* Returns the change block for the next hardfork after the hardfork provided or set
	* @param hardfork Hardfork name, optional if HF set
	* @returns Block timestamp, number or null if not available
	*/
	nextHardforkBlockOrTimestamp(_hardfork) {
		var _a$3, _b, _c;
		const hardfork = (_a$3 = _hardfork) !== null && _a$3 !== void 0 ? _a$3 : this._hardfork;
		const hfs = this.hardforks();
		let hfIndex = hfs.findIndex((hf) => hf.name === hardfork);
		if (hardfork === Hardfork.Merge) hfIndex -= 1;
		if (hfIndex < 0) return null;
		let currHfTimeOrBlock = (_b = hfs[hfIndex].timestamp) !== null && _b !== void 0 ? _b : hfs[hfIndex].block;
		currHfTimeOrBlock = currHfTimeOrBlock !== null && currHfTimeOrBlock !== void 0 ? Number(currHfTimeOrBlock) : null;
		const nextHf = hfs.slice(hfIndex + 1).find((hf) => {
			var _a$4;
			let hfTimeOrBlock = (_a$4 = hf.timestamp) !== null && _a$4 !== void 0 ? _a$4 : hf.block;
			hfTimeOrBlock = hfTimeOrBlock !== null && hfTimeOrBlock !== void 0 ? Number(hfTimeOrBlock) : null;
			return hf.name !== Hardfork.Merge && hfTimeOrBlock !== null && hfTimeOrBlock !== void 0 && hfTimeOrBlock !== currHfTimeOrBlock;
		});
		if (nextHf === void 0) return null;
		const nextHfBlock = (_c = nextHf.timestamp) !== null && _c !== void 0 ? _c : nextHf.block;
		if (nextHfBlock === null || nextHfBlock === void 0) return null;
		return BigInt(nextHfBlock);
	}
	/**
	* Returns the change block for the next hardfork after the hardfork provided or set
	* @param hardfork Hardfork name, optional if HF set
	* @returns Block number or null if not available
	* @deprecated
	*/
	nextHardforkBlock(_hardfork) {
		var _a$3;
		const hardfork = (_a$3 = _hardfork) !== null && _a$3 !== void 0 ? _a$3 : this._hardfork;
		let hfBlock = this.hardforkBlock(hardfork);
		if (hfBlock === null && hardfork === Hardfork.Merge) {
			const hfs = this.hardforks();
			const mergeIndex = hfs.findIndex((hf) => hf.ttd !== null && hf.ttd !== void 0);
			if (mergeIndex < 0) throw Error(`Merge hardfork should have been found`);
			hfBlock = this.hardforkBlock(hfs[mergeIndex - 1].name);
		}
		if (hfBlock === null) return null;
		const nextHfBlock = this.hardforks().reduce((acc, hf) => {
			const block = BigInt(hf.block === null || hf.ttd !== void 0 && hf.ttd !== null ? 0 : hf.block);
			return block > hfBlock && acc === null ? block : acc;
		}, null);
		return nextHfBlock;
	}
	/**
	* True if block number provided is the hardfork change block following the hardfork given or set
	* @param blockNumber Number of the block to check
	* @param hardfork Hardfork name, optional if HF set
	* @returns True if blockNumber is HF block
	* @deprecated
	*/
	isNextHardforkBlock(_blockNumber, _hardfork) {
		const blockNumber = toType(_blockNumber, TypeOutput.BigInt);
		const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
		const nextHardforkBlock = this.nextHardforkBlock(hardfork);
		return nextHardforkBlock === null ? false : nextHardforkBlock === blockNumber;
	}
	/**
	* Internal helper function to calculate a fork hash
	* @param hardfork Hardfork name
	* @param genesisHash Genesis block hash of the chain
	* @returns Fork hash as hex string
	*/
	_calcForkHash(hardfork, genesisHash) {
		let hfUint8Array = new Uint8Array();
		let prevBlockOrTime = 0;
		for (const hf of this.hardforks()) {
			const { block, timestamp, name: name$1 } = hf;
			let blockOrTime = timestamp !== null && timestamp !== void 0 ? timestamp : block;
			blockOrTime = blockOrTime !== null ? Number(blockOrTime) : null;
			if (typeof blockOrTime === "number" && blockOrTime !== 0 && blockOrTime !== prevBlockOrTime && name$1 !== Hardfork.Merge) {
				const hfBlockUint8Array = hexToBytes(blockOrTime.toString(16).padStart(16, "0"));
				hfUint8Array = uint8ArrayConcat(hfUint8Array, hfBlockUint8Array);
				prevBlockOrTime = blockOrTime;
			}
			if (hf.name === hardfork) break;
		}
		const inputUint8Array = uint8ArrayConcat(genesisHash, hfUint8Array);
		const forkhash = bytesToHex(intToUint8Array(crc32Uint8Array(inputUint8Array) >>> 0));
		return forkhash;
	}
	/**
	* Returns an eth/64 compliant fork hash (EIP-2124)
	* @param hardfork Hardfork name, optional if HF set
	* @param genesisHash Genesis block hash of the chain, optional if already defined and not needed to be calculated
	*/
	forkHash(_hardfork, genesisHash) {
		const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
		const data = this._getHardfork(hardfork);
		if (data === null || (data === null || data === void 0 ? void 0 : data.block) === null && (data === null || data === void 0 ? void 0 : data.timestamp) === void 0 && (data === null || data === void 0 ? void 0 : data.ttd) === void 0) {
			const msg = "No fork hash calculation possible for future hardfork";
			throw new Error(msg);
		}
		if ((data === null || data === void 0 ? void 0 : data.forkHash) !== null && (data === null || data === void 0 ? void 0 : data.forkHash) !== void 0) return data.forkHash;
		if (!genesisHash) throw new Error("genesisHash required for forkHash calculation");
		return this._calcForkHash(hardfork, genesisHash);
	}
	/**
	*
	* @param forkHash Fork hash as a hex string
	* @returns Array with hardfork data (name, block, forkHash)
	*/
	hardforkForForkHash(forkHash) {
		const resArray = this.hardforks().filter((hf) => hf.forkHash === forkHash);
		return resArray.length >= 1 ? resArray[resArray.length - 1] : null;
	}
	/**
	* Sets any missing forkHashes on the passed-in {@link Common} instance
	* @param common The {@link Common} to set the forkHashes for
	* @param genesisHash The genesis block hash
	*/
	setForkHashes(genesisHash) {
		var _a$3;
		for (const hf of this.hardforks()) {
			const blockOrTime = (_a$3 = hf.timestamp) !== null && _a$3 !== void 0 ? _a$3 : hf.block;
			if ((hf.forkHash === null || hf.forkHash === void 0) && (blockOrTime !== null && blockOrTime !== void 0 || typeof hf.ttd !== "undefined")) hf.forkHash = this.forkHash(hf.name, genesisHash);
		}
	}
	/**
	* Returns the Genesis parameters of the current chain
	* @returns Genesis dictionary
	*/
	genesis() {
		return this._chainParams.genesis;
	}
	/**
	* Returns the hardforks for current chain
	* @returns {Array} Array with arrays of hardforks
	*/
	hardforks() {
		return this._chainParams.hardforks;
	}
	/**
	* Returns bootstrap nodes for the current chain
	* @returns {Dictionary} Dict with bootstrap nodes
	*/
	bootstrapNodes() {
		return this._chainParams.bootstrapNodes;
	}
	/**
	* Returns DNS networks for the current chain
	* @returns {String[]} Array of DNS ENR urls
	*/
	dnsNetworks() {
		return this._chainParams.dnsNetworks;
	}
	/**
	* Returns the hardfork set
	* @returns Hardfork name
	*/
	hardfork() {
		return this._hardfork;
	}
	/**
	* Returns the Id of current chain
	* @returns chain Id
	*/
	chainId() {
		return BigInt(this._chainParams.chainId);
	}
	/**
	* Returns the name of current chain
	* @returns chain name (lower case)
	*/
	chainName() {
		return this._chainParams.name;
	}
	/**
	* Returns the Id of current network
	* @returns network Id
	*/
	networkId() {
		return BigInt(this._chainParams.networkId);
	}
	/**
	* Returns the active EIPs
	* @returns List of EIPs
	*/
	eips() {
		return this._eips;
	}
	/**
	* Returns the consensus type of the network
	* Possible values: "pow"|"poa"|"pos"
	*
	* Note: This value can update along a Hardfork.
	*/
	consensusType() {
		const hardfork = this.hardfork();
		let value;
		for (const hfChanges of this.HARDFORK_CHANGES) {
			if ("consensus" in hfChanges[1]) value = hfChanges[1].consensus.type;
			if (hfChanges[0] === hardfork) break;
		}
		return value !== null && value !== void 0 ? value : this._chainParams.consensus.type;
	}
	/**
	* Returns the concrete consensus implementation
	* algorithm or protocol for the network
	* e.g. "ethash" for "pow" consensus type,
	* "clique" for "poa" consensus type or
	* "casper" for "pos" consensus type.
	*
	* Note: This value can update along a Hardfork.
	*/
	consensusAlgorithm() {
		const hardfork = this.hardfork();
		let value;
		for (const hfChanges of this.HARDFORK_CHANGES) {
			if ("consensus" in hfChanges[1]) value = hfChanges[1].consensus.algorithm;
			if (hfChanges[0] === hardfork) break;
		}
		return value !== null && value !== void 0 ? value : this._chainParams.consensus.algorithm;
	}
	/**
	* Returns a dictionary with consensus configuration
	* parameters based on the consensus algorithm
	*
	* Expected returns (parameters must be present in
	* the respective chain json files):
	*
	* ethash: empty object
	* clique: period, epoch
	* casper: empty object
	*
	* Note: This value can update along a Hardfork.
	*/
	consensusConfig() {
		var _a$3;
		const hardfork = this.hardfork();
		let value;
		for (const hfChanges of this.HARDFORK_CHANGES) {
			if ("consensus" in hfChanges[1]) value = hfChanges[1].consensus[hfChanges[1].consensus.algorithm];
			if (hfChanges[0] === hardfork) break;
		}
		return (_a$3 = value !== null && value !== void 0 ? value : this._chainParams.consensus[this.consensusAlgorithm()]) !== null && _a$3 !== void 0 ? _a$3 : {};
	}
	/**
	* Returns a deep copy of this {@link Common} instance.
	*/
	copy() {
		const copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this);
		copy.removeAllListeners();
		return copy;
	}
	static _getInitializedChains(customChains) {
		const names = {};
		for (const [name$1, id] of Object.entries(Chain)) names[id] = name$1.toLowerCase();
		const chains = {
			mainnet: mainnet_default,
			goerli: goerli_default,
			sepolia: sepolia_default
		};
		if (customChains) for (const chain of customChains) {
			const { name: name$1 } = chain;
			names[chain.chainId.toString()] = name$1;
			chains[name$1] = chain;
		}
		chains.names = names;
		return chains;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/tx/types.js
/**
* Can be used in conjunction with {@link Transaction.supports}
* to query on tx capabilities
*/
var Capability;
(function(Capability$1) {
	/**
	* Tx supports EIP-155 replay protection
	* See: [155](https://eips.ethereum.org/EIPS/eip-155) Replay Attack Protection EIP
	*/
	Capability$1[Capability$1["EIP155ReplayProtection"] = 155] = "EIP155ReplayProtection";
	/**
	* Tx supports EIP-1559 gas fee market mechanism
	* See: [1559](https://eips.ethereum.org/EIPS/eip-1559) Fee Market EIP
	*/
	Capability$1[Capability$1["EIP1559FeeMarket"] = 1559] = "EIP1559FeeMarket";
	/**
	* Tx is a typed transaction as defined in EIP-2718
	* See: [2718](https://eips.ethereum.org/EIPS/eip-2718) Transaction Type EIP
	*/
	Capability$1[Capability$1["EIP2718TypedTransaction"] = 2718] = "EIP2718TypedTransaction";
	/**
	* Tx supports access list generation as defined in EIP-2930
	* See: [2930](https://eips.ethereum.org/EIPS/eip-2930) Access Lists EIP
	*/
	Capability$1[Capability$1["EIP2930AccessLists"] = 2930] = "EIP2930AccessLists";
})(Capability || (Capability = {}));
function isAccessListUint8Array(input) {
	if (input.length === 0) return true;
	const firstItem = input[0];
	if (Array.isArray(firstItem)) return true;
	return false;
}
function isAccessList(input) {
	return !isAccessListUint8Array(input);
}

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/tx/address.js
var Address = class Address {
	constructor(buf) {
		if (buf.length !== 20) throw new Error("Invalid address length");
		this.buf = buf;
	}
	/**
	* Returns the zero address.
	*/
	static zero() {
		return new Address(zeros(20));
	}
	/**
	* Is address equal to another.
	*/
	equals(address) {
		return uint8ArrayEquals(this.buf, address.buf);
	}
	/**
	* Is address zero.
	*/
	isZero() {
		return this.equals(Address.zero());
	}
	/**
	* Returns hex encoding of address.
	*/
	toString() {
		return bytesToHex(this.buf);
	}
	/**
	* Returns Uint8Array representation of address.
	*/
	toArray() {
		return this.buf;
	}
	/**
	* Returns the ethereum address of a given public key.
	* Accepts "Ethereum public keys" and SEC1 encoded keys.
	* @param pubKey The two points of an uncompressed key, unless sanitize is enabled
	* @param sanitize Accept public keys in other formats
	*/
	static publicToAddress(_pubKey, sanitize = false) {
		let pubKey = _pubKey;
		assertIsUint8Array(pubKey);
		if (sanitize && pubKey.length !== 64) pubKey = secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1);
		if (pubKey.length !== 64) throw new Error("Expected pubKey to be of length 64");
		return keccak256(pubKey).slice(-20);
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/tx/utils.js
const checkMaxInitCodeSize = (common, length) => {
	const maxInitCodeSize = common.param("vm", "maxInitCodeSize");
	if (maxInitCodeSize && BigInt(length) > maxInitCodeSize) throw new Error(`the initcode size of this transaction is too large: it is ${length} while the max is ${common.param("vm", "maxInitCodeSize")}`);
};
const getAccessListData = (accessList) => {
	let AccessListJSON;
	let uint8arrayAccessList;
	if (isAccessList(accessList)) {
		AccessListJSON = accessList;
		const newAccessList = [];
		for (let i = 0; i < accessList.length; i += 1) {
			const item = accessList[i];
			const addressBytes = toUint8Array(item.address);
			const storageItems = [];
			for (let index = 0; index < item.storageKeys.length; index += 1) storageItems.push(toUint8Array(item.storageKeys[index]));
			newAccessList.push([addressBytes, storageItems]);
		}
		uint8arrayAccessList = newAccessList;
	} else {
		uint8arrayAccessList = accessList !== null && accessList !== void 0 ? accessList : [];
		const json = [];
		for (let i = 0; i < uint8arrayAccessList.length; i += 1) {
			const data = uint8arrayAccessList[i];
			const address = bytesToHex(data[0]);
			const storageKeys = [];
			for (let item = 0; item < data[1].length; item += 1) storageKeys.push(bytesToHex(data[1][item]));
			const jsonItem = {
				address,
				storageKeys
			};
			json.push(jsonItem);
		}
		AccessListJSON = json;
	}
	return {
		AccessListJSON,
		accessList: uint8arrayAccessList
	};
};
const verifyAccessList = (accessList) => {
	for (let key = 0; key < accessList.length; key += 1) {
		const accessListItem = accessList[key];
		const address = accessListItem[0];
		const storageSlots = accessListItem[1];
		if (accessListItem[2] !== void 0) throw new Error("Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.");
		if (address.length !== 20) throw new Error("Invalid EIP-2930 transaction: address length should be 20 bytes");
		for (let storageSlot = 0; storageSlot < storageSlots.length; storageSlot += 1) if (storageSlots[storageSlot].length !== 32) throw new Error("Invalid EIP-2930 transaction: storage slot length should be 32 bytes");
	}
};
const getAccessListJSON = (accessList) => {
	const accessListJSON = [];
	for (let index = 0; index < accessList.length; index += 1) {
		const item = accessList[index];
		const JSONItem = {
			address: bytesToHex(setLengthLeft(item[0], 20)),
			storageKeys: []
		};
		const storageSlots = item && item[1];
		for (let slot = 0; slot < storageSlots.length; slot += 1) {
			const storageSlot = storageSlots[slot];
			JSONItem.storageKeys.push(bytesToHex(setLengthLeft(storageSlot, 32)));
		}
		accessListJSON.push(JSONItem);
	}
	return accessListJSON;
};
const getDataFeeEIP2930 = (accessList, common) => {
	const accessListStorageKeyCost = common.param("gasPrices", "accessListStorageKeyCost");
	const accessListAddressCost = common.param("gasPrices", "accessListAddressCost");
	let slots = 0;
	for (let index = 0; index < accessList.length; index += 1) {
		const item = accessList[index];
		const storageSlots = item[1];
		slots += storageSlots.length;
	}
	const addresses = accessList.length;
	return addresses * Number(accessListAddressCost) + slots * Number(accessListStorageKeyCost);
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/tx/baseTransaction.js
/**
* This base class will likely be subject to further
* refactoring along the introduction of additional tx types
* on the Ethereum network.
*
* It is therefore not recommended to use directly.
*/
var BaseTransaction = class {
	constructor(txData, opts) {
		var _a$3, _b;
		this.cache = {
			hash: void 0,
			dataFee: void 0
		};
		/**
		* List of tx type defining EIPs,
		* e.g. 1559 (fee market) and 2930 (access lists)
		* for FeeMarketEIP1559Transaction objects
		*/
		this.activeCapabilities = [];
		/**
		* The default chain the tx falls back to if no Common
		* is provided and if the chain can't be derived from
		* a passed in chainId (only EIP-2718 typed txs) or
		* EIP-155 signature (legacy txs).
		*
		* @hidden
		*/
		this.DEFAULT_CHAIN = Chain.Mainnet;
		/**
		* The default HF if the tx type is active on that HF
		* or the first greater HF where the tx is active.
		*
		* @hidden
		*/
		this.DEFAULT_HARDFORK = Hardfork.Merge;
		const { nonce, gasLimit, to, value, data, v, r, s, type } = txData;
		this._type = Number(uint8ArrayToBigInt$1(toUint8Array(type)));
		this.txOptions = opts;
		const toB = toUint8Array(to === "" ? "0x" : to);
		const vB = toUint8Array(v === "" ? "0x" : v);
		const rB = toUint8Array(r === "" ? "0x" : r);
		const sB = toUint8Array(s === "" ? "0x" : s);
		this.nonce = uint8ArrayToBigInt$1(toUint8Array(nonce === "" ? "0x" : nonce));
		this.gasLimit = uint8ArrayToBigInt$1(toUint8Array(gasLimit === "" ? "0x" : gasLimit));
		this.to = toB.length > 0 ? new Address(toB) : void 0;
		this.value = uint8ArrayToBigInt$1(toUint8Array(value === "" ? "0x" : value));
		this.data = toUint8Array(data === "" ? "0x" : data);
		this.v = vB.length > 0 ? uint8ArrayToBigInt$1(vB) : void 0;
		this.r = rB.length > 0 ? uint8ArrayToBigInt$1(rB) : void 0;
		this.s = sB.length > 0 ? uint8ArrayToBigInt$1(sB) : void 0;
		this._validateCannotExceedMaxInteger({
			value: this.value,
			r: this.r,
			s: this.s
		});
		this._validateCannotExceedMaxInteger({ gasLimit: this.gasLimit }, 64);
		this._validateCannotExceedMaxInteger({ nonce: this.nonce }, 64, true);
		const createContract = this.to === void 0 || this.to === null;
		const allowUnlimitedInitCodeSize = (_a$3 = opts.allowUnlimitedInitCodeSize) !== null && _a$3 !== void 0 ? _a$3 : false;
		const common = (_b = opts.common) !== null && _b !== void 0 ? _b : this._getCommon();
		if (createContract && common.isActivatedEIP(3860) && !allowUnlimitedInitCodeSize) checkMaxInitCodeSize(common, this.data.length);
	}
	/**
	* Returns the transaction type.
	*
	* Note: legacy txs will return tx type `0`.
	*/
	get type() {
		return this._type;
	}
	/**
	* Checks if a tx type defining capability is active
	* on a tx, for example the EIP-1559 fee market mechanism
	* or the EIP-2930 access list feature.
	*
	* Note that this is different from the tx type itself,
	* so EIP-2930 access lists can very well be active
	* on an EIP-1559 tx for example.
	*
	* This method can be useful for feature checks if the
	* tx type is unknown (e.g. when instantiated with
	* the tx factory).
	*
	* See `Capabilites` in the `types` module for a reference
	* on all supported capabilities.
	*/
	supports(capability) {
		return this.activeCapabilities.includes(capability);
	}
	validate(stringError = false) {
		const errors = [];
		if (this.getBaseFee() > this.gasLimit) errors.push(`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`);
		if (this.isSigned() && !this.verifySignature()) errors.push("Invalid Signature");
		return stringError ? errors : errors.length === 0;
	}
	_validateYParity() {
		const { v } = this;
		if (v !== void 0 && v !== BigInt(0) && v !== BigInt(1)) {
			const msg = this._errorMsg("The y-parity of the transaction should either be 0 or 1");
			throw new Error(msg);
		}
	}
	/**
	* EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2are considered invalid.
	* Reasoning: https://ethereum.stackexchange.com/a/55728
	*/
	_validateHighS() {
		const { s } = this;
		if (this.common.gteHardfork("homestead") && s !== void 0 && s > SECP256K1_ORDER_DIV_2) {
			const msg = this._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");
			throw new Error(msg);
		}
	}
	/**
	* The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)
	*/
	getBaseFee() {
		const txFee = this.common.param("gasPrices", "tx");
		let fee = this.getDataFee();
		if (txFee) fee += txFee;
		if (this.common.gteHardfork("homestead") && this.toCreationAddress()) {
			const txCreationFee = this.common.param("gasPrices", "txCreation");
			if (txCreationFee) fee += txCreationFee;
		}
		return fee;
	}
	/**
	* The amount of gas paid for the data in this tx
	*/
	getDataFee() {
		const txDataZero = this.common.param("gasPrices", "txDataZero");
		const txDataNonZero = this.common.param("gasPrices", "txDataNonZero");
		let cost = BigInt(0);
		for (let i = 0; i < this.data.length; i += 1) this.data[i] === 0 ? cost += txDataZero : cost += txDataNonZero;
		if ((this.to === void 0 || this.to === null) && this.common.isActivatedEIP(3860)) {
			const dataLength = BigInt(Math.ceil(this.data.length / 32));
			const initCodeCost = this.common.param("gasPrices", "initCodeWordCost") * dataLength;
			cost += initCodeCost;
		}
		return cost;
	}
	/**
	* If the tx's `to` is to the creation address
	*/
	toCreationAddress() {
		return this.to === void 0 || this.to.buf.length === 0;
	}
	isSigned() {
		const { v, r, s } = this;
		if (v === void 0 || r === void 0 || s === void 0) return false;
		return true;
	}
	/**
	* Determines if the signature is valid
	*/
	verifySignature() {
		try {
			const publicKey = this.getSenderPublicKey();
			return unpadUint8Array(publicKey).length !== 0;
		} catch (e) {
			return false;
		}
	}
	/**
	* Returns the sender's address
	*/
	getSenderAddress() {
		return new Address(Address.publicToAddress(this.getSenderPublicKey()));
	}
	/**
	* Signs a transaction.
	*
	* Note that the signed tx is returned as a new object,
	* use as follows:
	* ```javascript
	* const signedTx = tx.sign(privateKey)
	* ```
	*/
	sign(privateKey) {
		if (privateKey.length !== 32) {
			const msg = this._errorMsg("Private key must be 32 bytes in length.");
			throw new Error(msg);
		}
		let hackApplied = false;
		if (this.type === 0 && this.common.gteHardfork("spuriousDragon") && !this.supports(Capability.EIP155ReplayProtection)) {
			this.activeCapabilities.push(Capability.EIP155ReplayProtection);
			hackApplied = true;
		}
		const msgHash = this.getMessageToSign(true);
		const { v, r, s } = this._ecsign(msgHash, privateKey);
		const tx = this._processSignature(v, r, s);
		if (hackApplied) {
			const index = this.activeCapabilities.indexOf(Capability.EIP155ReplayProtection);
			if (index > -1) this.activeCapabilities.splice(index, 1);
		}
		return tx;
	}
	/**
	* Does chain ID checks on common and returns a common
	* to be used on instantiation
	* @hidden
	*
	* @param common - {@link Common} instance from tx options
	* @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)
	*/
	_getCommon(common, chainId) {
		var _a$3, _b, _c, _d;
		if (chainId !== void 0) {
			const chainIdBigInt = uint8ArrayToBigInt$1(toUint8Array(chainId));
			if (common) {
				if (common.chainId() !== chainIdBigInt) {
					const msg = this._errorMsg("The chain ID does not match the chain ID of Common");
					throw new Error(msg);
				}
				return common.copy();
			}
			if (Common.isSupportedChainId(chainIdBigInt)) return new Common({
				chain: chainIdBigInt,
				hardfork: this.DEFAULT_HARDFORK
			});
			return Common.custom({
				name: "custom-chain",
				networkId: chainIdBigInt,
				chainId: chainIdBigInt
			}, {
				baseChain: this.DEFAULT_CHAIN,
				hardfork: this.DEFAULT_HARDFORK
			});
		}
		if ((common === null || common === void 0 ? void 0 : common.copy) && typeof (common === null || common === void 0 ? void 0 : common.copy) === "function") return common.copy();
		if (common) {
			const hardfork = typeof common.hardfork === "function" ? common.hardfork() : common.hardfork;
			return Common.custom({
				name: "custom-chain",
				networkId: common.networkId ? common.networkId() : (_b = BigInt((_a$3 = common.customChain) === null || _a$3 === void 0 ? void 0 : _a$3.networkId)) !== null && _b !== void 0 ? _b : void 0,
				chainId: common.chainId ? common.chainId() : (_d = BigInt((_c = common.customChain) === null || _c === void 0 ? void 0 : _c.chainId)) !== null && _d !== void 0 ? _d : void 0
			}, {
				baseChain: this.DEFAULT_CHAIN,
				hardfork: hardfork || this.DEFAULT_HARDFORK
			});
		}
		return new Common({
			chain: this.DEFAULT_CHAIN,
			hardfork: this.DEFAULT_HARDFORK
		});
	}
	/**
	* Validates that an object with BigInt values cannot exceed the specified bit limit.
	* @param values Object containing string keys and BigInt values
	* @param bits Number of bits to check (64 or 256)
	* @param cannotEqual Pass true if the number also cannot equal one less the maximum value
	*/
	_validateCannotExceedMaxInteger(values, bits = 256, cannotEqual = false) {
		for (const [key, value] of Object.entries(values)) switch (bits) {
			case 64:
				if (cannotEqual) {
					if (value !== void 0 && value >= MAX_UINT64) {
						const msg = this._errorMsg(`${key} cannot equal or exceed MAX_UINT64 (2^64-1), given ${value}`);
						throw new Error(msg);
					}
				} else if (value !== void 0 && value > MAX_UINT64) {
					const msg = this._errorMsg(`${key} cannot exceed MAX_UINT64 (2^64-1), given ${value}`);
					throw new Error(msg);
				}
				break;
			case 256:
				if (cannotEqual) {
					if (value !== void 0 && value >= MAX_INTEGER) {
						const msg = this._errorMsg(`${key} cannot equal or exceed MAX_INTEGER (2^256-1), given ${value}`);
						throw new Error(msg);
					}
				} else if (value !== void 0 && value > MAX_INTEGER) {
					const msg = this._errorMsg(`${key} cannot exceed MAX_INTEGER (2^256-1), given ${value}`);
					throw new Error(msg);
				}
				break;
			default: {
				const msg = this._errorMsg("unimplemented bits value");
				throw new Error(msg);
			}
		}
	}
	static _validateNotArray(values) {
		const txDataKeys = [
			"nonce",
			"gasPrice",
			"gasLimit",
			"to",
			"value",
			"data",
			"v",
			"r",
			"s",
			"type",
			"baseFee",
			"maxFeePerGas",
			"chainId"
		];
		for (const [key, value] of Object.entries(values)) if (txDataKeys.includes(key)) {
			if (Array.isArray(value)) throw new Error(`${key} cannot be an array`);
		}
	}
	/**
	* Returns the shared error postfix part for _error() method
	* tx type implementations.
	*/
	_getSharedErrorPostfix() {
		let hash$1 = "";
		try {
			hash$1 = this.isSigned() ? bytesToHex(this.hash()) : "not available (unsigned)";
		} catch (e) {
			hash$1 = "error";
		}
		let isSigned = "";
		try {
			isSigned = this.isSigned().toString();
		} catch (e) {
			hash$1 = "error";
		}
		let hf = "";
		try {
			hf = this.common.hardfork();
		} catch (e) {
			hf = "error";
		}
		let postfix = `tx type=${this.type} hash=${hash$1} nonce=${this.nonce} value=${this.value} `;
		postfix += `signed=${isSigned} hf=${hf}`;
		return postfix;
	}
	_ecsign(msgHash, privateKey, chainId) {
		const signature = secp256k1.sign(msgHash, privateKey);
		const signatureBytes = signature.toCompactRawBytes();
		const r = signatureBytes.subarray(0, 32);
		const s = signatureBytes.subarray(32, 64);
		const v = chainId === void 0 ? BigInt(signature.recovery + 27) : BigInt(signature.recovery + 35) + BigInt(chainId) * BigInt(2);
		return {
			r,
			s,
			v
		};
	}
	static fromSerializedTx(serialized, opts = {}) {}
	static fromTxData(txData, opts = {}) {}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/tx/eip1559Transaction.js
var import_dist$2 = __toESM(require_dist(), 1);
const TRANSACTION_TYPE$2 = 2;
const TRANSACTION_TYPE_UINT8ARRAY$1 = hexToBytes(TRANSACTION_TYPE$2.toString(16).padStart(2, "0"));
/**
* Typed transaction with a new gas fee market mechanism
*
* - TransactionType: 2
* - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)
*/
var FeeMarketEIP1559Transaction = class FeeMarketEIP1559Transaction extends BaseTransaction {
	/**
	* Instantiate a transaction from a data dictionary.
	*
	* Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
	* accessList, v, r, s }
	*
	* Notes:
	* - `chainId` will be set automatically if not provided
	* - All parameters are optional and have some basic default values
	*/
	static fromTxData(txData, opts = {}) {
		return new FeeMarketEIP1559Transaction(txData, opts);
	}
	/**
	* Instantiate a transaction from the serialized tx.
	*
	* Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
	* accessList, signatureYParity, signatureR, signatureS])`
	*/
	static fromSerializedTx(serialized, opts = {}) {
		if (!uint8ArrayEquals(serialized.subarray(0, 1), TRANSACTION_TYPE_UINT8ARRAY$1)) throw new Error(`Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${TRANSACTION_TYPE$2}, received: ${bytesToHex(serialized.subarray(0, 1))}`);
		const values = import_dist$2.RLP.decode(serialized.subarray(1));
		if (!Array.isArray(values)) throw new Error("Invalid serialized tx input: must be array");
		return FeeMarketEIP1559Transaction.fromValuesArray(values, opts);
	}
	/**
	* Create a transaction from a values array.
	*
	* Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
	* accessList, signatureYParity, signatureR, signatureS]`
	*/
	static fromValuesArray(values, opts = {}) {
		if (values.length !== 9 && values.length !== 12) throw new Error("Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).");
		const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data, accessList, v, r, s] = values;
		this._validateNotArray({
			chainId,
			v
		});
		validateNoLeadingZeroes({
			nonce,
			maxPriorityFeePerGas,
			maxFeePerGas,
			gasLimit,
			value,
			v,
			r,
			s
		});
		return new FeeMarketEIP1559Transaction({
			chainId: uint8ArrayToBigInt$1(chainId),
			nonce,
			maxPriorityFeePerGas,
			maxFeePerGas,
			gasLimit,
			to,
			value,
			data,
			accessList: accessList !== null && accessList !== void 0 ? accessList : [],
			v: v !== void 0 ? uint8ArrayToBigInt$1(v) : void 0,
			r,
			s
		}, opts);
	}
	/**
	* This constructor takes the values, validates them, assigns them and freezes the object.
	*
	* It is not recommended to use this constructor directly. Instead use
	* the static factory methods to assist in creating a Transaction object from
	* varying data types.
	*/
	constructor(txData, opts = {}) {
		var _a$3;
		super(Object.assign(Object.assign({}, txData), { type: TRANSACTION_TYPE$2 }), opts);
		/**
		* The default HF if the tx type is active on that HF
		* or the first greater HF where the tx is active.
		*
		* @hidden
		*/
		this.DEFAULT_HARDFORK = "london";
		const { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas } = txData;
		this.common = this._getCommon(opts.common, chainId);
		this.chainId = this.common.chainId();
		if (!this.common.isActivatedEIP(1559)) throw new Error("EIP-1559 not enabled on Common");
		this.activeCapabilities = this.activeCapabilities.concat([
			1559,
			2718,
			2930
		]);
		const accessListData = getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);
		this.accessList = accessListData.accessList;
		this.AccessListJSON = accessListData.AccessListJSON;
		verifyAccessList(this.accessList);
		this.maxFeePerGas = uint8ArrayToBigInt$1(toUint8Array(maxFeePerGas === "" ? "0x" : maxFeePerGas));
		this.maxPriorityFeePerGas = uint8ArrayToBigInt$1(toUint8Array(maxPriorityFeePerGas === "" ? "0x" : maxPriorityFeePerGas));
		this._validateCannotExceedMaxInteger({
			maxFeePerGas: this.maxFeePerGas,
			maxPriorityFeePerGas: this.maxPriorityFeePerGas
		});
		BaseTransaction._validateNotArray(txData);
		if (this.gasLimit * this.maxFeePerGas > MAX_INTEGER) {
			const msg = this._errorMsg("gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)");
			throw new Error(msg);
		}
		if (this.maxFeePerGas < this.maxPriorityFeePerGas) {
			const msg = this._errorMsg("maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)");
			throw new Error(msg);
		}
		this._validateYParity();
		this._validateHighS();
		const freeze = (_a$3 = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a$3 !== void 0 ? _a$3 : true;
		if (freeze) Object.freeze(this);
	}
	/**
	* The amount of gas paid for the data in this tx
	*/
	getDataFee() {
		if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) return this.cache.dataFee.value;
		let cost = super.getDataFee();
		cost += BigInt(getDataFeeEIP2930(this.accessList, this.common));
		if (Object.isFrozen(this)) this.cache.dataFee = {
			value: cost,
			hardfork: this.common.hardfork()
		};
		return cost;
	}
	/**
	* The up front amount that an account must have for this transaction to be valid
	* @param baseFee The base fee of the block (will be set to 0 if not provided)
	*/
	getUpfrontCost(baseFee = BigInt(0)) {
		const prio = this.maxPriorityFeePerGas;
		const maxBase = this.maxFeePerGas - baseFee;
		const inclusionFeePerGas = prio < maxBase ? prio : maxBase;
		const gasPrice = inclusionFeePerGas + baseFee;
		return this.gasLimit * gasPrice + this.value;
	}
	/**
	* Returns a Uint8Array Array of the raw Uint8Arrays of the EIP-1559 transaction, in order.
	*
	* Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
	* accessList, signatureYParity, signatureR, signatureS]`
	*
	* Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block
	* with {@link Block.fromValuesArray}.
	*
	* For an unsigned tx this method uses the empty Uint8Array values for the
	* signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant
	* representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.
	*/
	raw() {
		return [
			bigIntToUnpaddedUint8Array(this.chainId),
			bigIntToUnpaddedUint8Array(this.nonce),
			bigIntToUnpaddedUint8Array(this.maxPriorityFeePerGas),
			bigIntToUnpaddedUint8Array(this.maxFeePerGas),
			bigIntToUnpaddedUint8Array(this.gasLimit),
			this.to !== void 0 ? this.to.buf : Uint8Array.from([]),
			bigIntToUnpaddedUint8Array(this.value),
			this.data,
			this.accessList,
			this.v !== void 0 ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]),
			this.r !== void 0 ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]),
			this.s !== void 0 ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([])
		];
	}
	/**
	* Returns the serialized encoding of the EIP-1559 transaction.
	*
	* Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
	* accessList, signatureYParity, signatureR, signatureS])`
	*
	* Note that in contrast to the legacy tx serialization format this is not
	* valid RLP any more due to the raw tx type preceding and concatenated to
	* the RLP encoding of the values.
	*/
	serialize() {
		const base$1 = this.raw();
		return uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY$1, import_dist$2.RLP.encode(base$1));
	}
	/**
	* Returns the serialized unsigned tx (hashed or raw), which can be used
	* to sign the transaction (e.g. for sending to a hardware wallet).
	*
	* Note: in contrast to the legacy tx the raw message format is already
	* serialized and doesn't need to be RLP encoded any more.
	*
	* ```javascript
	* const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input
	* ```
	*
	* @param hashMessage - Return hashed message if set to true (default: true)
	*/
	getMessageToSign(hashMessage$1 = true) {
		const base$1 = this.raw().slice(0, 9);
		const message = uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY$1, import_dist$2.RLP.encode(base$1));
		if (hashMessage$1) return keccak256(message);
		return message;
	}
	/**
	* Computes a sha3-256 hash of the serialized tx.
	*
	* This method can only be used for signed txs (it throws otherwise).
	* Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.
	*/
	hash() {
		if (!this.isSigned()) {
			const msg = this._errorMsg("Cannot call hash method if transaction is not signed");
			throw new Error(msg);
		}
		if (Object.isFrozen(this)) {
			if (!this.cache.hash) this.cache.hash = keccak256(this.serialize());
			return this.cache.hash;
		}
		return keccak256(this.serialize());
	}
	/**
	* Computes a sha3-256 hash which can be used to verify the signature
	*/
	getMessageToVerifySignature() {
		return this.getMessageToSign();
	}
	/**
	* Returns the public key of the sender
	*/
	getSenderPublicKey() {
		if (!this.isSigned()) {
			const msg = this._errorMsg("Cannot call this method if transaction is not signed");
			throw new Error(msg);
		}
		const msgHash = this.getMessageToVerifySignature();
		const { v, r, s } = this;
		this._validateHighS();
		try {
			return ecrecover(msgHash, v + BigInt(27), bigIntToUnpaddedUint8Array(r), bigIntToUnpaddedUint8Array(s));
		} catch (e) {
			const msg = this._errorMsg("Invalid Signature");
			throw new Error(msg);
		}
	}
	_processSignature(v, r, s) {
		const opts = Object.assign(Object.assign({}, this.txOptions), { common: this.common });
		return FeeMarketEIP1559Transaction.fromTxData({
			chainId: this.chainId,
			nonce: this.nonce,
			maxPriorityFeePerGas: this.maxPriorityFeePerGas,
			maxFeePerGas: this.maxFeePerGas,
			gasLimit: this.gasLimit,
			to: this.to,
			value: this.value,
			data: this.data,
			accessList: this.accessList,
			v: v - BigInt(27),
			r: uint8ArrayToBigInt$1(r),
			s: uint8ArrayToBigInt$1(s)
		}, opts);
	}
	/**
	* Returns an object with the JSON representation of the transaction
	*/
	toJSON() {
		const accessListJSON = getAccessListJSON(this.accessList);
		return {
			chainId: bigIntToHex(this.chainId),
			nonce: bigIntToHex(this.nonce),
			maxPriorityFeePerGas: bigIntToHex(this.maxPriorityFeePerGas),
			maxFeePerGas: bigIntToHex(this.maxFeePerGas),
			gasLimit: bigIntToHex(this.gasLimit),
			to: this.to !== void 0 ? this.to.toString() : void 0,
			value: bigIntToHex(this.value),
			data: bytesToHex(this.data),
			accessList: accessListJSON,
			v: this.v !== void 0 ? bigIntToHex(this.v) : void 0,
			r: this.r !== void 0 ? bigIntToHex(this.r) : void 0,
			s: this.s !== void 0 ? bigIntToHex(this.s) : void 0
		};
	}
	/**
	* Return a compact error string representation of the object
	*/
	errorStr() {
		let errorStr = this._getSharedErrorPostfix();
		errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;
		return errorStr;
	}
	/**
	* Internal helper function to create an annotated error message
	*
	* @param msg Base error message
	* @hidden
	*/
	_errorMsg(msg) {
		return `${msg} (${this.errorStr()})`;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/tx/eip2930Transaction.js
var import_dist$1 = __toESM(require_dist(), 1);
const TRANSACTION_TYPE$1 = 1;
const TRANSACTION_TYPE_UINT8ARRAY = hexToBytes(TRANSACTION_TYPE$1.toString(16).padStart(2, "0"));
/**
* Typed transaction with optional access lists
*
* - TransactionType: 1
* - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)
*/
var AccessListEIP2930Transaction = class AccessListEIP2930Transaction extends BaseTransaction {
	/**
	* Instantiate a transaction from a data dictionary.
	*
	* Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
	* v, r, s }
	*
	* Notes:
	* - `chainId` will be set automatically if not provided
	* - All parameters are optional and have some basic default values
	*/
	static fromTxData(txData, opts = {}) {
		return new AccessListEIP2930Transaction(txData, opts);
	}
	/**
	* Instantiate a transaction from the serialized tx.
	*
	* Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
	* signatureYParity (v), signatureR (r), signatureS (s)])`
	*/
	static fromSerializedTx(serialized, opts = {}) {
		if (!uint8ArrayEquals(serialized.subarray(0, 1), TRANSACTION_TYPE_UINT8ARRAY)) throw new Error(`Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${TRANSACTION_TYPE$1}, received: ${bytesToHex(serialized.subarray(0, 1))}`);
		const values = import_dist$1.RLP.decode(Uint8Array.from(serialized.subarray(1)));
		if (!Array.isArray(values)) throw new Error("Invalid serialized tx input: must be array");
		return AccessListEIP2930Transaction.fromValuesArray(values, opts);
	}
	/**
	* Create a transaction from a values array.
	*
	* Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
	* signatureYParity (v), signatureR (r), signatureS (s)]`
	*/
	static fromValuesArray(values, opts = {}) {
		if (values.length !== 8 && values.length !== 11) throw new Error("Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).");
		const [chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s] = values;
		this._validateNotArray({
			chainId,
			v
		});
		validateNoLeadingZeroes({
			nonce,
			gasPrice,
			gasLimit,
			value,
			v,
			r,
			s
		});
		const emptyAccessList = [];
		return new AccessListEIP2930Transaction({
			chainId: uint8ArrayToBigInt$1(chainId),
			nonce,
			gasPrice,
			gasLimit,
			to,
			value,
			data,
			accessList: accessList !== null && accessList !== void 0 ? accessList : emptyAccessList,
			v: v !== void 0 ? uint8ArrayToBigInt$1(v) : void 0,
			r,
			s
		}, opts);
	}
	/**
	* This constructor takes the values, validates them, assigns them and freezes the object.
	*
	* It is not recommended to use this constructor directly. Instead use
	* the static factory methods to assist in creating a Transaction object from
	* varying data types.
	*/
	constructor(txData, opts = {}) {
		var _a$3;
		super(Object.assign(Object.assign({}, txData), { type: TRANSACTION_TYPE$1 }), opts);
		/**
		* The default HF if the tx type is active on that HF
		* or the first greater HF where the tx is active.
		*
		* @hidden
		*/
		this.DEFAULT_HARDFORK = "berlin";
		const { chainId, accessList, gasPrice } = txData;
		this.common = this._getCommon(opts.common, chainId);
		this.chainId = this.common.chainId();
		if (!this.common.isActivatedEIP(2930)) throw new Error("EIP-2930 not enabled on Common");
		this.activeCapabilities = this.activeCapabilities.concat([2718, 2930]);
		const accessListData = getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);
		this.accessList = accessListData.accessList;
		this.AccessListJSON = accessListData.AccessListJSON;
		verifyAccessList(this.accessList);
		this.gasPrice = uint8ArrayToBigInt$1(toUint8Array(gasPrice === "" ? "0x" : gasPrice));
		this._validateCannotExceedMaxInteger({ gasPrice: this.gasPrice });
		BaseTransaction._validateNotArray(txData);
		if (this.gasPrice * this.gasLimit > MAX_INTEGER) {
			const msg = this._errorMsg("gasLimit * gasPrice cannot exceed MAX_INTEGER");
			throw new Error(msg);
		}
		this._validateYParity();
		this._validateHighS();
		const freeze = (_a$3 = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a$3 !== void 0 ? _a$3 : true;
		if (freeze) Object.freeze(this);
	}
	/**
	* The amount of gas paid for the data in this tx
	*/
	getDataFee() {
		if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) return this.cache.dataFee.value;
		let cost = super.getDataFee();
		cost += BigInt(getDataFeeEIP2930(this.accessList, this.common));
		if (Object.isFrozen(this)) this.cache.dataFee = {
			value: cost,
			hardfork: this.common.hardfork()
		};
		return cost;
	}
	/**
	* The up front amount that an account must have for this transaction to be valid
	*/
	getUpfrontCost() {
		return this.gasLimit * this.gasPrice + this.value;
	}
	/**
	* Returns a Uint8Array Array of the raw Uint8Arrays of the EIP-2930 transaction, in order.
	*
	* Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
	* signatureYParity (v), signatureR (r), signatureS (s)]`
	*
	* Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block
	* with {@link Block.fromValuesArray}.
	*
	* For an unsigned tx this method uses the empty UINT8ARRAY values for the
	* signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant
	* representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.
	*/
	raw() {
		return [
			bigIntToUnpaddedUint8Array(this.chainId),
			bigIntToUnpaddedUint8Array(this.nonce),
			bigIntToUnpaddedUint8Array(this.gasPrice),
			bigIntToUnpaddedUint8Array(this.gasLimit),
			this.to !== void 0 ? this.to.buf : Uint8Array.from([]),
			bigIntToUnpaddedUint8Array(this.value),
			this.data,
			this.accessList,
			this.v !== void 0 ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]),
			this.r !== void 0 ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]),
			this.s !== void 0 ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([])
		];
	}
	/**
	* Returns the serialized encoding of the EIP-2930 transaction.
	*
	* Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
	* signatureYParity (v), signatureR (r), signatureS (s)])`
	*
	* Note that in contrast to the legacy tx serialization format this is not
	* valid RLP any more due to the raw tx type preceding and concatenated to
	* the RLP encoding of the values.
	*/
	serialize() {
		const base$1 = this.raw();
		return uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, import_dist$1.RLP.encode(base$1));
	}
	/**
	* Returns the serialized unsigned tx (hashed or raw), which can be used
	* to sign the transaction (e.g. for sending to a hardware wallet).
	*
	* Note: in contrast to the legacy tx the raw message format is already
	* serialized and doesn't need to be RLP encoded any more.
	*
	* ```javascript
	* const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input
	* ```
	*
	* @param hashMessage - Return hashed message if set to true (default: true)
	*/
	getMessageToSign(hashMessage$1 = true) {
		const base$1 = this.raw().slice(0, 8);
		const message = uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, import_dist$1.RLP.encode(base$1));
		if (hashMessage$1) return keccak256(message);
		return message;
	}
	/**
	* Computes a sha3-256 hash of the serialized tx.
	*
	* This method can only be used for signed txs (it throws otherwise).
	* Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.
	*/
	hash() {
		if (!this.isSigned()) {
			const msg = this._errorMsg("Cannot call hash method if transaction is not signed");
			throw new Error(msg);
		}
		if (Object.isFrozen(this)) {
			if (!this.cache.hash) this.cache.hash = keccak256(this.serialize());
			return this.cache.hash;
		}
		return keccak256(this.serialize());
	}
	/**
	* Computes a sha3-256 hash which can be used to verify the signature
	*/
	getMessageToVerifySignature() {
		return this.getMessageToSign();
	}
	/**
	* Returns the public key of the sender
	*/
	getSenderPublicKey() {
		if (!this.isSigned()) {
			const msg = this._errorMsg("Cannot call this method if transaction is not signed");
			throw new Error(msg);
		}
		const msgHash = this.getMessageToVerifySignature();
		const { v, r, s } = this;
		this._validateHighS();
		try {
			return ecrecover(msgHash, v + BigInt(27), bigIntToUnpaddedUint8Array(r), bigIntToUnpaddedUint8Array(s));
		} catch (e) {
			const msg = this._errorMsg("Invalid Signature");
			throw new Error(msg);
		}
	}
	_processSignature(v, r, s) {
		const opts = Object.assign(Object.assign({}, this.txOptions), { common: this.common });
		return AccessListEIP2930Transaction.fromTxData({
			chainId: this.chainId,
			nonce: this.nonce,
			gasPrice: this.gasPrice,
			gasLimit: this.gasLimit,
			to: this.to,
			value: this.value,
			data: this.data,
			accessList: this.accessList,
			v: v - BigInt(27),
			r: uint8ArrayToBigInt$1(r),
			s: uint8ArrayToBigInt$1(s)
		}, opts);
	}
	/**
	* Returns an object with the JSON representation of the transaction
	*/
	toJSON() {
		const accessListJSON = getAccessListJSON(this.accessList);
		return {
			chainId: bigIntToHex(this.chainId),
			nonce: bigIntToHex(this.nonce),
			gasPrice: bigIntToHex(this.gasPrice),
			gasLimit: bigIntToHex(this.gasLimit),
			to: this.to !== void 0 ? this.to.toString() : void 0,
			value: bigIntToHex(this.value),
			data: bytesToHex(this.data),
			accessList: accessListJSON,
			v: this.v !== void 0 ? bigIntToHex(this.v) : void 0,
			r: this.r !== void 0 ? bigIntToHex(this.r) : void 0,
			s: this.s !== void 0 ? bigIntToHex(this.s) : void 0
		};
	}
	/**
	* Return a compact error string representation of the object
	*/
	errorStr() {
		var _a$3, _b;
		let errorStr = this._getSharedErrorPostfix();
		errorStr += ` gasPrice=${this.gasPrice} accessListCount=${(_b = (_a$3 = this.accessList) === null || _a$3 === void 0 ? void 0 : _a$3.length) !== null && _b !== void 0 ? _b : 0}`;
		return errorStr;
	}
	/**
	* Internal helper function to create an annotated error message
	*
	* @param msg Base error message
	* @hidden
	*/
	_errorMsg(msg) {
		return `${msg} (${this.errorStr()})`;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/tx/legacyTransaction.js
var import_dist = __toESM(require_dist(), 1);
const TRANSACTION_TYPE = 0;
function meetsEIP155(_v, chainId) {
	const v = Number(_v);
	const chainIdDoubled = Number(chainId) * 2;
	return v === chainIdDoubled + 35 || v === chainIdDoubled + 36;
}
/**
* An Ethereum non-typed (legacy) transaction
*/
var Transaction = class Transaction extends BaseTransaction {
	/**
	* Instantiate a transaction from a data dictionary.
	*
	* Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }
	*
	* Notes:
	* - All parameters are optional and have some basic default values
	*/
	static fromTxData(txData, opts = {}) {
		return new Transaction(txData, opts);
	}
	/**
	* Instantiate a transaction from the serialized tx.
	*
	* Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`
	*/
	static fromSerializedTx(serialized, opts = {}) {
		const values = import_dist.RLP.decode(serialized);
		if (!Array.isArray(values)) throw new Error("Invalid serialized tx input. Must be array");
		return this.fromValuesArray(values, opts);
	}
	/**
	* Create a transaction from a values array.
	*
	* Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`
	*/
	static fromValuesArray(values, opts = {}) {
		if (values.length !== 6 && values.length !== 9) throw new Error("Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).");
		const [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values;
		validateNoLeadingZeroes({
			nonce,
			gasPrice,
			gasLimit,
			value,
			v,
			r,
			s
		});
		return new Transaction({
			nonce,
			gasPrice,
			gasLimit,
			to,
			value,
			data,
			v,
			r,
			s
		}, opts);
	}
	/**
	* This constructor takes the values, validates them, assigns them and freezes the object.
	*
	* It is not recommended to use this constructor directly. Instead use
	* the static factory methods to assist in creating a Transaction object from
	* varying data types.
	*/
	constructor(txData, opts = {}) {
		var _a$3;
		super(Object.assign(Object.assign({}, txData), { type: TRANSACTION_TYPE }), opts);
		this.common = this._validateTxV(this.v, opts.common);
		this.gasPrice = uint8ArrayToBigInt$1(toUint8Array(txData.gasPrice === "" ? "0x" : txData.gasPrice));
		if (this.gasPrice * this.gasLimit > MAX_INTEGER) {
			const msg = this._errorMsg("gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)");
			throw new Error(msg);
		}
		this._validateCannotExceedMaxInteger({ gasPrice: this.gasPrice });
		BaseTransaction._validateNotArray(txData);
		if (this.common.gteHardfork("spuriousDragon")) {
			if (!this.isSigned()) this.activeCapabilities.push(Capability.EIP155ReplayProtection);
			else if (meetsEIP155(this.v, this.common.chainId())) this.activeCapabilities.push(Capability.EIP155ReplayProtection);
		}
		const freeze = (_a$3 = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a$3 !== void 0 ? _a$3 : true;
		if (freeze) Object.freeze(this);
	}
	/**
	* Returns a Uint8Array Array of the raw Uint8Arrays of the legacy transaction, in order.
	*
	* Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`
	*
	* For legacy txs this is also the correct format to add transactions
	* to a block with {@link Block.fromValuesArray} (use the `serialize()` method
	* for typed txs).
	*
	* For an unsigned tx this method returns the empty Uint8Array values
	* for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant
	* representation have a look at {@link Transaction.getMessageToSign}.
	*/
	raw() {
		return [
			bigIntToUnpaddedUint8Array(this.nonce),
			bigIntToUnpaddedUint8Array(this.gasPrice),
			bigIntToUnpaddedUint8Array(this.gasLimit),
			this.to !== void 0 ? this.to.buf : Uint8Array.from([]),
			bigIntToUnpaddedUint8Array(this.value),
			this.data,
			this.v !== void 0 ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]),
			this.r !== void 0 ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]),
			this.s !== void 0 ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([])
		];
	}
	/**
	* Returns the serialized encoding of the legacy transaction.
	*
	* Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`
	*
	* For an unsigned tx this method uses the empty Uint8Array values for the
	* signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant
	* representation for external signing use {@link Transaction.getMessageToSign}.
	*/
	serialize() {
		return import_dist.RLP.encode(this.raw());
	}
	_getMessageToSign() {
		const values = [
			bigIntToUnpaddedUint8Array(this.nonce),
			bigIntToUnpaddedUint8Array(this.gasPrice),
			bigIntToUnpaddedUint8Array(this.gasLimit),
			this.to !== void 0 ? this.to.buf : Uint8Array.from([]),
			bigIntToUnpaddedUint8Array(this.value),
			this.data
		];
		if (this.supports(Capability.EIP155ReplayProtection)) {
			values.push(toUint8Array(this.common.chainId()));
			values.push(unpadUint8Array(toUint8Array(0)));
			values.push(unpadUint8Array(toUint8Array(0)));
		}
		return values;
	}
	getMessageToSign(hashMessage$1 = true) {
		const message = this._getMessageToSign();
		if (hashMessage$1) return keccak256(import_dist.RLP.encode(message));
		return message;
	}
	/**
	* The amount of gas paid for the data in this tx
	*/
	getDataFee() {
		if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) return this.cache.dataFee.value;
		if (Object.isFrozen(this)) this.cache.dataFee = {
			value: super.getDataFee(),
			hardfork: this.common.hardfork()
		};
		return super.getDataFee();
	}
	/**
	* The up front amount that an account must have for this transaction to be valid
	*/
	getUpfrontCost() {
		return this.gasLimit * this.gasPrice + this.value;
	}
	/**
	* Computes a sha3-256 hash of the serialized tx.
	*
	* This method can only be used for signed txs (it throws otherwise).
	* Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.
	*/
	hash() {
		if (!this.isSigned()) {
			const msg = this._errorMsg("Cannot call hash method if transaction is not signed");
			throw new Error(msg);
		}
		if (Object.isFrozen(this)) {
			if (!this.cache.hash) this.cache.hash = keccak256(import_dist.RLP.encode(this.raw()));
			return this.cache.hash;
		}
		return keccak256(import_dist.RLP.encode(this.raw()));
	}
	/**
	* Computes a sha3-256 hash which can be used to verify the signature
	*/
	getMessageToVerifySignature() {
		if (!this.isSigned()) {
			const msg = this._errorMsg("This transaction is not signed");
			throw new Error(msg);
		}
		const message = this._getMessageToSign();
		return keccak256(import_dist.RLP.encode(message));
	}
	/**
	* Returns the public key of the sender
	*/
	getSenderPublicKey() {
		const msgHash = this.getMessageToVerifySignature();
		const { v, r, s } = this;
		this._validateHighS();
		try {
			return ecrecover(msgHash, v, bigIntToUnpaddedUint8Array(r), bigIntToUnpaddedUint8Array(s), this.supports(Capability.EIP155ReplayProtection) ? this.common.chainId() : void 0);
		} catch (e) {
			const msg = this._errorMsg("Invalid Signature");
			throw new Error(msg);
		}
	}
	/**
	* Process the v, r, s values from the `sign` method of the base transaction.
	*/
	_processSignature(_v, r, s) {
		let v = _v;
		if (this.supports(Capability.EIP155ReplayProtection)) v += this.common.chainId() * BigInt(2) + BigInt(8);
		const opts = Object.assign(Object.assign({}, this.txOptions), { common: this.common });
		return Transaction.fromTxData({
			nonce: this.nonce,
			gasPrice: this.gasPrice,
			gasLimit: this.gasLimit,
			to: this.to,
			value: this.value,
			data: this.data,
			v,
			r: uint8ArrayToBigInt$1(r),
			s: uint8ArrayToBigInt$1(s)
		}, opts);
	}
	/**
	* Returns an object with the JSON representation of the transaction.
	*/
	toJSON() {
		return {
			nonce: bigIntToHex(this.nonce),
			gasPrice: bigIntToHex(this.gasPrice),
			gasLimit: bigIntToHex(this.gasLimit),
			to: this.to !== void 0 ? this.to.toString() : void 0,
			value: bigIntToHex(this.value),
			data: bytesToHex(this.data),
			v: this.v !== void 0 ? bigIntToHex(this.v) : void 0,
			r: this.r !== void 0 ? bigIntToHex(this.r) : void 0,
			s: this.s !== void 0 ? bigIntToHex(this.s) : void 0
		};
	}
	/**
	* Validates tx's `v` value
	*/
	_validateTxV(_v, common) {
		let chainIdBigInt;
		const v = _v !== void 0 ? Number(_v) : void 0;
		if (v !== void 0) {
			if (v < 37 && v !== 27 && v !== 28) throw new Error(`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`);
		}
		if (v !== void 0 && v !== 0 && (!common || common.gteHardfork("spuriousDragon")) && v !== 27 && v !== 28) if (common) {
			if (!meetsEIP155(BigInt(v), common.chainId())) throw new Error(`Incompatible EIP155-based V ${v} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`);
		} else {
			let numSub;
			if ((v - 35) % 2 === 0) numSub = 35;
			else numSub = 36;
			chainIdBigInt = BigInt(v - numSub) / BigInt(2);
		}
		return this._getCommon(common, chainIdBigInt);
	}
	/**
	* Return a compact error string representation of the object
	*/
	errorStr() {
		let errorStr = this._getSharedErrorPostfix();
		errorStr += ` gasPrice=${this.gasPrice}`;
		return errorStr;
	}
	/**
	* Internal helper function to create an annotated error message
	*
	* @param msg Base error message
	* @hidden
	*/
	_errorMsg(msg) {
		return `${msg} (${this.errorStr()})`;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/tx/transactionFactory.js
const extraTxTypes = /* @__PURE__ */ new Map();
var TransactionFactory = class TransactionFactory {
	constructor() {}
	static typeToInt(txType) {
		return Number(uint8ArrayToBigInt$1(toUint8Array(txType)));
	}
	static registerTransactionType(type, txClass) {
		const txType = TransactionFactory.typeToInt(type);
		extraTxTypes.set(txType, txClass);
	}
	/**
	* Create a transaction from a `txData` object
	*
	* @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)
	* @param txOptions - Options to pass on to the constructor of the transaction
	*/
	static fromTxData(txData, txOptions = {}) {
		if (!("type" in txData) || txData.type === void 0) return Transaction.fromTxData(txData, txOptions);
		const txType = TransactionFactory.typeToInt(txData.type);
		if (txType === 0) return Transaction.fromTxData(txData, txOptions);
		if (txType === 1) return AccessListEIP2930Transaction.fromTxData(txData, txOptions);
		if (txType === 2) return FeeMarketEIP1559Transaction.fromTxData(txData, txOptions);
		const ExtraTransaction = extraTxTypes.get(txType);
		if (ExtraTransaction === null || ExtraTransaction === void 0 ? void 0 : ExtraTransaction.fromTxData) return ExtraTransaction.fromTxData(txData, txOptions);
		throw new Error(`Tx instantiation with type ${txType} not supported`);
	}
	/**
	* This method tries to decode serialized data.
	*
	* @param data - The data Uint8Array
	* @param txOptions - The transaction options
	*/
	static fromSerializedData(data, txOptions = {}) {
		if (data[0] <= 127) switch (data[0]) {
			case 1: return AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);
			case 2: return FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);
			default: {
				const ExtraTransaction = extraTxTypes.get(Number(data[0]));
				if (ExtraTransaction === null || ExtraTransaction === void 0 ? void 0 : ExtraTransaction.fromSerializedTx) return ExtraTransaction.fromSerializedTx(data, txOptions);
				throw new Error(`TypedTransaction with ID ${data[0]} unknown`);
			}
		}
		else return Transaction.fromSerializedTx(data, txOptions);
	}
	/**
	* When decoding a BlockBody, in the transactions field, a field is either:
	* A Uint8Array (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))
	* A Uint8Array[] (Legacy Transaction)
	* This method returns the right transaction.
	*
	* @param data - A Uint8Array or Uint8Array[]
	* @param txOptions - The transaction options
	*/
	static fromBlockBodyData(data, txOptions = {}) {
		if (isUint8Array(data)) return this.fromSerializedData(data, txOptions);
		if (Array.isArray(data)) return Transaction.fromValuesArray(data, txOptions);
		throw new Error("Cannot decode transaction: unknown type input");
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-accounts@4.3.1/node_modules/web3-eth-accounts/lib/esm/account.js
var __awaiter$34 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
/**
* Get the private key Uint8Array after the validation.
* Note: This function is not exported through main web3 package, so for using it directly import from accounts package.
* @param data - Private key
* @param ignoreLength - Optional, ignore length check during validation
* @returns The Uint8Array private key
*
* ```ts
* parseAndValidatePrivateKey("0x08c673022000ece7964ea4db2d9369c50442b2869cbd8fc21baaca59e18f642c")
*
* > Uint8Array(32) [
* 186,  26, 143, 168, 235, 179,  90,  75,
* 101,  63,  84, 221, 152, 150,  30, 203,
*   8, 113,  94, 226,  53, 213, 216,   5,
* 194, 159,  17,  53, 219,  97, 121, 248
* ]
*
* ```
*/
const parseAndValidatePrivateKey = (data, ignoreLength) => {
	let privateKeyUint8Array;
	if (!ignoreLength && typeof data === "string" && isHexStrict(data) && data.length !== 66) throw new PrivateKeyLengthError();
	try {
		privateKeyUint8Array = isUint8Array(data) ? data : bytesToUint8Array(data);
	} catch (_a$3) {
		throw new InvalidPrivateKeyError();
	}
	if (!ignoreLength && privateKeyUint8Array.byteLength !== 32) throw new PrivateKeyLengthError();
	return privateKeyUint8Array;
};
/**
*
* Hashes the given message. The data will be `UTF-8 HEX` decoded and enveloped as follows:
* `"\x19Ethereum Signed Message:\n" + message.length + message` and hashed using keccak256.
*
* @param message - A message to hash, if its HEX it will be UTF8 decoded.
* @param skipPrefix - (default: false) If true, the message will be not prefixed with "\x19Ethereum Signed Message:\n" + message.length
* @returns The hashed message
*
* ```ts
* web3.eth.accounts.hashMessage("Hello world")
*
* > "0x8144a6fa26be252b86456491fbcd43c1de7e022241845ffea1c3df066f7cfede"
*
* web3.eth.accounts.hashMessage(web3.utils.utf8ToHex("Hello world")) // Will be hex decoded in hashMessage
*
* > "0x8144a6fa26be252b86456491fbcd43c1de7e022241845ffea1c3df066f7cfede"
*
* web3.eth.accounts.hashMessage("Hello world", true)
*
* > "0xed6c11b0b5b808960df26f5bfc471d04c1995b0ffd2055925ad1be28d6baadfd"
* ```
*/
const hashMessage = (message, skipPrefix = false) => {
	const messageHex = isHexStrict(message) ? message : utf8ToHex(message);
	const messageBytes = hexToBytes(messageHex);
	const preamble = hexToBytes(fromUtf8(`\x19Ethereum Signed Message:\n${messageBytes.byteLength}`));
	const ethMessage = skipPrefix ? messageBytes : uint8ArrayConcat(preamble, messageBytes);
	return sha3Raw(ethMessage);
};
/**
* Takes a hash of a message and a private key, signs the message using the SECP256k1 elliptic curve algorithm, and returns the signature components.
* @param hash - The hash of the message to be signed, represented as a hexadecimal string.
* @param privateKey - The private key used to sign the message, represented as a byte array.
* @returns - The signature Object containing the message, messageHash, signature r, s, v
*/
const signMessageWithPrivateKey = (hash$1, privateKey) => {
	const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);
	const signature = secp256k1.sign(hash$1.substring(2), privateKeyUint8Array);
	const signatureBytes = signature.toCompactRawBytes();
	const r = signature.r.toString(16).padStart(64, "0");
	const s = signature.s.toString(16).padStart(64, "0");
	const v = signature.recovery + 27;
	return {
		messageHash: hash$1,
		v: numberToHex(v),
		r: `0x${r}`,
		s: `0x${s}`,
		signature: `${bytesToHex(signatureBytes)}${v.toString(16)}`
	};
};
/**
* Signs arbitrary data with a given private key.
* :::info
* The value passed as the data parameter will be UTF-8 HEX decoded and wrapped as follows: "\\x19Ethereum Signed Message:\\n" + message.length + message
* :::

* @param data - The data to sign
* @param privateKey - The 32 byte private key to sign with
* @returns The signature Object containing the message, messageHash, signature r, s, v
*
* ```ts
* web3.eth.accounts.sign('Some data', '0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318')
* > {
* message: 'Some data',
* messageHash: '0x1da44b586eb0729ff70a73c326926f6ed5a25f5b056e7f47fbc6e58d86871655',
* v: '0x1c',
* r: '0xb91467e570a6466aa9e9876cbcd013baba02900b8979d43fe208a4a4f339f5fd',
* s: '0x6007e74cd82e037b800186422fc2da167c747ef045e5d18a5f5d4300f8e1a029',
* signature: '0xb91467e570a6466aa9e9876cbcd013baba02900b8979d43fe208a4a4f339f5fd6007e74cd82e037b800186422fc2da167c747ef045e5d18a5f5d4300f8e1a0291c'
* }
* ```
*/
const sign = (data, privateKey) => {
	const hash$1 = hashMessage(data);
	const { messageHash, v, r, s, signature } = signMessageWithPrivateKey(hash$1, privateKey);
	return {
		message: data,
		messageHash,
		v,
		r,
		s,
		signature
	};
};
/**
* Signs an Ethereum transaction with a given private key.
*
* @param transaction - The transaction, must be a legacy, EIP2930 or EIP 1559 transaction type
* @param privateKey -  The private key to import. This is 32 bytes of random data.
* @returns A signTransactionResult object that contains message hash, r, s, v, transaction hash and raw transaction.
*
* This function is not stateful here. We need network access to get the account `nonce` and `chainId` to sign the transaction.
* This function will rely on user to provide the full transaction to be signed. If you want to sign a partial transaction object
* Use {@link Web3.eth.accounts.sign} instead.
*
* Signing a legacy transaction
* ```ts
* import {signTransaction, Transaction} from 'web3-eth-accounts';
*
* signTransaction(new Transaction({
*	to: '0x118C2E5F57FD62C2B5b46a5ae9216F4FF4011a07',
*	value: '0x186A0',
*	gasLimit: '0x520812',
*	gasPrice: '0x09184e72a000',
*	data: '',
*	chainId: 1,
*	nonce: 0 }),
* '0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318')
*
* > {
* messageHash: '0x28b7b75f7ba48d588a902c1ff4d5d13cc0ca9ac0aaa39562368146923fb853bf',
* v: '0x25',
* r: '0x601b0017b0e20dd0eeda4b895fbc1a9e8968990953482214f880bae593e71b5',
* s: '0x690d984493560552e3ebdcc19a65b9c301ea9ddc82d3ab8cfde60485fd5722ce',
* rawTransaction: '0xf869808609184e72a0008352081294118c2e5f57fd62c2b5b46a5ae9216f4ff4011a07830186a08025a00601b0017b0e20dd0eeda4b895fbc1a9e8968990953482214f880bae593e71b5a0690d984493560552e3ebdcc19a65b9c301ea9ddc82d3ab8cfde60485fd5722ce',
* transactionHash: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'
* ```
*
* Signing an eip 1559 transaction
* ```ts
* import {signTransaction, Transaction} from 'web3-eth-accounts';
*
* signTransaction(new Transaction({
*	to: '0xF0109fC8DF283027b6285cc889F5aA624EaC1F55',
*	maxPriorityFeePerGas: '0x3B9ACA00',
*	maxFeePerGas: '0xB2D05E00',
*	gasLimit: '0x6A4012',
*	value: '0x186A0',
*	data: '',
*	chainId: 1,
*	nonce: 0}),
* "0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318")
* > {
*  messageHash: '0x5744f24d5f0aff6c70487c8e85adf07d8564e50b08558788f00479611d7bae5f',
* v: '0x25',
* r: '0x78a5a6b2876c3985f90f82073d18d57ac299b608cc76a4ba697b8bb085048347',
* s: '0x9cfcb40cc7d505ed17ff2d3337b51b066648f10c6b7e746117de69b2eb6358d',
* rawTransaction: '0xf8638080836a401294f0109fc8df283027b6285cc889f5aa624eac1f55830186a08025a078a5a6b2876c3985f90f82073d18d57ac299b608cc76a4ba697b8bb085048347a009cfcb40cc7d505ed17ff2d3337b51b066648f10c6b7e746117de69b2eb6358d',
* transactionHash: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'
* }
* ```
*
* Signing an eip 2930 transaction
* ```ts
* import {signTransaction, Transaction} from 'web3-eth-accounts';
*
* signTransaction(new Transaction ({
*	chainId: 1,
*	nonce: 0,
*	gasPrice: '0x09184e72a000',
*	gasLimit: '0x2710321',
*	to: '0xF0109fC8DF283027b6285cc889F5aA624EaC1F55',
*	value: '0x186A0',
*	data: '',
*	accessList: [
*		{
*			address: '0x0000000000000000000000000000000000000101',
*			storageKeys: [
*				'0x0000000000000000000000000000000000000000000000000000000000000000',
*				'0x00000000000000000000000000000000000000000000000000000000000060a7',
*			],
*		},
*	],
* }),"0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318")
*
* > {
* messageHash: '0xc55ea24bdb4c379550a7c9a6818ac39ca33e75bc78ddb862bd82c31cc1c7a073',
* v: '0x26',
* r: '0x27344e77871c8b2068bc998bf28e0b5f9920867a69c455b2ed0c1c150fec098e',
* s: '0x519f0130a1d662841d4a28082e9c9bb0a15e0e59bb46cfc39a52f0e285dec6b9',
* rawTransaction: '0xf86a808609184e72a000840271032194f0109fc8df283027b6285cc889f5aa624eac1f55830186a08026a027344e77871c8b2068bc998bf28e0b5f9920867a69c455b2ed0c1c150fec098ea0519f0130a1d662841d4a28082e9c9bb0a15e0e59bb46cfc39a52f0e285dec6b9',
* transactionHash: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'
* }
* ```
*/
const signTransaction = (transaction, privateKey) => __awaiter$34(void 0, void 0, void 0, function* () {
	const signedTx = transaction.sign(hexToBytes(privateKey));
	if (isNullish$1(signedTx.v) || isNullish$1(signedTx.r) || isNullish$1(signedTx.s)) throw new TransactionSigningError("Signer Error");
	const validationErrors = signedTx.validate(true);
	if (validationErrors.length > 0) {
		let errorString = "Signer Error ";
		for (const validationError of validationErrors) errorString += `${errorString} ${validationError}.`;
		throw new TransactionSigningError(errorString);
	}
	const rawTx = bytesToHex(signedTx.serialize());
	const txHash = sha3Raw(rawTx);
	return {
		messageHash: bytesToHex(signedTx.getMessageToSign(true)),
		v: `0x${signedTx.v.toString(16)}`,
		r: `0x${signedTx.r.toString(16).padStart(64, "0")}`,
		s: `0x${signedTx.s.toString(16).padStart(64, "0")}`,
		rawTransaction: rawTx,
		transactionHash: bytesToHex(txHash)
	};
});
/**
* Recovers the Ethereum address which was used to sign the given RLP encoded transaction.
*
* @param rawTransaction - The hex string having RLP encoded transaction
* @returns The Ethereum address used to sign this transaction
* ```ts
* web3.eth.accounts.recoverTransaction('0xf869808504e3b29200831e848094f0109fc8df283027b6285cc889f5aa624eac1f55843b9aca008025a0c9cf86333bcb065d140032ecaab5d9281bde80f21b9687b3e94161de42d51895a0727a108a0b8d101465414033c3f705a9c7b826e596766046ee1183dbc8aeaa68');
* > "0x2c7536E3605D9C16a7a3D7b1898e529396a65c23"
* ```
*/
const recoverTransaction = (rawTransaction) => {
	if (isNullish$1(rawTransaction)) throw new UndefinedRawTransactionError();
	const tx = TransactionFactory.fromSerializedData(hexToBytes(rawTransaction));
	return toChecksumAddress(tx.getSenderAddress().toString());
};
/**
* Recovers the Ethereum address which was used to sign the given data
*
* @param data - Either a signed message, hash, or the {@link signatureObject}
* @param signature - The raw RLP encoded signature
* @param signatureOrV - signature or V
* @param prefixedOrR - prefixed or R
* @param s - S value in signature
* @param prefixed - (default: false) If the last parameter is true, the given message will NOT automatically be prefixed with `"\\x19Ethereum Signed Message:\\n" + message.length + message`, and assumed to be already prefixed and hashed.
* @returns The Ethereum address used to sign this data
*
* ```ts
* const data = 'Some data';
* const sigObj = web3.eth.accounts.sign(data, '0xbe6383dad004f233317e46ddb46ad31b16064d14447a95cc1d8c8d4bc61c3728')
*
* > {
*   message: 'Some data',
*   messageHash: '0x1da44b586eb0729ff70a73c326926f6ed5a25f5b056e7f47fbc6e58d86871655',
*   v: '0x1b',
*   r: '0xa8037a6116c176a25e6fc224947fde9e79a2deaa0dd8b67b366fbdfdbffc01f9',
*   s: '0x53e41351267b20d4a89ebfe9c8f03c04de9b345add4a52f15bd026b63c8fb150',
*   signature: '0xa8037a6116c176a25e6fc224947fde9e79a2deaa0dd8b67b366fbdfdbffc01f953e41351267b20d4a89ebfe9c8f03c04de9b345add4a52f15bd026b63c8fb1501b'
* }
*
* // now recover
* web3.eth.accounts.recover(data, sigObj.v, sigObj.r, sigObj.s)
*
* > 0xEB014f8c8B418Db6b45774c326A0E64C78914dC0
* ```
*/
const recover = (data, signatureOrV, prefixedOrR, s, prefixed) => {
	if (typeof data === "object") {
		const signatureStr = `${data.r}${data.s.slice(2)}${data.v.slice(2)}`;
		return recover(data.messageHash, signatureStr, prefixedOrR);
	}
	if (typeof signatureOrV === "string" && typeof prefixedOrR === "string" && !isNullish$1(s)) {
		const signatureStr = `${prefixedOrR}${s.slice(2)}${signatureOrV.slice(2)}`;
		return recover(data, signatureStr, prefixed);
	}
	if (isNullish$1(signatureOrV)) throw new InvalidSignatureError("signature string undefined");
	const V_INDEX = 130;
	const hashedMessage = prefixedOrR ? data : hashMessage(data);
	let v = parseInt(signatureOrV.substring(V_INDEX), 16);
	if (v > 26) v -= 27;
	const ecPublicKey = secp256k1.Signature.fromCompact(signatureOrV.slice(2, V_INDEX)).addRecoveryBit(v).recoverPublicKey(hashedMessage.replace("0x", "")).toRawBytes(false);
	const publicHash = sha3Raw(ecPublicKey.subarray(1));
	const address = toChecksumAddress(`0x${publicHash.slice(-40)}`);
	return address;
};
/**
* Get the ethereum Address from a private key
*
* @param privateKey - String or Uint8Array of 32 bytes
* @param ignoreLength - if true, will not error check length
* @returns The Ethereum address
* @example
* ```ts
* web3.eth.accounts.privateKeyToAddress("0xbe6383dad004f233317e46ddb46ad31b16064d14447a95cc1d8c8d4bc61c3728")
*
* > "0xEB014f8c8B418Db6b45774c326A0E64C78914dC0"
* ```
*/
const privateKeyToAddress = (privateKey) => {
	const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);
	const publicKey = secp256k1.getPublicKey(privateKeyUint8Array, false);
	const publicKeyHash = sha3Raw(publicKey.slice(1));
	const address = publicKeyHash.slice(-40);
	return toChecksumAddress(`0x${address}`);
};
/**
* Get the public key from a private key
*
* @param privateKey - String or Uint8Array of 32 bytes
* @param isCompressed - if true, will generate a 33 byte compressed public key instead of a 65 byte public key
* @returns The public key
* @example
* ```ts
* web3.eth.accounts.privateKeyToPublicKey("0x1e046a882bb38236b646c9f135cf90ad90a140810f439875f2a6dd8e50fa261f", true)
*
* > "0x42beb65f179720abaa3ec9a70a539629cbbc5ec65bb57e7fc78977796837e537662dd17042e6449dc843c281067a4d6d8d1a1775a13c41901670d5de7ee6503a" // uncompressed public key
* ```
*/
const privateKeyToPublicKey = (privateKey, isCompressed) => {
	const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);
	return `0x${bytesToHex(secp256k1.getPublicKey(privateKeyUint8Array, isCompressed)).slice(4)}`;
};
/**
* encrypt a private key with a password, returns a V3 JSON Keystore
*
* Read more: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition
*
* @param privateKey - The private key to encrypt, 32 bytes.
* @param password - The password used for encryption.
* @param options - Options to configure to encrypt the keystore either scrypt or pbkdf2
* @returns Returns a V3 JSON Keystore
*
* Encrypt using scrypt options:
* ```ts
*
* web3.eth.accounts.encrypt(
*    '0x67f476289210e3bef3c1c75e4de993ff0a00663df00def84e73aa7411eac18a6',
*    '123',
*    {
*        n: 8192,
*	    iv: web3.utils.hexToBytes('0xbfb43120ae00e9de110f8325143a2709'),
*	    salt: web3.utils.hexToBytes('0x210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd'),
*	}).then(console.log)
*
* > {
* version: 3,
* id: 'c0cb0a94-4702-4492-b6e6-eb2ac404344a',
* address: 'cda9a91875fc35c8ac1320e098e584495d66e47c',
* crypto: {
*   ciphertext: 'cb3e13e3281ff3861a3f0257fad4c9a51b0eb046f9c7821825c46b210f040b8f',
*   cipherparams: { iv: 'bfb43120ae00e9de110f8325143a2709' },
*   cipher: 'aes-128-ctr',
*   kdf: 'scrypt',
*   kdfparams: {
*     n: 8192,
*     r: 8,
*     p: 1,
*     dklen: 32,
*     salt: '210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd'
*   },
*   mac: 'efbf6d3409f37c0084a79d5fdf9a6f5d97d11447517ef1ea8374f51e581b7efd'
* }
*}
*```
*
* Encrypting using pbkdf2 options:
* ```ts
* web3.eth.accounts.encrypt('0x348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709',
*'123',
*{
*	iv: 'bfb43120ae00e9de110f8325143a2709',
*	salt: '210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd',
*	c: 262144,
*	kdf: 'pbkdf2',
*}).then(console.log)
*
* >
* {
*   version: 3,
*   id: '77381417-0973-4e4b-b590-8eb3ace0fe2d',
*   address: 'b8ce9ab6943e0eced004cde8e3bbed6568b2fa01',
*   crypto: {
*     ciphertext: '76512156a34105fa6473ad040c666ae7b917d14c06543accc0d2dc28e6073b12',
*     cipherparams: { iv: 'bfb43120ae00e9de110f8325143a2709' },
*     cipher: 'aes-128-ctr',
*     kdf: 'pbkdf2',
*     kdfparams: {
*       dklen: 32,
*       salt: '210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd',
*       c: 262144,
*       prf: 'hmac-sha256'
*     },
*   mac: '46eb4884e82dc43b5aa415faba53cc653b7038e9d61cc32fd643cf8c396189b7'
*   }
* }
*```
*/
const encrypt = (privateKey, password, options) => __awaiter$34(void 0, void 0, void 0, function* () {
	var _a$3, _b, _c, _d, _e, _f, _g;
	const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);
	let salt;
	if (options === null || options === void 0 ? void 0 : options.salt) salt = typeof options.salt === "string" ? hexToBytes(options.salt) : options.salt;
	else salt = randomBytes(32);
	if (!(isString(password) || isUint8Array(password))) throw new InvalidPasswordError();
	const uint8ArrayPassword = typeof password === "string" ? hexToBytes(utf8ToHex(password)) : password;
	let initializationVector;
	if (options === null || options === void 0 ? void 0 : options.iv) {
		initializationVector = typeof options.iv === "string" ? hexToBytes(options.iv) : options.iv;
		if (initializationVector.length !== 16) throw new IVLengthError();
	} else initializationVector = randomBytes(16);
	const kdf = (_a$3 = options === null || options === void 0 ? void 0 : options.kdf) !== null && _a$3 !== void 0 ? _a$3 : "scrypt";
	let derivedKey;
	let kdfparams;
	if (kdf === "pbkdf2") {
		kdfparams = {
			dklen: (_b = options === null || options === void 0 ? void 0 : options.dklen) !== null && _b !== void 0 ? _b : 32,
			salt: bytesToHex(salt).replace("0x", ""),
			c: (_c = options === null || options === void 0 ? void 0 : options.c) !== null && _c !== void 0 ? _c : 262144,
			prf: "hmac-sha256"
		};
		if (kdfparams.c < 1e3) throw new PBKDF2IterationsError();
		derivedKey = pbkdf2Sync(uint8ArrayPassword, salt, kdfparams.c, kdfparams.dklen, "sha256");
	} else if (kdf === "scrypt") {
		kdfparams = {
			n: (_d = options === null || options === void 0 ? void 0 : options.n) !== null && _d !== void 0 ? _d : 8192,
			r: (_e = options === null || options === void 0 ? void 0 : options.r) !== null && _e !== void 0 ? _e : 8,
			p: (_f = options === null || options === void 0 ? void 0 : options.p) !== null && _f !== void 0 ? _f : 1,
			dklen: (_g = options === null || options === void 0 ? void 0 : options.dklen) !== null && _g !== void 0 ? _g : 32,
			salt: bytesToHex(salt).replace("0x", "")
		};
		derivedKey = scryptSync(uint8ArrayPassword, salt, kdfparams.n, kdfparams.p, kdfparams.r, kdfparams.dklen);
	} else throw new InvalidKdfError();
	const cipher = yield encrypt$1(privateKeyUint8Array, derivedKey.slice(0, 16), initializationVector, "aes-128-ctr");
	const ciphertext = bytesToHex(cipher).slice(2);
	const mac = sha3Raw(uint8ArrayConcat(derivedKey.slice(16, 32), cipher)).replace("0x", "");
	return {
		version: 3,
		id: uuidV4(),
		address: privateKeyToAddress(privateKeyUint8Array).toLowerCase().replace("0x", ""),
		crypto: {
			ciphertext,
			cipherparams: { iv: bytesToHex(initializationVector).replace("0x", "") },
			cipher: "aes-128-ctr",
			kdf,
			kdfparams,
			mac
		}
	};
});
/**
* Get an Account object from the privateKey
*
* @param privateKey - String or Uint8Array of 32 bytes
* @param ignoreLength - if true, will not error check length
* @returns A Web3Account object
*
* :::info
* The `Web3Account.signTransaction` is not stateful if directly imported from accounts package and used. Network access is required to get the account `nonce` and `chainId` to sign the transaction, so use {@link Web3.eth.accounts.signTransaction} for signing transactions.
* ::::
*
* ```ts
* web3.eth.accounts.privateKeyToAccount("0x348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709");
*
* >    {
* 			address: '0xb8CE9ab6943e0eCED004cDe8e3bBed6568B2Fa01',
* 			privateKey: '0x348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709',
* 			sign,
* 			signTransaction,
* 			encrypt,
* 	}
* ```
*/
const privateKeyToAccount = (privateKey, ignoreLength) => {
	const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey, ignoreLength);
	return {
		address: privateKeyToAddress(privateKeyUint8Array),
		privateKey: bytesToHex(privateKeyUint8Array),
		signTransaction: (_tx) => {
			throw new TransactionSigningError("Do not have network access to sign the transaction");
		},
		sign: (data) => sign(typeof data === "string" ? data : JSON.stringify(data), privateKeyUint8Array),
		encrypt: (password, options) => __awaiter$34(void 0, void 0, void 0, function* () {
			return encrypt(privateKeyUint8Array, password, options);
		})
	};
};
/**
*
* Generates and returns a Web3Account object that includes the private and public key
* For creation of private key, it uses an audited package ethereum-cryptography/secp256k1
* that is cryptographically secure random number with certain characteristics.
* Read more: https://www.npmjs.com/package/ethereum-cryptography#secp256k1-curve
*
* @returns A Web3Account object
* ```ts
* web3.eth.accounts.create();
* {
* address: '0xbD504f977021b5E5DdccD8741A368b147B3B38bB',
* privateKey: '0x964ced1c69ad27a311c432fdc0d8211e987595f7eb34ab405a5f16bdc9563ec5',
* signTransaction: [Function: signTransaction],
* sign: [Function: sign],
* encrypt: [AsyncFunction: encrypt]
* }
* ```
*/
const create = () => {
	const privateKey = secp256k1.utils.randomPrivateKey();
	return privateKeyToAccount(`${bytesToHex(privateKey)}`);
};
/**
* Decrypts a v3 keystore JSON, and creates the account.
*
* @param keystore - the encrypted Keystore object or string to decrypt
* @param password - The password that was used for encryption
* @param nonStrict - if true and given a json string, the keystore will be parsed as lowercase.
* @returns Returns the decrypted Web3Account object
* Decrypting scrypt
*
* ```ts
* web3.eth.accounts.decrypt({
*   version: 3,
*   id: 'c0cb0a94-4702-4492-b6e6-eb2ac404344a',
*   address: 'cda9a91875fc35c8ac1320e098e584495d66e47c',
*   crypto: {
*   ciphertext: 'cb3e13e3281ff3861a3f0257fad4c9a51b0eb046f9c7821825c46b210f040b8f',
*      cipherparams: { iv: 'bfb43120ae00e9de110f8325143a2709' },
*      cipher: 'aes-128-ctr',
*      kdf: 'scrypt',
*      kdfparams: {
*        n: 8192,
*        r: 8,
*        p: 1,
*        dklen: 32,
*        salt: '210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd'
*      },
*      mac: 'efbf6d3409f37c0084a79d5fdf9a6f5d97d11447517ef1ea8374f51e581b7efd'
*    }
*   }, '123').then(console.log);
*
*
* > {
* address: '0xcdA9A91875fc35c8Ac1320E098e584495d66e47c',
* privateKey: '67f476289210e3bef3c1c75e4de993ff0a00663df00def84e73aa7411eac18a6',
* signTransaction: [Function: signTransaction],
* sign: [Function: sign],
* encrypt: [AsyncFunction: encrypt]
* }
* ```
*/
const decrypt = (keystore, password, nonStrict) => __awaiter$34(void 0, void 0, void 0, function* () {
	const json = typeof keystore === "object" ? keystore : JSON.parse(nonStrict ? keystore.toLowerCase() : keystore);
	validator.validateJSONSchema(keyStoreSchema, json);
	if (json.version !== 3) throw new KeyStoreVersionError();
	const uint8ArrayPassword = typeof password === "string" ? hexToBytes(utf8ToHex(password)) : password;
	validator.validate(["bytes"], [uint8ArrayPassword]);
	let derivedKey;
	if (json.crypto.kdf === "scrypt") {
		const kdfparams = json.crypto.kdfparams;
		const uint8ArraySalt = typeof kdfparams.salt === "string" ? hexToBytes(kdfparams.salt) : kdfparams.salt;
		derivedKey = scryptSync(uint8ArrayPassword, uint8ArraySalt, kdfparams.n, kdfparams.p, kdfparams.r, kdfparams.dklen);
	} else if (json.crypto.kdf === "pbkdf2") {
		const kdfparams = json.crypto.kdfparams;
		const uint8ArraySalt = typeof kdfparams.salt === "string" ? hexToBytes(kdfparams.salt) : kdfparams.salt;
		derivedKey = pbkdf2Sync(uint8ArrayPassword, uint8ArraySalt, kdfparams.c, kdfparams.dklen, "sha256");
	} else throw new InvalidKdfError();
	const ciphertext = hexToBytes(json.crypto.ciphertext);
	const mac = sha3Raw(uint8ArrayConcat(derivedKey.slice(16, 32), ciphertext)).replace("0x", "");
	if (mac !== json.crypto.mac) throw new KeyDerivationError();
	const seed = yield decrypt$1(hexToBytes(json.crypto.ciphertext), derivedKey.slice(0, 16), hexToBytes(json.crypto.cipherparams.iv));
	return privateKeyToAccount(seed);
});

//#endregion
//#region ../../node_modules/.pnpm/web3-core@4.7.1/node_modules/web3-core/lib/esm/web3_batch_request.js
var __awaiter$33 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
const DEFAULT_BATCH_REQUEST_TIMEOUT = 1e3;
var Web3BatchRequest = class {
	constructor(requestManager) {
		this._requestManager = requestManager;
		this._requests = /* @__PURE__ */ new Map();
	}
	get requests() {
		return [...this._requests.values()].map((r) => r.payload);
	}
	add(request) {
		const payload = toPayload(request);
		const promise = new Web3DeferredPromise();
		this._requests.set(payload.id, {
			payload,
			promise
		});
		return promise;
	}
	execute(options) {
		return __awaiter$33(this, void 0, void 0, function* () {
			var _a$3;
			if (this.requests.length === 0) return Promise.resolve([]);
			const request = new Web3DeferredPromise({
				timeout: (_a$3 = options === null || options === void 0 ? void 0 : options.timeout) !== null && _a$3 !== void 0 ? _a$3 : DEFAULT_BATCH_REQUEST_TIMEOUT,
				eagerStart: true,
				timeoutMessage: "Batch request timeout"
			});
			this._processBatchRequest(request).catch((err) => request.reject(err));
			request.catch((err) => {
				if (err instanceof OperationTimeoutError) this._abortAllRequests("Batch request timeout");
				request.reject(err);
			});
			return request;
		});
	}
	_processBatchRequest(promise) {
		return __awaiter$33(this, void 0, void 0, function* () {
			var _a$3, _b;
			const response = yield this._requestManager.sendBatch([...this._requests.values()].map((r) => r.payload));
			if (response.length !== this._requests.size) {
				this._abortAllRequests("Invalid batch response");
				throw new ResponseError(response, `Batch request size mismatch the results size. Requests: ${this._requests.size}, Responses: ${response.length}`);
			}
			const requestIds = this.requests.map((r) => r.id).map(Number).sort((a, b) => a - b);
			const responseIds = response.map((r) => r.id).map(Number).sort((a, b) => a - b);
			if (JSON.stringify(requestIds) !== JSON.stringify(responseIds)) {
				this._abortAllRequests("Invalid batch response");
				throw new ResponseError(response, `Batch request mismatch the results. Requests: [${requestIds.join()}], Responses: [${responseIds.join()}]`);
			}
			for (const res of response) if (isResponseWithResult(res)) (_a$3 = this._requests.get(res.id)) === null || _a$3 === void 0 || _a$3.promise.resolve(res.result);
			else if (isResponseWithError(res)) (_b = this._requests.get(res.id)) === null || _b === void 0 || _b.promise.reject(res.error);
			promise.resolve(response);
		});
	}
	_abortAllRequests(msg) {
		for (const { promise } of this._requests.values()) promise.reject(new OperationAbortError(msg));
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-core@4.7.1/node_modules/web3-core/lib/esm/web3_context.js
var __awaiter$32 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
var Web3Context = class Web3Context extends Web3Config {
	constructor(providerOrContext) {
		var _a$3;
		super();
		this.providers = Web3RequestManager.providers;
		if (isNullish(providerOrContext) || typeof providerOrContext === "string" && providerOrContext.trim() !== "" || isSupportedProvider(providerOrContext)) {
			this._requestManager = new Web3RequestManager(providerOrContext);
			this._subscriptionManager = new Web3SubscriptionManager(this._requestManager, {});
			return;
		}
		const { config, provider, requestManager, subscriptionManager, registeredSubscriptions: registeredSubscriptions$1, accountProvider, wallet, requestManagerMiddleware } = providerOrContext;
		this.setConfig(config !== null && config !== void 0 ? config : {});
		this._requestManager = requestManager !== null && requestManager !== void 0 ? requestManager : new Web3RequestManager(provider, (_a$3 = config === null || config === void 0 ? void 0 : config.enableExperimentalFeatures) === null || _a$3 === void 0 ? void 0 : _a$3.useSubscriptionWhenCheckingBlockTimeout, requestManagerMiddleware);
		if (subscriptionManager) this._subscriptionManager = subscriptionManager;
		else this._subscriptionManager = new Web3SubscriptionManager(this.requestManager, registeredSubscriptions$1 !== null && registeredSubscriptions$1 !== void 0 ? registeredSubscriptions$1 : {});
		if (accountProvider) this._accountProvider = accountProvider;
		if (wallet) this._wallet = wallet;
	}
	get requestManager() {
		return this._requestManager;
	}
	/**
	* Will return the current subscriptionManager ({@link Web3SubscriptionManager})
	*/
	get subscriptionManager() {
		return this._subscriptionManager;
	}
	get wallet() {
		return this._wallet;
	}
	get accountProvider() {
		return this._accountProvider;
	}
	static fromContextObject(...args) {
		return new this(...args.reverse());
	}
	getContextObject() {
		var _a$3;
		return {
			config: this.config,
			provider: this.provider,
			requestManager: this.requestManager,
			subscriptionManager: this.subscriptionManager,
			registeredSubscriptions: (_a$3 = this.subscriptionManager) === null || _a$3 === void 0 ? void 0 : _a$3.registeredSubscriptions,
			providers: this.providers,
			wallet: this.wallet,
			accountProvider: this.accountProvider
		};
	}
	/**
	* Use to create new object of any type extended by `Web3Context`
	* and link it to current context. This can be used to initiate a global context object
	* and then use it to create new objects of any type extended by `Web3Context`.
	*/
	use(ContextRef, ...args) {
		const newContextChild = new ContextRef(...[...args, this.getContextObject()]);
		this.on(Web3ConfigEvent.CONFIG_CHANGE, (event) => {
			newContextChild.setConfig({ [event.name]: event.newValue });
		});
		this[ContextRef.name] = newContextChild;
		return newContextChild;
	}
	/**
	* Link current context to another context.
	*/
	link(parentContext) {
		this.setConfig(parentContext.config);
		this._requestManager = parentContext.requestManager;
		this.provider = parentContext.provider;
		this._subscriptionManager = parentContext.subscriptionManager;
		this._wallet = parentContext.wallet;
		this._accountProvider = parentContext._accountProvider;
		parentContext.on(Web3ConfigEvent.CONFIG_CHANGE, (event) => {
			this.setConfig({ [event.name]: event.newValue });
		});
	}
	registerPlugin(plugin) {
		if (this[plugin.pluginNamespace] !== void 0) throw new ExistingPluginNamespaceError(plugin.pluginNamespace);
		const _pluginObject = { [plugin.pluginNamespace]: plugin };
		_pluginObject[plugin.pluginNamespace].link(this);
		Object.assign(this, _pluginObject);
	}
	/**
	* Will return the current provider.
	*
	* @returns Returns the current provider
	* @example
	* ```ts
	* const web3 = new Web3Context("http://localhost:8545");
	* console.log(web3.provider);
	* > HttpProvider {
	* 	clientUrl: 'http://localhost:8545',
	* 	httpProviderOptions: undefined
	*  }
	* ```
	*/
	get provider() {
		return this.currentProvider;
	}
	/**
	* Will set the current provider.
	*
	* @param provider - The provider to set
	*
	* Accepted providers are of type {@link SupportedProviders}
	* @example
	* ```ts
	*  const web3Context = new web3ContextContext("http://localhost:8545");
	* web3Context.provider = "ws://localhost:8545";
	* console.log(web3Context.provider);
	* > WebSocketProvider {
	* _eventEmitter: EventEmitter {
	* _events: [Object: null prototype] {},
	* _eventsCount: 0,
	* ...
	* }
	* ```
	*/
	set provider(provider) {
		this.requestManager.setProvider(provider);
	}
	/**
	* Will return the current provider. (The same as `provider`)
	*
	* @returns Returns the current provider
	* @example
	* ```ts
	* const web3Context = new Web3Context("http://localhost:8545");
	* console.log(web3Context.provider);
	* > HttpProvider {
	* 	clientUrl: 'http://localhost:8545',
	* 	httpProviderOptions: undefined
	*  }
	* ```
	*/
	get currentProvider() {
		return this.requestManager.provider;
	}
	/**
	* Will set the current provider. (The same as `provider`)
	*
	* @param provider - {@link SupportedProviders} The provider to set
	*
	* @example
	* ```ts
	*  const web3Context = new Web3Context("http://localhost:8545");
	* web3Context.currentProvider = "ws://localhost:8545";
	* console.log(web3Context.provider);
	* > WebSocketProvider {
	* _eventEmitter: EventEmitter {
	* _events: [Object: null prototype] {},
	* _eventsCount: 0,
	* ...
	* }
	* ```
	*/
	set currentProvider(provider) {
		this.requestManager.setProvider(provider);
	}
	/**
	* Will return the givenProvider if available.
	*
	* When using web3.js in an Ethereum compatible browser, it will set with the current native provider by that browser. Will return the given provider by the (browser) environment, otherwise `undefined`.
	*/
	get givenProvider() {
		return Web3Context.givenProvider;
	}
	/**
	* Will set the provider.
	*
	* @param provider - {@link SupportedProviders} The provider to set
	* @returns Returns true if the provider was set
	*/
	setProvider(provider) {
		this.provider = provider;
		return true;
	}
	setRequestManagerMiddleware(requestManagerMiddleware) {
		this.requestManager.setMiddleware(requestManagerMiddleware);
	}
	/**
	* Will return the {@link Web3BatchRequest} constructor.
	*/
	get BatchRequest() {
		return Web3BatchRequest.bind(void 0, this._requestManager);
	}
	/**
	* This method allows extending the web3 modules.
	* Note: This method is only for backward compatibility, and It is recommended to use Web3 v4 Plugin feature for extending web3.js functionality if you are developing something new.
	*/
	extend(extendObj) {
		var _a$3;
		if (extendObj.property && !this[extendObj.property]) this[extendObj.property] = {};
		(_a$3 = extendObj.methods) === null || _a$3 === void 0 || _a$3.forEach((element) => {
			const method = (...givenParams) => __awaiter$32(this, void 0, void 0, function* () {
				return this.requestManager.send({
					method: element.call,
					params: givenParams
				});
			});
			if (extendObj.property) this[extendObj.property][element.name] = method;
			else this[element.name] = method;
		});
		return this;
	}
};
Web3Context.providers = Web3RequestManager.providers;

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-iban@4.0.7/node_modules/web3-eth-iban/lib/esm/iban.js
/**
* Converts Ethereum addresses to IBAN or BBAN addresses and vice versa.
*/
var Iban = class Iban {
	/**
	* Construct a direct or indirect IBAN that has conversion methods and validity checks.
	* If the provided string was not of either the length of a direct IBAN (34 or 35),
	* nor the length of an indirect IBAN (20), an Error will be thrown ('Invalid IBAN was provided').
	*
	* @param iban - a Direct or an Indirect IBAN
	* @returns - Iban instance
	*
	* @example
	* ```ts
	* const iban = new web3.eth.Iban("XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS");
	* > Iban { _iban: 'XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS' }
	* ```
	*/
	constructor(iban) {
		/**
		* This method should be used to create the equivalent ethereum address for the early provided Direct IBAN address.
		* If the provided string was not a direct IBAN (has the length of 34 or 35), an Error will be thrown:
		* ('Iban is indirect and cannot be converted. Must be length of 34 or 35').
		* Note: this is also available as a static method.
		*
		* @return the equivalent ethereum address
		*
		* @example
		* ```ts
		* const iban = new web3.eth.Iban("XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS");
		* iban.toAddress();
		* > "0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8"
		* ```
		*/
		this.toAddress = () => {
			if (this.isDirect()) {
				const base36 = this._iban.slice(4);
				const parsedBigInt = Iban._parseInt(base36, 36);
				const paddedBigInt = leftPad(parsedBigInt, 40);
				return toChecksumAddress(paddedBigInt);
			}
			throw new Error("Iban is indirect and cannot be converted. Must be length of 34 or 35");
		};
		if (Iban.isIndirect(iban) || Iban.isDirect(iban)) this._iban = iban;
		else throw new Error("Invalid IBAN was provided");
	}
	/**
	* A static method that checks if an IBAN is Direct.
	* It actually check the length of the provided variable and, only if it is 34 or 35, it returns true.
	* Note: this is also available as a method at an Iban instance.
	* @param iban - an IBAN to be checked
	* @returns - `true` if the provided `iban` is a Direct IBAN, and `false` otherwise.
	*
	* @example
	* ```ts
	* web3.eth.Iban.isDirect("XE81ETHXREGGAVOFYORK");
	* > false
	* ```
	*/
	static isDirect(iban) {
		return iban.length === 34 || iban.length === 35;
	}
	/**
	* An instance method that checks if iban number is Direct.
	* It actually check the length of the provided variable and, only if it is 34 or 35, it returns true.
	* Note: this is also available as a static method.
	* @param iban - an IBAN to be checked
	* @returns - `true` if the provided `iban` is a Direct IBAN, and `false` otherwise.
	*
	* @example
	* ```ts
	* const iban = new web3.eth.Iban("XE81ETHXREGGAVOFYORK");
	* iban.isDirect();
	* > false
	* ```
	*/
	isDirect() {
		return Iban.isDirect(this._iban);
	}
	/**
	* A static method that checks if an IBAN is Indirect.
	* It actually check the length of the provided variable and, only if it is 20, it returns true.
	* Note: this is also available as a method at an Iban instance.
	* @param iban - an IBAN to be checked
	* @returns - `true` if the provided `iban` is an Indirect IBAN, and `false` otherwise.
	*
	* @example
	* ```ts
	* web3.eth.Iban.isIndirect("XE81ETHXREGGAVOFYORK");
	* > true
	* ```
	*/
	static isIndirect(iban) {
		return iban.length === 20;
	}
	/**
	* check if iban number if indirect
	* It actually check the length of the provided variable and, only if it is 20, it returns true.
	* Note: this is also available as a static method.
	* @param iban - an IBAN to be checked
	* @returns - `true` if the provided `iban` is an Indirect IBAN, and `false` otherwise.
	*
	* @example
	* ```ts
	* const iban = new web3.eth.Iban("XE81ETHXREGGAVOFYORK");
	* iban.isIndirect();
	* > true
	* ```
	*/
	isIndirect() {
		return Iban.isIndirect(this._iban);
	}
	/**
	* This method could be used to check if a given string is valid IBAN object.
	* Note: this is also available as a method at an Iban instance.
	*
	* @param iban - a string to be checked if it is in IBAN
	* @returns - true if it is valid IBAN
	*
	* @example
	* ```ts
	* web3.eth.Iban.isValid("XE81ETHXREGGAVOFYORK");
	* > true
	*
	* web3.eth.Iban.isValid("XE82ETHXREGGAVOFYORK");
	* > false // because the checksum is incorrect
	* ```
	*/
	static isValid(iban) {
		return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(iban) && Iban._mod9710(Iban._iso13616Prepare(iban)) === 1;
	}
	/**
	* Should be called to check if the early provided IBAN is correct.
	* Note: this is also available as a static method.
	*
	* @example
	* ```ts
	* const iban = new web3.eth.Iban("XE81ETHXREGGAVOFYORK");
	* iban.isValid();
	* > true
	*
	* const iban = new web3.eth.Iban("XE82ETHXREGGAVOFYORK");
	* iban.isValid();
	* > false // because the checksum is incorrect
	* ```
	*/
	isValid() {
		return Iban.isValid(this._iban);
	}
	/**
	* Convert the passed BBAN to an IBAN for this country specification.
	* Please note that <i>"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account"</i>.
	* This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits
	*
	* @param bban - the BBAN to convert to IBAN
	* @returns an Iban class instance that holds the equivalent IBAN
	*
	* @example
	* ```ts
	* web3.eth.Iban.fromBban('ETHXREGGAVOFYORK');
	* > Iban {_iban: "XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS"}
	* ```
	*/
	static fromBban(bban) {
		const countryCode = "XE";
		const remainder = this._mod9710(this._iso13616Prepare(`${countryCode}00${bban}`));
		const checkDigit = `0${(98 - remainder).toString()}`.slice(-2);
		return new Iban(`${countryCode}${checkDigit}${bban}`);
	}
	/**
	* Should be used to create IBAN object for given institution and identifier
	*
	* @param options - an object holds the `institution` and the `identifier` which will be composed to create an `Iban` object from.
	* @returns an Iban class instance that holds the equivalent IBAN
	*
	* @example
	* ```ts
	* web3.eth.Iban.createIndirect({
	*     institution: "XREG",
	*     identifier: "GAVOFYORK"
	* });
	* > Iban {_iban: "XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS"}
	* ```
	*/
	static createIndirect(options) {
		return Iban.fromBban(`ETH${options.institution}${options.identifier}`);
	}
	/**
	* This method should be used to create iban object from an Ethereum address.
	*
	* @param address - an Ethereum address
	* @returns an Iban class instance that holds the equivalent IBAN
	*
	* @example
	* ```ts
	* web3.eth.Iban.fromAddress("0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8");
	* > Iban {_iban: "XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS"}
	* ```
	*/
	static fromAddress(address) {
		if (!isAddress(address)) throw new InvalidAddressError(address);
		const num = BigInt(hexToNumber(address));
		const base36 = num.toString(36);
		const padded = leftPad(base36, 15);
		return Iban.fromBban(padded.toUpperCase());
	}
	/**
	* This method should be used to create IBAN address from an Ethereum address
	*
	* @param address - an Ethereum address
	* @return the equivalent IBAN address
	*
	* @example
	* ```ts
	* web3.eth.Iban.toIban("0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8");
	* > "XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS"
	* ```
	*/
	static toIban(address) {
		return Iban.fromAddress(address).toString();
	}
	/**
	* Should be called to get client identifier within institution
	*
	* @return the client of the IBAN instance.
	*
	* @example
	* ```ts
	* const iban = new web3.eth.Iban("XE81ETHXREGGAVOFYORK");
	* iban.client();
	* > 'GAVOFYORK'
	* ```
	*/
	client() {
		return this.isIndirect() ? this._iban.slice(11) : "";
	}
	/**
	* Returns the IBAN checksum of the early provided IBAN
	*
	* @example
	* ```ts
	* const iban = new web3.eth.Iban("XE81ETHXREGGAVOFYORK");
	* iban.checksum();
	* > "81"
	* ```
	*
	*/
	checksum() {
		return this._iban.slice(2, 4);
	}
	/**
	* Returns institution identifier from the early provided  IBAN
	*
	* @example
	* ```ts
	* const iban = new web3.eth.Iban("XE81ETHXREGGAVOFYORK");
	* iban.institution();
	* > 'XREG'
	* ```
	*/
	institution() {
		return this.isIndirect() ? this._iban.slice(7, 11) : "";
	}
	/**
	* Simply returns the early provided IBAN
	*
	* @example
	* ```ts
	* const iban = new web3.eth.Iban('XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS');
	* iban.toString();
	* > 'XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS'
	* ```
	*/
	toString() {
		return this._iban;
	}
};
/**
* Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to
* numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.
*/
Iban._iso13616Prepare = (iban) => {
	const A = "A".charCodeAt(0);
	const Z = "Z".charCodeAt(0);
	const upperIban = iban.toUpperCase();
	const modifiedIban = `${upperIban.slice(4)}${upperIban.slice(0, 4)}`;
	return modifiedIban.split("").map((n) => {
		const code = n.charCodeAt(0);
		if (code >= A && code <= Z) return code - A + 10;
		return n;
	}).join("");
};
/**
* return the bigint of the given string with the specified base
*/
Iban._parseInt = (str, base$1) => [...str].reduce((acc, curr) => BigInt(parseInt(curr, base$1)) + BigInt(base$1) * acc, BigInt(0));
/**
* Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.
*/
Iban._mod9710 = (iban) => {
	let remainder = iban;
	let block;
	while (remainder.length > 2) {
		block = remainder.slice(0, 9);
		remainder = `${(parseInt(block, 10) % 97).toString()}${remainder.slice(block.length)}`;
	}
	return parseInt(remainder, 10) % 97;
};
/**
* This method should be used to create an ethereum address from a Direct IBAN address.
* If the provided string was not a direct IBAN (has the length of 34 or 35), an Error will be thrown:
* ('Iban is indirect and cannot be converted. Must be length of 34 or 35').
* Note: this is also available as a method at an Iban instance.
*
* @param iban - a Direct IBAN address
* @return the equivalent ethereum address
*
* @example
* ```ts
* web3.eth.Iban.toAddress("XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS");
* > "0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8"
* ```
*/
Iban.toAddress = (iban) => {
	const ibanObject = new Iban(iban);
	return ibanObject.toAddress();
};

//#endregion
//#region ../../node_modules/.pnpm/web3-core@4.7.1/node_modules/web3-core/lib/esm/web3_promi_event.js
var __awaiter$31 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
var _a;
var Web3PromiEvent = class extends Web3EventEmitter {
	constructor(executor) {
		super();
		this[_a] = "Promise";
		this._promise = new Promise(executor);
	}
	then(onfulfilled, onrejected) {
		return __awaiter$31(this, void 0, void 0, function* () {
			return this._promise.then(onfulfilled, onrejected);
		});
	}
	catch(onrejected) {
		return __awaiter$31(this, void 0, void 0, function* () {
			return this._promise.catch(onrejected);
		});
	}
	finally(onfinally) {
		return __awaiter$31(this, void 0, void 0, function* () {
			return this._promise.finally(onfinally);
		});
	}
	on(eventName, fn) {
		super.on(eventName, fn);
		return this;
	}
	once(eventName, fn) {
		super.once(eventName, fn);
		return this;
	}
};
_a = Symbol.toStringTag;

//#endregion
//#region ../../node_modules/.pnpm/setimmediate@1.0.5/node_modules/setimmediate/setImmediate.js
(function(global$1, undefined$1) {
	"use strict";
	if (global$1.setImmediate) return;
	var nextHandle = 1;
	var tasksByHandle = {};
	var currentlyRunningATask = false;
	var doc = global$1.document;
	var registerImmediate;
	function setImmediate$1(callback) {
		if (typeof callback !== "function") callback = new Function("" + callback);
		var args = new Array(arguments.length - 1);
		for (var i = 0; i < args.length; i++) args[i] = arguments[i + 1];
		var task = {
			callback,
			args
		};
		tasksByHandle[nextHandle] = task;
		registerImmediate(nextHandle);
		return nextHandle++;
	}
	function clearImmediate(handle) {
		delete tasksByHandle[handle];
	}
	function run(task) {
		var callback = task.callback;
		var args = task.args;
		switch (args.length) {
			case 0:
				callback();
				break;
			case 1:
				callback(args[0]);
				break;
			case 2:
				callback(args[0], args[1]);
				break;
			case 3:
				callback(args[0], args[1], args[2]);
				break;
			default:
				callback.apply(undefined$1, args);
				break;
		}
	}
	function runIfPresent(handle) {
		if (currentlyRunningATask) setTimeout(runIfPresent, 0, handle);
		else {
			var task = tasksByHandle[handle];
			if (task) {
				currentlyRunningATask = true;
				try {
					run(task);
				} finally {
					clearImmediate(handle);
					currentlyRunningATask = false;
				}
			}
		}
	}
	function installNextTickImplementation() {
		registerImmediate = function(handle) {
			process.nextTick(function() {
				runIfPresent(handle);
			});
		};
	}
	function canUsePostMessage() {
		if (global$1.postMessage && !global$1.importScripts) {
			var postMessageIsAsynchronous = true;
			var oldOnMessage = global$1.onmessage;
			global$1.onmessage = function() {
				postMessageIsAsynchronous = false;
			};
			global$1.postMessage("", "*");
			global$1.onmessage = oldOnMessage;
			return postMessageIsAsynchronous;
		}
	}
	function installPostMessageImplementation() {
		var messagePrefix = "setImmediate$" + Math.random() + "$";
		var onGlobalMessage = function(event) {
			if (event.source === global$1 && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) runIfPresent(+event.data.slice(messagePrefix.length));
		};
		if (global$1.addEventListener) global$1.addEventListener("message", onGlobalMessage, false);
		else global$1.attachEvent("onmessage", onGlobalMessage);
		registerImmediate = function(handle) {
			global$1.postMessage(messagePrefix + handle, "*");
		};
	}
	function installMessageChannelImplementation() {
		var channel = new MessageChannel();
		channel.port1.onmessage = function(event) {
			var handle = event.data;
			runIfPresent(handle);
		};
		registerImmediate = function(handle) {
			channel.port2.postMessage(handle);
		};
	}
	function installReadyStateChangeImplementation() {
		var html = doc.documentElement;
		registerImmediate = function(handle) {
			var script = doc.createElement("script");
			script.onreadystatechange = function() {
				runIfPresent(handle);
				script.onreadystatechange = null;
				html.removeChild(script);
				script = null;
			};
			html.appendChild(script);
		};
	}
	function installSetTimeoutImplementation() {
		registerImmediate = function(handle) {
			setTimeout(runIfPresent, 0, handle);
		};
	}
	var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global$1);
	attachTo = attachTo && attachTo.setTimeout ? attachTo : global$1;
	if ({}.toString.call(global$1.process) === "[object process]") installNextTickImplementation();
	else if (canUsePostMessage()) installPostMessageImplementation();
	else if (global$1.MessageChannel) installMessageChannelImplementation();
	else if (doc && "onreadystatechange" in doc.createElement("script")) installReadyStateChangeImplementation();
	else installSetTimeoutImplementation();
	attachTo.setImmediate = setImmediate$1;
	attachTo.clearImmediate = clearImmediate;
})(typeof self === "undefined" ? typeof global === "undefined" ? void 0 : global : self);

//#endregion
//#region ../../node_modules/.pnpm/web3-rpc-methods@1.3.0/node_modules/web3-rpc-methods/lib/esm/eth_rpc_methods.js
var __awaiter$30 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
function getProtocolVersion(requestManager) {
	return __awaiter$30(this, void 0, void 0, function* () {
		return requestManager.send({
			method: "eth_protocolVersion",
			params: []
		});
	});
}
function getSyncing(requestManager) {
	return __awaiter$30(this, void 0, void 0, function* () {
		return requestManager.send({
			method: "eth_syncing",
			params: []
		});
	});
}
function getCoinbase(requestManager) {
	return __awaiter$30(this, void 0, void 0, function* () {
		return requestManager.send({
			method: "eth_coinbase",
			params: []
		});
	});
}
function getMining(requestManager) {
	return __awaiter$30(this, void 0, void 0, function* () {
		return requestManager.send({
			method: "eth_mining",
			params: []
		});
	});
}
function getHashRate$1(requestManager) {
	return __awaiter$30(this, void 0, void 0, function* () {
		return requestManager.send({
			method: "eth_hashrate",
			params: []
		});
	});
}
function getGasPrice$1(requestManager) {
	return __awaiter$30(this, void 0, void 0, function* () {
		return requestManager.send({
			method: "eth_gasPrice",
			params: []
		});
	});
}
function getMaxPriorityFeePerGas$1(requestManager) {
	return __awaiter$30(this, void 0, void 0, function* () {
		return requestManager.send({
			method: "eth_maxPriorityFeePerGas",
			params: []
		});
	});
}
function getAccounts$2(requestManager) {
	return __awaiter$30(this, void 0, void 0, function* () {
		return requestManager.send({
			method: "eth_accounts",
			params: []
		});
	});
}
function getBlockNumber$1(requestManager) {
	return __awaiter$30(this, void 0, void 0, function* () {
		return requestManager.send({
			method: "eth_blockNumber",
			params: []
		});
	});
}
function getBalance$1(requestManager, address, blockNumber) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["address", "blockNumberOrTag"], [address, blockNumber]);
		return requestManager.send({
			method: "eth_getBalance",
			params: [address, blockNumber]
		});
	});
}
function getStorageAt$1(requestManager, address, storageSlot, blockNumber) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate([
			"address",
			"hex",
			"blockNumberOrTag"
		], [
			address,
			storageSlot,
			blockNumber
		]);
		return requestManager.send({
			method: "eth_getStorageAt",
			params: [
				address,
				storageSlot,
				blockNumber
			]
		});
	});
}
function getTransactionCount$1(requestManager, address, blockNumber) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["address", "blockNumberOrTag"], [address, blockNumber]);
		return requestManager.send({
			method: "eth_getTransactionCount",
			params: [address, blockNumber]
		});
	});
}
function getBlockTransactionCountByHash(requestManager, blockHash) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["bytes32"], [blockHash]);
		return requestManager.send({
			method: "eth_getBlockTransactionCountByHash",
			params: [blockHash]
		});
	});
}
function getBlockTransactionCountByNumber(requestManager, blockNumber) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["blockNumberOrTag"], [blockNumber]);
		return requestManager.send({
			method: "eth_getBlockTransactionCountByNumber",
			params: [blockNumber]
		});
	});
}
function getUncleCountByBlockHash(requestManager, blockHash) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["bytes32"], [blockHash]);
		return requestManager.send({
			method: "eth_getUncleCountByBlockHash",
			params: [blockHash]
		});
	});
}
function getUncleCountByBlockNumber(requestManager, blockNumber) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["blockNumberOrTag"], [blockNumber]);
		return requestManager.send({
			method: "eth_getUncleCountByBlockNumber",
			params: [blockNumber]
		});
	});
}
function getCode$1(requestManager, address, blockNumber) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["address", "blockNumberOrTag"], [address, blockNumber]);
		return requestManager.send({
			method: "eth_getCode",
			params: [address, blockNumber]
		});
	});
}
function sign$4(requestManager, address, message) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["address", "hex"], [address, message]);
		return requestManager.send({
			method: "eth_sign",
			params: [address, message]
		});
	});
}
function signTransaction$4(requestManager, transaction) {
	return __awaiter$30(this, void 0, void 0, function* () {
		return requestManager.send({
			method: "eth_signTransaction",
			params: [transaction]
		});
	});
}
function sendTransaction$3(requestManager, transaction) {
	return __awaiter$30(this, void 0, void 0, function* () {
		return requestManager.send({
			method: "eth_sendTransaction",
			params: [transaction]
		});
	});
}
function sendRawTransaction(requestManager, transaction) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["hex"], [transaction]);
		return requestManager.send({
			method: "eth_sendRawTransaction",
			params: [transaction]
		});
	});
}
function call$1(requestManager, transaction, blockNumber) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["blockNumberOrTag"], [blockNumber]);
		return requestManager.send({
			method: "eth_call",
			params: [transaction, blockNumber]
		});
	});
}
function estimateGas$1(requestManager, transaction, blockNumber) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["blockNumberOrTag"], [blockNumber]);
		return requestManager.send({
			method: "eth_estimateGas",
			params: [transaction, blockNumber]
		});
	});
}
function getBlockByHash(requestManager, blockHash, hydrated) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["bytes32", "bool"], [blockHash, hydrated]);
		return requestManager.send({
			method: "eth_getBlockByHash",
			params: [blockHash, hydrated]
		});
	});
}
function getBlockByNumber(requestManager, blockNumber, hydrated) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["blockNumberOrTag", "bool"], [blockNumber, hydrated]);
		return requestManager.send({
			method: "eth_getBlockByNumber",
			params: [blockNumber, hydrated]
		});
	});
}
function getTransactionByHash(requestManager, transactionHash) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["bytes32"], [transactionHash]);
		return requestManager.send({
			method: "eth_getTransactionByHash",
			params: [transactionHash]
		});
	});
}
function getTransactionByBlockHashAndIndex(requestManager, blockHash, transactionIndex) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["bytes32", "hex"], [blockHash, transactionIndex]);
		return requestManager.send({
			method: "eth_getTransactionByBlockHashAndIndex",
			params: [blockHash, transactionIndex]
		});
	});
}
function getTransactionByBlockNumberAndIndex(requestManager, blockNumber, transactionIndex) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["blockNumberOrTag", "hex"], [blockNumber, transactionIndex]);
		return requestManager.send({
			method: "eth_getTransactionByBlockNumberAndIndex",
			params: [blockNumber, transactionIndex]
		});
	});
}
function getTransactionReceipt$1(requestManager, transactionHash) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["bytes32"], [transactionHash]);
		return requestManager.send({
			method: "eth_getTransactionReceipt",
			params: [transactionHash]
		});
	});
}
function getUncleByBlockHashAndIndex(requestManager, blockHash, uncleIndex) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["bytes32", "hex"], [blockHash, uncleIndex]);
		return requestManager.send({
			method: "eth_getUncleByBlockHashAndIndex",
			params: [blockHash, uncleIndex]
		});
	});
}
function getUncleByBlockNumberAndIndex(requestManager, blockNumber, uncleIndex) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["blockNumberOrTag", "hex"], [blockNumber, uncleIndex]);
		return requestManager.send({
			method: "eth_getUncleByBlockNumberAndIndex",
			params: [blockNumber, uncleIndex]
		});
	});
}
function newFilter(requestManager, filter) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["filter"], [filter]);
		return requestManager.send({
			method: "eth_newFilter",
			params: [filter]
		});
	});
}
function newBlockFilter(requestManager) {
	return __awaiter$30(this, void 0, void 0, function* () {
		return requestManager.send({
			method: "eth_newBlockFilter",
			params: []
		});
	});
}
function newPendingTransactionFilter(requestManager) {
	return __awaiter$30(this, void 0, void 0, function* () {
		return requestManager.send({
			method: "eth_newPendingTransactionFilter",
			params: []
		});
	});
}
function uninstallFilter$1(requestManager, filterIdentifier) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["hex"], [filterIdentifier]);
		return requestManager.send({
			method: "eth_uninstallFilter",
			params: [filterIdentifier]
		});
	});
}
function getFilterChanges$1(requestManager, filterIdentifier) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["hex"], [filterIdentifier]);
		return requestManager.send({
			method: "eth_getFilterChanges",
			params: [filterIdentifier]
		});
	});
}
function getFilterLogs$1(requestManager, filterIdentifier) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["hex"], [filterIdentifier]);
		return requestManager.send({
			method: "eth_getFilterLogs",
			params: [filterIdentifier]
		});
	});
}
function getLogs$1(requestManager, filter) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["filter"], [filter]);
		return requestManager.send({
			method: "eth_getLogs",
			params: [filter]
		});
	});
}
function getWork(requestManager) {
	return __awaiter$30(this, void 0, void 0, function* () {
		return requestManager.send({
			method: "eth_getWork",
			params: []
		});
	});
}
function submitWork(requestManager, nonce, hash$1, digest) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate([
			"bytes8",
			"bytes32",
			"bytes32"
		], [
			nonce,
			hash$1,
			digest
		]);
		return requestManager.send({
			method: "eth_submitWork",
			params: [
				nonce,
				hash$1,
				digest
			]
		});
	});
}
function getFeeHistory$1(requestManager, blockCount, newestBlock, rewardPercentiles) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["hex", "blockNumberOrTag"], [blockCount, newestBlock]);
		for (const rewardPercentile of rewardPercentiles) validator.validate(["number"], [rewardPercentile]);
		return requestManager.send({
			method: "eth_feeHistory",
			params: [
				blockCount,
				newestBlock,
				rewardPercentiles
			]
		});
	});
}
function getPendingTransactions$1(requestManager) {
	return __awaiter$30(this, void 0, void 0, function* () {
		return requestManager.send({
			method: "eth_pendingTransactions",
			params: []
		});
	});
}
function requestAccounts(requestManager) {
	return __awaiter$30(this, void 0, void 0, function* () {
		return requestManager.send({
			method: "eth_requestAccounts",
			params: []
		});
	});
}
function getChainId$1(requestManager) {
	return __awaiter$30(this, void 0, void 0, function* () {
		return requestManager.send({
			method: "eth_chainId",
			params: []
		});
	});
}
function getProof$1(requestManager, address, storageKeys, blockNumber) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate([
			"address",
			"bytes32[]",
			"blockNumberOrTag"
		], [
			address,
			storageKeys,
			blockNumber
		]);
		return requestManager.send({
			method: "eth_getProof",
			params: [
				address,
				storageKeys,
				blockNumber
			]
		});
	});
}
function getNodeInfo(requestManager) {
	return __awaiter$30(this, void 0, void 0, function* () {
		return requestManager.send({
			method: "web3_clientVersion",
			params: []
		});
	});
}
function createAccessList$1(requestManager, transaction, blockNumber) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["blockNumberOrTag"], [blockNumber]);
		return requestManager.send({
			method: "eth_createAccessList",
			params: [transaction, blockNumber]
		});
	});
}
function signTypedData$1(requestManager, address, typedData, useLegacy = false) {
	return __awaiter$30(this, void 0, void 0, function* () {
		validator.validate(["address"], [address]);
		return requestManager.send({
			method: `eth_signTypedData${useLegacy ? "" : "_v4"}`,
			params: [address, typedData]
		});
	});
}

//#endregion
//#region ../../node_modules/.pnpm/web3-rpc-methods@1.3.0/node_modules/web3-rpc-methods/lib/esm/net_rpc_methods.js
var __awaiter$29 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
function getId$1(requestManager) {
	return __awaiter$29(this, void 0, void 0, function* () {
		return requestManager.send({
			method: "net_version",
			params: []
		});
	});
}
function getPeerCount$1(requestManager) {
	return __awaiter$29(this, void 0, void 0, function* () {
		return requestManager.send({
			method: "net_peerCount",
			params: []
		});
	});
}
function isListening$1(requestManager) {
	return __awaiter$29(this, void 0, void 0, function* () {
		return requestManager.send({
			method: "net_listening",
			params: []
		});
	});
}

//#endregion
//#region ../../node_modules/.pnpm/web3-rpc-methods@1.3.0/node_modules/web3-rpc-methods/lib/esm/personal_rpc_methods.js
var __awaiter$28 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
const getAccounts$1 = (requestManager) => __awaiter$28(void 0, void 0, void 0, function* () {
	return requestManager.send({
		method: "personal_listAccounts",
		params: []
	});
});
const newAccount$1 = (requestManager, password) => __awaiter$28(void 0, void 0, void 0, function* () {
	return requestManager.send({
		method: "personal_newAccount",
		params: [password]
	});
});
const unlockAccount$1 = (requestManager, address, password, unlockDuration) => __awaiter$28(void 0, void 0, void 0, function* () {
	return requestManager.send({
		method: "personal_unlockAccount",
		params: [
			address,
			password,
			unlockDuration
		]
	});
});
const lockAccount$1 = (requestManager, address) => __awaiter$28(void 0, void 0, void 0, function* () {
	return requestManager.send({
		method: "personal_lockAccount",
		params: [address]
	});
});
const importRawKey$1 = (requestManager, keyData, passphrase) => __awaiter$28(void 0, void 0, void 0, function* () {
	return requestManager.send({
		method: "personal_importRawKey",
		params: [keyData, passphrase]
	});
});
const sendTransaction$2 = (requestManager, tx, passphrase) => __awaiter$28(void 0, void 0, void 0, function* () {
	return requestManager.send({
		method: "personal_sendTransaction",
		params: [tx, passphrase]
	});
});
const signTransaction$3 = (requestManager, tx, passphrase) => __awaiter$28(void 0, void 0, void 0, function* () {
	return requestManager.send({
		method: "personal_signTransaction",
		params: [tx, passphrase]
	});
});
const sign$3 = (requestManager, data, address, passphrase) => __awaiter$28(void 0, void 0, void 0, function* () {
	return requestManager.send({
		method: "personal_sign",
		params: [
			data,
			address,
			passphrase
		]
	});
});
const ecRecover$1 = (requestManager, signedData, signature) => __awaiter$28(void 0, void 0, void 0, function* () {
	return requestManager.send({
		method: "personal_ecRecover",
		params: [signedData, signature]
	});
});

//#endregion
//#region ../../node_modules/.pnpm/web3-eth@4.11.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth/lib/esm/utils/detect_transaction_type.js
const transactionType0x0Schema = {
	type: "object",
	properties: {
		accessList: { type: "null" },
		maxFeePerGas: { type: "null" },
		maxPriorityFeePerGas: { type: "null" }
	}
};
const transactionType0x1Schema = {
	type: "object",
	properties: {
		maxFeePerGas: { type: "null" },
		maxPriorityFeePerGas: { type: "null" }
	}
};
const transactionType0x2Schema = {
	type: "object",
	properties: { gasPrice: { type: "null" } }
};
const validateTxTypeAndHandleErrors = (txSchema, tx, txType) => {
	try {
		validator.validateJSONSchema(txSchema, tx);
	} catch (error) {
		if (error instanceof Web3ValidatorError) throw new InvalidPropertiesForTransactionTypeError(error.errors, txType);
		throw error;
	}
};
const defaultTransactionTypeParser = (transaction) => {
	var _a$3, _b;
	const tx = transaction;
	if (!isNullish$1(tx.type)) {
		let txSchema;
		switch (tx.type) {
			case "0x0":
				txSchema = transactionType0x0Schema;
				break;
			case "0x1":
				txSchema = transactionType0x1Schema;
				break;
			case "0x2":
				txSchema = transactionType0x2Schema;
				break;
			default: return format({ format: "uint" }, tx.type, ETH_DATA_FORMAT);
		}
		validateTxTypeAndHandleErrors(txSchema, tx, tx.type);
		return format({ format: "uint" }, tx.type, ETH_DATA_FORMAT);
	}
	if (!isNullish$1(tx.maxFeePerGas) || !isNullish$1(tx.maxPriorityFeePerGas)) {
		validateTxTypeAndHandleErrors(transactionType0x2Schema, tx, "0x2");
		return "0x2";
	}
	if (!isNullish$1(tx.accessList)) {
		validateTxTypeAndHandleErrors(transactionType0x1Schema, tx, "0x1");
		return "0x1";
	}
	const givenHardfork = (_a$3 = tx.hardfork) !== null && _a$3 !== void 0 ? _a$3 : (_b = tx.common) === null || _b === void 0 ? void 0 : _b.hardfork;
	if (!isNullish$1(givenHardfork)) {
		const hardforkIndex = Object.keys(HardforksOrdered).indexOf(givenHardfork);
		if (hardforkIndex >= Object.keys(HardforksOrdered).indexOf("london")) return !isNullish$1(tx.gasPrice) ? "0x0" : "0x2";
		if (hardforkIndex === Object.keys(HardforksOrdered).indexOf("berlin")) return "0x0";
	}
	if (!isNullish$1(tx.gasPrice)) {
		validateTxTypeAndHandleErrors(transactionType0x0Schema, tx, "0x0");
		return "0x0";
	}
	return void 0;
};
const detectTransactionType = (transaction, web3Context) => {
	var _a$3;
	return ((_a$3 = web3Context === null || web3Context === void 0 ? void 0 : web3Context.transactionTypeParser) !== null && _a$3 !== void 0 ? _a$3 : defaultTransactionTypeParser)(transaction);
};
const detectRawTransactionType = (transaction) => transaction[0] > 127 ? "0x0" : toHex(transaction[0]);

//#endregion
//#region ../../node_modules/.pnpm/web3-eth@4.11.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth/lib/esm/schemas.js
const accessListItemSchema = {
	type: "object",
	properties: {
		address: { format: "address" },
		storageKeys: {
			type: "array",
			items: { format: "bytes32" }
		}
	}
};
const accessListSchema = {
	type: "array",
	items: Object.assign({}, accessListItemSchema)
};
const accessListResultSchema = {
	type: "object",
	properties: {
		accessList: Object.assign({}, accessListSchema),
		gasUsed: { type: "string" }
	}
};
const chainSchema = {
	type: "string",
	enum: [
		"goerli",
		"kovan",
		"mainnet",
		"rinkeby",
		"ropsten",
		"sepolia"
	]
};
const hardforkSchema = {
	type: "string",
	enum: [
		"arrowGlacier",
		"berlin",
		"byzantium",
		"chainstart",
		"constantinople",
		"dao",
		"homestead",
		"istanbul",
		"london",
		"merge",
		"muirGlacier",
		"petersburg",
		"shanghai",
		"spuriousDragon",
		"tangerineWhistle"
	]
};
const customChainSchema = {
	type: "object",
	properties: {
		name: { format: "string" },
		networkId: { format: "uint" },
		chainId: { format: "uint" }
	}
};
const transactionSchema = {
	type: "object",
	properties: {
		from: { format: "address" },
		to: { oneOf: [{ format: "address" }, { type: "null" }] },
		value: { format: "uint" },
		gas: { format: "uint" },
		gasPrice: { format: "uint" },
		effectiveGasPrice: { format: "uint" },
		type: { format: "uint" },
		maxFeePerGas: { format: "uint" },
		maxPriorityFeePerGas: { format: "uint" },
		accessList: Object.assign({}, accessListSchema),
		data: { format: "bytes" },
		input: { format: "bytes" },
		nonce: { format: "uint" },
		chain: Object.assign({}, chainSchema),
		hardfork: Object.assign({}, hardforkSchema),
		chainId: { format: "uint" },
		networkId: { format: "uint" },
		common: {
			type: "object",
			properties: {
				customChain: Object.assign({}, customChainSchema),
				baseChain: Object.assign({}, chainSchema),
				hardfork: Object.assign({}, hardforkSchema)
			}
		},
		gasLimit: { format: "uint" },
		v: { format: "uint" },
		r: { format: "bytes32" },
		s: { format: "bytes32" }
	}
};
const transactionInfoSchema = {
	type: "object",
	properties: Object.assign(Object.assign({}, transactionSchema.properties), {
		blockHash: { format: "bytes32" },
		blockNumber: { format: "uint" },
		hash: { format: "bytes32" },
		transactionIndex: { format: "uint" },
		from: { format: "address" },
		to: { oneOf: [{ format: "address" }, { type: "null" }] },
		value: { format: "uint" },
		gas: { format: "uint" },
		gasPrice: { format: "uint" },
		effectiveGasPrice: { format: "uint" },
		type: { format: "uint" },
		maxFeePerGas: { format: "uint" },
		maxPriorityFeePerGas: { format: "uint" },
		accessList: Object.assign({}, accessListSchema),
		data: { format: "bytes" },
		input: { format: "bytes" },
		nonce: { format: "uint" },
		gasLimit: { format: "uint" },
		v: { format: "uint" },
		r: { format: "bytes32" },
		s: { format: "bytes32" }
	})
};
const withdrawalsSchema = {
	type: "object",
	properties: {
		index: { format: "uint" },
		validatorIndex: { format: "uint" },
		address: { format: "address" },
		amount: { format: "uint" }
	}
};
const blockSchema = {
	type: "object",
	properties: {
		baseFeePerGas: { format: "uint" },
		blobGasUsed: { format: "uint" },
		difficulty: { format: "uint" },
		excessBlobGas: { format: "uint" },
		extraData: { format: "bytes" },
		gasLimit: { format: "uint" },
		gasUsed: { format: "uint" },
		hash: { format: "bytes32" },
		logsBloom: { format: "bytes256" },
		miner: { format: "bytes" },
		mixHash: { format: "bytes32" },
		nonce: { format: "uint" },
		number: { format: "uint" },
		parentBeaconBlockRoot: { format: "bytes32" },
		parentHash: { format: "bytes32" },
		receiptsRoot: { format: "bytes32" },
		sha3Uncles: { format: "bytes32" },
		size: { format: "uint" },
		stateRoot: { format: "bytes32" },
		timestamp: { format: "uint" },
		totalDifficulty: { format: "uint" },
		transactions: { oneOf: [{
			type: "array",
			items: Object.assign({}, transactionInfoSchema)
		}, {
			type: "array",
			items: { format: "bytes32" }
		}] },
		transactionsRoot: { format: "bytes32" },
		uncles: {
			type: "array",
			items: { format: "bytes32" }
		},
		withdrawals: {
			type: "array",
			items: Object.assign({}, withdrawalsSchema)
		},
		withdrawalsRoot: { format: "bytes32" }
	}
};
const blockHeaderSchema = {
	type: "object",
	properties: {
		author: { format: "bytes32" },
		excessDataGas: { format: "uint" },
		baseFeePerGas: { format: "uint" },
		blobGasUsed: { format: "uint" },
		difficulty: { format: "uint" },
		excessBlobGas: { format: "uint" },
		extraData: { format: "bytes" },
		gasLimit: { format: "uint" },
		gasUsed: { format: "uint" },
		hash: { format: "bytes32" },
		logsBloom: { format: "bytes256" },
		miner: { format: "bytes" },
		mixHash: { format: "bytes32" },
		nonce: { format: "uint" },
		number: { format: "uint" },
		parentBeaconBlockRoot: { format: "bytes32" },
		parentHash: { format: "bytes32" },
		receiptsRoot: { format: "bytes32" },
		sha3Uncles: { format: "bytes32" },
		size: { format: "uint" },
		stateRoot: { format: "bytes32" },
		timestamp: { format: "uint" },
		totalDifficulty: { format: "uint" },
		transactions: {
			type: "array",
			items: { format: "bytes32" }
		},
		transactionsRoot: { format: "bytes32" },
		uncles: {
			type: "array",
			items: { format: "bytes32" }
		},
		withdrawals: {
			type: "array",
			items: Object.assign({}, withdrawalsSchema)
		},
		withdrawalsRoot: { format: "bytes32" }
	}
};
const logSchema = {
	type: "object",
	properties: {
		removed: { format: "bool" },
		logIndex: { format: "uint" },
		transactionIndex: { format: "uint" },
		transactionHash: { format: "bytes32" },
		blockHash: { format: "bytes32" },
		blockNumber: { format: "uint" },
		address: { format: "address" },
		data: { format: "bytes" },
		topics: {
			type: "array",
			items: { format: "bytes32" }
		}
	}
};
const syncSchema = {
	type: "object",
	properties: {
		startingBlock: { format: "string" },
		currentBlock: { format: "string" },
		highestBlock: { format: "string" },
		knownStates: { format: "string" },
		pulledStates: { format: "string" }
	}
};
const transactionReceiptSchema = {
	type: "object",
	properties: {
		transactionHash: { format: "bytes32" },
		transactionIndex: { format: "uint" },
		blockHash: { format: "bytes32" },
		blockNumber: { format: "uint" },
		from: { format: "address" },
		to: { format: "address" },
		cumulativeGasUsed: { format: "uint" },
		gasUsed: { format: "uint" },
		effectiveGasPrice: { format: "uint" },
		contractAddress: { format: "address" },
		logs: {
			type: "array",
			items: Object.assign({}, logSchema)
		},
		logsBloom: { format: "bytes" },
		root: { format: "bytes" },
		status: { format: "uint" },
		type: { format: "uint" }
	}
};
const SignatureObjectSchema = {
	type: "object",
	properties: {
		messageHash: { format: "bytes" },
		r: { format: "bytes32" },
		s: { format: "bytes32" },
		v: { format: "bytes" },
		message: { format: "bytes" },
		signature: { format: "bytes" }
	}
};
const feeHistorySchema = {
	type: "object",
	properties: {
		oldestBlock: { format: "uint" },
		baseFeePerGas: {
			type: "array",
			items: { format: "uint" }
		},
		reward: {
			type: "array",
			items: {
				type: "array",
				items: { format: "uint" }
			}
		},
		gasUsedRatio: {
			type: "array",
			items: { type: "number" }
		}
	}
};
const storageProofSchema = {
	type: "object",
	properties: {
		key: { format: "bytes32" },
		value: { format: "uint" },
		proof: {
			type: "array",
			items: { format: "bytes32" }
		}
	}
};
const accountSchema = {
	type: "object",
	properties: {
		balance: { format: "uint" },
		codeHash: { format: "bytes32" },
		nonce: { format: "uint" },
		storageHash: { format: "bytes32" },
		accountProof: {
			type: "array",
			items: { format: "bytes32" }
		},
		storageProof: {
			type: "array",
			items: Object.assign({}, storageProofSchema)
		}
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth@4.11.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth/lib/esm/utils/format_transaction.js
function formatTransaction(transaction, returnFormat = DEFAULT_RETURN_FORMAT, options = {
	transactionSchema: transactionInfoSchema,
	fillInputAndData: false
}) {
	var _a$3, _b;
	let formattedTransaction = mergeDeep({}, transaction);
	if (!isNullish$1(transaction === null || transaction === void 0 ? void 0 : transaction.common)) {
		formattedTransaction.common = Object.assign({}, transaction.common);
		if (!isNullish$1((_a$3 = transaction.common) === null || _a$3 === void 0 ? void 0 : _a$3.customChain)) formattedTransaction.common.customChain = Object.assign({}, transaction.common.customChain);
	}
	formattedTransaction = format((_b = options.transactionSchema) !== null && _b !== void 0 ? _b : transactionInfoSchema, formattedTransaction, returnFormat);
	if (!isNullish$1(formattedTransaction.data) && !isNullish$1(formattedTransaction.input) && toHex(formattedTransaction.data) !== toHex(formattedTransaction.input)) throw new TransactionDataAndInputError({
		data: bytesToHex(formattedTransaction.data),
		input: bytesToHex(formattedTransaction.input)
	});
	if (options.fillInputAndData) {
		if (!isNullish$1(formattedTransaction.data)) formattedTransaction.input = formattedTransaction.data;
		else if (!isNullish$1(formattedTransaction.input)) formattedTransaction.data = formattedTransaction.input;
	}
	if (!isNullish$1(formattedTransaction.gasLimit)) {
		formattedTransaction.gas = formattedTransaction.gasLimit;
		delete formattedTransaction.gasLimit;
	}
	return formattedTransaction;
}

//#endregion
//#region ../../node_modules/.pnpm/web3-eth@4.11.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth/lib/esm/utils/decode_signed_transaction.js
/**
* Decodes an [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/#top) encoded transaction.
*
* @param encodedSignedTransaction The RLP encoded transaction.
* @param returnFormat ({@link DataFormat} Specifies how the return data should be formatted.
* @returns {@link SignedTransactionInfoAPI}, an object containing the RLP encoded signed transaction (accessed via the `raw` property) and the signed transaction object (accessed via the `tx` property).
*/
function decodeSignedTransaction(encodedSignedTransaction, returnFormat, options = { fillInputAndData: false }) {
	return {
		raw: format({ format: "bytes" }, encodedSignedTransaction, returnFormat),
		tx: formatTransaction(Object.assign(Object.assign({}, TransactionFactory.fromSerializedData(hexToBytes(encodedSignedTransaction)).toJSON()), {
			hash: bytesToHex(keccak256Wrapper(hexToBytes(encodedSignedTransaction))),
			type: detectRawTransactionType(hexToBytes(encodedSignedTransaction))
		}), returnFormat, {
			fillInputAndData: options.fillInputAndData,
			transactionSchema: options.transactionSchema
		})
	};
}

//#endregion
//#region ../../node_modules/.pnpm/web3-net@4.1.0/node_modules/web3-net/lib/esm/rpc_method_wrappers.js
var __awaiter$27 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
function getId(web3Context, returnFormat) {
	return __awaiter$27(this, void 0, void 0, function* () {
		const response = yield getId$1(web3Context.requestManager);
		return format({ format: "uint" }, response, returnFormat);
	});
}
function getPeerCount(web3Context, returnFormat) {
	return __awaiter$27(this, void 0, void 0, function* () {
		const response = yield getPeerCount$1(web3Context.requestManager);
		return format({ format: "uint" }, response, returnFormat);
	});
}
const isListening = (web3Context) => __awaiter$27(void 0, void 0, void 0, function* () {
	return isListening$1(web3Context.requestManager);
});

//#endregion
//#region ../../node_modules/.pnpm/web3-net@4.1.0/node_modules/web3-net/lib/esm/net.js
var __awaiter$26 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
/**
* Net class allows you to interact with an Ethereum node’s network properties.
* For using Net package, first install Web3 package using: `npm i web3` or `yarn add web3` based on your package manager, after that Net features can be used.
* ```ts
*
* import { Web3 } from 'web3';
* const web3 = new Web3('https://mainnet.infura.io/v3/<YOURPROJID>');
*
* console.log(await web3.eth.net.getId());
*
* ```
* For using individual package install `web3-net` packages using: `npm i web3-net` or `yarn add web3-net`.
*
* ```ts
* import {Net} from 'web3-net';
*
*  const net = new Net('https://mainnet.infura.io/v3/<YOURPROJID>');
*  console.log(await net.getId());
* ```
*/
var Net = class extends Web3Context {
	/**
	* Gets the current network ID
	*
	* @param returnFormat - Return format
	* @returns A Promise of the network ID.
	* @example
	* ```ts
	* const net = new Net(Net.givenProvider || 'ws://some.local-or-remote.node:8546');
	* await net.getId();
	* > 1
	* ```
	*/
	getId(returnFormat = this.defaultReturnFormat) {
		return __awaiter$26(this, void 0, void 0, function* () {
			return getId(this, returnFormat);
		});
	}
	/**
	* Get the number of peers connected to.
	*
	* @param returnFormat - Return format
	* @returns A promise of the number of the peers connected to.
	* @example
	* ```ts
	* const net = new Net(Net.givenProvider || 'ws://some.local-or-remote.node:8546');
	* await net.getPeerCount();
	* > 0
	* ```
	*/
	getPeerCount(returnFormat = this.defaultReturnFormat) {
		return __awaiter$26(this, void 0, void 0, function* () {
			return getPeerCount(this, returnFormat);
		});
	}
	/**
	* Check if the node is listening for peers
	*
	* @returns A promise of a boolean if the node is listening to peers
	* @example
	* ```ts
	* const net = new Net(Net.givenProvider || 'ws://some.local-or-remote.node:8546');
	* await net.isListening();
	* > true
	* ```
	*/
	isListening() {
		return __awaiter$26(this, void 0, void 0, function* () {
			return isListening(this);
		});
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth@4.11.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth/lib/esm/constants.js
const ALL_EVENTS = "ALLEVENTS";
const ALL_EVENTS_ABI = {
	name: ALL_EVENTS,
	signature: "",
	type: "event",
	inputs: []
};
const NUMBER_DATA_FORMAT = {
	bytes: FMT_BYTES.HEX,
	number: FMT_NUMBER.NUMBER
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth@4.11.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth/lib/esm/utils/get_transaction_gas_pricing.js
var __awaiter$25 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
function getEip1559GasPricing(transaction, web3Context, returnFormat) {
	return __awaiter$25(this, void 0, void 0, function* () {
		var _a$3, _b, _c, _d;
		const block = yield getBlock(web3Context, web3Context.defaultBlock, false, ETH_DATA_FORMAT);
		if (isNullish$1(block.baseFeePerGas)) throw new Eip1559NotSupportedError();
		let gasPrice;
		if (isNullish$1(transaction.gasPrice) && BigInt(block.baseFeePerGas) === BigInt(0)) gasPrice = yield getGasPrice(web3Context, returnFormat);
		if (!isNullish$1(transaction.gasPrice) || !isNullish$1(gasPrice)) {
			const convertedTransactionGasPrice = format({ format: "uint" }, (_a$3 = transaction.gasPrice) !== null && _a$3 !== void 0 ? _a$3 : gasPrice, returnFormat);
			return {
				maxPriorityFeePerGas: convertedTransactionGasPrice,
				maxFeePerGas: convertedTransactionGasPrice
			};
		}
		return {
			maxPriorityFeePerGas: format({ format: "uint" }, (_b = transaction.maxPriorityFeePerGas) !== null && _b !== void 0 ? _b : web3Context.defaultMaxPriorityFeePerGas, returnFormat),
			maxFeePerGas: format({ format: "uint" }, (_c = transaction.maxFeePerGas) !== null && _c !== void 0 ? _c : BigInt(block.baseFeePerGas) * BigInt(2) + BigInt((_d = transaction.maxPriorityFeePerGas) !== null && _d !== void 0 ? _d : web3Context.defaultMaxPriorityFeePerGas), returnFormat)
		};
	});
}
function getTransactionGasPricing(transaction, web3Context, returnFormat) {
	return __awaiter$25(this, void 0, void 0, function* () {
		const transactionType = getTransactionType(transaction, web3Context);
		if (!isNullish$1(transactionType)) {
			if (transactionType.startsWith("-")) throw new UnsupportedTransactionTypeError(transactionType);
			if (Number(transactionType) < 0 || Number(transactionType) > 127) throw new UnsupportedTransactionTypeError(transactionType);
			if (isNullish$1(transaction.gasPrice) && (transactionType === "0x0" || transactionType === "0x1")) return {
				gasPrice: yield getGasPrice(web3Context, returnFormat),
				maxPriorityFeePerGas: void 0,
				maxFeePerGas: void 0
			};
			if (transactionType === "0x2") return Object.assign({ gasPrice: void 0 }, yield getEip1559GasPricing(transaction, web3Context, returnFormat));
		}
		return void 0;
	});
}

//#endregion
//#region ../../node_modules/.pnpm/web3-eth@4.11.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth/lib/esm/utils/transaction_builder.js
var __awaiter$24 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
const getTransactionFromOrToAttr = (attr, web3Context, transaction, privateKey) => {
	if (transaction !== void 0 && attr in transaction && transaction[attr] !== void 0) {
		if (typeof transaction[attr] === "string" && isAddress(transaction[attr])) return transaction[attr];
		if (!isHexStrict(transaction[attr]) && isNumber(transaction[attr])) {
			if (web3Context.wallet) {
				const account = web3Context.wallet.get(format({ format: "uint" }, transaction[attr], NUMBER_DATA_FORMAT));
				if (!isNullish$1(account)) return account.address;
				throw new LocalWalletNotAvailableError();
			}
			throw new LocalWalletNotAvailableError();
		} else throw attr === "from" ? new InvalidTransactionWithSender(transaction.from) : new InvalidTransactionWithReceiver(transaction.to);
	}
	if (attr === "from") {
		if (!isNullish$1(privateKey)) return privateKeyToAddress(privateKey);
		if (!isNullish$1(web3Context.defaultAccount)) return web3Context.defaultAccount;
	}
	return void 0;
};
const getTransactionNonce = (web3Context_1, address_1, ...args_1) => __awaiter$24(void 0, [
	web3Context_1,
	address_1,
	...args_1
], void 0, function* (web3Context, address, returnFormat = web3Context.defaultReturnFormat) {
	if (isNullish$1(address)) throw new UnableToPopulateNonceError();
	return getTransactionCount(web3Context, address, web3Context.defaultBlock, returnFormat);
});
const getTransactionType = (transaction, web3Context) => {
	const inferredType = detectTransactionType(transaction, web3Context);
	if (!isNullish$1(inferredType)) return inferredType;
	if (!isNullish$1(web3Context.defaultTransactionType)) return format({ format: "uint" }, web3Context.defaultTransactionType, ETH_DATA_FORMAT);
	return void 0;
};
function defaultTransactionBuilder(options) {
	return __awaiter$24(this, void 0, void 0, function* () {
		var _a$3, _b;
		let populatedTransaction = format(transactionSchema, options.transaction, options.web3Context.defaultReturnFormat);
		if (isNullish$1(populatedTransaction.from)) populatedTransaction.from = getTransactionFromOrToAttr("from", options.web3Context, void 0, options.privateKey);
		if (isNullish$1(populatedTransaction.nonce)) populatedTransaction.nonce = yield getTransactionNonce(options.web3Context, populatedTransaction.from, ETH_DATA_FORMAT);
		if (isNullish$1(populatedTransaction.value)) populatedTransaction.value = "0x0";
		if (!isNullish$1(populatedTransaction.data)) {
			if (!isNullish$1(populatedTransaction.input) && populatedTransaction.data !== populatedTransaction.input) throw new TransactionDataAndInputError({
				data: bytesToHex(populatedTransaction.data),
				input: bytesToHex(populatedTransaction.input)
			});
			if (!populatedTransaction.data.startsWith("0x")) populatedTransaction.data = `0x${populatedTransaction.data}`;
		} else if (!isNullish$1(populatedTransaction.input)) {
			if (!populatedTransaction.input.startsWith("0x")) populatedTransaction.input = `0x${populatedTransaction.input}`;
		} else populatedTransaction.input = "0x";
		if (isNullish$1(populatedTransaction.common)) {
			if (options.web3Context.defaultCommon) {
				const common = options.web3Context.defaultCommon;
				const chainId = common.customChain.chainId;
				const networkId = common.customChain.networkId;
				const name$1 = common.customChain.name;
				populatedTransaction.common = Object.assign(Object.assign({}, common), { customChain: {
					chainId,
					networkId,
					name: name$1
				} });
			}
			if (isNullish$1(populatedTransaction.chain)) populatedTransaction.chain = options.web3Context.defaultChain;
			if (isNullish$1(populatedTransaction.hardfork)) populatedTransaction.hardfork = options.web3Context.defaultHardfork;
		}
		if (isNullish$1(populatedTransaction.chainId) && isNullish$1((_a$3 = populatedTransaction.common) === null || _a$3 === void 0 ? void 0 : _a$3.customChain.chainId)) populatedTransaction.chainId = yield getChainId(options.web3Context, ETH_DATA_FORMAT);
		if (isNullish$1(populatedTransaction.networkId)) populatedTransaction.networkId = (_b = options.web3Context.defaultNetworkId) !== null && _b !== void 0 ? _b : yield getId(options.web3Context, ETH_DATA_FORMAT);
		if (isNullish$1(populatedTransaction.gasLimit) && !isNullish$1(populatedTransaction.gas)) populatedTransaction.gasLimit = populatedTransaction.gas;
		populatedTransaction.type = getTransactionType(populatedTransaction, options.web3Context);
		if (isNullish$1(populatedTransaction.accessList) && (populatedTransaction.type === "0x1" || populatedTransaction.type === "0x2")) populatedTransaction.accessList = [];
		if (options.fillGasPrice) populatedTransaction = Object.assign(Object.assign({}, populatedTransaction), yield getTransactionGasPricing(populatedTransaction, options.web3Context, ETH_DATA_FORMAT));
		if (isNullish$1(populatedTransaction.gas) && isNullish$1(populatedTransaction.gasLimit) && options.fillGasLimit) {
			const fillGasLimit = yield estimateGas(options.web3Context, populatedTransaction, "latest", ETH_DATA_FORMAT);
			populatedTransaction = Object.assign(Object.assign({}, populatedTransaction), { gas: format({ format: "uint" }, fillGasLimit, ETH_DATA_FORMAT) });
		}
		return populatedTransaction;
	});
}
const transactionBuilder = (options) => __awaiter$24(void 0, void 0, void 0, function* () {
	var _a$3;
	return ((_a$3 = options.web3Context.transactionBuilder) !== null && _a$3 !== void 0 ? _a$3 : defaultTransactionBuilder)(Object.assign(Object.assign({}, options), { transaction: options.transaction }));
});

//#endregion
//#region ../../node_modules/.pnpm/web3-eth@4.11.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth/lib/esm/utils/reject_if_block_timeout.js
var __awaiter$23 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
function resolveByPolling(web3Context, starterBlockNumber, transactionHash) {
	const pollingInterval = web3Context.transactionPollingInterval;
	const [intervalId, promiseToError] = rejectIfConditionAtInterval(() => __awaiter$23(this, void 0, void 0, function* () {
		let lastBlockNumber;
		try {
			lastBlockNumber = yield getBlockNumber(web3Context, NUMBER_DATA_FORMAT);
		} catch (error) {
			console.warn("An error happen while trying to get the block number", error);
			return void 0;
		}
		const numberOfBlocks = lastBlockNumber - starterBlockNumber;
		if (numberOfBlocks >= web3Context.transactionBlockTimeout) return new TransactionBlockTimeoutError({
			starterBlockNumber,
			numberOfBlocks,
			transactionHash
		});
		return void 0;
	}), pollingInterval);
	const clean = () => {
		clearInterval(intervalId);
	};
	return [promiseToError, { clean }];
}
function resolveBySubscription(web3Context, starterBlockNumber, transactionHash) {
	return __awaiter$23(this, void 0, void 0, function* () {
		var _a$3;
		let needToWatchLater = true;
		let subscription;
		let resourceCleaner;
		function revertToPolling(reject, previousError) {
			if (previousError) console.warn("error happened at subscription. So revert to polling...", previousError);
			resourceCleaner.clean();
			needToWatchLater = false;
			const [promiseToError$1, newResourceCleaner] = resolveByPolling(web3Context, starterBlockNumber, transactionHash);
			resourceCleaner.clean = newResourceCleaner.clean;
			promiseToError$1.catch((error) => reject(error));
		}
		try {
			subscription = yield (_a$3 = web3Context.subscriptionManager) === null || _a$3 === void 0 ? void 0 : _a$3.subscribe("newHeads");
			resourceCleaner = { clean: () => {
				var _a$4;
				if (subscription.id) (_a$4 = web3Context.subscriptionManager) === null || _a$4 === void 0 || _a$4.removeSubscription(subscription).then(() => {}).catch(() => {});
			} };
		} catch (error) {
			return resolveByPolling(web3Context, starterBlockNumber, transactionHash);
		}
		const promiseToError = new Promise((_, reject) => {
			try {
				subscription.on("data", (lastBlockHeader) => {
					needToWatchLater = false;
					if (!(lastBlockHeader === null || lastBlockHeader === void 0 ? void 0 : lastBlockHeader.number)) return;
					const numberOfBlocks = Number(BigInt(lastBlockHeader.number) - BigInt(starterBlockNumber));
					if (numberOfBlocks >= web3Context.transactionBlockTimeout) reject(new TransactionBlockTimeoutError({
						starterBlockNumber,
						numberOfBlocks,
						transactionHash
					}));
				});
				subscription.on("error", (error) => {
					revertToPolling(reject, error);
				});
			} catch (error) {
				revertToPolling(reject, error);
			}
			setTimeout(() => {
				if (needToWatchLater) revertToPolling(reject);
			}, web3Context.blockHeaderTimeout * 1e3);
		});
		return [promiseToError, resourceCleaner];
	});
}
function rejectIfBlockTimeout(web3Context, transactionHash) {
	return __awaiter$23(this, void 0, void 0, function* () {
		var _a$3, _b;
		const { provider } = web3Context.requestManager;
		let callingRes;
		const starterBlockNumber = yield getBlockNumber(web3Context, NUMBER_DATA_FORMAT);
		if (((_b = (_a$3 = provider).supportsSubscriptions) === null || _b === void 0 ? void 0 : _b.call(_a$3)) && web3Context.enableExperimentalFeatures.useSubscriptionWhenCheckingBlockTimeout) callingRes = yield resolveBySubscription(web3Context, starterBlockNumber, transactionHash);
		else callingRes = resolveByPolling(web3Context, starterBlockNumber, transactionHash);
		return callingRes;
	});
}

//#endregion
//#region ../../node_modules/.pnpm/web3-eth@4.11.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth/lib/esm/utils/try_send_transaction.js
var __awaiter$22 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
/**
* An internal function to send a transaction or throws if sending did not finish during the timeout during the blocks-timeout.
* @param web3Context - the context to read the configurations from
* @param sendTransactionFunc - the function that will send the transaction (could be sendTransaction or sendRawTransaction)
* @param transactionHash - to be used inside the exception message if there will be any exceptions.
* @returns the Promise<string> returned by the `sendTransactionFunc`.
*/
function trySendTransaction(web3Context, sendTransactionFunc, transactionHash) {
	return __awaiter$22(this, void 0, void 0, function* () {
		const [timeoutId, rejectOnTimeout] = rejectIfTimeout(web3Context.transactionSendTimeout, new TransactionSendTimeoutError({
			numberOfSeconds: web3Context.transactionSendTimeout / 1e3,
			transactionHash
		}));
		const [rejectOnBlockTimeout, blockTimeoutResourceCleaner] = yield rejectIfBlockTimeout(web3Context, transactionHash);
		try {
			return yield Promise.race([
				sendTransactionFunc(),
				rejectOnTimeout,
				rejectOnBlockTimeout
			]);
		} finally {
			clearTimeout(timeoutId);
			blockTimeoutResourceCleaner.clean();
		}
	});
}

//#endregion
//#region ../../node_modules/.pnpm/web3-eth@4.11.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth/lib/esm/utils/wait_for_transaction_receipt.js
var __awaiter$21 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
function waitForTransactionReceipt(web3Context, transactionHash, returnFormat, customGetTransactionReceipt) {
	return __awaiter$21(this, void 0, void 0, function* () {
		var _a$3;
		const pollingInterval = (_a$3 = web3Context.transactionReceiptPollingInterval) !== null && _a$3 !== void 0 ? _a$3 : web3Context.transactionPollingInterval;
		const [awaitableTransactionReceipt, IntervalId] = pollTillDefinedAndReturnIntervalId(() => __awaiter$21(this, void 0, void 0, function* () {
			try {
				return (customGetTransactionReceipt !== null && customGetTransactionReceipt !== void 0 ? customGetTransactionReceipt : getTransactionReceipt)(web3Context, transactionHash, returnFormat);
			} catch (error) {
				console.warn("An error happen while trying to get the transaction receipt", error);
				return void 0;
			}
		}), pollingInterval);
		const [timeoutId, rejectOnTimeout] = rejectIfTimeout(web3Context.transactionPollingTimeout, new TransactionPollingTimeoutError({
			numberOfSeconds: web3Context.transactionPollingTimeout / 1e3,
			transactionHash
		}));
		const [rejectOnBlockTimeout, blockTimeoutResourceCleaner] = yield rejectIfBlockTimeout(web3Context, transactionHash);
		try {
			return yield Promise.race([
				awaitableTransactionReceipt,
				rejectOnTimeout,
				rejectOnBlockTimeout
			]);
		} finally {
			if (timeoutId) clearTimeout(timeoutId);
			if (IntervalId) clearInterval(IntervalId);
			blockTimeoutResourceCleaner.clean();
		}
	});
}

//#endregion
//#region ../../node_modules/.pnpm/web3-eth@4.11.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth/lib/esm/utils/watch_transaction_by_polling.js
var __awaiter$20 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
/**
* This function watches a Transaction by subscribing to new heads.
* It is used by `watchTransactionForConfirmations`, in case the provider does not support subscription.
* And it is also used by `watchTransactionBySubscription`, as a fallback, if the subscription failed for any reason.
*/
const watchTransactionByPolling = ({ web3Context, transactionReceipt, transactionPromiEvent, customTransactionReceiptSchema, returnFormat }) => {
	var _a$3;
	let confirmations = 1;
	const intervalId = setInterval(() => {
		__awaiter$20(void 0, void 0, void 0, function* () {
			if (confirmations >= web3Context.transactionConfirmationBlocks) {
				clearInterval(intervalId);
				return;
			}
			const nextBlock = yield getBlockByNumber(web3Context.requestManager, numberToHex(BigInt(transactionReceipt.blockNumber) + BigInt(confirmations)), false);
			if (nextBlock === null || nextBlock === void 0 ? void 0 : nextBlock.hash) {
				confirmations += 1;
				transactionPromiEvent.emit("confirmation", {
					confirmations: format({ format: "uint" }, confirmations, returnFormat),
					receipt: format(customTransactionReceiptSchema !== null && customTransactionReceiptSchema !== void 0 ? customTransactionReceiptSchema : transactionReceiptSchema, transactionReceipt, returnFormat),
					latestBlockHash: format({ format: "bytes32" }, nextBlock.hash, returnFormat)
				});
			}
		});
	}, (_a$3 = web3Context.transactionReceiptPollingInterval) !== null && _a$3 !== void 0 ? _a$3 : web3Context.transactionPollingInterval);
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth@4.11.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth/lib/esm/utils/watch_transaction_by_subscription.js
var __awaiter$19 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
/**
* This function watches a Transaction by subscribing to new heads.
* It is used by `watchTransactionForConfirmations`, in case the provider supports subscription.
*/
const watchTransactionBySubscription = ({ web3Context, transactionReceipt, transactionPromiEvent, customTransactionReceiptSchema, returnFormat }) => {
	let needToWatchLater = true;
	let lastCaughtBlockHash;
	setImmediate(() => {
		var _a$3;
		(_a$3 = web3Context.subscriptionManager) === null || _a$3 === void 0 || _a$3.subscribe("newHeads").then((subscription) => {
			subscription.on("data", (newBlockHeader) => __awaiter$19(void 0, void 0, void 0, function* () {
				var _a$4;
				needToWatchLater = false;
				if (!(newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.number) || lastCaughtBlockHash === (newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.parentHash)) return;
				lastCaughtBlockHash = newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.parentHash;
				const confirmations = BigInt(newBlockHeader.number) - BigInt(transactionReceipt.blockNumber) + BigInt(1);
				transactionPromiEvent.emit("confirmation", {
					confirmations: format({ format: "uint" }, confirmations, returnFormat),
					receipt: format(customTransactionReceiptSchema !== null && customTransactionReceiptSchema !== void 0 ? customTransactionReceiptSchema : transactionReceiptSchema, transactionReceipt, returnFormat),
					latestBlockHash: format({ format: "bytes32" }, newBlockHeader.parentHash, returnFormat)
				});
				if (confirmations >= web3Context.transactionConfirmationBlocks) yield (_a$4 = web3Context.subscriptionManager) === null || _a$4 === void 0 ? void 0 : _a$4.removeSubscription(subscription);
			}));
			subscription.on("error", () => __awaiter$19(void 0, void 0, void 0, function* () {
				var _a$4;
				yield (_a$4 = web3Context.subscriptionManager) === null || _a$4 === void 0 ? void 0 : _a$4.removeSubscription(subscription);
				needToWatchLater = false;
				watchTransactionByPolling({
					web3Context,
					transactionReceipt,
					transactionPromiEvent,
					customTransactionReceiptSchema,
					returnFormat
				});
			}));
		}).catch(() => {
			needToWatchLater = false;
			watchTransactionByPolling({
				web3Context,
				transactionReceipt,
				customTransactionReceiptSchema,
				transactionPromiEvent,
				returnFormat
			});
		});
	});
	setTimeout(() => {
		if (needToWatchLater) watchTransactionByPolling({
			web3Context,
			transactionReceipt,
			transactionPromiEvent,
			returnFormat
		});
	}, web3Context.blockHeaderTimeout * 1e3);
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth@4.11.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth/lib/esm/utils/watch_transaction_for_confirmations.js
function watchTransactionForConfirmations(web3Context, transactionPromiEvent, transactionReceipt, transactionHash, returnFormat, customTransactionReceiptSchema) {
	if (isNullish$1(transactionReceipt) || isNullish$1(transactionReceipt.blockHash)) throw new TransactionMissingReceiptOrBlockHashError({
		receipt: transactionReceipt,
		blockHash: format({ format: "bytes32" }, transactionReceipt === null || transactionReceipt === void 0 ? void 0 : transactionReceipt.blockHash, returnFormat),
		transactionHash: format({ format: "bytes32" }, transactionHash, returnFormat)
	});
	if (!transactionReceipt.blockNumber) throw new TransactionReceiptMissingBlockNumberError({ receipt: transactionReceipt });
	transactionPromiEvent.emit("confirmation", {
		confirmations: format({ format: "uint" }, 1, returnFormat),
		receipt: format(customTransactionReceiptSchema !== null && customTransactionReceiptSchema !== void 0 ? customTransactionReceiptSchema : transactionReceiptSchema, transactionReceipt, returnFormat),
		latestBlockHash: format({ format: "bytes32" }, transactionReceipt.blockHash, returnFormat)
	});
	const provider = web3Context.requestManager.provider;
	if (provider && "supportsSubscriptions" in provider && provider.supportsSubscriptions()) watchTransactionBySubscription({
		web3Context,
		transactionReceipt,
		transactionPromiEvent,
		customTransactionReceiptSchema,
		returnFormat
	});
	else watchTransactionByPolling({
		web3Context,
		transactionReceipt,
		transactionPromiEvent,
		customTransactionReceiptSchema,
		returnFormat
	});
}

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-abi@4.4.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-abi/lib/esm/utils.js
const isAbiErrorFragment = (item) => !isNullish(item) && typeof item === "object" && !isNullish(item.type) && item.type === "error";
const isAbiEventFragment = (item) => !isNullish(item) && typeof item === "object" && !isNullish(item.type) && item.type === "event";
const isAbiFunctionFragment = (item) => !isNullish(item) && typeof item === "object" && !isNullish(item.type) && item.type === "function";
const isAbiConstructorFragment = (item) => !isNullish(item) && typeof item === "object" && !isNullish(item.type) && item.type === "constructor";
/**
* Check if type is simplified struct format
*/
const isSimplifiedStructFormat = (type) => typeof type === "object" && typeof type.components === "undefined" && typeof type.name === "undefined";
/**
* Maps the correct tuple type and name when the simplified format in encode/decodeParameter is used
*/
const mapStructNameAndType = (structName) => structName.includes("[]") ? {
	type: "tuple[]",
	name: structName.slice(0, -2)
} : {
	type: "tuple",
	name: structName
};
/**
* Maps the simplified format in to the expected format of the ABICoder
*/
const mapStructToCoderFormat = (struct) => {
	const components = [];
	for (const key of Object.keys(struct)) {
		const item = struct[key];
		if (typeof item === "object") components.push(Object.assign(Object.assign({}, mapStructNameAndType(key)), { components: mapStructToCoderFormat(item) }));
		else components.push({
			name: key,
			type: struct[key]
		});
	}
	return components;
};
/**
*  used to flatten json abi inputs/outputs into an array of type-representing-strings
*/
const flattenTypes = (includeTuple, puts) => {
	const types = [];
	puts.forEach((param) => {
		if (typeof param.components === "object") {
			if (!param.type.startsWith("tuple")) throw new AbiError(`Invalid value given "${param.type}". Error: components found but type is not tuple.`);
			const arrayBracket = param.type.indexOf("[");
			const suffix = arrayBracket >= 0 ? param.type.substring(arrayBracket) : "";
			const result = flattenTypes(includeTuple, param.components);
			if (Array.isArray(result) && includeTuple) types.push(`tuple(${result.join(",")})${suffix}`);
			else if (!includeTuple) types.push(`(${result.join(",")})${suffix}`);
			else types.push(`(${result.join()})`);
		} else types.push(param.type);
	});
	return types;
};
/**
* Should be used to create full function/event name from json abi
* returns a string
*/
const jsonInterfaceMethodToString = (json) => {
	var _a$3, _b, _c, _d;
	if (isAbiErrorFragment(json) || isAbiEventFragment(json) || isAbiFunctionFragment(json)) {
		if ((_a$3 = json.name) === null || _a$3 === void 0 ? void 0 : _a$3.includes("(")) return json.name;
		return `${(_b = json.name) !== null && _b !== void 0 ? _b : ""}(${flattenTypes(false, (_c = json.inputs) !== null && _c !== void 0 ? _c : []).join(",")})`;
	}
	return `(${flattenTypes(false, (_d = json.inputs) !== null && _d !== void 0 ? _d : []).join(",")})`;
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-abi@4.4.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-abi/lib/esm/api/errors_api.js
/**
* Encodes the error name to its ABI signature, which are the sha3 hash of the error name including input types.
*/
const encodeErrorSignature = (functionName) => {
	if (typeof functionName !== "string" && !isAbiErrorFragment(functionName)) throw new AbiError("Invalid parameter value in encodeErrorSignature");
	let name$1;
	if (functionName && (typeof functionName === "function" || typeof functionName === "object")) name$1 = jsonInterfaceMethodToString(functionName);
	else name$1 = functionName;
	return sha3Raw(name$1);
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-abi@4.4.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-abi/lib/esm/api/events_api.js
/**
* Encodes the event name to its ABI signature, which are the sha3 hash of the event name including input types.
* @param functionName - The event name to encode, or the {@link AbiEventFragment} object of the event. If string, it has to be in the form of `eventName(param1Type,param2Type,...)`. eg: myEvent(uint256,bytes32).
* @returns - The ABI signature of the event.
*
* @example
* ```ts
* const event = web3.eth.abi.encodeEventSignature({
*   name: "myEvent",
*   type: "event",
*   inputs: [
*     {
*       type: "uint256",
*       name: "myNumber",
*     },
*     {
*       type: "bytes32",
*       name: "myBytes",
*     },
*   ],
* });
* console.log(event);
* > 0xf2eeb729e636a8cb783be044acf6b7b1e2c5863735b60d6daae84c366ee87d97
*
*  const event = web3.eth.abi.encodeEventSignature({
*   inputs: [
*     {
*       indexed: true,
*       name: "from",
*       type: "address",
*     },
*     {
*       indexed: true,
*       name: "to",
*       type: "address",
*     },
*     {
*       indexed: false,
*       name: "value",
*       type: "uint256",
*     },
*   ],
*   name: "Transfer",
*   type: "event",
* });
* console.log(event);
* > 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
* ```
*/
const encodeEventSignature = (functionName) => {
	if (typeof functionName !== "string" && !isAbiEventFragment(functionName)) throw new AbiError("Invalid parameter value in encodeEventSignature");
	let name$1;
	if (functionName && (typeof functionName === "function" || typeof functionName === "object")) name$1 = jsonInterfaceMethodToString(functionName);
	else name$1 = functionName;
	return sha3Raw(name$1);
};

//#endregion
//#region ../../node_modules/.pnpm/abitype@0.7.1_typescript@5.8.3_zod@3.25.67/node_modules/abitype/dist/chunk-WP7KDV47.mjs
function execTyped(regex, string) {
	const match = regex.exec(string);
	return match?.groups;
}
var bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
var integerRegex = /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
var isTupleRegex = /^\(.+?\).*?$/;

//#endregion
//#region ../../node_modules/.pnpm/abitype@0.7.1_typescript@5.8.3_zod@3.25.67/node_modules/abitype/dist/chunk-NHABU752.mjs
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {
	enumerable: true,
	configurable: true,
	writable: true,
	value
}) : obj[key] = value;
var __publicField = (obj, key, value) => {
	__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
	return value;
};

//#endregion
//#region ../../node_modules/.pnpm/abitype@0.7.1_typescript@5.8.3_zod@3.25.67/node_modules/abitype/dist/index.mjs
var name = "abitype";
var version = "0.7.1";
var BaseError = class extends Error {
	constructor(shortMessage, args = {}) {
		const details = args.cause instanceof BaseError ? args.cause.details : args.cause?.message ? args.cause.message : args.details;
		const docsPath = args.cause instanceof BaseError ? args.cause.docsPath || args.docsPath : args.docsPath;
		const message = [
			shortMessage || "An error occurred.",
			"",
			...args.metaMessages ? [...args.metaMessages, ""] : [],
			...docsPath ? [`Docs: https://abitype.dev${docsPath}`] : [],
			...details ? [`Details: ${details}`] : [],
			`Version: ${name}@${version}`
		].join("\n");
		super(message);
		__publicField(this, "details");
		__publicField(this, "docsPath");
		__publicField(this, "metaMessages");
		__publicField(this, "shortMessage");
		__publicField(this, "name", "AbiTypeError");
		if (args.cause) this.cause = args.cause;
		this.details = details;
		this.docsPath = docsPath;
		this.metaMessages = args.metaMessages;
		this.shortMessage = shortMessage;
	}
};
var structSignatureRegex = /^struct (?<name>[a-zA-Z0-9_]+) \{(?<properties>.*?)\}$/;
function isStructSignature(signature) {
	return structSignatureRegex.test(signature);
}
function execStructSignature(signature) {
	return execTyped(structSignatureRegex, signature);
}
var modifiers = /* @__PURE__ */ new Set([
	"memory",
	"indexed",
	"storage",
	"calldata"
]);
var functionModifiers = /* @__PURE__ */ new Set([
	"calldata",
	"memory",
	"storage"
]);
function getParameterCacheKey(param, type) {
	if (type) return `${type}:${param}`;
	return param;
}
var parameterCache = /* @__PURE__ */ new Map([
	["address", { type: "address" }],
	["bool", { type: "bool" }],
	["bytes", { type: "bytes" }],
	["bytes32", { type: "bytes32" }],
	["int", { type: "int256" }],
	["int256", { type: "int256" }],
	["string", { type: "string" }],
	["uint", { type: "uint256" }],
	["uint8", { type: "uint8" }],
	["uint16", { type: "uint16" }],
	["uint24", { type: "uint24" }],
	["uint32", { type: "uint32" }],
	["uint64", { type: "uint64" }],
	["uint96", { type: "uint96" }],
	["uint112", { type: "uint112" }],
	["uint160", { type: "uint160" }],
	["uint192", { type: "uint192" }],
	["uint256", { type: "uint256" }],
	["address owner", {
		type: "address",
		name: "owner"
	}],
	["address to", {
		type: "address",
		name: "to"
	}],
	["bool approved", {
		type: "bool",
		name: "approved"
	}],
	["bytes _data", {
		type: "bytes",
		name: "_data"
	}],
	["bytes data", {
		type: "bytes",
		name: "data"
	}],
	["bytes signature", {
		type: "bytes",
		name: "signature"
	}],
	["bytes32 hash", {
		type: "bytes32",
		name: "hash"
	}],
	["bytes32 r", {
		type: "bytes32",
		name: "r"
	}],
	["bytes32 root", {
		type: "bytes32",
		name: "root"
	}],
	["bytes32 s", {
		type: "bytes32",
		name: "s"
	}],
	["string name", {
		type: "string",
		name: "name"
	}],
	["string symbol", {
		type: "string",
		name: "symbol"
	}],
	["string tokenURI", {
		type: "string",
		name: "tokenURI"
	}],
	["uint tokenId", {
		type: "uint256",
		name: "tokenId"
	}],
	["uint8 v", {
		type: "uint8",
		name: "v"
	}],
	["uint256 balance", {
		type: "uint256",
		name: "balance"
	}],
	["uint256 tokenId", {
		type: "uint256",
		name: "tokenId"
	}],
	["uint256 value", {
		type: "uint256",
		name: "value"
	}],
	["event:address indexed from", {
		type: "address",
		name: "from",
		indexed: true
	}],
	["event:address indexed to", {
		type: "address",
		name: "to",
		indexed: true
	}],
	["event:uint indexed tokenId", {
		type: "uint256",
		name: "tokenId",
		indexed: true
	}],
	["event:uint256 indexed tokenId", {
		type: "uint256",
		name: "tokenId",
		indexed: true
	}]
]);
var abiParameterWithoutTupleRegex = /^(?<type>[a-zA-Z0-9_]+?)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z0-9_]+))?$/;
var abiParameterWithTupleRegex = /^\((?<type>.+?)\)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z0-9_]+))?$/;
var dynamicIntegerRegex = /^u?int$/;
function parseAbiParameter(param, options) {
	const parameterCacheKey = getParameterCacheKey(param, options?.type);
	if (parameterCache.has(parameterCacheKey)) return parameterCache.get(parameterCacheKey);
	const isTuple = isTupleRegex.test(param);
	const match = execTyped(isTuple ? abiParameterWithTupleRegex : abiParameterWithoutTupleRegex, param);
	if (!match) throw new BaseError("Invalid ABI parameter.", { details: param });
	if (match.name && isSolidityKeyword(match.name)) throw new BaseError("Invalid ABI parameter.", {
		details: param,
		metaMessages: [`"${match.name}" is a protected Solidity keyword. More info: https://docs.soliditylang.org/en/latest/cheatsheet.html`]
	});
	const name2 = match.name ? { name: match.name } : {};
	const indexed = match.modifier === "indexed" ? { indexed: true } : {};
	const structs = options?.structs ?? {};
	let type;
	let components = {};
	if (isTuple) {
		type = "tuple";
		const params = splitParameters(match.type);
		const components_ = [];
		const length = params.length;
		for (let i = 0; i < length; i++) components_.push(parseAbiParameter(params[i], { structs }));
		components = { components: components_ };
	} else if (match.type in structs) {
		type = "tuple";
		components = { components: structs[match.type] };
	} else if (dynamicIntegerRegex.test(match.type)) type = `${match.type}256`;
	else {
		type = match.type;
		if (!(options?.type === "struct") && !isSolidityType(type)) throw new BaseError("Unknown type.", { metaMessages: [`Type "${type}" is not a valid ABI type.`] });
	}
	if (match.modifier) {
		if (!options?.modifiers?.has?.(match.modifier)) throw new BaseError("Invalid ABI parameter.", {
			details: param,
			metaMessages: [`Modifier "${match.modifier}" not allowed${options?.type ? ` in "${options.type}" type` : ""}.`]
		});
		if (functionModifiers.has(match.modifier) && !isValidDataLocation(type, !!match.array)) throw new BaseError("Invalid ABI parameter.", {
			details: param,
			metaMessages: [`Modifier "${match.modifier}" not allowed${options?.type ? ` in "${options.type}" type` : ""}.`, `Data location can only be specified for array, struct, or mapping types, but "${match.modifier}" was given.`]
		});
	}
	const abiParameter = {
		type: `${type}${match.array ?? ""}`,
		...name2,
		...indexed,
		...components
	};
	parameterCache.set(parameterCacheKey, abiParameter);
	return abiParameter;
}
function splitParameters(params, result = [], current = "", depth = 0) {
	if (params === "") {
		if (current === "") return result;
		if (depth !== 0) throw new BaseError("Unbalanced parentheses.", {
			metaMessages: [`"${current.trim()}" has too many ${depth > 0 ? "opening" : "closing"} parentheses.`],
			details: `Depth "${depth}"`
		});
		return [...result, current.trim()];
	}
	const length = params.length;
	for (let i = 0; i < length; i++) {
		const char = params[i];
		const tail = params.slice(i + 1);
		switch (char) {
			case ",": return depth === 0 ? splitParameters(tail, [...result, current.trim()]) : splitParameters(tail, result, `${current}${char}`, depth);
			case "(": return splitParameters(tail, result, `${current}${char}`, depth + 1);
			case ")": return splitParameters(tail, result, `${current}${char}`, depth - 1);
			default: return splitParameters(tail, result, `${current}${char}`, depth);
		}
	}
	return [];
}
function isSolidityType(type) {
	return type === "address" || type === "bool" || type === "function" || type === "string" || bytesRegex.test(type) || integerRegex.test(type);
}
var protectedKeywordsRegex = /^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/;
function isSolidityKeyword(name2) {
	return name2 === "address" || name2 === "bool" || name2 === "function" || name2 === "string" || name2 === "tuple" || bytesRegex.test(name2) || integerRegex.test(name2) || protectedKeywordsRegex.test(name2);
}
function isValidDataLocation(type, isArray) {
	return isArray || type === "bytes" || type === "string" || type === "tuple";
}
function parseStructs(signatures) {
	const shallowStructs = {};
	const signaturesLength = signatures.length;
	for (let i = 0; i < signaturesLength; i++) {
		const signature = signatures[i];
		if (!isStructSignature(signature)) continue;
		const match = execStructSignature(signature);
		if (!match) throw new BaseError("Invalid struct signature.", { details: signature });
		const properties = match.properties.split(";");
		const components = [];
		const propertiesLength = properties.length;
		for (let k = 0; k < propertiesLength; k++) {
			const property = properties[k];
			const trimmed = property.trim();
			if (!trimmed) continue;
			const abiParameter = parseAbiParameter(trimmed, { type: "struct" });
			components.push(abiParameter);
		}
		if (!components.length) throw new BaseError("Invalid struct signature.", {
			details: signature,
			metaMessages: ["No properties exist."]
		});
		shallowStructs[match.name] = components;
	}
	const resolvedStructs = {};
	const entries = Object.entries(shallowStructs);
	const entriesLength = entries.length;
	for (let i = 0; i < entriesLength; i++) {
		const [name2, parameters] = entries[i];
		resolvedStructs[name2] = resolveStructs(parameters, shallowStructs);
	}
	return resolvedStructs;
}
var typeWithoutTupleRegex = /^(?<type>[a-zA-Z0-9_]+?)(?<array>(?:\[\d*?\])+?)?$/;
function resolveStructs(abiParameters, structs, ancestors = /* @__PURE__ */ new Set()) {
	const components = [];
	const length = abiParameters.length;
	for (let i = 0; i < length; i++) {
		const abiParameter = abiParameters[i];
		const isTuple = isTupleRegex.test(abiParameter.type);
		if (isTuple) components.push(abiParameter);
		else {
			const match = execTyped(typeWithoutTupleRegex, abiParameter.type);
			if (!match?.type) throw new BaseError("Invalid ABI parameter.", {
				details: JSON.stringify(abiParameter, null, 2),
				metaMessages: ["ABI parameter type is invalid."]
			});
			const { array, type } = match;
			if (type in structs) {
				if (ancestors.has(type)) throw new BaseError("Circular reference detected.", { metaMessages: [`Struct "${type}" is a circular reference.`] });
				components.push({
					...abiParameter,
					type: `tuple${array ?? ""}`,
					components: resolveStructs(structs[type] ?? [], structs, /* @__PURE__ */ new Set([...ancestors, type]))
				});
			} else if (isSolidityType(type)) components.push(abiParameter);
			else throw new BaseError("Unknown type.", { metaMessages: [`Type "${type}" is not a valid ABI type. Perhaps you forgot to include a struct signature?`] });
		}
	}
	return components;
}
function parseAbiParameter2(param) {
	let abiParameter;
	if (typeof param === "string") abiParameter = parseAbiParameter(param, { modifiers });
	else {
		const structs = parseStructs(param);
		const length = param.length;
		for (let i = 0; i < length; i++) {
			const signature = param[i];
			if (isStructSignature(signature)) continue;
			abiParameter = parseAbiParameter(signature, {
				modifiers,
				structs
			});
			break;
		}
	}
	if (!abiParameter) throw new BaseError("Failed to parse ABI parameter.", {
		details: `parseAbiParameter(${JSON.stringify(param, null, 2)})`,
		docsPath: "/api/human.html#parseabiparameter-1"
	});
	return abiParameter;
}

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-abi@4.4.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-abi/lib/esm/coders/utils.js
const WORD_SIZE = 32;
function alloc(size = 0) {
	var _a$3;
	if (((_a$3 = globalThis.Buffer) === null || _a$3 === void 0 ? void 0 : _a$3.alloc) !== void 0) {
		const buf = globalThis.Buffer.alloc(size);
		return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
	}
	return new Uint8Array(size);
}
function convertExternalAbiParameter(abiParam) {
	var _a$3, _b;
	return Object.assign(Object.assign({}, abiParam), {
		name: (_a$3 = abiParam.name) !== null && _a$3 !== void 0 ? _a$3 : "",
		components: (_b = abiParam.components) === null || _b === void 0 ? void 0 : _b.map((c) => convertExternalAbiParameter(c))
	});
}
function isAbiParameter(param) {
	return !isNullish(param) && typeof param === "object" && !isNullish(param.type) && typeof param.type === "string";
}
function toAbiParams(abi) {
	return abi.map((input) => {
		var _a$3;
		if (isAbiParameter(input)) return input;
		if (typeof input === "string") return convertExternalAbiParameter(parseAbiParameter2(input.replace(/tuple/, "")));
		if (isSimplifiedStructFormat(input)) {
			const structName = Object.keys(input)[0];
			const structInfo = mapStructNameAndType(structName);
			structInfo.name = (_a$3 = structInfo.name) !== null && _a$3 !== void 0 ? _a$3 : "";
			return Object.assign(Object.assign({}, structInfo), { components: mapStructToCoderFormat(input[structName]) });
		}
		throw new AbiError("Invalid abi");
	});
}
function extractArrayType(param) {
	const arrayParenthesisStart = param.type.lastIndexOf("[");
	const arrayParamType = param.type.substring(0, arrayParenthesisStart);
	const sizeString = param.type.substring(arrayParenthesisStart);
	let size = -1;
	if (sizeString !== "[]") {
		size = Number(sizeString.slice(1, -1));
		if (isNaN(size)) throw new AbiError("Invalid fixed array size", { size: sizeString });
	}
	return {
		param: {
			type: arrayParamType,
			name: "",
			components: param.components
		},
		size
	};
}
/**
* Param is dynamic if it's dynamic base type or if some of his children (components, array items)
* is of dynamic type
* @param param
*/
function isDynamic(param) {
	var _a$3, _b;
	if (param.type === "string" || param.type === "bytes" || param.type.endsWith("[]")) return true;
	if (param.type === "tuple") return (_b = (_a$3 = param.components) === null || _a$3 === void 0 ? void 0 : _a$3.some(isDynamic)) !== null && _b !== void 0 ? _b : false;
	if (param.type.endsWith("]")) return isDynamic(extractArrayType(param).param);
	return false;
}

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-abi@4.4.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-abi/lib/esm/coders/base/address.js
const ADDRESS_BYTES_COUNT = 20;
const ADDRESS_OFFSET = WORD_SIZE - ADDRESS_BYTES_COUNT;
function encodeAddress(param, input) {
	if (typeof input !== "string") throw new AbiError("address type expects string as input type", {
		value: input,
		name: param.name,
		type: param.type
	});
	let address = input.toLowerCase();
	if (!address.startsWith("0x")) address = `0x${address}`;
	if (!isAddress(address)) throw new AbiError("provided input is not valid address", {
		value: input,
		name: param.name,
		type: param.type
	});
	const addressBytes = hexToUint8Array(address);
	const encoded = alloc(WORD_SIZE);
	encoded.set(addressBytes, ADDRESS_OFFSET);
	return {
		dynamic: false,
		encoded
	};
}
function decodeAddress(_param, bytes$1) {
	const addressBytes = bytes$1.subarray(ADDRESS_OFFSET, WORD_SIZE);
	if (addressBytes.length !== ADDRESS_BYTES_COUNT) throw new AbiError("Invalid decoding input, not enough bytes to decode address", { bytes: bytes$1 });
	const result = uint8ArrayToHexString$1(addressBytes);
	return {
		result: toChecksumAddress(result),
		encoded: bytes$1.subarray(WORD_SIZE),
		consumed: WORD_SIZE
	};
}

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-abi@4.4.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-abi/lib/esm/coders/base/numbersLimits.js
const numberLimits = /* @__PURE__ */ new Map();
let base = BigInt(256);
for (let i = 8; i <= 256; i += 8) {
	numberLimits.set(`uint${i}`, {
		min: BigInt(0),
		max: base - BigInt(1)
	});
	numberLimits.set(`int${i}`, {
		min: -base / BigInt(2),
		max: base / BigInt(2) - BigInt(1)
	});
	base *= BigInt(256);
}
numberLimits.set(`int`, numberLimits.get("int256"));
numberLimits.set(`uint`, numberLimits.get("uint256"));

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-abi@4.4.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-abi/lib/esm/coders/base/number.js
const mask = BigInt(1) << BigInt(256);
function bigIntToUint8Array(value, byteLength = WORD_SIZE) {
	let hexValue;
	if (value < 0) hexValue = (mask + value).toString(16);
	else hexValue = value.toString(16);
	hexValue = padLeft(hexValue, byteLength * 2);
	return hexToUint8Array(hexValue);
}
function uint8ArrayToBigInt(value, max) {
	const hexValue = uint8ArrayToHexString$1(value);
	const result = BigInt(hexValue);
	if (result <= max) return result;
	return result - mask;
}
function encodeNumber(param, input) {
	let value;
	try {
		value = toBigInt(input);
	} catch (e) {
		throw new AbiError("provided input is not number value", {
			type: param.type,
			value: input,
			name: param.name
		});
	}
	const limit = numberLimits.get(param.type);
	if (!limit) throw new AbiError("provided abi contains invalid number datatype", { type: param.type });
	if (value < limit.min) throw new AbiError("provided input is less then minimum for given type", {
		type: param.type,
		value: input,
		name: param.name,
		minimum: limit.min.toString()
	});
	if (value > limit.max) throw new AbiError("provided input is greater then maximum for given type", {
		type: param.type,
		value: input,
		name: param.name,
		maximum: limit.max.toString()
	});
	return {
		dynamic: false,
		encoded: bigIntToUint8Array(value)
	};
}
function decodeNumber(param, bytes$1) {
	if (bytes$1.length < WORD_SIZE) throw new AbiError("Not enough bytes left to decode", {
		param,
		bytesLeft: bytes$1.length
	});
	const boolBytes = bytes$1.subarray(0, WORD_SIZE);
	const limit = numberLimits.get(param.type);
	if (!limit) throw new AbiError("provided abi contains invalid number datatype", { type: param.type });
	const numberResult = uint8ArrayToBigInt(boolBytes, limit.max);
	if (numberResult < limit.min) throw new AbiError("decoded value is less then minimum for given type", {
		type: param.type,
		value: numberResult,
		name: param.name,
		minimum: limit.min.toString()
	});
	if (numberResult > limit.max) throw new AbiError("decoded value is greater then maximum for given type", {
		type: param.type,
		value: numberResult,
		name: param.name,
		maximum: limit.max.toString()
	});
	return {
		result: numberResult,
		encoded: bytes$1.subarray(WORD_SIZE),
		consumed: WORD_SIZE
	};
}

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-abi@4.4.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-abi/lib/esm/coders/base/bool.js
function encodeBoolean(param, input) {
	let value;
	try {
		value = toBool(input);
	} catch (e) {
		if (e instanceof InvalidBooleanError) throw new AbiError("provided input is not valid boolean value", {
			type: param.type,
			value: input,
			name: param.name
		});
	}
	return encodeNumber({
		type: "uint8",
		name: ""
	}, Number(value));
}
function decodeBool(_param, bytes$1) {
	const numberResult = decodeNumber({
		type: "uint8",
		name: ""
	}, bytes$1);
	if (numberResult.result > 1 || numberResult.result < 0) throw new AbiError("Invalid boolean value encoded", {
		boolBytes: bytes$1.subarray(0, WORD_SIZE),
		numberResult
	});
	return {
		result: numberResult.result === BigInt(1),
		encoded: numberResult.encoded,
		consumed: WORD_SIZE
	};
}

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-abi@4.4.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-abi/lib/esm/coders/base/bytes.js
const MAX_STATIC_BYTES_COUNT = 32;
function encodeBytes(param, input) {
	if (typeof input === "string" && input.length % 2 !== 0) input += "0";
	if (!isBytes(input)) throw new AbiError("provided input is not valid bytes value", {
		type: param.type,
		value: input,
		name: param.name
	});
	const bytes$1 = bytesToUint8Array(input);
	const [, size] = param.type.split("bytes");
	if (size) {
		if (Number(size) > MAX_STATIC_BYTES_COUNT || Number(size) < 1) throw new AbiError("invalid bytes type. Static byte type can have between 1 and 32 bytes", { type: param.type });
		if (Number(size) < bytes$1.length) throw new AbiError("provided input size is different than type size", {
			type: param.type,
			value: input,
			name: param.name
		});
		const encoded$1 = alloc(WORD_SIZE);
		encoded$1.set(bytes$1);
		return {
			dynamic: false,
			encoded: encoded$1
		};
	}
	const partsLength = Math.ceil(bytes$1.length / WORD_SIZE);
	const encoded = alloc(WORD_SIZE + partsLength * WORD_SIZE);
	encoded.set(encodeNumber({
		type: "uint32",
		name: ""
	}, bytes$1.length).encoded);
	encoded.set(bytes$1, WORD_SIZE);
	return {
		dynamic: true,
		encoded
	};
}
function decodeBytes(param, bytes$1) {
	const [, sizeString] = param.type.split("bytes");
	let size = Number(sizeString);
	let remainingBytes = bytes$1;
	let partsCount = 1;
	let consumed = 0;
	if (!size) {
		const result = decodeNumber({
			type: "uint32",
			name: ""
		}, remainingBytes);
		size = Number(result.result);
		consumed += result.consumed;
		remainingBytes = result.encoded;
		partsCount = Math.ceil(size / WORD_SIZE);
	}
	if (size > bytes$1.length) throw new AbiError("there is not enough data to decode", {
		type: param.type,
		encoded: bytes$1,
		size
	});
	return {
		result: bytesToHex(remainingBytes.subarray(0, size)),
		encoded: remainingBytes.subarray(partsCount * WORD_SIZE),
		consumed: consumed + partsCount * WORD_SIZE
	};
}

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-abi@4.4.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-abi/lib/esm/coders/base/string.js
function encodeString(_param, input) {
	if (typeof input !== "string") throw new AbiError("invalid input, should be string", { input });
	const bytes$1 = utf8ToBytes(input);
	return encodeBytes({
		type: "bytes",
		name: ""
	}, bytes$1);
}
function decodeString(_param, bytes$1) {
	const r = decodeBytes({
		type: "bytes",
		name: ""
	}, bytes$1);
	return {
		result: hexToUtf8(r.result),
		encoded: r.encoded,
		consumed: r.consumed
	};
}

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-abi@4.4.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-abi/lib/esm/coders/base/utils.js
function encodeDynamicParams(encodedParams) {
	let staticSize = 0;
	let dynamicSize = 0;
	const staticParams = [];
	const dynamicParams = [];
	for (const encodedParam of encodedParams) if (encodedParam.dynamic) staticSize += WORD_SIZE;
	else staticSize += encodedParam.encoded.length;
	for (const encodedParam of encodedParams) if (encodedParam.dynamic) {
		staticParams.push(encodeNumber({
			type: "uint256",
			name: ""
		}, staticSize + dynamicSize));
		dynamicParams.push(encodedParam);
		dynamicSize += encodedParam.encoded.length;
	} else staticParams.push(encodedParam);
	return uint8ArrayConcat(...staticParams.map((p) => p.encoded), ...dynamicParams.map((p) => p.encoded));
}

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-abi@4.4.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-abi/lib/esm/coders/base/array.js
function encodeArray(param, values) {
	if (!Array.isArray(values)) throw new AbiError("Expected value to be array", {
		abi: param,
		values
	});
	const { size, param: arrayItemParam } = extractArrayType(param);
	const encodedParams = values.map((v) => encodeParamFromAbiParameter(arrayItemParam, v));
	const dynamic = size === -1;
	const dynamicItems = encodedParams.length > 0 && encodedParams[0].dynamic;
	if (!dynamic && values.length !== size) throw new AbiError("Given arguments count doesn't match array length", {
		arrayLength: size,
		argumentsLength: values.length
	});
	if (dynamic || dynamicItems) {
		const encodingResult = encodeDynamicParams(encodedParams);
		if (dynamic) {
			const encodedLength = encodeNumber({
				type: "uint256",
				name: ""
			}, encodedParams.length).encoded;
			return {
				dynamic: true,
				encoded: encodedParams.length > 0 ? uint8ArrayConcat(encodedLength, encodingResult) : encodedLength
			};
		}
		return {
			dynamic: true,
			encoded: encodingResult
		};
	}
	return {
		dynamic: false,
		encoded: uint8ArrayConcat(...encodedParams.map((p) => p.encoded))
	};
}
function decodeArray(param, bytes$1) {
	let { size, param: arrayItemParam } = extractArrayType(param);
	const dynamic = size === -1;
	let consumed = 0;
	const result = [];
	let remaining = bytes$1;
	if (dynamic) {
		const lengthResult = decodeNumber({
			type: "uint32",
			name: ""
		}, bytes$1);
		size = Number(lengthResult.result);
		consumed = lengthResult.consumed;
		remaining = lengthResult.encoded;
	}
	const hasDynamicChild = isDynamic(arrayItemParam);
	if (hasDynamicChild) {
		for (let i = 0; i < size; i += 1) {
			const offsetResult = decodeNumber({
				type: "uint32",
				name: ""
			}, remaining.subarray(i * WORD_SIZE));
			consumed += offsetResult.consumed;
			const decodedChildResult = decodeParamFromAbiParameter(arrayItemParam, remaining.subarray(Number(offsetResult.result)));
			consumed += decodedChildResult.consumed;
			result.push(decodedChildResult.result);
		}
		return {
			result,
			encoded: remaining.subarray(consumed),
			consumed
		};
	}
	for (let i = 0; i < size; i += 1) {
		const decodedChildResult = decodeParamFromAbiParameter(arrayItemParam, bytes$1.subarray(consumed));
		consumed += decodedChildResult.consumed;
		result.push(decodedChildResult.result);
	}
	return {
		result,
		encoded: bytes$1.subarray(consumed),
		consumed
	};
}

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-abi@4.4.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-abi/lib/esm/coders/base/index.js
function encodeParamFromAbiParameter(param, value) {
	if (param.type === "string") return encodeString(param, value);
	if (param.type === "bool") return encodeBoolean(param, value);
	if (param.type === "address") return encodeAddress(param, value);
	if (param.type === "tuple") return encodeTuple(param, value);
	if (param.type.endsWith("]")) return encodeArray(param, value);
	if (param.type.startsWith("bytes")) return encodeBytes(param, value);
	if (param.type.startsWith("uint") || param.type.startsWith("int")) return encodeNumber(param, value);
	throw new AbiError("Unsupported", {
		param,
		value
	});
}
function decodeParamFromAbiParameter(param, bytes$1) {
	if (param.type === "string") return decodeString(param, bytes$1);
	if (param.type === "bool") return decodeBool(param, bytes$1);
	if (param.type === "address") return decodeAddress(param, bytes$1);
	if (param.type === "tuple") return decodeTuple(param, bytes$1);
	if (param.type.endsWith("]")) return decodeArray(param, bytes$1);
	if (param.type.startsWith("bytes")) return decodeBytes(param, bytes$1);
	if (param.type.startsWith("uint") || param.type.startsWith("int")) return decodeNumber(param, bytes$1);
	throw new AbiError("Unsupported", {
		param,
		bytes: bytes$1
	});
}

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-abi@4.4.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-abi/lib/esm/coders/base/tuple.js
function encodeTuple(param, input) {
	var _a$3, _b, _c;
	let dynamic = false;
	if (!Array.isArray(input) && typeof input !== "object") throw new AbiError("param must be either Array or Object", {
		param,
		input
	});
	const narrowedInput = input;
	const encoded = [];
	for (let i = 0; i < ((_b = (_a$3 = param.components) === null || _a$3 === void 0 ? void 0 : _a$3.length) !== null && _b !== void 0 ? _b : 0); i += 1) {
		const paramComponent = param.components[i];
		let result;
		if (Array.isArray(narrowedInput)) {
			if (i >= narrowedInput.length) throw new AbiError("input param length missmatch", {
				param,
				input
			});
			result = encodeParamFromAbiParameter(paramComponent, narrowedInput[i]);
		} else {
			const paramInput = narrowedInput[(_c = paramComponent.name) !== null && _c !== void 0 ? _c : ""];
			if (paramInput === void 0 || paramInput === null) throw new AbiError("missing input defined in abi", {
				param,
				input,
				paramName: paramComponent.name
			});
			result = encodeParamFromAbiParameter(paramComponent, paramInput);
		}
		if (result.dynamic) dynamic = true;
		encoded.push(result);
	}
	if (dynamic) return {
		dynamic: true,
		encoded: encodeDynamicParams(encoded)
	};
	return {
		dynamic: false,
		encoded: uint8ArrayConcat(...encoded.map((e) => e.encoded))
	};
}
function decodeTuple(param, bytes$1) {
	const result = { __length__: 0 };
	let consumed = 0;
	if (!param.components) return {
		result,
		encoded: bytes$1,
		consumed
	};
	let dynamicConsumed = 0;
	for (const [index, childParam] of param.components.entries()) {
		let decodedResult;
		if (isDynamic(childParam)) {
			const offsetResult = decodeNumber({
				type: "uint32",
				name: ""
			}, bytes$1.subarray(consumed));
			decodedResult = decodeParamFromAbiParameter(childParam, bytes$1.subarray(Number(offsetResult.result)));
			consumed += offsetResult.consumed;
			dynamicConsumed += decodedResult.consumed;
		} else {
			decodedResult = decodeParamFromAbiParameter(childParam, bytes$1.subarray(consumed));
			consumed += decodedResult.consumed;
		}
		result.__length__ += 1;
		result[index] = decodedResult.result;
		if (childParam.name && childParam.name !== "") result[childParam.name] = decodedResult.result;
	}
	return {
		encoded: bytes$1.subarray(consumed + dynamicConsumed),
		result,
		consumed: consumed + dynamicConsumed
	};
}

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-abi@4.4.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-abi/lib/esm/coders/decode.js
function decodeParameters$1(abis, bytes$1, _loose) {
	const abiParams = toAbiParams(abis);
	const bytesArray = hexToUint8Array(bytes$1);
	return decodeTuple({
		type: "tuple",
		name: "",
		components: abiParams
	}, bytesArray).result;
}

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-abi@4.4.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-abi/lib/esm/coders/encode.js
/**
* @param params - The params to infer the ABI from
* @returns The inferred ABI
* @example
* ```
* inferParamsAbi([1, -1, 'hello', '0x1234', ])
* ```
* > [{ type: 'int256' }, { type: 'uint256' }, { type: 'string' }, { type: 'bytes' }]
* ```
*/
function inferParamsAbi(params) {
	const abi = [];
	params.forEach((param) => {
		if (Array.isArray(param)) {
			const inferredParams = inferParamsAbi(param);
			abi.push({
				type: "tuple",
				components: inferredParams,
				name: ""
			});
		} else abi.push({ type: toHex(param, true) });
	});
	return abi;
}
/**
* Encodes a parameter based on its type to its ABI representation.
* @param abi - An array of {@link AbiInput}. See [Solidity's documentation](https://solidity.readthedocs.io/en/v0.5.3/abi-spec.html#json) for more details.
* @param params - The actual parameters to encode.
* @returns - The ABI encoded parameters
* @example
* ```ts
* const res = web3.eth.abi.encodeParameters(
*    ["uint256", "string"],
*    ["2345675643", "Hello!%"]
*  );
*
*  console.log(res);
*  > 0x000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000
* ```
*/
function encodeParameters(abi, params) {
	if ((abi === null || abi === void 0 ? void 0 : abi.length) !== params.length) throw new AbiError("Invalid number of values received for given ABI", {
		expected: abi === null || abi === void 0 ? void 0 : abi.length,
		received: params.length
	});
	const abiParams = toAbiParams(abi);
	return uint8ArrayToHexString$1(encodeTuple({
		type: "tuple",
		name: "",
		components: abiParams
	}, params).encoded);
}
/**
* Infer a smart contract method parameter type and then encode this parameter.
* @param params - The parameters to encode.
* @returns - The ABI encoded parameters
*
* @remarks
* This method is useful when you don't know the type of the parameters you want to encode. It will infer the type of the parameters and then encode them.
* However, it is not recommended to use this method when you know the type of the parameters you want to encode. In this case, use the {@link encodeParameters} method instead.
* The type inference is not perfect and can lead to unexpected results. Especially when you want to encode an array, uint that is not uint256 or bytes....
* @example
* ```ts
* const res = web3.eth.abi.encodeParameters(
*    ["2345675643", "Hello!%"]
*  );
*
*  console.log(res);
*  > 0x000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000
* ```
*/
function inferTypesAndEncodeParameters(params) {
	try {
		const abiParams = inferParamsAbi(params);
		return uint8ArrayToHexString$1(encodeTuple({
			type: "tuple",
			name: "",
			components: abiParams
		}, params).encoded);
	} catch (e) {
		throw new AbiError("Could not infer types from given params", { params });
	}
}

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-abi@4.4.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-abi/lib/esm/api/parameters_api.js
/**
* Encodes a parameter based on its type to its ABI representation.
* @param abi -  The type of the parameter. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.
* @param param - The actual parameter to encode.
* @returns -  The ABI encoded parameter
* @example
* ```ts
*  const res = web3.eth.abi.encodeParameter("uint256", "2345675643");
*  console.log(res);
*  0x000000000000000000000000000000000000000000000000000000008bd02b7b
*
*  const res = web3.eth.abi.encodeParameter("uint", "2345675643");
*
*  console.log(res);
*  >0x000000000000000000000000000000000000000000000000000000008bd02b7b
*
*    const res = web3.eth.abi.encodeParameter("bytes32", "0xdf3234");
*
*  console.log(res);
*  >0xdf32340000000000000000000000000000000000000000000000000000000000
*
*   const res = web3.eth.abi.encodeParameter("bytes", "0xdf3234");
*
*  console.log(res);
*  > 0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003df32340000000000000000000000000000000000000000000000000000000000
*
*   const res = web3.eth.abi.encodeParameter("bytes32[]", ["0xdf3234", "0xfdfd"]);
*
*  console.log(res);
*  > 0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002df32340000000000000000000000000000000000000000000000000000000000fdfd000000000000000000000000000000000000000000000000000000000000
*
*  const res = web3.eth.abi.encodeParameter(
*    {
*      ParentStruct: {
*        propertyOne: "uint256",
*        propertyTwo: "uint256",
*        childStruct: {
*          propertyOne: "uint256",
*          propertyTwo: "uint256",
*        },
*      },
*    },
*    {
*      propertyOne: 42,
*      propertyTwo: 56,
*      childStruct: {
*        propertyOne: 45,
*        propertyTwo: 78,
*      },
*    }
*  );
*
*  console.log(res);
*  > 0x000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000004e
* ```
*/
const encodeParameter = (abi, param) => encodeParameters([abi], [param]);
/**
* Should be used to decode list of params
*/
const decodeParametersWith = (abis, bytes$1, loose) => {
	try {
		if (abis.length > 0 && (!bytes$1 || bytes$1 === "0x" || bytes$1 === "0X")) throw new AbiError("Returned values aren't valid, did it run Out of Gas? You might also see this error if you are not using the correct ABI for the contract you are retrieving data from, requesting data from a block number that does not exist, or querying a node which is not fully synced.");
		return decodeParameters$1(abis, `0x${bytes$1.replace(/0x/i, "")}`, loose);
	} catch (err) {
		throw new AbiError(`Parameter decoding error: ${err.message}`, { internalErr: err });
	}
};
/**
* Should be used to decode list of params
*/
/**
* Decodes ABI encoded parameters to its JavaScript types.
* @param abi -  An array of {@link AbiInput}. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.
* @param bytes - The ABI byte code to decode
* @returns - The result object containing the decoded parameters.
* @example
* ```ts
* let res = web3.eth.abi.decodeParameters(
*    ["string", "uint256"],
*    "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ea000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000"
*  );
*  console.log(res);
*  > { '0': 'Hello!%!', '1': 234n, __length__: 2 }
*
* let res = web3.eth.abi.decodeParameters(
*    [
*      {
*        type: "string",
*        name: "myString",
*      },
*      {
*        type: "uint256",
*        name: "myNumber",
*      },
*    ],
*    "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ea000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000"
*  );
* console.log(res);
*  > {
*  '0': 'Hello!%!',
*  '1': 234n,
*  __length__: 2,
*  myString: 'Hello!%!',
*  myNumber: 234n
* }
*
* const res = web3.eth.abi.decodeParameters(
*    [
*      "uint8[]",
*      {
*        ParentStruct: {
*          propertyOne: "uint256",
*          propertyTwo: "uint256",
*          childStruct: {
*            propertyOne: "uint256",
*            propertyTwo: "uint256",
*          },
*        },
*      },
*    ],
*    "0x00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000018"
*  );
*  console.log(res);
*  >
*  '0': [ 42n, 24n ],
*  '1': {
*    '0': 42n,
*    '1': 56n,
*    '2': {
*      '0': 45n,
*      '1': 78n,
*      __length__: 2,
*      propertyOne: 45n,
*      propertyTwo: 78n
*    },
*    __length__: 3,
*    propertyOne: 42n,
*    propertyTwo: 56n,
*    childStruct: {
*      '0': 45n,
*      '1': 78n,
*      __length__: 2,
*      propertyOne: 45n,
*      propertyTwo: 78n
*    }
*  },
*  __length__: 2,
*  ParentStruct: {
*    '0': 42n,
*    '1': 56n,
*    '2': {
*      '0': 45n,
*      '1': 78n,
*      __length__: 2,
*      propertyOne: 45n,
*      propertyTwo: 78n
*    },
*    __length__: 3,
*    propertyOne: 42n,
*    propertyTwo: 56n,
*    childStruct: {
*      '0': 45n,
*      '1': 78n,
*      __length__: 2,
*      propertyOne: 45n,
*      propertyTwo: 78n
*    }
*  }
*}
* ```
*/
const decodeParameters = (abi, bytes$1) => decodeParametersWith(abi, bytes$1, false);
/**
* Should be used to decode bytes to plain param
*/
/**
* Decodes an ABI encoded parameter to its JavaScript type.
* @param abi -  The type of the parameter. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.
* @param bytes - The ABI byte code to decode
* @returns - The decoded parameter
* @example
* ```ts
*   const res = web3.eth.abi.decodeParameter(
*    "uint256",
*    "0x0000000000000000000000000000000000000000000000000000000000000010"
*  );
*  console.log(res);
* > 16n
*
*  const res = web3.eth.abi.decodeParameter(
*    "string",
*    "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000"
*  );
*
*  console.log(res);
*  > Hello!%!
*
*  const res = web3.eth.abi.decodeParameter(
*    {
*      ParentStruct: {
*        propertyOne: "uint256",
*        propertyTwo: "uint256",
*        childStruct: {
*          propertyOne: "uint256",
*          propertyTwo: "uint256",
*        },
*      },
*    },
*    "0x000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000004e"
*  );
*
*  console.log(res);
*   {
*  '0': 42n,
*  '1': 56n,
*  '2': {
*    '0': 45n,
*    '1': 78n,
*    __length__: 2,
*    propertyOne: 45n,
*    propertyTwo: 78n
*  },
*  __length__: 3,
*  propertyOne: 42n,
*  propertyTwo: 56n,
*  childStruct: {
*    '0': 45n,
*    '1': 78n,
*    __length__: 2,
*    propertyOne: 45n,
*    propertyTwo: 78n
*  }
*}
* ```
*/
const decodeParameter = (abi, bytes$1) => decodeParameters([abi], bytes$1)["0"];

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-abi@4.4.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-abi/lib/esm/api/functions_api.js
/**
* Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.
* The JSON interface spec documentation https://docs.soliditylang.org/en/latest/abi-spec.html#json
* @param functionName - The function name to encode or the `JSON interface` object of the function.
* If the passed parameter is a string, it has to be in the form of `functionName(param1Type,param2Type,...)`. eg: myFunction(uint256,uint32[],bytes10,bytes)
* @returns - The ABI signature of the function.
* @example
* ```ts
* const signature = web3.eth.abi.encodeFunctionSignature({
*   name: "myMethod",
*   type: "function",
*   inputs: [
*     {
*       type: "uint256",
*       name: "myNumber",
*     },
*     {
*       type: "string",
*       name: "myString",
*     },
*   ],
* });
* console.log(signature);
* > 0x24ee0097
*
* const signature = web3.eth.abi.encodeFunctionSignature('myMethod(uint256,string)')
* console.log(signature);
* > 0x24ee0097
*
* const signature = web3.eth.abi.encodeFunctionSignature('safeTransferFrom(address,address,uint256,bytes)');
* console.log(signature);
* > 0xb88d4fde
* ```
*/
const encodeFunctionSignature = (functionName) => {
	if (typeof functionName !== "string" && !isAbiFunctionFragment(functionName)) throw new AbiError("Invalid parameter value in encodeFunctionSignature");
	let name$1;
	if (functionName && (typeof functionName === "function" || typeof functionName === "object")) name$1 = jsonInterfaceMethodToString(functionName);
	else name$1 = functionName;
	return sha3Raw(name$1).slice(0, 10);
};
/**
* Encodes a function call using its `JSON interface` object and given parameters.
* The JSON interface spec documentation https://docs.soliditylang.org/en/latest/abi-spec.html#json
* @param jsonInterface - The `JSON interface` object of the function.
* @param params - The parameters to encode
* @returns - The ABI encoded function call, which, means the function signature and the parameters passed.
* @example
* ```ts
* const sig = web3.eth.abi.encodeFunctionCall(
*   {
*     name: "myMethod",
*     type: "function",
*     inputs: [
*       {
*         type: "uint256",
*         name: "myNumber",
*       },
*       {
*         type: "string",
*         name: "myString",
*       },
*     ],
*   },
*   ["2345675643", "Hello!%"]
* );
* console.log(sig);
* > 0x24ee0097000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000
*
*
*
* const sig = web3.eth.abi.encodeFunctionCall(
*   {
*     inputs: [
*       {
*         name: "account",
*         type: "address",
*       },
*     ],
*     name: "balanceOf",
*     outputs: [
*       {
*         name: "",
*         type: "uint256",
*       },
*     ],
*     stateMutability: "view",
*     type: "function",
*   },
*   ["0x1234567890123456789012345678901234567890"]
* );
*
* console.log(sig);
* > 0x70a082310000000000000000000000001234567890123456789012345678901234567890
* ```
*/
const encodeFunctionCall = (jsonInterface, params) => {
	var _a$3;
	if (!isAbiFunctionFragment(jsonInterface)) throw new AbiError("Invalid parameter value in encodeFunctionCall");
	return `${encodeFunctionSignature(jsonInterface)}${encodeParameters((_a$3 = jsonInterface.inputs) !== null && _a$3 !== void 0 ? _a$3 : [], params !== null && params !== void 0 ? params : []).replace("0x", "")}`;
};
/**
* Decodes a function call data using its `JSON interface` object.
* The JSON interface spec documentation https://docs.soliditylang.org/en/latest/abi-spec.html#json
* @param functionsAbi - The `JSON interface` object of the function.
* @param data - The data to decode
* @param methodSignatureProvided - (Optional) if `false` do not remove the first 4 bytes that would rather contain the function signature.
* @returns - The data decoded according to the passed ABI.
* @example
* ```ts
* const data =
* 	'0xa413686200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000548656c6c6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010416e6f74686572204772656574696e6700000000000000000000000000000000';
* const params = decodeFunctionCall(
* 	{
* 		inputs: [
* 			{ internalType: 'string', name: '_greeting', type: 'string' },
* 			{ internalType: 'string', name: '_second_greeting', type: 'string' },
* 		],
* 		name: 'setGreeting',
* 		outputs: [
* 			{ internalType: 'bool', name: '', type: 'bool' },
* 			{ internalType: 'string', name: '', type: 'string' },
* 		],
* 		stateMutability: 'nonpayable',
* 		type: 'function',
* 	},
* 	data,
* );

* console.log(params);
* > {
* > 	'0': 'Hello',
* > 	'1': 'Another Greeting',
* > 	__length__: 2,
* > 	__method__: 'setGreeting(string,string)',
* > 	_greeting: 'Hello',
* > 	_second_greeting: 'Another Greeting',
* > }
* ```
*/
const decodeFunctionCall = (functionsAbi, data, methodSignatureProvided = true) => {
	const value = methodSignatureProvided && data && data.length >= 10 && data.startsWith("0x") ? data.slice(10) : data;
	if (!functionsAbi.inputs) throw new Web3ContractError("No inputs found in the ABI");
	const result = decodeParameters([...functionsAbi.inputs], value);
	return Object.assign(Object.assign({}, result), { __method__: jsonInterfaceMethodToString(functionsAbi) });
};
/**
* Decodes a function call data using its `JSON interface` object.
* The JSON interface spec documentation https://docs.soliditylang.org/en/latest/abi-spec.html#json
* @returns - The ABI encoded function call, which, means the function signature and the parameters passed.
* @param functionsAbi - The `JSON interface` object of the function.
* @param returnValues - The data (the function-returned-values) to decoded
* @returns - The function-returned-values decoded according to the passed ABI. If there are multiple values, it returns them as an object as the example below. But if it is a single value, it returns it only for simplicity.
* @example
* ```ts
* // decode a multi-value data of a method
* const data =
* 	'0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000548656c6c6f000000000000000000000000000000000000000000000000000000';
* const decodedResult = decodeFunctionReturn(
* 	{
* 		inputs: [
* 			{ internalType: 'string', name: '_greeting', type: 'string' }
* 		],
* 		name: 'setGreeting',
* 		outputs: [
* 			{ internalType: 'string', name: '', type: 'string' },
* 			{ internalType: 'bool', name: '', type: 'bool' },
* 		],
* 		stateMutability: 'nonpayable',
* 		type: 'function',
* 	},
* 	data,
* );

* console.log(decodedResult);
* > { '0': 'Hello', '1': true, __length__: 2 }
*
*
* // decode a single-value data of a method
* const data =
* 	'0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000548656c6c6f000000000000000000000000000000000000000000000000000000';
* const decodedResult = decodeFunctionReturn(
* 	{
* 		inputs: [
* 			{ internalType: 'string', name: '_greeting', type: 'string' }
* 		],
* 		name: 'setGreeting',
* 		outputs: [{ internalType: 'string', name: '', type: 'string' }],
* 		stateMutability: 'nonpayable',
* 		type: 'function',
* 	},
* 	data,
* );

* console.log(decodedResult);
* > 'Hello'
* ```
*/
const decodeFunctionReturn = (functionsAbi, returnValues) => {
	if (functionsAbi.type === "constructor") return returnValues;
	if (!returnValues) return null;
	const value = returnValues.length >= 2 ? returnValues.slice(2) : returnValues;
	if (!functionsAbi.outputs) return null;
	const result = decodeParameters([...functionsAbi.outputs], value);
	if (result.__length__ === 1) return result[0];
	return result;
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-abi@4.4.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-abi/lib/esm/api/logs_api.js
const STATIC_TYPES = [
	"bool",
	"string",
	"int",
	"uint",
	"address",
	"fixed",
	"ufixed"
];
const _decodeParameter = (inputType, clonedTopic) => inputType === "string" ? clonedTopic : decodeParameter(inputType, clonedTopic);
/**
* Decodes ABI-encoded log data and indexed topic data.
* @param inputs - A {@link AbiParameter} input array. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.
* @param data - The ABI byte code in the `data` field of a log.
* @param topics - An array with the index parameter topics of the log, without the topic[0] if its a non-anonymous event, otherwise with topic[0]
* @returns - The result object containing the decoded parameters.
*
* @example
* ```ts
* let res = web3.eth.abi.decodeLog(
*    [
*      {
*        type: "string",
*        name: "myString",
*      },
*      {
*        type: "uint256",
*        name: "myNumber",
*        indexed: true,
*      },
*      {
*        type: "uint8",
*        name: "mySmallNumber",
*        indexed: true,
*      },
*    ],
*    "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000748656c6c6f252100000000000000000000000000000000000000000000000000",
*    [
*      "0x000000000000000000000000000000000000000000000000000000000000f310",
*      "0x0000000000000000000000000000000000000000000000000000000000000010",
*    ]
*  );
* > {
*  '0': 'Hello%!',
*  '1': 62224n,
*  '2': 16n,
*  __length__: 3,
*  myString: 'Hello%!',
*  myNumber: 62224n,
*  mySmallNumber: 16n
* }
* ```
*/
const decodeLog = (inputs, data, topics) => {
	const clonedTopics = Array.isArray(topics) ? topics : [topics];
	const indexedInputs = {};
	const nonIndexedInputs = {};
	for (const [i, input] of inputs.entries()) if (input.indexed) indexedInputs[i] = input;
	else nonIndexedInputs[i] = input;
	const decodedNonIndexedInputs = data ? decodeParametersWith(Object.values(nonIndexedInputs), data, true) : { __length__: 0 };
	const offset = clonedTopics.length - Object.keys(indexedInputs).length;
	const decodedIndexedInputs = Object.values(indexedInputs).map((input, index) => STATIC_TYPES.some((s) => input.type.startsWith(s)) ? _decodeParameter(input.type, clonedTopics[index + offset]) : clonedTopics[index + offset]);
	const returnValues = { __length__: 0 };
	let indexedCounter = 0;
	let nonIndexedCounter = 0;
	for (const [i, res] of inputs.entries()) {
		returnValues[i] = res.type === "string" ? "" : void 0;
		if (indexedInputs[i]) {
			returnValues[i] = decodedIndexedInputs[indexedCounter];
			indexedCounter += 1;
		}
		if (nonIndexedInputs[i]) {
			returnValues[i] = decodedNonIndexedInputs[String(nonIndexedCounter)];
			nonIndexedCounter += 1;
		}
		if (res.name) returnValues[res.name] = returnValues[i];
		returnValues.__length__ += 1;
	}
	return returnValues;
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-abi@4.4.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-abi/lib/esm/decode_contract_error_data.js
const decodeContractErrorData = (errorsAbi, error) => {
	if (error === null || error === void 0 ? void 0 : error.data) {
		let errorName;
		let errorSignature;
		let errorArgs;
		try {
			const errorSha = error.data.slice(0, 10);
			const errorAbi = errorsAbi.find((abi) => encodeErrorSignature(abi).startsWith(errorSha));
			if (errorAbi === null || errorAbi === void 0 ? void 0 : errorAbi.inputs) {
				errorName = errorAbi.name;
				errorSignature = jsonInterfaceMethodToString(errorAbi);
				errorArgs = decodeParameters([...errorAbi.inputs], error.data.substring(10));
			} else if (error.data.startsWith("0x08c379a0")) {
				errorName = "Error";
				errorSignature = "Error(string)";
				errorArgs = decodeParameters([{
					name: "message",
					type: "string"
				}], error.data.substring(10));
			} else if (error.data.startsWith("0x4e487b71")) {
				errorName = "Panic";
				errorSignature = "Panic(uint256)";
				errorArgs = decodeParameters([{
					name: "code",
					type: "uint256"
				}], error.data.substring(10));
			} else console.error("No matching error abi found for error data", error.data);
		} catch (err) {
			console.error(err);
		}
		if (errorName) error.setDecodedProperties(errorName, errorSignature, errorArgs);
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth@4.11.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth/lib/esm/utils/get_revert_reason.js
var __awaiter$18 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
const parseTransactionError = (error, contractAbi) => {
	var _a$3, _b, _c, _d, _e;
	if (error instanceof ContractExecutionError && error.cause instanceof Eip838ExecutionError) {
		if (contractAbi !== void 0) {
			const errorsAbi = contractAbi.filter((abi) => isAbiErrorFragment(abi));
			decodeContractErrorData(errorsAbi, error.cause);
			return {
				reason: error.cause.message,
				signature: (_a$3 = error.cause.data) === null || _a$3 === void 0 ? void 0 : _a$3.slice(0, 10),
				data: (_b = error.cause.data) === null || _b === void 0 ? void 0 : _b.substring(10),
				customErrorName: error.cause.errorName,
				customErrorDecodedSignature: error.cause.errorSignature,
				customErrorArguments: error.cause.errorArgs
			};
		}
		return {
			reason: error.cause.message,
			signature: (_c = error.cause.data) === null || _c === void 0 ? void 0 : _c.slice(0, 10),
			data: (_d = error.cause.data) === null || _d === void 0 ? void 0 : _d.substring(10)
		};
	}
	if (error instanceof InvalidResponseError && !Array.isArray((_e = error.cause) === null || _e === void 0 ? void 0 : _e.errors) && error.cause !== void 0) return error.cause.message;
	throw error;
};
/**
*	Returns the revert reason generated by the EVM if the transaction were to be executed.
*
* @param web3Context - ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
* @param transaction - A transaction object where all properties are optional except `to`, however it's recommended to include the `from` property or it may default to `0x0000000000000000000000000000000000000000` depending on your node or provider.
* @returns `undefined` if no revert reason was given, a revert reason object, a revert reason string, or an `unknown` error
*/
function getRevertReason(web3Context_1, transaction_1, contractAbi_1) {
	return __awaiter$18(this, arguments, void 0, function* (web3Context, transaction, contractAbi, returnFormat = web3Context.defaultReturnFormat) {
		try {
			yield call(web3Context, transaction, web3Context.defaultBlock, returnFormat);
			return void 0;
		} catch (error) {
			return parseTransactionError(error, contractAbi);
		}
	});
}

//#endregion
//#region ../../node_modules/.pnpm/web3-eth@4.11.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth/lib/esm/utils/get_transaction_error.js
var __awaiter$17 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
function getTransactionError(web3Context, transactionFormatted, transactionReceiptFormatted, receivedError, contractAbi, knownReason) {
	return __awaiter$17(this, void 0, void 0, function* () {
		let _reason = knownReason;
		if (_reason === void 0) {
			if (receivedError !== void 0) _reason = parseTransactionError(receivedError);
			else if (web3Context.handleRevert && transactionFormatted !== void 0) _reason = yield getRevertReason(web3Context, transactionFormatted, contractAbi);
		}
		let error;
		if (_reason === void 0) error = new TransactionRevertedWithoutReasonError(transactionReceiptFormatted);
		else if (typeof _reason === "string") error = new TransactionRevertInstructionError(_reason, void 0, transactionReceiptFormatted);
		else if (_reason.customErrorName !== void 0 && _reason.customErrorDecodedSignature !== void 0 && _reason.customErrorArguments !== void 0) {
			const reasonWithCustomError = _reason;
			error = new TransactionRevertWithCustomError(reasonWithCustomError.reason, reasonWithCustomError.customErrorName, reasonWithCustomError.customErrorDecodedSignature, reasonWithCustomError.customErrorArguments, reasonWithCustomError.signature, transactionReceiptFormatted, reasonWithCustomError.data);
		} else error = new TransactionRevertInstructionError(_reason.reason, _reason.signature, transactionReceiptFormatted, _reason.data);
		return error;
	});
}

//#endregion
//#region ../../node_modules/.pnpm/web3-eth@4.11.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth/lib/esm/utils/decoding.js
const decodeEventABI = (event, data, jsonInterface, returnFormat = DEFAULT_RETURN_FORMAT) => {
	var _a$3, _b, _c, _d, _e, _f;
	let modifiedEvent = Object.assign({}, event);
	const result = format(logSchema, data, returnFormat);
	if ([ALL_EVENTS, "allEvents"].includes(modifiedEvent.name)) {
		const matchedEvent = jsonInterface.find((j) => j.signature === data.topics[0]);
		if (matchedEvent) modifiedEvent = matchedEvent;
		else modifiedEvent = { anonymous: true };
	}
	modifiedEvent.inputs = (_b = (_a$3 = modifiedEvent.inputs) !== null && _a$3 !== void 0 ? _a$3 : event.inputs) !== null && _b !== void 0 ? _b : [];
	if (!modifiedEvent.anonymous) {
		let indexedInputs = 0;
		((_c = modifiedEvent.inputs) !== null && _c !== void 0 ? _c : []).forEach((input) => {
			if (input.indexed) indexedInputs += 1;
		});
		if (indexedInputs > 0 && (data === null || data === void 0 ? void 0 : data.topics) && (data === null || data === void 0 ? void 0 : data.topics.length) !== indexedInputs + 1) modifiedEvent = Object.assign(Object.assign({}, modifiedEvent), {
			anonymous: true,
			inputs: []
		});
	}
	const argTopics = modifiedEvent.anonymous ? data.topics : ((_d = data.topics) !== null && _d !== void 0 ? _d : []).slice(1);
	return Object.assign(Object.assign({}, result), {
		returnValues: decodeLog([...(_e = modifiedEvent.inputs) !== null && _e !== void 0 ? _e : []], data.data, argTopics),
		event: modifiedEvent.name,
		signature: !modifiedEvent.anonymous && ((_f = data.topics) === null || _f === void 0 ? void 0 : _f.length) > 0 && data.topics[0] ? data.topics[0] : void 0,
		raw: {
			data: data.data,
			topics: data.topics
		}
	});
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth@4.11.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth/lib/esm/utils/send_tx_helper.js
var __awaiter$16 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
var SendTxHelper = class {
	constructor({ options, web3Context, promiEvent, returnFormat }) {
		this.options = { checkRevertBeforeSending: true };
		this.options = options;
		this.web3Context = web3Context;
		this.promiEvent = promiEvent;
		this.returnFormat = returnFormat;
	}
	getReceiptWithEvents(data) {
		var _a$3, _b;
		const result = Object.assign({}, data !== null && data !== void 0 ? data : {});
		if (((_a$3 = this.options) === null || _a$3 === void 0 ? void 0 : _a$3.contractAbi) && result.logs && result.logs.length > 0) {
			result.events = {};
			for (const log of result.logs) {
				const event = decodeEventABI(ALL_EVENTS_ABI, log, (_b = this.options) === null || _b === void 0 ? void 0 : _b.contractAbi, this.returnFormat);
				if (event.event) result.events[event.event] = event;
			}
		}
		return result;
	}
	checkRevertBeforeSending(tx) {
		return __awaiter$16(this, void 0, void 0, function* () {
			if (this.options.checkRevertBeforeSending !== false) {
				let formatTx = tx;
				if (isNullish$1(tx.data) && isNullish$1(tx.input) && isNullish$1(tx.gas)) formatTx = Object.assign(Object.assign({}, tx), { gas: 21e3 });
				const reason = yield getRevertReason(this.web3Context, formatTx, this.options.contractAbi);
				if (reason !== void 0) throw yield getTransactionError(this.web3Context, tx, void 0, void 0, this.options.contractAbi, reason);
			}
		});
	}
	emitSending(tx) {
		if (this.promiEvent.listenerCount("sending") > 0) this.promiEvent.emit("sending", tx);
	}
	populateGasPrice(_a$3) {
		return __awaiter$16(this, arguments, void 0, function* ({ transactionFormatted, transaction }) {
			var _b;
			let result = transactionFormatted;
			if (!this.web3Context.config.ignoreGasPricing && !((_b = this.options) === null || _b === void 0 ? void 0 : _b.ignoreGasPricing) && isNullish$1(transactionFormatted.gasPrice) && (isNullish$1(transaction.maxPriorityFeePerGas) || isNullish$1(transaction.maxFeePerGas))) result = Object.assign(Object.assign({}, transactionFormatted), yield getTransactionGasPricing(transactionFormatted, this.web3Context, ETH_DATA_FORMAT));
			return result;
		});
	}
	signAndSend(_a$3) {
		return __awaiter$16(this, arguments, void 0, function* ({ wallet, tx }) {
			if (wallet) {
				const signedTransaction = yield wallet.signTransaction(tx);
				return trySendTransaction(this.web3Context, () => __awaiter$16(this, void 0, void 0, function* () {
					return sendRawTransaction(this.web3Context.requestManager, signedTransaction.rawTransaction);
				}), signedTransaction.transactionHash);
			}
			return trySendTransaction(this.web3Context, () => __awaiter$16(this, void 0, void 0, function* () {
				return sendTransaction$3(this.web3Context.requestManager, tx);
			}));
		});
	}
	emitSent(tx) {
		if (this.promiEvent.listenerCount("sent") > 0) this.promiEvent.emit("sent", tx);
	}
	emitTransactionHash(hash$1) {
		if (this.promiEvent.listenerCount("transactionHash") > 0) this.promiEvent.emit("transactionHash", hash$1);
	}
	emitReceipt(receipt) {
		if (this.promiEvent.listenerCount("receipt") > 0) this.promiEvent.emit("receipt", receipt);
	}
	handleError(_a$3) {
		return __awaiter$16(this, arguments, void 0, function* ({ error, tx }) {
			var _b;
			let _error = error;
			if (_error instanceof ContractExecutionError && this.web3Context.handleRevert) _error = yield getTransactionError(this.web3Context, tx, void 0, void 0, (_b = this.options) === null || _b === void 0 ? void 0 : _b.contractAbi);
			if ((_error instanceof InvalidResponseError || _error instanceof ContractExecutionError || _error instanceof TransactionRevertWithCustomError || _error instanceof TransactionRevertedWithoutReasonError || _error instanceof TransactionRevertInstructionError || _error instanceof TransactionPollingTimeoutError) && this.promiEvent.listenerCount("error") > 0) this.promiEvent.emit("error", _error);
			return _error;
		});
	}
	emitConfirmation({ receipt, transactionHash, customTransactionReceiptSchema }) {
		if (this.promiEvent.listenerCount("confirmation") > 0) watchTransactionForConfirmations(this.web3Context, this.promiEvent, receipt, transactionHash, this.returnFormat, customTransactionReceiptSchema);
	}
	handleResolve(_a$3) {
		return __awaiter$16(this, arguments, void 0, function* ({ receipt, tx }) {
			var _b, _c, _d;
			if ((_b = this.options) === null || _b === void 0 ? void 0 : _b.transactionResolver) return (_c = this.options) === null || _c === void 0 ? void 0 : _c.transactionResolver(receipt);
			if (receipt.status === BigInt(0)) {
				const error = yield getTransactionError(this.web3Context, tx, receipt, void 0, (_d = this.options) === null || _d === void 0 ? void 0 : _d.contractAbi);
				if (this.promiEvent.listenerCount("error") > 0) this.promiEvent.emit("error", error);
				throw error;
			} else return receipt;
		});
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth@4.11.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth/lib/esm/rpc_method_wrappers.js
var __awaiter$15 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
var __rest = void 0 && (void 0).__rest || function(s, e) {
	var t = {};
	for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
	if (s != null && typeof Object.getOwnPropertySymbols === "function") {
		for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
	}
	return t;
};
/**
* View additional documentations here: {@link Web3Eth.isSyncing}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
const isSyncing = (web3Context) => __awaiter$15(void 0, void 0, void 0, function* () {
	return getSyncing(web3Context.requestManager);
});
/**
* View additional documentations here: {@link Web3Eth.getHashRate}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function getHashRate(web3Context, returnFormat) {
	return __awaiter$15(this, void 0, void 0, function* () {
		const response = yield getHashRate$1(web3Context.requestManager);
		return format({ format: "uint" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
	});
}
/**
* View additional documentations here: {@link Web3Eth.getGasPrice}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function getGasPrice(web3Context, returnFormat) {
	return __awaiter$15(this, void 0, void 0, function* () {
		const response = yield getGasPrice$1(web3Context.requestManager);
		return format({ format: "uint" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
	});
}
/**
* View additional documentations here: {@link Web3Eth.getMaxPriorityFeePerGas}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function getMaxPriorityFeePerGas(web3Context, returnFormat) {
	return __awaiter$15(this, void 0, void 0, function* () {
		const response = yield getMaxPriorityFeePerGas$1(web3Context.requestManager);
		return format({ format: "uint" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
	});
}
/**
* View additional documentations here: {@link Web3Eth.getBlockNumber}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function getBlockNumber(web3Context, returnFormat) {
	return __awaiter$15(this, void 0, void 0, function* () {
		const response = yield getBlockNumber$1(web3Context.requestManager);
		return format({ format: "uint" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
	});
}
/**
* View additional documentations here: {@link Web3Eth.getBalance}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function getBalance(web3Context_1, address_1) {
	return __awaiter$15(this, arguments, void 0, function* (web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {
		const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({ format: "uint" }, blockNumber, ETH_DATA_FORMAT);
		const response = yield getBalance$1(web3Context.requestManager, address, blockNumberFormatted);
		return format({ format: "uint" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
	});
}
/**
* View additional documentations here: {@link Web3Eth.getStorageAt}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function getStorageAt(web3Context_1, address_1, storageSlot_1) {
	return __awaiter$15(this, arguments, void 0, function* (web3Context, address, storageSlot, blockNumber = web3Context.defaultBlock, returnFormat) {
		const storageSlotFormatted = format({ format: "uint" }, storageSlot, ETH_DATA_FORMAT);
		const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({ format: "uint" }, blockNumber, ETH_DATA_FORMAT);
		const response = yield getStorageAt$1(web3Context.requestManager, address, storageSlotFormatted, blockNumberFormatted);
		return format({ format: "bytes" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
	});
}
/**
* View additional documentations here: {@link Web3Eth.getCode}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function getCode(web3Context_1, address_1) {
	return __awaiter$15(this, arguments, void 0, function* (web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {
		const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({ format: "uint" }, blockNumber, ETH_DATA_FORMAT);
		const response = yield getCode$1(web3Context.requestManager, address, blockNumberFormatted);
		return format({ format: "bytes" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
	});
}
/**
* View additional documentations here: {@link Web3Eth.getBlock}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function getBlock(web3Context_1) {
	return __awaiter$15(this, arguments, void 0, function* (web3Context, block = web3Context.defaultBlock, hydrated = false, returnFormat) {
		var _a$3;
		let response;
		if (isBytes(block)) {
			const blockHashFormatted = format({ format: "bytes32" }, block, ETH_DATA_FORMAT);
			response = yield getBlockByHash(web3Context.requestManager, blockHashFormatted, hydrated);
		} else {
			const blockNumberFormatted = isBlockTag(block) ? block : format({ format: "uint" }, block, ETH_DATA_FORMAT);
			response = yield getBlockByNumber(web3Context.requestManager, blockNumberFormatted, hydrated);
		}
		const res = format(blockSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
		if (!isNullish$1(res)) {
			const result = Object.assign(Object.assign({}, res), { transactions: (_a$3 = res.transactions) !== null && _a$3 !== void 0 ? _a$3 : [] });
			return result;
		}
		return res;
	});
}
/**
* View additional documentations here: {@link Web3Eth.getBlockTransactionCount}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function getBlockTransactionCount(web3Context_1) {
	return __awaiter$15(this, arguments, void 0, function* (web3Context, block = web3Context.defaultBlock, returnFormat) {
		let response;
		if (isBytes(block)) {
			const blockHashFormatted = format({ format: "bytes32" }, block, ETH_DATA_FORMAT);
			response = yield getBlockTransactionCountByHash(web3Context.requestManager, blockHashFormatted);
		} else {
			const blockNumberFormatted = isBlockTag(block) ? block : format({ format: "uint" }, block, ETH_DATA_FORMAT);
			response = yield getBlockTransactionCountByNumber(web3Context.requestManager, blockNumberFormatted);
		}
		return format({ format: "uint" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
	});
}
/**
* View additional documentations here: {@link Web3Eth.getBlockUncleCount}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function getBlockUncleCount(web3Context_1) {
	return __awaiter$15(this, arguments, void 0, function* (web3Context, block = web3Context.defaultBlock, returnFormat) {
		let response;
		if (isBytes(block)) {
			const blockHashFormatted = format({ format: "bytes32" }, block, ETH_DATA_FORMAT);
			response = yield getUncleCountByBlockHash(web3Context.requestManager, blockHashFormatted);
		} else {
			const blockNumberFormatted = isBlockTag(block) ? block : format({ format: "uint" }, block, ETH_DATA_FORMAT);
			response = yield getUncleCountByBlockNumber(web3Context.requestManager, blockNumberFormatted);
		}
		return format({ format: "uint" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
	});
}
/**
* View additional documentations here: {@link Web3Eth.getUncle}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function getUncle(web3Context_1) {
	return __awaiter$15(this, arguments, void 0, function* (web3Context, block = web3Context.defaultBlock, uncleIndex, returnFormat) {
		const uncleIndexFormatted = format({ format: "uint" }, uncleIndex, ETH_DATA_FORMAT);
		let response;
		if (isBytes(block)) {
			const blockHashFormatted = format({ format: "bytes32" }, block, ETH_DATA_FORMAT);
			response = yield getUncleByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, uncleIndexFormatted);
		} else {
			const blockNumberFormatted = isBlockTag(block) ? block : format({ format: "uint" }, block, ETH_DATA_FORMAT);
			response = yield getUncleByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, uncleIndexFormatted);
		}
		return format(blockSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
	});
}
/**
* View additional documentations here: {@link Web3Eth.getTransaction}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function getTransaction(web3Context_1, transactionHash_1) {
	return __awaiter$15(this, arguments, void 0, function* (web3Context, transactionHash, returnFormat = web3Context.defaultReturnFormat) {
		const transactionHashFormatted = format({ format: "bytes32" }, transactionHash, DEFAULT_RETURN_FORMAT);
		const response = yield getTransactionByHash(web3Context.requestManager, transactionHashFormatted);
		return isNullish$1(response) ? response : formatTransaction(response, returnFormat, {
			transactionSchema: web3Context.config.customTransactionSchema,
			fillInputAndData: true
		});
	});
}
/**
* View additional documentations here: {@link Web3Eth.getPendingTransactions}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function getPendingTransactions(web3Context, returnFormat) {
	return __awaiter$15(this, void 0, void 0, function* () {
		const response = yield getPendingTransactions$1(web3Context.requestManager);
		return response.map((transaction) => formatTransaction(transaction, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat, {
			transactionSchema: web3Context.config.customTransactionSchema,
			fillInputAndData: true
		}));
	});
}
/**
* View additional documentations here: {@link Web3Eth.getTransactionFromBlock}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function getTransactionFromBlock(web3Context_1) {
	return __awaiter$15(this, arguments, void 0, function* (web3Context, block = web3Context.defaultBlock, transactionIndex, returnFormat) {
		const transactionIndexFormatted = format({ format: "uint" }, transactionIndex, ETH_DATA_FORMAT);
		let response;
		if (isBytes(block)) {
			const blockHashFormatted = format({ format: "bytes32" }, block, ETH_DATA_FORMAT);
			response = yield getTransactionByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, transactionIndexFormatted);
		} else {
			const blockNumberFormatted = isBlockTag(block) ? block : format({ format: "uint" }, block, ETH_DATA_FORMAT);
			response = yield getTransactionByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, transactionIndexFormatted);
		}
		return isNullish$1(response) ? response : formatTransaction(response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat, {
			transactionSchema: web3Context.config.customTransactionSchema,
			fillInputAndData: true
		});
	});
}
/**
* View additional documentations here: {@link Web3Eth.getTransactionReceipt}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function getTransactionReceipt(web3Context, transactionHash, returnFormat) {
	return __awaiter$15(this, void 0, void 0, function* () {
		const transactionHashFormatted = format({ format: "bytes32" }, transactionHash, DEFAULT_RETURN_FORMAT);
		let response;
		try {
			response = yield getTransactionReceipt$1(web3Context.requestManager, transactionHashFormatted);
		} catch (error) {
			if (typeof error === "object" && !isNullish$1(error) && "message" in error && error.message === "transaction indexing is in progress") console.warn("Transaction indexing is in progress.");
			else throw error;
		}
		return isNullish$1(response) ? response : format(transactionReceiptSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
	});
}
/**
* View additional documentations here: {@link Web3Eth.getTransactionCount}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function getTransactionCount(web3Context_1, address_1) {
	return __awaiter$15(this, arguments, void 0, function* (web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {
		const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({ format: "uint" }, blockNumber, ETH_DATA_FORMAT);
		const response = yield getTransactionCount$1(web3Context.requestManager, address, blockNumberFormatted);
		return format({ format: "uint" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
	});
}
/**
* View additional documentations here: {@link Web3Eth.sendTransaction}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function sendTransaction$1(web3Context, transactionObj, returnFormat, options = { checkRevertBeforeSending: true }, transactionMiddleware) {
	const promiEvent = new Web3PromiEvent((resolve, reject) => {
		setImmediate(() => {
			__awaiter$15(this, void 0, void 0, function* () {
				const sendTxHelper = new SendTxHelper({
					web3Context,
					promiEvent,
					options,
					returnFormat
				});
				let transaction = Object.assign({}, transactionObj);
				if (!isNullish$1(transactionMiddleware)) transaction = yield transactionMiddleware.processTransaction(transaction);
				let transactionFormatted = formatTransaction(Object.assign(Object.assign({}, transaction), {
					from: getTransactionFromOrToAttr("from", web3Context, transaction),
					to: getTransactionFromOrToAttr("to", web3Context, transaction)
				}), ETH_DATA_FORMAT, { transactionSchema: web3Context.config.customTransactionSchema });
				try {
					transactionFormatted = yield sendTxHelper.populateGasPrice({
						transaction,
						transactionFormatted
					});
					yield sendTxHelper.checkRevertBeforeSending(transactionFormatted);
					sendTxHelper.emitSending(transactionFormatted);
					let wallet;
					if (web3Context.wallet && !isNullish$1(transactionFormatted.from)) wallet = web3Context.wallet.get(transactionFormatted.from);
					const transactionHash = yield sendTxHelper.signAndSend({
						wallet,
						tx: transactionFormatted
					});
					const transactionHashFormatted = format({ format: "bytes32" }, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
					sendTxHelper.emitSent(transactionFormatted);
					sendTxHelper.emitTransactionHash(transactionHashFormatted);
					const transactionReceipt = yield waitForTransactionReceipt(web3Context, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
					const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(format(transactionReceiptSchema, transactionReceipt, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat));
					sendTxHelper.emitReceipt(transactionReceiptFormatted);
					resolve(yield sendTxHelper.handleResolve({
						receipt: transactionReceiptFormatted,
						tx: transactionFormatted
					}));
					sendTxHelper.emitConfirmation({
						receipt: transactionReceiptFormatted,
						transactionHash
					});
				} catch (error) {
					reject(yield sendTxHelper.handleError({
						error,
						tx: transactionFormatted
					}));
				}
			});
		});
	});
	return promiEvent;
}
/**
* View additional documentations here: {@link Web3Eth.sendSignedTransaction}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function sendSignedTransaction(web3Context, signedTransaction, returnFormat, options = { checkRevertBeforeSending: true }) {
	const promiEvent = new Web3PromiEvent((resolve, reject) => {
		setImmediate(() => {
			__awaiter$15(this, void 0, void 0, function* () {
				const sendTxHelper = new SendTxHelper({
					web3Context,
					promiEvent,
					options,
					returnFormat
				});
				const signedTransactionFormattedHex = format({ format: "bytes" }, signedTransaction, ETH_DATA_FORMAT);
				const unSerializedTransaction = TransactionFactory.fromSerializedData(bytesToUint8Array(hexToBytes(signedTransactionFormattedHex)));
				const unSerializedTransactionWithFrom = Object.assign(Object.assign({}, unSerializedTransaction.toJSON()), { from: unSerializedTransaction.getSenderAddress().toString() });
				try {
					const { v, r, s } = unSerializedTransactionWithFrom, txWithoutSigParams = __rest(unSerializedTransactionWithFrom, [
						"v",
						"r",
						"s"
					]);
					yield sendTxHelper.checkRevertBeforeSending(txWithoutSigParams);
					sendTxHelper.emitSending(signedTransactionFormattedHex);
					const transactionHash = yield trySendTransaction(web3Context, () => __awaiter$15(this, void 0, void 0, function* () {
						return sendRawTransaction(web3Context.requestManager, signedTransactionFormattedHex);
					}));
					sendTxHelper.emitSent(signedTransactionFormattedHex);
					const transactionHashFormatted = format({ format: "bytes32" }, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
					sendTxHelper.emitTransactionHash(transactionHashFormatted);
					const transactionReceipt = yield waitForTransactionReceipt(web3Context, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
					const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(format(transactionReceiptSchema, transactionReceipt, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat));
					sendTxHelper.emitReceipt(transactionReceiptFormatted);
					resolve(yield sendTxHelper.handleResolve({
						receipt: transactionReceiptFormatted,
						tx: unSerializedTransactionWithFrom
					}));
					sendTxHelper.emitConfirmation({
						receipt: transactionReceiptFormatted,
						transactionHash
					});
				} catch (error) {
					reject(yield sendTxHelper.handleError({
						error,
						tx: unSerializedTransactionWithFrom
					}));
				}
			});
		});
	});
	return promiEvent;
}
/**
* View additional documentations here: {@link Web3Eth.sign}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function sign$2(web3Context_1, message_1, addressOrIndex_1) {
	return __awaiter$15(this, arguments, void 0, function* (web3Context, message, addressOrIndex, returnFormat = web3Context.defaultReturnFormat) {
		var _a$3;
		const messageFormatted = format({ format: "bytes" }, message, DEFAULT_RETURN_FORMAT);
		if ((_a$3 = web3Context.wallet) === null || _a$3 === void 0 ? void 0 : _a$3.get(addressOrIndex)) {
			const wallet = web3Context.wallet.get(addressOrIndex);
			const signed$1 = wallet.sign(messageFormatted);
			return format(SignatureObjectSchema, signed$1, returnFormat);
		}
		if (typeof addressOrIndex === "number") throw new SignatureError(message, "RPC method \"eth_sign\" does not support index signatures");
		const response = yield sign$4(web3Context.requestManager, addressOrIndex, messageFormatted);
		return format({ format: "bytes" }, response, returnFormat);
	});
}
/**
* View additional documentations here: {@link Web3Eth.signTransaction}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function signTransaction$2(web3Context_1, transaction_1) {
	return __awaiter$15(this, arguments, void 0, function* (web3Context, transaction, returnFormat = web3Context.defaultReturnFormat) {
		const response = yield signTransaction$4(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT, { transactionSchema: web3Context.config.customTransactionSchema }));
		return isString(response) ? decodeSignedTransaction(response, returnFormat, { fillInputAndData: true }) : {
			raw: format({ format: "bytes" }, response.raw, returnFormat),
			tx: formatTransaction(response.tx, returnFormat, {
				transactionSchema: web3Context.config.customTransactionSchema,
				fillInputAndData: true
			})
		};
	});
}
/**
* View additional documentations here: {@link Web3Eth.call}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function call(web3Context_1, transaction_1) {
	return __awaiter$15(this, arguments, void 0, function* (web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat = web3Context.defaultReturnFormat) {
		const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({ format: "uint" }, blockNumber, ETH_DATA_FORMAT);
		const response = yield call$1(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT, { transactionSchema: web3Context.config.customTransactionSchema }), blockNumberFormatted);
		return format({ format: "bytes" }, response, returnFormat);
	});
}
/**
* View additional documentations here: {@link Web3Eth.estimateGas}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function estimateGas(web3Context_1, transaction_1) {
	return __awaiter$15(this, arguments, void 0, function* (web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat) {
		const transactionFormatted = formatTransaction(transaction, ETH_DATA_FORMAT, { transactionSchema: web3Context.config.customTransactionSchema });
		const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({ format: "uint" }, blockNumber, ETH_DATA_FORMAT);
		const response = yield estimateGas$1(web3Context.requestManager, transactionFormatted, blockNumberFormatted);
		return format({ format: "uint" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
	});
}
/**
* View additional documentations here: {@link Web3Eth.getPastLogs}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function getLogs(web3Context, filter, returnFormat) {
	return __awaiter$15(this, void 0, void 0, function* () {
		let { toBlock, fromBlock } = filter;
		if (!isNullish$1(toBlock)) {
			if (typeof toBlock === "number" || typeof toBlock === "bigint") toBlock = numberToHex(toBlock);
		}
		if (!isNullish$1(fromBlock)) {
			if (typeof fromBlock === "number" || typeof fromBlock === "bigint") fromBlock = numberToHex(fromBlock);
		}
		const formattedFilter = Object.assign(Object.assign({}, filter), {
			fromBlock,
			toBlock
		});
		const response = yield getLogs$1(web3Context.requestManager, formattedFilter);
		const result = response.map((res) => {
			if (typeof res === "string") return res;
			return format(logSchema, res, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
		});
		return result;
	});
}
/**
* View additional documentations here: {@link Web3Eth.getChainId}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function getChainId(web3Context, returnFormat) {
	return __awaiter$15(this, void 0, void 0, function* () {
		const response = yield getChainId$1(web3Context.requestManager);
		return format({ format: "uint" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
	});
}
/**
* View additional documentations here: {@link Web3Eth.getProof}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function getProof(web3Context_1, address_1, storageKeys_1) {
	return __awaiter$15(this, arguments, void 0, function* (web3Context, address, storageKeys, blockNumber = web3Context.defaultBlock, returnFormat) {
		const storageKeysFormatted = storageKeys.map((storageKey) => format({ format: "bytes" }, storageKey, ETH_DATA_FORMAT));
		const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({ format: "uint" }, blockNumber, ETH_DATA_FORMAT);
		const response = yield getProof$1(web3Context.requestManager, address, storageKeysFormatted, blockNumberFormatted);
		return format(accountSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
	});
}
/**
* View additional documentations here: {@link Web3Eth.getFeeHistory}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function getFeeHistory(web3Context_1, blockCount_1) {
	return __awaiter$15(this, arguments, void 0, function* (web3Context, blockCount, newestBlock = web3Context.defaultBlock, rewardPercentiles, returnFormat) {
		const blockCountFormatted = format({ format: "uint" }, blockCount, ETH_DATA_FORMAT);
		const newestBlockFormatted = isBlockTag(newestBlock) ? newestBlock : format({ format: "uint" }, newestBlock, ETH_DATA_FORMAT);
		const rewardPercentilesFormatted = format({
			type: "array",
			items: { format: "uint" }
		}, rewardPercentiles, NUMBER_DATA_FORMAT);
		const response = yield getFeeHistory$1(web3Context.requestManager, blockCountFormatted, newestBlockFormatted, rewardPercentilesFormatted);
		return format(feeHistorySchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
	});
}
/**
* View additional documentations here: {@link Web3Eth.createAccessList}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function createAccessList(web3Context_1, transaction_1) {
	return __awaiter$15(this, arguments, void 0, function* (web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat) {
		const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({ format: "uint" }, blockNumber, ETH_DATA_FORMAT);
		const response = yield createAccessList$1(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT, { transactionSchema: web3Context.config.customTransactionSchema }), blockNumberFormatted);
		return format(accessListResultSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
	});
}
/**
* View additional documentations here: {@link Web3Eth.signTypedData}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
*/
function signTypedData(web3Context, address, typedData, useLegacy, returnFormat) {
	return __awaiter$15(this, void 0, void 0, function* () {
		const response = yield signTypedData$1(web3Context.requestManager, address, typedData, useLegacy);
		return format({ format: "bytes" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
	});
}

//#endregion
//#region ../../node_modules/.pnpm/web3-eth@4.11.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth/lib/esm/filtering_rpc_method_wrappers.js
var __awaiter$14 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
/**
* View additional documentations here: {@link Web3Eth.createNewPendingTransactionFilter}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
* @param returnFormat ({@link DataFormat}) Return format
*/
function createNewPendingTransactionFilter(web3Context, returnFormat) {
	return __awaiter$14(this, void 0, void 0, function* () {
		const response = yield newPendingTransactionFilter(web3Context.requestManager);
		return format({ format: "uint" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
	});
}
/**
* View additional documentations here: {@link Web3Eth.createNewFilter}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
* @param filter ({@link FilterParam}) Filter param optional having from-block to-block address or params
* @param returnFormat ({@link DataFormat}) Return format
*/
function createNewFilter(web3Context, filter, returnFormat) {
	return __awaiter$14(this, void 0, void 0, function* () {
		let { toBlock, fromBlock } = filter;
		if (!isNullish$1(toBlock)) {
			if (typeof toBlock === "number" || typeof toBlock === "bigint") toBlock = numberToHex(toBlock);
		}
		if (!isNullish$1(fromBlock)) {
			if (typeof fromBlock === "number" || typeof fromBlock === "bigint") fromBlock = numberToHex(fromBlock);
		}
		const formattedFilter = Object.assign(Object.assign({}, filter), {
			fromBlock,
			toBlock
		});
		const response = yield newFilter(web3Context.requestManager, formattedFilter);
		return format({ format: "uint" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
	});
}
/**
* View additional documentations here: {@link Web3Eth.createNewBlockFilter}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
* @param returnFormat ({@link DataFormat}) Return format
*/
function createNewBlockFilter(web3Context, returnFormat) {
	return __awaiter$14(this, void 0, void 0, function* () {
		const response = yield newBlockFilter(web3Context.requestManager);
		return format({ format: "uint" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
	});
}
/**
* View additional documentations here: {@link Web3Eth.uninstallFilter}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
* @param filterIdentifier ({@link Numbers}) filter id
*/
function uninstallFilter(web3Context, filterIdentifier) {
	return __awaiter$14(this, void 0, void 0, function* () {
		const response = yield uninstallFilter$1(web3Context.requestManager, numberToHex(filterIdentifier));
		return response;
	});
}
/**
* View additional documentations here: {@link Web3Eth.getFilterChanges}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
* @param filterIdentifier ({@link Numbers}) filter id
*/
function getFilterChanges(web3Context, filterIdentifier, returnFormat) {
	return __awaiter$14(this, void 0, void 0, function* () {
		const response = yield getFilterChanges$1(web3Context.requestManager, numberToHex(filterIdentifier));
		const result = response.map((res) => {
			if (typeof res === "string") return res;
			return format(logSchema, res, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
		});
		return result;
	});
}
/**
* View additional documentations here: {@link Web3Eth.getFilterLogs}
* @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
* @param filterIdentifier ({@link Numbers}) filter id
*/
function getFilterLogs(web3Context, filterIdentifier, returnFormat) {
	return __awaiter$14(this, void 0, void 0, function* () {
		const response = yield getFilterLogs$1(web3Context.requestManager, numberToHex(filterIdentifier));
		const result = response.map((res) => {
			if (typeof res === "string") return res;
			return format(logSchema, res, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
		});
		return result;
	});
}

//#endregion
//#region ../../node_modules/.pnpm/web3-eth@4.11.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth/lib/esm/web3_subscriptions.js
/**
* ## subscribe('logs')
* Subscribes to incoming logs, filtered by the given options. If a valid numerical fromBlock options property is set, web3.js will retrieve logs beginning from this point, backfilling the response as necessary.
*
* You can subscribe to logs matching a given filter object, which can take the following parameters:
* - `fromBlock`: (optional, default: 'latest') Integer block number, or `'latest'` for the last mined block or `'pending'`, `'earliest'` for not yet mined transactions.
* - `address`: (optional) Contract address or a list of addresses from which logs should originate.
* - `topics`: (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with `or` options.
*
*/
var LogsSubscription = class extends Web3Subscription {
	_buildSubscriptionParams() {
		return ["logs", this.args];
	}
	formatSubscriptionResult(data) {
		return format(logSchema, data, super.returnFormat);
	}
};
/**
* ## subscribe('pendingTransactions')
* Subscribes to incoming pending transactions.
*
* You can subscribe to pending transactions by calling web3.eth.subscribe('pendingTransactions').
* @example
* ```ts
* (await web3.eth.subscribe('pendingTransactions')).on('data', console.log);
* ```
*/
var NewPendingTransactionsSubscription = class extends Web3Subscription {
	_buildSubscriptionParams() {
		return ["newPendingTransactions"];
	}
	formatSubscriptionResult(data) {
		return format({ format: "string" }, data, super.returnFormat);
	}
};
/**
* ## subscribe('newHeads') ( same as subscribe('newBlockHeaders'))
*
* Subscribes to incoming block headers. This can be used as timer to check for changes on the blockchain.
*
* The structure of a returned block header is {@link BlockHeaderOutput}:
* @example
* ```ts
* (await web3.eth.subscribe('newHeads')).on( // 'newBlockHeaders' would work as well
*  'data',
* console.log
* );
* >{
* parentHash: '0x9e746a1d906b299def98c75b06f714d62dacadd567c7515d76eeaa8c8074c738',
* sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
* miner: '0x0000000000000000000000000000000000000000',
* stateRoot: '0xe0f04b04861ecfa95e82a9310d6a7ef7aef8d7417f5209c182582bfb98a8e307',
* transactionsRoot: '0x31ab4ea571a9e10d3a19aaed07d190595b1dfa34e03960c04293fec565dea536',
* logsBloom: '0x
* difficulty: 2n,
* number: 21n,
* gasLimit: 11738125n,
* gasUsed: 830006n,
* timestamp: 1678797237n,
* extraData: '0xd883010b02846765746888676f312e32302e31856c696e757800000000000000e0a6e93cf40e2e71a72e493272210c3f43738ccc7e7d7b14ffd51833797d896c09117e8dc4fbcbc969bd21b42e5af3e276a911524038c001b2109b63b8e0352601',
* nonce: 0n
* }
* ```
*/
var NewHeadsSubscription = class extends Web3Subscription {
	_buildSubscriptionParams() {
		return ["newHeads"];
	}
	formatSubscriptionResult(data) {
		return format(blockHeaderSchema, data, super.returnFormat);
	}
};
/**
* ## subscribe('syncing')
*
* Subscribe to syncing events. This will return `true` when the node is syncing and when it’s finished syncing will return `false`, for the `changed` event.
* @example
* ```ts
* (await web3.eth.subscribe('syncing')).on('changed', console.log);
* > `true` // when syncing
*
* (await web3.eth.subscribe('syncing')).on('data', console.log);
* > {
*      startingBlock: 0,
*      currentBlock: 0,
*      highestBlock: 0,
*      pulledStates: 0,
*      knownStates: 0
*   }
* ```
*/
var SyncingSubscription = class extends Web3Subscription {
	_buildSubscriptionParams() {
		return ["syncing"];
	}
	_processSubscriptionResult(data) {
		if (typeof data === "boolean") this.emit("changed", data);
		else {
			const mappedData = Object.fromEntries(Object.entries((data === null || data === void 0 ? void 0 : data.status) || data).map(([key, value]) => [key.charAt(0).toLowerCase() + key.substring(1), value]));
			this.emit("changed", data.syncing);
			this.emit("data", format(syncSchema, mappedData, super.returnFormat));
		}
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth@4.11.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth/lib/esm/web3_eth.js
var __awaiter$13 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
const registeredSubscriptions = {
	logs: LogsSubscription,
	newPendingTransactions: NewPendingTransactionsSubscription,
	newHeads: NewHeadsSubscription,
	syncing: SyncingSubscription,
	pendingTransactions: NewPendingTransactionsSubscription,
	newBlockHeaders: NewHeadsSubscription
};
/**
*
* The Web3Eth allows you to interact with an Ethereum blockchain.
*
* For using Web3 Eth functions, first install Web3 package using `npm i web3` or `yarn add web3` based on your package manager usage.
* After that, Web3 Eth functions will be available as mentioned in following snippet.
* ```ts
* import { Web3 } from 'web3';
* const web3 = new Web3('https://mainnet.infura.io/v3/<YOURPROJID>');
*
* const block = await web3.eth.getBlock(0);
*
* ```
*
* For using individual package install `web3-eth` package using `npm i web3-eth` or `yarn add web3-eth` and only import required functions.
* This is more efficient approach for building lightweight applications.
* ```ts
* import { Web3Eth } from 'web3-eth';
*
* const eth = new Web3Eth('https://mainnet.infura.io/v3/<YOURPROJID>');
* const block = await eth.getBlock(0);
*
* ```
*/
var Web3Eth = class Web3Eth extends Web3Context {
	constructor(providerOrContext) {
		if (typeof providerOrContext === "string" || isSupportedProvider(providerOrContext)) {
			super({
				provider: providerOrContext,
				registeredSubscriptions
			});
			return;
		}
		if (providerOrContext.registeredSubscriptions) {
			super(providerOrContext);
			return;
		}
		super(Object.assign(Object.assign({}, providerOrContext), { registeredSubscriptions }));
		this.getFeeData = this.calculateFeeData;
	}
	setTransactionMiddleware(transactionMiddleware) {
		this.transactionMiddleware = transactionMiddleware;
	}
	getTransactionMiddleware() {
		return this.transactionMiddleware;
	}
	/**
	* @returns Returns the ethereum protocol version of the node.
	*
	* ```ts
	* web3.eth.getProtocolVersion().then(console.log);
	* > "63"
	* ```
	*/
	getProtocolVersion() {
		return __awaiter$13(this, void 0, void 0, function* () {
			return getProtocolVersion(this.requestManager);
		});
	}
	/**
	* Checks if the node is currently syncing.
	*
	* @returns Either a {@link SyncingStatusAPI}, or `false`.
	*
	* ```ts
	* web3.eth.isSyncing().then(console.log);
	* > {
	*     startingBlock: 100,
	*     currentBlock: 312,
	*     highestBlock: 512,
	*     knownStates: 234566,
	*     pulledStates: 123455
	* }
	* ```
	*/
	isSyncing() {
		return __awaiter$13(this, void 0, void 0, function* () {
			return getSyncing(this.requestManager);
		});
	}
	/**
	* @returns Returns the coinbase address to which mining rewards will go.
	*
	* ```ts
	* web3.eth.getCoinbase().then(console.log);
	* > "0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe"
	* ```
	*/
	getCoinbase() {
		return __awaiter$13(this, void 0, void 0, function* () {
			return getCoinbase(this.requestManager);
		});
	}
	/**
	* Checks whether the node is mining or not.
	*
	* @returns `true` if the node is mining, otherwise `false`.
	*
	* ```ts
	* web3.eth.isMining().then(console.log);
	* > true
	* ```
	*/
	isMining() {
		return __awaiter$13(this, void 0, void 0, function* () {
			return getMining(this.requestManager);
		});
	}
	/**
	* @deprecated Will be removed in the future, please use {@link Web3Eth.getHashRate} method instead.
	*
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
	* @returns The number of hashes per second that the node is mining with.
	*
	* ```ts
	* web3.eth.getHashrate().then(console.log);
	* > 493736n
	*
	* web3.eth.getHashrate({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);
	* > "0x788a8"
	* ```
	*/
	getHashrate(returnFormat) {
		return __awaiter$13(this, void 0, void 0, function* () {
			var _a$3;
			if (returnFormat === void 0) returnFormat = (_a$3 = this.defaultReturnFormat) !== null && _a$3 !== void 0 ? _a$3 : DEFAULT_RETURN_FORMAT;
			return this.getHashRate(returnFormat);
		});
	}
	/**
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
	* @returns The number of hashes per second that the node is mining with.
	*
	* ```ts
	* web3.eth.getHashRate().then(console.log);
	* > 493736n
	*
	* web3.eth.getHashRate({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);
	* > "0x788a8"
	* ```
	*/
	getHashRate() {
		return __awaiter$13(this, arguments, void 0, function* (returnFormat = this.defaultReturnFormat) {
			return getHashRate(this, returnFormat);
		});
	}
	/**
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
	* @returns The gas price determined by the last few blocks median gas price.
	*
	* ```ts
	* web3.eth.getGasPrice().then(console.log);
	* > 20000000000n
	*
	* web3.eth.getGasPrice({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);
	* > "0x4a817c800"
	* ```
	*/
	getGasPrice() {
		return __awaiter$13(this, arguments, void 0, function* (returnFormat = this.defaultReturnFormat) {
			return getGasPrice(this, returnFormat);
		});
	}
	/**
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
	* @returns the current maxPriorityFeePerGas per gas in wei.
	*
	* ```ts
	* web3.eth.getMaxPriorityFeePerGas().then(console.log);
	* > 20000000000n
	*
	* web3.eth.getMaxPriorityFeePerGas({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);
	* > "0x4a817c800"
	* ```
	*/
	getMaxPriorityFeePerGas() {
		return __awaiter$13(this, arguments, void 0, function* (returnFormat = this.defaultReturnFormat) {
			return getMaxPriorityFeePerGas(this, returnFormat);
		});
	}
	/**
	* Calculates the current Fee Data.
	* If the node supports EIP-1559, then `baseFeePerGas` and `maxPriorityFeePerGas` will be returned along with the calculated `maxFeePerGas` value.
	* `maxFeePerGas` is calculated as `baseFeePerGas` * `baseFeePerGasFactor` + `maxPriorityFeePerGas`.
	* If the node does not support EIP-1559, then the `gasPrice` will be returned and the other values will be undefined.
	*
	* @param baseFeePerGasFactor (optional) The factor to multiply the `baseFeePerGas` with when calculating `maxFeePerGas`, if the node supports EIP-1559. This can be a `bigint` for precise calculation or a `number` to support decimals. The default value is 2 (BigInt).
	* If a `number` is provided, it will be converted to `bigint` with three decimal precision.
	* @param alternativeMaxPriorityFeePerGas (optional) The alternative `maxPriorityFeePerGas` to use when calculating `maxFeePerGas`, if the node supports EIP-1559 but does not support the method `eth_maxPriorityFeePerGas`. The default value is 1 gwei.
	* @returns The current fee data.
	*
	* @example
	* web3.eth.calculateFeeData().then(console.log);
	* > {
	*     gasPrice: 20000000000n,
	*     maxFeePerGas: 60000000000n,
	*     maxPriorityFeePerGas: 20000000000n,
	*     baseFeePerGas: 20000000000n
	* }
	*
	* @example
	* // Using a `bigint` for baseFeePerGasFactor
	* web3.eth.calculateFeeData(1n).then(console.log);
	* > {
	*     gasPrice: 20000000000n,
	*     maxFeePerGas: 40000000000n,
	*     maxPriorityFeePerGas: 20000000000n,
	*     baseFeePerGas: 20000000000n
	* }
	*
	* @example
	* // Using a `number` for baseFeePerGasFactor (with decimals)
	* web3.eth.calculateFeeData(1.5).then(console.log);
	* > {
	*     gasPrice: 20000000000n,
	*     maxFeePerGas: 50000000000n,  // baseFeePerGasFactor is converted to BigInt(1.500)
	*     maxPriorityFeePerGas: 20000000000n,
	*     baseFeePerGas: 20000000000n
	* }
	*
	* @example
	* web3.eth.calculateFeeData(3n).then(console.log);
	* > {
	*     gasPrice: 20000000000n,
	*     maxFeePerGas: 80000000000n,
	*     maxPriorityFeePerGas: 20000000000n,
	*     baseFeePerGas: 20000000000n
	* }
	*/
	calculateFeeData() {
		return __awaiter$13(this, arguments, void 0, function* (baseFeePerGasFactor = BigInt(2), alternativeMaxPriorityFeePerGas = ethUnitMap.Gwei) {
			var _a$3;
			const block = yield this.getBlock(void 0, false);
			const baseFeePerGas = (_a$3 = block === null || block === void 0 ? void 0 : block.baseFeePerGas) !== null && _a$3 !== void 0 ? _a$3 : void 0;
			let gasPrice;
			try {
				gasPrice = yield this.getGasPrice();
			} catch (error) {}
			let maxPriorityFeePerGas;
			try {
				maxPriorityFeePerGas = yield this.getMaxPriorityFeePerGas();
			} catch (error) {}
			let maxFeePerGas;
			if (baseFeePerGas) {
				maxPriorityFeePerGas = maxPriorityFeePerGas !== null && maxPriorityFeePerGas !== void 0 ? maxPriorityFeePerGas : alternativeMaxPriorityFeePerGas;
				let baseFeeMultiplier;
				if (typeof baseFeePerGasFactor === "number") baseFeeMultiplier = BigInt(Math.floor(baseFeePerGasFactor * 1e3)) / BigInt(1e3);
				else baseFeeMultiplier = baseFeePerGasFactor;
				maxFeePerGas = baseFeePerGas * baseFeeMultiplier + maxPriorityFeePerGas;
			}
			return {
				gasPrice,
				maxFeePerGas,
				maxPriorityFeePerGas,
				baseFeePerGas
			};
		});
	}
	/**
	* @returns A list of accounts the node controls (addresses are checksummed).
	*
	* ```ts
	* web3.eth.getAccounts().then(console.log);
	* > ["0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe", "0xDCc6960376d6C6dEa93647383FfB245CfCed97Cf"]
	* ```
	*/
	getAccounts() {
		return __awaiter$13(this, void 0, void 0, function* () {
			var _a$3;
			const hexAddresses = (_a$3 = yield getAccounts$2(this.requestManager)) !== null && _a$3 !== void 0 ? _a$3 : [];
			return hexAddresses.map((address) => toChecksumAddress(address));
		});
	}
	/**
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
	* @returns The current block number.
	*
	* ```ts
	* web3.eth.getBlockNumber().then(console.log);
	* > 2744n
	*
	* web3.eth.getBlockNumber({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);
	* > "0xab8"
	* ```
	*/
	getBlockNumber() {
		return __awaiter$13(this, arguments, void 0, function* (returnFormat = this.defaultReturnFormat) {
			return getBlockNumber(this, returnFormat);
		});
	}
	/**
	* Get the balance of an address at a given block.
	*
	* @param address The address to get the balance of.
	* @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the balance query.
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
	* @returns The current balance for the given address in `wei`.
	*
	* ```ts
	* web3.eth.getBalance("0x407d73d8a49eeb85d32cf465507dd71d507100c1").then(console.log);
	* > 1000000000000n
	*
	* web3.eth.getBalance("0x407d73d8a49eeb85d32cf465507dd71d507100c1").then(console.log);
	* > "0xe8d4a51000"
	* ```
	*/
	getBalance(address_1) {
		return __awaiter$13(this, arguments, void 0, function* (address, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
			return getBalance(this, address, blockNumber, returnFormat);
		});
	}
	/**
	* Get the storage at a specific position of an address.
	*
	* @param address The address to get the storage from.
	* @param storageSlot The index position of the storage.
	* @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the storage query.
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
	* @returns The value in storage at the given position.
	*
	* ```ts
	* web3.eth.getStorageAt("0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234", 0).then(console.log);
	* > "0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234"
	*
	* web3.eth.getStorageAt(
	*      "0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234",
	*      0,
	*      undefined,
	*      { number: FMT_NUMBER.HEX , bytes: FMT_BYTES.UINT8ARRAY }
	* ).then(console.log);
	* > Uint8Array(31) [
	*       3, 52,  86, 115,  33,  35, 255, 255,
	*       35, 66,  52,  45, 209,  35,  66,  67,
	*       67, 36,  35,  66,  52, 253,  35,  79,
	*       210, 63, 212, 242,  61,  66,  52
	*    ]
	* ```
	*/
	getStorageAt(address_1, storageSlot_1) {
		return __awaiter$13(this, arguments, void 0, function* (address, storageSlot, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
			return getStorageAt(this, address, storageSlot, blockNumber, returnFormat);
		});
	}
	/**
	* Get the code at a specific address.
	*
	* @param address The address to get the code from.
	* @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the code query.
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
	* @returns The [data](https://ethereum.org/en/developers/docs/transactions/#the-data-field) at the provided `address`.
	*
	* ```ts
	* web3.eth.getCode("0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234").then(console.log);
	* > "0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056"
	*
	* web3.eth.getCode(
	*      "0x407d73d8a49eeb85d32cf465507dd71d507100c1",
	*      undefined,
	*      { number: FMT_NUMBER.HEX , bytes: FMT_BYTES.UINT8ARRAY }
	* ).then(console.log);
	* > Uint8Array(50) [
	*   96,  1,  96,   0, 128, 53, 129, 26, 129, 129, 129,
	*   20, 96,  18,  87, 131,  1,   0, 91,  96,  27,  96,
	*   1, 53,  96,  37,  86, 91, 128, 96,   0,  82,  96,
	*   32, 96,   0, 242,  91, 96,   0, 96,   7, 130,   2,
	*   144, 80, 145, 144,  80, 86
	* ]
	* ```
	*/
	getCode(address_1) {
		return __awaiter$13(this, arguments, void 0, function* (address, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
			return getCode(this, address, blockNumber, returnFormat);
		});
	}
	/**
	* Retrieves a {@link Block} matching the provided block number, block hash or block tag.
	*
	* @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.
	* @param hydrated If specified `true`, the returned block will contain all transactions as objects. If `false` it will only contain transaction hashes.
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted (does not format transaction objects or hashes).
	* @returns A {@link Block} object matching the provided block number or block hash.
	*
	* ```ts
	* web3.eth.getBlock(0).then(console.log);
	* > {
	*    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',
	*    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
	*    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
	*    miner: '0x0000000000000000000000000000000000000000',
	*    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',
	*    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
	*    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
	*    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	*    difficulty: 1n,
	*    number: 0n,
	*    gasLimit: 30000000n,
	*    gasUsed: 0n,
	*    timestamp: 1658281638n,
	*    extraData: '0x',
	*    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
	*    nonce: 0n,
	*    totalDifficulty: 1n,
	*    baseFeePerGas: 1000000000n,
	*    size: 514n,
	*    transactions: [],
	*    uncles: []
	*  }
	*
	* web3.eth.getBlock(
	*      "0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d",
	*      false,
	*      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
	* ).then(console.log);
	* > {
	*    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',
	*    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
	*    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
	*    miner: '0x0000000000000000000000000000000000000000',
	*    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',
	*    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
	*    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
	*    logsBloom: '0x
	*    difficulty: 1,
	*    number: 0,
	*    gasLimit: 30000000,
	*    gasUsed: 0,
	*    timestamp: 1658281638,
	*    extraData: '0x',
	*    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
	*    nonce: 0,
	*    totalDifficulty: 1,
	*    baseFeePerGas: 1000000000,
	*    size: 514,
	*    transactions: [],
	*    uncles: []
	*  }
	* ```
	*/
	getBlock() {
		return __awaiter$13(this, arguments, void 0, function* (block = this.defaultBlock, hydrated = false, returnFormat = this.defaultReturnFormat) {
			return getBlock(this, block, hydrated, returnFormat);
		});
	}
	/**
	* @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
	* @returns The number of transactions in the provided block.
	*
	* ```ts
	* web3.eth.getBlockTransactionCount("0x407d73d8a49eeb85d32cf465507dd71d507100c1").then(console.log);
	* > 1n
	*
	* web3.eth.getBlockTransactionCount(
	*     "0x407d73d8a49eeb85d32cf465507dd71d507100c1",
	*     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
	* ).then(console.log);
	* > 1
	* ```
	*/
	getBlockTransactionCount() {
		return __awaiter$13(this, arguments, void 0, function* (block = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
			return getBlockTransactionCount(this, block, returnFormat);
		});
	}
	/**
	* @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
	* @returns The number of [uncles](https://ethereum.org/en/glossary/#ommer) in the provided block.
	*
	* ```ts
	* web3.eth.getBlockUncleCount("0x407d73d8a49eeb85d32cf465507dd71d507100c1").then(console.log);
	* > 1n
	*
	* web3.eth.getBlockUncleCount(
	*     "0x407d73d8a49eeb85d32cf465507dd71d507100c1",
	*     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
	* ).then(console.log);
	* > 1
	* ```
	*/
	getBlockUncleCount() {
		return __awaiter$13(this, arguments, void 0, function* (block = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
			return getBlockUncleCount(this, block, returnFormat);
		});
	}
	/**
	*
	* @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.
	* @param uncleIndex The index position of the uncle.
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
	* @returns A blocks [uncle](https://ethereum.org/en/glossary/#ommer) by a given uncle index position.
	*
	* ```ts
	* web3.eth.getUncle(0, 1).then(console.log);
	* > {
	*    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',
	*    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
	*    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
	*    miner: '0x0000000000000000000000000000000000000000',
	*    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',
	*    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
	*    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
	*    logsBloom: '0x
	*    difficulty: 1n,
	*    number: 0n,
	*    gasLimit: 30000000n,
	*    gasUsed: 0n,
	*    timestamp: 1658281638n,
	*    extraData: '0x',
	*    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
	*    nonce: 0n,
	*    totalDifficulty: 1n,
	*    baseFeePerGas: 1000000000n,
	*    size: 514n,
	*    transactions: [],
	*    uncles: []
	*  }
	*
	* web3.eth.getUncle(
	*      "0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d",
	*      1,
	*      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
	* ).then(console.log);
	* > {
	*    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',
	*    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
	*    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
	*    miner: '0x0000000000000000000000000000000000000000',
	*    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',
	*    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
	*    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
	*    logsBloom: '0x
	*    difficulty: 1,
	*    number: 0,
	*    gasLimit: 30000000,
	*    gasUsed: 0,
	*    timestamp: 1658281638,
	*    extraData: '0x',
	*    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
	*    nonce: 0,
	*    totalDifficulty: 1,
	*    baseFeePerGas: 1000000000,
	*    size: 514,
	*    transactions: [],
	*    uncles: []
	*  }
	* ```
	*/
	getUncle() {
		return __awaiter$13(this, arguments, void 0, function* (block = this.defaultBlock, uncleIndex, returnFormat = this.defaultReturnFormat) {
			return getUncle(this, block, uncleIndex, returnFormat);
		});
	}
	/**
	* @param transactionHash The hash of the desired transaction.
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
	* @returns The desired transaction object.
	*
	* ```ts
	* web3.eth.getTransaction('0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc').then(console.log);
	* {
	*    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',
	*    type: 0n,
	*    nonce: 0n,
	*    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',
	*    blockNumber: 1n,
	*    transactionIndex: 0n,
	*    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
	*    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
	*    value: 1n,
	*    gas: 90000n,
	*    gasPrice: 2000000000n,
	*    input: '0x',
	*    v: 2709n,
	*    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',
	*    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'
	*  }
	*
	* web3.eth.getTransaction(
	*     web3.utils.hexToBytes("0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400"),
	*     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
	* ).then(console.log);
	* {
	*    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',
	*    type: 0,
	*    nonce: 0,
	*    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',
	*    blockNumber: 1,
	*    transactionIndex: 0,
	*    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
	*    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
	*    value: 1,
	*    gas: 90000,
	*    gasPrice: 2000000000,
	*    input: '0x',
	*    v: 2709,
	*    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',
	*    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'
	*  }
	* ```
	*/
	getTransaction(transactionHash_1) {
		return __awaiter$13(this, arguments, void 0, function* (transactionHash, returnFormat = this.defaultReturnFormat) {
			const response = yield getTransaction(this, transactionHash, returnFormat);
			if (!response) throw new TransactionNotFound();
			return response;
		});
	}
	/**
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
	* @returns A list of pending transactions.
	*
	* ```ts
	* web3.eth.getPendingTransactions().then(console.log);
	* > [
	*      {
	*          hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',
	*          type: 0n,
	*          nonce: 0n,
	*          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
	*          blockNumber: null,
	*          transactionIndex: 0n,
	*          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
	*          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
	*          value: 1n,
	*          gas: 90000n,
	*          gasPrice: 2000000000n,
	*          input: '0x',
	*          v: 2709n,
	*          r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',
	*          s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'
	*      },
	*      {
	*          hash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',
	*          type: 0n,
	*          nonce: 1n,
	*          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
	*          blockNumber: null,
	*          transactionIndex: 0n,
	*          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
	*          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
	*          value: 1n,
	*          gas: 90000n,
	*          gasPrice: 2000000000n,
	*          input: '0x',
	*          v: 2710n,
	*          r: '0x55ac19fade21db035a1b7ea0a8d49e265e05dbb926e75f273f836ad67ce5c96a',
	*          s: '0x6550036a7c3fd426d5c3d35d96a7075cd673957620b7889846a980d2d017ec08'
	*      }
	*   ]
	*
	* * web3.eth.getPendingTransactions({ number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);
	* > [
	*      {
	*          hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',
	*          type: 0,
	*          nonce: 0,
	*          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
	*          blockNumber: null,
	*          transactionIndex: 0,
	*          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
	*          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
	*          value: 1,
	*          gas: 90000,
	*          gasPrice: 2000000000,
	*          input: '0x',
	*          v: 2709,
	*          r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',
	*          s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'
	*      },
	*      {
	*          hash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',
	*          type: 0,
	*          nonce: 1,
	*          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
	*          blockNumber: null,
	*          transactionIndex: 0,
	*          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
	*          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
	*          value: 1,
	*          gas: 90000,
	*          gasPrice: 2000000000,
	*          input: '0x',
	*          v: 2710,
	*          r: '0x55ac19fade21db035a1b7ea0a8d49e265e05dbb926e75f273f836ad67ce5c96a',
	*          s: '0x6550036a7c3fd426d5c3d35d96a7075cd673957620b7889846a980d2d017ec08'
	*      }
	*   ]
	* ```
	*/
	getPendingTransactions() {
		return __awaiter$13(this, arguments, void 0, function* (returnFormat = this.defaultReturnFormat) {
			return getPendingTransactions(this, returnFormat);
		});
	}
	/**
	* @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.
	* @param transactionIndex The index position of the transaction.
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
	* @returns The desired transaction object.
	*
	* ```ts
	* web3.eth.getTransactionFromBlock('0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00', 0).then(console.log);
	* {
	*    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',
	*    type: 0n,
	*    nonce: 0n,
	*    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',
	*    blockNumber: 1n,
	*    transactionIndex: 0n,
	*    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
	*    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
	*    value: 1n,
	*    gas: 90000n,
	*    gasPrice: 2000000000n,
	*    input: '0x',
	*    v: 2709n,
	*    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',
	*    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'
	*  }
	*
	* web3.eth.getTransactionFromBlock(
	*     hexToBytes("0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400"),
	*     0,
	*     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
	* ).then(console.log);
	* {
	*    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',
	*    type: 0,
	*    nonce: 0,
	*    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',
	*    blockNumber: 1,
	*    transactionIndex: 0,
	*    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
	*    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
	*    value: 1,
	*    gas: 90000,
	*    gasPrice: 2000000000,
	*    input: '0x',
	*    v: 2709,
	*    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',
	*    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'
	*  }
	* ```
	*/
	getTransactionFromBlock() {
		return __awaiter$13(this, arguments, void 0, function* (block = this.defaultBlock, transactionIndex, returnFormat = this.defaultReturnFormat) {
			return getTransactionFromBlock(this, block, transactionIndex, returnFormat);
		});
	}
	/**
	* @param transactionHash Hash of the transaction to retrieve the receipt for.
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
	* @returns The desired {@link TransactionReceipt} object.
	*
	* ```ts
	* web3.eth.getTransactionReceipt("0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f").then(console.log);
	* > {
	*      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',
	*      transactionIndex: 0n,
	*      blockNumber: 2n,
	*      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',
	*      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
	*      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
	*      cumulativeGasUsed: 21000n,
	*      gasUsed: 21000n,
	*      logs: [],
	*      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
	*      status: 1n,
	*      effectiveGasPrice: 2000000000n,
	*      type: 0n
	*  }
	*
	* web3.eth.getTransactionReceipt(
	*      "0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f",
	*      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
	* ).then(console.log);
	* > {
	*      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',
	*      transactionIndex: 0,
	*      blockNumber: 2,
	*      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',
	*      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
	*      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
	*      cumulativeGasUsed: 21000,
	*      gasUsed: 21000,
	*      logs: [],
	*      logsBloom: '0x
	*      status: 1,
	*      effectiveGasPrice: 2000000000,
	*      type: 0n
	*  }
	* ```
	*/
	getTransactionReceipt(transactionHash_1) {
		return __awaiter$13(this, arguments, void 0, function* (transactionHash, returnFormat = this.defaultReturnFormat) {
			const response = yield getTransactionReceipt(this, transactionHash, returnFormat);
			if (!response) throw new TransactionNotFound();
			return response;
		});
	}
	/**
	* @param address The address to get the number of transactions for.
	* @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the query.
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
	* @returns The number of transactions sent from the provided address.
	*
	* ```ts
	* web3.eth.getTransactionCount("0x407d73d8a49eeb85d32cf465507dd71d507100c1").then(console.log);
	* > 1n
	*
	* web3.eth.getTransactionCount(
	*     "0x407d73d8a49eeb85d32cf465507dd71d507100c1",
	*     undefined,
	*     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
	* ).then(console.log);
	* > 1
	* ```
	*/
	getTransactionCount(address_1) {
		return __awaiter$13(this, arguments, void 0, function* (address, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
			return getTransactionCount(this, address, blockNumber, returnFormat);
		});
	}
	/**
	* @param transaction The {@link Transaction}, {@link TransactionWithFromLocalWalletIndex}, {@link TransactionWithToLocalWalletIndex} or {@link TransactionWithFromAndToLocalWalletIndex} to send. __Note:__ In the `to` and `from` fields when hex strings are used, it is assumed they are addresses, for any other form (number, string number, etc.) it is assumed they are wallet indexes.
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
	* @param options A configuration object used to change the behavior of the `sendTransaction` method.
	* @returns If `await`ed or `.then`d (i.e. the promise resolves), the transaction hash is returned.
	* ```ts
	* const transaction = {
	*   from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',
	*   to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',
	*   value: '0x1'
	* }
	*
	* const transactionReceipt = await web3.eth.sendTransaction(transaction);
	* console.log(transactionReceipt);
	* > {
	*      blockHash: '0x39cee0da843293ae3136cee0de4c0803745868b6e72b7cd05fba395bffa0ee85',
	*      blockNumber: 6659547n,
	*      cumulativeGasUsed: 1029036n,
	*      effectiveGasPrice: 6765796845n,
	*      from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',
	*      gasUsed: 21000n,
	*      logs: [],
	*      logsBloom: '0x
	*      status: 1n,
	*      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
	*      transactionHash: '0x619de868dd73c07bd0c096adcd405c93c1e924fdf741e684a127a52324c28bb9',
	*      transactionIndex: 16n,
	*      type: 2n
	*}
	*
	* web3.eth.sendTransaction(transaction).then(console.log);
	* > {
	*      blockHash: '0x39cee0da843293ae3136cee0de4c0803745868b6e72b7cd05fba395bffa0ee85',
	*      blockNumber: 6659547n,
	*      cumulativeGasUsed: 1029036n,
	*      effectiveGasPrice: 6765796845n,
	*      from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',
	*      gasUsed: 21000n,
	*      logs: [],
	*      logsBloom: '0x
	*      status: 1n,
	*      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
	*      transactionHash: '0x619de868dd73c07bd0c096adcd405c93c1e924fdf741e684a127a52324c28bb9',
	*      transactionIndex: 16n,
	*      type: 2n
	*}
	*
	* web3.eth.sendTransaction(transaction).catch(console.log);
	* > <Some TransactionError>
	*
	* // Example using options.ignoreGasPricing = true
	* web3.eth.sendTransaction(transaction, undefined, { ignoreGasPricing: true }).then(console.log);
	* > {
	*      blockHash: '0x39cee0da843293ae3136cee0de4c0803745868b6e72b7cd05fba395bffa0ee85',
	*      blockNumber: 6659547n,
	*      cumulativeGasUsed: 1029036n,
	*      effectiveGasPrice: 6765796845n,
	*      from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',
	*      gasUsed: 21000n,
	*      logs: [],
	*      logsBloom: '0x
	*      status: 1n,
	*      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
	*      transactionHash: '0x619de868dd73c07bd0c096adcd405c93c1e924fdf741e684a127a52324c28bb9',
	*      transactionIndex: 16n,
	*      type: 2n
	*}
	* ```
	*
	*
	* Otherwise, a {@link Web3PromiEvent} is returned which has several events than can be listened to using the `.on` syntax, such as:
	* - `sending`
	* ```ts
	* web3.eth.sendTransaction(transaction).on('sending', transactionToBeSent => console.log(transactionToBeSent));
	* > {
	*      from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',
	*      to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',
	*      value: '0x1',
	*      gasPrice: '0x77359400',
	*      maxPriorityFeePerGas: undefined,
	*      maxFeePerGas: undefined
	* }
	* ```
	* - `sent`
	* ```ts
	* web3.eth.sendTransaction(transaction).on('sent', sentTransaction => console.log(sentTransaction));
	* > {
	*      from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',
	*      to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',
	*      value: '0x1',
	*      gasPrice: '0x77359400',
	*      maxPriorityFeePerGas: undefined,
	*      maxFeePerGas: undefined
	* }
	* ```
	* - `transactionHash`
	* ```ts
	* web3.eth.sendTransaction(transaction).on('transactionHash', transactionHash => console.log(transactionHash));
	* > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f
	* ```
	* - `receipt`
	* ```ts
	* web3.eth.sendTransaction(transaction).on('receipt', receipt => console.log(receipt));
	* > {
	*      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',
	*      transactionIndex: 0n,
	*      blockNumber: 2n,
	*      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',
	*      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
	*      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
	*      cumulativeGasUsed: 21000n,
	*      gasUsed: 21000n,
	*      logs: [],
	*      logsBloom: '0x
	*      status: 1n,
	*      effectiveGasPrice: 2000000000n,
	*      type: 0n
	* }
	* ```
	* - `confirmation`
	* ```ts
	* web3.eth.sendTransaction(transaction).on('confirmation', confirmation => console.log(confirmation));
	* > {
	*      confirmations: 1n,
	*      receipt: {
	*         transactionHash: '0xb4a3a35ae0f3e77ef0ff7be42010d948d011b21a4e341072ee18717b67e99ab8',
	*         transactionIndex: 0n,
	*         blockNumber: 5n,
	*         blockHash: '0xb57fbe6f145cefd86a305a9a024a4351d15d4d39607d7af53d69a319bc3b5548',
	*         from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
	*         to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
	*         cumulativeGasUsed: 21000n,
	*         gasUsed: 21000n,
	*         logs: [],
	*         logsBloom: '0x
	*         status: 1n,
	*         effectiveGasPrice: 2000000000n,
	*         type: 0n
	*      },
	*      latestBlockHash: '0xb57fbe6f145cefd86a305a9a024a4351d15d4d39607d7af53d69a319bc3b5548'
	* }
	* ```
	* - `error`
	* ```ts
	* web3.eth.sendTransaction(transaction).on('error', error => console.log);
	* > <Some TransactionError>
	* ```
	*/
	sendTransaction(transaction, returnFormat = this.defaultReturnFormat, options) {
		return sendTransaction$1(this, transaction, returnFormat, options, this.transactionMiddleware);
	}
	/**
	* @param transaction Signed transaction in one of the valid {@link Bytes} format.
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
	* @param options A configuration object used to change the behavior of the method
	* @returns If `await`ed or `.then`d (i.e. the promise resolves), the transaction hash is returned.
	* ```ts
	* const signedTransaction = "0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f"
	*
	* const transactionHash = await web3.eth.sendSignedTransaction(signedTransaction);
	* console.log(transactionHash);
	* > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700
	*
	* web3.eth.sendSignedTransaction(signedTransaction).then(console.log);
	* > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700
	*
	* web3.eth.sendSignedTransaction(signedTransaction).catch(console.log);
	* > <Some TransactionError>
	* ```
	*
	*
	* Otherwise, a {@link Web3PromiEvent} is returned which has several events than can be listened to using the `.on` syntax, such as:
	* - `sending`
	* ```ts
	* web3.eth.sendSignedTransaction(signedTransaction).on('sending', transactionToBeSent => console.log(transactionToBeSent));
	* > "0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f"
	* ```
	* - `sent`
	* ```ts
	* web3.eth.sendSignedTransaction(signedTransaction).on('sent', sentTransaction => console.log(sentTransaction));
	* > "0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f"
	* ```
	* - `transactionHash`
	* ```ts
	* web3.eth.sendSignedTransaction(signedTransaction).on('transactionHash', transactionHash => console.log(transactionHash));
	* > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700
	* ```
	* - `receipt`
	* ```ts
	* web3.eth.sendSignedTransaction(signedTransaction).on('receipt', receipt => console.log(receipt));
	* > {
	*      blockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081',
	*      blockNumber: 1n,
	*      cumulativeGasUsed: 21000n,
	*      effectiveGasPrice: 1000000001n,
	*      from: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',
	*      gasUsed: 21000n,
	*      logs: [],
	*      logsBloom: '0x
	*      status: 1n,
	*      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',
	*      transactionHash: '0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700',
	*      transactionIndex: 0n,
	*      type: 0n
	* }
	* ```
	* - `confirmation`
	* ```ts
	* web3.eth.sendSignedTransaction(signedTransaction).on('confirmation', confirmation => console.log(confirmation));
	* > {
	*     confirmations: 1n,
	*     receipt: {
	*          blockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081',
	*          blockNumber: 1n,
	*          cumulativeGasUsed: 21000n,
	*          effectiveGasPrice: 1000000001n,
	*          from: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',
	*          gasUsed: 21000n,
	*          logs: [],
	*          logsBloom: '0x
	*          status: 1n,
	*          to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',
	*          transactionHash: '0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700',
	*          transactionIndex: 0n,
	*          type: 0n
	*     },
	*     latestBlockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081'
	* }
	* ```
	* - `error`
	* ```ts
	* web3.eth.sendSignedTransaction(signedTransaction).on('error', error => console.log(error));
	* > <Some TransactionError>
	* ```
	*/
	sendSignedTransaction(transaction, returnFormat = this.defaultReturnFormat, options) {
		return sendSignedTransaction(this, transaction, returnFormat, options);
	}
	/**
	* @param message Data to sign in one of the valid {@link Bytes} format.
	* @param address Address to sign data with, can be an address or the index of a local wallet.
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
	* @returns The signed `message`.
	*
	* ```ts
	* // Using an unlocked account managed by connected RPC client
	* web3.eth.sign("0x48656c6c6f20776f726c64", "0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe").then(console.log);
	* > "0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400"
	*
	* // Using an unlocked account managed by connected RPC client
	* web3.eth.sign("0x48656c6c6f20776f726c64", "0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe", { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.UINT8ARRAY }).then(console.log);
	* > Uint8Array(65) [
	*    48, 117,  94, 214,  83, 150, 250, 207, 134, 197,  62,
	*    98,  23, 197,  43,  77, 174, 190, 114, 170,  73,  65,
	*   216, 150,  53,  64, 157, 228, 201, 199, 249,  70, 109,
	*    78, 154, 174, 199, 151, 127,   5, 233,  35, 136, 155,
	*    51, 192, 208, 221,  39, 215,  34, 107, 110, 111,  86,
	*   206, 115, 116, 101, 197, 207, 208,  75, 228,   0
	* ]
	* ```
	*
	* // Using an indexed account managed by local Web3 wallet
	* web3.eth.sign("0x48656c6c6f20776f726c64", 0).then(console.log);
	* > "0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400"
	*/
	sign(message_1, addressOrIndex_1) {
		return __awaiter$13(this, arguments, void 0, function* (message, addressOrIndex, returnFormat = this.defaultReturnFormat) {
			return sign$2(this, message, addressOrIndex, returnFormat);
		});
	}
	/**
	* @param transaction The transaction object to sign.
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
	* @returns {@link SignedTransactionInfoAPI}, an object containing the [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/#top) encoded signed transaction (accessed via the `raw` property) and the signed transaction object (accessed via the `tx` property).
	*
	* ```ts
	* const transaction = {
	*      from: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',
	*      to: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',
	*      value: '0x1',
	*      gas: '21000',
	*      gasPrice: await web3Eth.getGasPrice(),
	*      nonce: '0x1',
	*      type: '0x0'
	* }
	*
	* web3.eth.signTransaction(transaction).then(console.log);
	* > {
	*   raw: '0xf86501843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a96a0adb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679a027d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',
	*   tx: {
	*      type: 0n,
	*      nonce: 1n,
	*      gasPrice: 1000000001n,
	*      gas: 21000n,
	*      value: 1n,
	*      v: 2710n,
	*      r: '0xadb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679',
	*      s: '0x27d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',
	*      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',
	*      data: '0x'
	*   }
	* }
	*
	* web3.eth.signTransaction(transaction, { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);
	* > {
	*   raw: '0xf86501843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a96a0adb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679a027d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',
	*   tx: {
	*      type: 0,
	*      nonce: 1,
	*      gasPrice: 1000000001,
	*      gas: 21000,
	*      value: 1,
	*      v: 2710,
	*      r: '0xadb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679',
	*      s: '0x27d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',
	*      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',
	*      data: '0x'
	*   }
	* }
	* ```
	*/
	signTransaction(transaction_1) {
		return __awaiter$13(this, arguments, void 0, function* (transaction, returnFormat = this.defaultReturnFormat) {
			return signTransaction$2(this, transaction, returnFormat);
		});
	}
	/**
	* Executes a message call within the EVM without creating a transaction.
	* It does not publish anything to the blockchain and does not consume any gas.
	*
	* @param transaction - A transaction object where all properties are optional except `to`, however it's recommended to include the `from` property or it may default to `0x0000000000000000000000000000000000000000` depending on your node or provider.
	* @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the transaction.
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
	* @returns The returned data of the call, e.g. a smart contract function's return value.
	*/
	call(transaction_1) {
		return __awaiter$13(this, arguments, void 0, function* (transaction, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
			return call(this, transaction, blockNumber, returnFormat);
		});
	}
	/**
	* Simulates the transaction within the EVM to estimate the amount of gas to be used by the transaction.
	* The transaction will not be added to the blockchain, and actual gas usage can vary when interacting
	* with a contract as a result of updating the contract's state.
	*
	* @param transaction The {@link Transaction} object to estimate the gas for.
	* @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the gas estimation.
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
	* @returns The used gas for the simulated transaction execution.
	*
	* ```ts
	* const transaction = {
	*       from: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',
	*       to: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',
	*       value: '0x1',
	*       nonce: '0x1',
	*       type: '0x0'
	* }
	*
	* web3.eth.estimateGas(transaction).then(console.log);
	* > 21000n
	*
	* web3.eth.estimateGas(transaction, { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);
	* > 21000
	* ```
	*/
	estimateGas(transaction_1) {
		return __awaiter$13(this, arguments, void 0, function* (transaction, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
			return estimateGas(this, transaction, blockNumber, returnFormat);
		});
	}
	/**
	* Gets past logs, matching the provided `filter`.
	*
	* @param filter A {@link Filter} object containing the properties for the desired logs.
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
	* @returns {@link FilterResultsAPI}, an array of {@link Log} objects.
	*
	* ```ts
	* web3.eth.getPastLogs({
	*      address: "0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe",
	*      topics: ["0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234"]
	*  }).then(console.log);
	* > [{
	*       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
	*       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']
	*       logIndex: 0n,
	*       transactionIndex: 0n,
	*       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
	*       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',
	*       blockNumber: 1234n,
	*       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'
	*   },
	*   {...}]
	*
	* web3.eth.getPastLogs(
	*     {
	*       address: "0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe",
	*       topics: ["0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234"]
	*     },
	*     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
	* ).then(console.log);
	* > [{
	*       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
	*       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']
	*       logIndex: 0,
	*       transactionIndex: 0,
	*       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
	*       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',
	*       blockNumber: 1234,
	*       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'
	*   },
	*   {...}]
	* ```
	*/
	getPastLogs(filter_1) {
		return __awaiter$13(this, arguments, void 0, function* (filter, returnFormat = this.defaultReturnFormat) {
			return getLogs(this, filter, returnFormat);
		});
	}
	/**
	* Gets work for miners to mine on. Returns the hash of the current block, the seedHash, and the boundary condition to be met ('target').
	*
	* @returns The mining work as an array of strings with the following structure:
	*
	* String 32 Bytes - at index 0: current block header pow-hash
	* String 32 Bytes - at index 1: the seed hash used for the DAG.
	* String 32 Bytes - at index 2: the boundary condition ('target'), 2^256 / difficulty.
	*
	* ```ts
	* web3.eth.getWork().then(console.log);
	* > [
	*     "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef",
	*     "0x5EED00000000000000000000000000005EED0000000000000000000000000000",
	*     "0xd1ff1c01710000000000000000000000d1ff1c01710000000000000000000000"
	* ]
	* ```
	*/
	getWork() {
		return __awaiter$13(this, void 0, void 0, function* () {
			return getWork(this.requestManager);
		});
	}
	/**
	* Used for submitting a proof-of-work solution.
	*
	* @param nonce The nonce found (8 bytes).
	* @param hash  The header’s pow-hash (32 bytes).
	* @param digest The mix digest (32 bytes).
	* @returns Returns `true` if the provided solution is valid, otherwise `false`.
	*
	* ```ts
	* web3.eth.submitWork([
	*     "0x0000000000000001",
	*     "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef",
	*     "0xD1FE5700000000000000000000000000D1FE5700000000000000000000000000"
	* ]).then(console.log);
	* > true
	* ```
	*/
	submitWork(nonce, hash$1, digest) {
		return __awaiter$13(this, void 0, void 0, function* () {
			return submitWork(this.requestManager, nonce, hash$1, digest);
		});
	}
	/**
	* This method will request/enable the accounts from the current environment and for supporting [EIP 1102](https://eips.ethereum.org/EIPS/eip-1102)
	* This method will only work if you’re using the injected provider from a application like Metamask, Status or TrustWallet.
	* It doesn’t work if you’re connected to a node with a default Web3.js provider (WebsocketProvider, HttpProvider and IpcProvider).
	* For more information about the behavior of this method please read [EIP-1102](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1102.md): Opt-in account exposure.
	*
	* @returns An array of enabled accounts.
	*
	* ```ts
	* web3.eth.requestAccounts().then(console.log);
	* > ['0aae0B295369a9FD31d5F28D9Ec85E40f4cb692BAf', '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe']
	* ```
	*/
	requestAccounts() {
		return __awaiter$13(this, void 0, void 0, function* () {
			return requestAccounts(this.requestManager);
		});
	}
	/**
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
	* @returns The chain ID of the current connected node as described in the [EIP-695](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-695.md).
	*
	* ```ts
	* web3.eth.getChainId().then(console.log);
	* > 61n
	*
	* web3.eth.getChainId({ number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);
	* > 61
	* ```
	*/
	getChainId() {
		return __awaiter$13(this, arguments, void 0, function* (returnFormat = this.defaultReturnFormat) {
			return getChainId(this, returnFormat);
		});
	}
	/**
	* @returns The current client version.
	*
	* ```ts
	* web3.eth.getNodeInfo().then(console.log);
	* > "Mist/v0.9.3/darwin/go1.4.1"
	* ```
	*/
	getNodeInfo() {
		return __awaiter$13(this, void 0, void 0, function* () {
			return getNodeInfo(this.requestManager);
		});
	}
	/**
	* @param address The Address of the account or contract.
	* @param storageKeys Array of storage-keys which should be proofed and included. See {@link web3.getStorageAt}.
	* @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the gas estimation.
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
	* @returns The account and storage-values of the specified account including the Merkle-proof as described in [EIP-1186](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1186.md).
	*
	* ```ts
	* web3.eth.getProof(
	*     "0x1234567890123456789012345678901234567890",
	*     ["0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001"],
	*     "latest"
	* ).then(console.log);
	* > {
	*     "address": "0x1234567890123456789012345678901234567890",
	*     "accountProof": [
	*         "0xf90211a090dcaf88c40c7bbc95a912cbdde67c175767b31173df9ee4b0d733bfdd511c43a0babe369f6b12092f49181ae04ca173fb68d1a5456f18d20fa32cba73954052bda0473ecf8a7e36a829e75039a3b055e51b8332cbf03324ab4af2066bbd6fbf0021a0bbda34753d7aa6c38e603f360244e8f59611921d9e1f128372fec0d586d4f9e0a04e44caecff45c9891f74f6a2156735886eedf6f1a733628ebc802ec79d844648a0a5f3f2f7542148c973977c8a1e154c4300fec92f755f7846f1b734d3ab1d90e7a0e823850f50bf72baae9d1733a36a444ab65d0a6faaba404f0583ce0ca4dad92da0f7a00cbe7d4b30b11faea3ae61b7f1f2b315b61d9f6bd68bfe587ad0eeceb721a07117ef9fc932f1a88e908eaead8565c19b5645dc9e5b1b6e841c5edbdfd71681a069eb2de283f32c11f859d7bcf93da23990d3e662935ed4d6b39ce3673ec84472a0203d26456312bbc4da5cd293b75b840fc5045e493d6f904d180823ec22bfed8ea09287b5c21f2254af4e64fca76acc5cd87399c7f1ede818db4326c98ce2dc2208a06fc2d754e304c48ce6a517753c62b1a9c1d5925b89707486d7fc08919e0a94eca07b1c54f15e299bd58bdfef9741538c7828b5d7d11a489f9c20d052b3471df475a051f9dd3739a927c89e357580a4c97b40234aa01ed3d5e0390dc982a7975880a0a089d613f26159af43616fd9455bb461f4869bfede26f2130835ed067a8b967bfb80",
	*         "0xf90211a0395d87a95873cd98c21cf1df9421af03f7247880a2554e20738eec2c7507a494a0bcf6546339a1e7e14eb8fb572a968d217d2a0d1f3bc4257b22ef5333e9e4433ca012ae12498af8b2752c99efce07f3feef8ec910493be749acd63822c3558e6671a0dbf51303afdc36fc0c2d68a9bb05dab4f4917e7531e4a37ab0a153472d1b86e2a0ae90b50f067d9a2244e3d975233c0a0558c39ee152969f6678790abf773a9621a01d65cd682cc1be7c5e38d8da5c942e0a73eeaef10f387340a40a106699d494c3a06163b53d956c55544390c13634ea9aa75309f4fd866f312586942daf0f60fb37a058a52c1e858b1382a8893eb9c1f111f266eb9e21e6137aff0dddea243a567000a037b4b100761e02de63ea5f1fcfcf43e81a372dafb4419d126342136d329b7a7ba032472415864b08f808ba4374092003c8d7c40a9f7f9fe9cc8291f62538e1cc14a074e238ff5ec96b810364515551344100138916594d6af966170ff326a092fab0a0d31ac4eef14a79845200a496662e92186ca8b55e29ed0f9f59dbc6b521b116fea090607784fe738458b63c1942bba7c0321ae77e18df4961b2bc66727ea996464ea078f757653c1b63f72aff3dcc3f2a2e4c8cb4a9d36d1117c742833c84e20de994a0f78407de07f4b4cb4f899dfb95eedeb4049aeb5fc1635d65cf2f2f4dfd25d1d7a0862037513ba9d45354dd3e36264aceb2b862ac79d2050f14c95657e43a51b85c80",
	*         "0xf90171a04ad705ea7bf04339fa36b124fa221379bd5a38ffe9a6112cb2d94be3a437b879a08e45b5f72e8149c01efcb71429841d6a8879d4bbe27335604a5bff8dfdf85dcea00313d9b2f7c03733d6549ea3b810e5262ed844ea12f70993d87d3e0f04e3979ea0b59e3cdd6750fa8b15164612a5cb6567cdfb386d4e0137fccee5f35ab55d0efda0fe6db56e42f2057a071c980a778d9a0b61038f269dd74a0e90155b3f40f14364a08538587f2378a0849f9608942cf481da4120c360f8391bbcc225d811823c6432a026eac94e755534e16f9552e73025d6d9c30d1d7682a4cb5bd7741ddabfd48c50a041557da9a74ca68da793e743e81e2029b2835e1cc16e9e25bd0c1e89d4ccad6980a041dda0a40a21ade3a20fcd1a4abb2a42b74e9a32b02424ff8db4ea708a5e0fb9a09aaf8326a51f613607a8685f57458329b41e938bb761131a5747e066b81a0a16808080a022e6cef138e16d2272ef58434ddf49260dc1de1f8ad6dfca3da5d2a92aaaadc58080",
	*         "0xf851808080a009833150c367df138f1538689984b8a84fc55692d3d41fe4d1e5720ff5483a6980808080808080808080a0a319c1c415b271afc0adcb664e67738d103ac168e0bc0b7bd2da7966165cb9518080"
	*     ],
	*     "balance": 0n,
	*     "codeHash": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
	*     "nonce": 0n,
	*     "storageHash": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
	*     "storageProof": [
	*         {
	*             "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
	*             "value": 0n,
	*             "proof": []
	*         },
	*         {
	*             "key": "0x0000000000000000000000000000000000000000000000000000000000000001",
	*             "value": 0n,
	*             "proof": []
	*         }
	*     ]
	* }
	*
	* web3.eth.getProof(
	*     "0x1234567890123456789012345678901234567890",
	*     ["0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001"],
	*     undefined,
	*     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
	* ).then(console.log);
	* > {
	*     "address": "0x1234567890123456789012345678901234567890",
	*     "accountProof": [
	*         "0xf90211a090dcaf88c40c7bbc95a912cbdde67c175767b31173df9ee4b0d733bfdd511c43a0babe369f6b12092f49181ae04ca173fb68d1a5456f18d20fa32cba73954052bda0473ecf8a7e36a829e75039a3b055e51b8332cbf03324ab4af2066bbd6fbf0021a0bbda34753d7aa6c38e603f360244e8f59611921d9e1f128372fec0d586d4f9e0a04e44caecff45c9891f74f6a2156735886eedf6f1a733628ebc802ec79d844648a0a5f3f2f7542148c973977c8a1e154c4300fec92f755f7846f1b734d3ab1d90e7a0e823850f50bf72baae9d1733a36a444ab65d0a6faaba404f0583ce0ca4dad92da0f7a00cbe7d4b30b11faea3ae61b7f1f2b315b61d9f6bd68bfe587ad0eeceb721a07117ef9fc932f1a88e908eaead8565c19b5645dc9e5b1b6e841c5edbdfd71681a069eb2de283f32c11f859d7bcf93da23990d3e662935ed4d6b39ce3673ec84472a0203d26456312bbc4da5cd293b75b840fc5045e493d6f904d180823ec22bfed8ea09287b5c21f2254af4e64fca76acc5cd87399c7f1ede818db4326c98ce2dc2208a06fc2d754e304c48ce6a517753c62b1a9c1d5925b89707486d7fc08919e0a94eca07b1c54f15e299bd58bdfef9741538c7828b5d7d11a489f9c20d052b3471df475a051f9dd3739a927c89e357580a4c97b40234aa01ed3d5e0390dc982a7975880a0a089d613f26159af43616fd9455bb461f4869bfede26f2130835ed067a8b967bfb80",
	*         "0xf90211a0395d87a95873cd98c21cf1df9421af03f7247880a2554e20738eec2c7507a494a0bcf6546339a1e7e14eb8fb572a968d217d2a0d1f3bc4257b22ef5333e9e4433ca012ae12498af8b2752c99efce07f3feef8ec910493be749acd63822c3558e6671a0dbf51303afdc36fc0c2d68a9bb05dab4f4917e7531e4a37ab0a153472d1b86e2a0ae90b50f067d9a2244e3d975233c0a0558c39ee152969f6678790abf773a9621a01d65cd682cc1be7c5e38d8da5c942e0a73eeaef10f387340a40a106699d494c3a06163b53d956c55544390c13634ea9aa75309f4fd866f312586942daf0f60fb37a058a52c1e858b1382a8893eb9c1f111f266eb9e21e6137aff0dddea243a567000a037b4b100761e02de63ea5f1fcfcf43e81a372dafb4419d126342136d329b7a7ba032472415864b08f808ba4374092003c8d7c40a9f7f9fe9cc8291f62538e1cc14a074e238ff5ec96b810364515551344100138916594d6af966170ff326a092fab0a0d31ac4eef14a79845200a496662e92186ca8b55e29ed0f9f59dbc6b521b116fea090607784fe738458b63c1942bba7c0321ae77e18df4961b2bc66727ea996464ea078f757653c1b63f72aff3dcc3f2a2e4c8cb4a9d36d1117c742833c84e20de994a0f78407de07f4b4cb4f899dfb95eedeb4049aeb5fc1635d65cf2f2f4dfd25d1d7a0862037513ba9d45354dd3e36264aceb2b862ac79d2050f14c95657e43a51b85c80",
	*         "0xf90171a04ad705ea7bf04339fa36b124fa221379bd5a38ffe9a6112cb2d94be3a437b879a08e45b5f72e8149c01efcb71429841d6a8879d4bbe27335604a5bff8dfdf85dcea00313d9b2f7c03733d6549ea3b810e5262ed844ea12f70993d87d3e0f04e3979ea0b59e3cdd6750fa8b15164612a5cb6567cdfb386d4e0137fccee5f35ab55d0efda0fe6db56e42f2057a071c980a778d9a0b61038f269dd74a0e90155b3f40f14364a08538587f2378a0849f9608942cf481da4120c360f8391bbcc225d811823c6432a026eac94e755534e16f9552e73025d6d9c30d1d7682a4cb5bd7741ddabfd48c50a041557da9a74ca68da793e743e81e2029b2835e1cc16e9e25bd0c1e89d4ccad6980a041dda0a40a21ade3a20fcd1a4abb2a42b74e9a32b02424ff8db4ea708a5e0fb9a09aaf8326a51f613607a8685f57458329b41e938bb761131a5747e066b81a0a16808080a022e6cef138e16d2272ef58434ddf49260dc1de1f8ad6dfca3da5d2a92aaaadc58080",
	*         "0xf851808080a009833150c367df138f1538689984b8a84fc55692d3d41fe4d1e5720ff5483a6980808080808080808080a0a319c1c415b271afc0adcb664e67738d103ac168e0bc0b7bd2da7966165cb9518080"
	*     ],
	*     "balance": 0,
	*     "codeHash": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
	*     "nonce": 0,
	*     "storageHash": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
	*     "storageProof": [
	*         {
	*             "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
	*             "value": 0,
	*             "proof": []
	*         },
	*         {
	*             "key": "0x0000000000000000000000000000000000000000000000000000000000000001",
	*             "value": 0,
	*             "proof": []
	*         }
	*     ]
	* }
	* ```
	*/
	getProof(address_1, storageKeys_1) {
		return __awaiter$13(this, arguments, void 0, function* (address, storageKeys, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
			return getProof(this, address, storageKeys, blockNumber, returnFormat);
		});
	}
	/**
	* @param blockCount Number of blocks in the requested range. Between `1` and `1024` blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.
	* @param newestBlock Highest number block of the requested range.
	* @param rewardPercentiles A monotonically increasing list of percentile values to sample from each block’s effective priority fees per gas in ascending order, weighted by gas used. Example: `['0', '25', '50', '75', '100']` or `['0', '0.5', '1', '1.5', '3', '80']`
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
	* @returns `baseFeePerGas` and transaction effective `priorityFeePerGas` history for the requested block range if available.
	* The range between `headBlock - 4` and `headBlock` is guaranteed to be available while retrieving data from the `pending` block and older history are optional to support.
	* For pre-EIP-1559 blocks the `gasPrice`s are returned as `rewards` and zeroes are returned for the `baseFeePerGas`.
	*
	* ```ts
	* web3.eth.getFeeHistory(4, 'pending', [0, 25, 75, 100]).then(console.log);
	* > {
	*     baseFeePerGas: [
	*         22983878621n,
	*         21417903463n,
	*         19989260230n,
	*         17770954829n,
	*         18850641304n
	*     ],
	*     gasUsedRatio: [
	*         0.22746546666666667,
	*         0.2331871,
	*         0.05610054885262125,
	*         0.7430227268212117
	*     ],
	*     oldestBlock: 15216343n,
	*     reward: [
	*         [ '0x3b9aca00', '0x53724e00', '0x77359400', '0x1d92c03423' ],
	*         [ '0x3b9aca00', '0x3b9aca00', '0x3b9aca00', '0xee6b2800' ],
	*         [ '0x3b9aca00', '0x4f86a721', '0x77d9743a', '0x9502f900' ],
	*         [ '0xcc8ff9e', '0x53724e00', '0x77359400', '0x1ec9771bb3' ]
	*     ]
	* }
	*
	* web3.eth.getFeeHistory(4, BlockTags.LATEST, [0, 25, 75, 100], { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);
	* > {
	*     baseFeePerGas: [
	*         22983878621,
	*         21417903463,
	*         19989260230,
	*         17770954829,
	*         18850641304
	*     ],
	*     gasUsedRatio: [
	*         0.22746546666666667,
	*         0.2331871,
	*         0.05610054885262125,
	*         0.7430227268212117
	*     ],
	*     oldestBlock: 15216343,
	*     reward: [
	*         [ '0x3b9aca00', '0x53724e00', '0x77359400', '0x1d92c03423' ],
	*         [ '0x3b9aca00', '0x3b9aca00', '0x3b9aca00', '0xee6b2800' ],
	*         [ '0x3b9aca00', '0x4f86a721', '0x77d9743a', '0x9502f900' ],
	*         [ '0xcc8ff9e', '0x53724e00', '0x77359400', '0x1ec9771bb3' ]
	*     ]
	* }
	* ```
	*/
	getFeeHistory(blockCount_1) {
		return __awaiter$13(this, arguments, void 0, function* (blockCount, newestBlock = this.defaultBlock, rewardPercentiles, returnFormat = this.defaultReturnFormat) {
			return getFeeHistory(this, blockCount, newestBlock, rewardPercentiles, returnFormat);
		});
	}
	/**
	* This method generates an access list for a transaction.
	*
	* @param transaction - A transaction object where all properties are optional except `from`, however it's recommended to include the `to` property.
	* @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the transaction.
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the createAccessList should be formatted.
	* @returns The returned data of the createAccessList,  e.g. The generated access list for transaction.
	* @example
	* ```ts
	* web3.eth.createAccessList({
	* from: '0xDe95305a63302C3aa4d3A9B42654659AeA72b694',
	* data: '0x9a67c8b100000000000000000000000000000000000000000000000000000000000004d0',
	* gasPrice: '0x3b9aca00',
	* gas: '0x3d0900',
	* to: '0x940b25304947ae863568B3804434EC77E2160b87'
	* })
	* .then(console.log);
	*
	* > {
	*  "accessList": [
	*     {
	*       "address": "0x15859bdf5aff2080a9968f6a410361e9598df62f",
	*       "storageKeys": [
	*         "0x0000000000000000000000000000000000000000000000000000000000000000"
	*       ]
	*     }
	*   ],
	*   "gasUsed": "0x7671"
	* }
	* ```
	*/
	createAccessList(transaction_1) {
		return __awaiter$13(this, arguments, void 0, function* (transaction, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
			return createAccessList(this, transaction, blockNumber, returnFormat);
		});
	}
	/**
	* This method sends EIP-712 typed data to the RPC provider to be signed.
	*
	* @param address The address that corresponds with the private key used to sign the typed data.
	* @param typedData The EIP-712 typed data object.
	* @param useLegacy A boolean flag determining whether the RPC call uses the legacy method `eth_signTypedData` or the newer method `eth_signTypedData_v4`
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the signed typed data should be formatted.
	* @returns The signed typed data.
	*/
	signTypedData(address, typedData, useLegacy, returnFormat) {
		return __awaiter$13(this, void 0, void 0, function* () {
			var _a$3;
			if (useLegacy === void 0) useLegacy = false;
			if (returnFormat === void 0) returnFormat = (_a$3 = this.defaultReturnFormat) !== null && _a$3 !== void 0 ? _a$3 : DEFAULT_RETURN_FORMAT;
			return signTypedData(this, address, typedData, useLegacy, returnFormat);
		});
	}
	/**
	* Lets you subscribe to specific events in the blockchain.
	*
	* @param name - The subscription you want to subscribe to.
	* @param args - Optional additional parameters, depending on the subscription type.
	* @returns A subscription object of type {@link RegisteredSubscription}. The object contains:
	*  - subscription.id: The subscription id, used to identify and unsubscribing the subscription.
	*  - subscription.subscribe(): Can be used to re-subscribe with the same parameters.
	*  - subscription.unsubscribe(): Unsubscribes the subscription and returns TRUE in the callback if successful.
	*  - subscription.args: The subscription arguments, used when re-subscribing.
	*
	*
	* You can use the subscription object to listen on:
	*
	* - on("data") - Fires on each incoming log with the log object as argument.
	* - on("changed") - Fires on each log which was removed from the blockchain. The log will have the additional property "removed: true".
	* - on("error") - Fires when an error in the subscription occurs.
	* - on("connected") - Fires once after the subscription successfully connected. Returns the subscription id.
	*
	* @example **Subscribe to Smart Contract events**
	* ```ts
	* // Subscribe to `logs`
	* const logSubscription = web3.eth.subscribe('logs', {
	*     address: '0x1234567890123456789012345678901234567890',
	*     topics: ['0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234']
	* });
	* logSubscription.on('data', (data: any) => console.log(data));
	* logSubscription.on('error', (error: any) => console.log(error));
	*
	* ```
	*
	* @example **Subscribe to new block headers**
	* ```ts
	* // Subscribe to `newBlockHeaders`
	* const newBlocksSubscription = await web3.eth.subscribe('newBlockHeaders');
	*
	* newBlocksSubscription.on('data', async blockhead => {
	* 	console.log('New block header: ', blockhead);
	*
	* 	// You do not need the next line, if you like to keep notified for every new block
	* 	await newBlocksSubscription.unsubscribe();
	* 	console.log('Unsubscribed from new block headers.');
	* });
	* newBlocksSubscription.on('error', error =>
	* 	console.log('Error when subscribing to New block header: ', error),
	* );
	* ```
	*
	* 	### subscribe('pendingTransactions')
	*
	* Subscribes to incoming pending transactions.
	* You can subscribe to pending transactions by calling web3.eth.subscribe('pendingTransactions').
	*
	* ```ts
	* (await web3.eth.subscribe('pendingTransactions')).on('data', console.log);
	* ```
	*
	* ### subscribe('newHeads')
	* ( same as subscribe('newBlockHeaders'))
	* Subscribes to incoming block headers. This can be used as timer to check for changes on the blockchain.
	*
	* The structure of a returned block header is {@link BlockHeaderOutput}:
	*
	* ```ts
	* (await web3.eth.subscribe('newHeads')).on( // 'newBlockHeaders' would work as well
	*  'data',
	* console.log
	* );
	* >{
	* parentHash: '0x9e746a1d906b299def98c75b06f714d62dacadd567c7515d76eeaa8c8074c738',
	* sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
	* miner: '0x0000000000000000000000000000000000000000',
	* stateRoot: '0xe0f04b04861ecfa95e82a9310d6a7ef7aef8d7417f5209c182582bfb98a8e307',
	* transactionsRoot: '0x31ab4ea571a9e10d3a19aaed07d190595b1dfa34e03960c04293fec565dea536',
	* logsBloom: '0x
	* difficulty: 2n,
	* number: 21n,
	* gasLimit: 11738125n,
	* gasUsed: 830006n,
	* timestamp: 1678797237n,
	* extraData: '0xd883010b02846765746888676f312e32302e31856c696e757800000000000000e0a6e93cf40e2e71a72e493272210c3f43738ccc7e7d7b14ffd51833797d896c09117e8dc4fbcbc969bd21b42e5af3e276a911524038c001b2109b63b8e0352601',
	* nonce: 0n
	* }
	* ```
	*
	* ### subscribe('syncing')
	* Subscribe to syncing events. This will return `true` when the node is syncing and when it’s finished syncing will return `false`, for the `changed` event.
	*
	* ```ts
	* (await web3.eth.subscribe('syncing')).on('changed', console.log);
	* > `true` // when syncing
	*
	* (await web3.eth.subscribe('syncing')).on('data', console.log);
	* > {
	*      startingBlock: 0,
	*      currentBlock: 0,
	*      highestBlock: 0,
	*      pulledStates: 0,
	*      knownStates: 0
	*   }
	* ```
	*
	* ### subscribe('logs', options)
	* Subscribes to incoming logs, filtered by the given options. If a valid numerical fromBlock options property is set, web3.js will retrieve logs beginning from this point, backfilling the response as necessary.
	*
	* options: You can subscribe to logs matching a given filter object, which can take the following parameters:
	* - `fromBlock`: (optional, default: 'latest') Integer block number, or `'latest'` for the last mined block or `'pending'`, `'earliest'` for not yet mined transactions.
	* - `address`: (optional) Contract address or a list of addresses from which logs should originate.
	* - `topics`: (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with `or` options.
	*
	* ```ts
	*  (await web3.eth.subscribe('logs', {
	*    address: '0xdac17f958d2ee523a2206206994597c13d831ec7',
	*   })).on('data', console.log);
	*
	* > {
	* removed: false,
	* logIndex: 119n,
	* transactionIndex: 58n,
	* transactionHash: '0x61533efa77937360215069d5d6cb0be09a22af9721e6dc3df59d957833ed8870',
	* blockHash: '0xe32bb97084479d32247f66f8b46d00af2fbc3c2db2bc6e5843fe2e4d1ca9b099',
	* blockNumber: 18771966n,
	* address: '0xdac17f958d2ee523a2206206994597c13d831ec7',
	* data: '0x00000000000000000000000000000000000000000000000000000000d88b2e40',
	* topics: [
	* '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',
	* '0x0000000000000000000000002fb2457f6ec1865dc0d4e7300c696b69c2a1b989',
	* '0x00000000000000000000000027fd43babfbe83a81d14665b1a6fb8030a60c9b4'
	* ]
	* }
	*```
	*/
	subscribe(name$1, args, returnFormat) {
		return __awaiter$13(this, void 0, void 0, function* () {
			var _a$3, _b;
			if (returnFormat === void 0) returnFormat = (_a$3 = this.defaultReturnFormat) !== null && _a$3 !== void 0 ? _a$3 : DEFAULT_RETURN_FORMAT;
			const subscription = yield (_b = this.subscriptionManager) === null || _b === void 0 ? void 0 : _b.subscribe(name$1, args, returnFormat);
			if (subscription instanceof LogsSubscription && name$1 === "logs" && typeof args === "object" && !isNullish(args.fromBlock) && Number.isFinite(Number(args.fromBlock))) setImmediate(() => {
				this.getPastLogs(args).then((logs) => {
					for (const log of logs) subscription._processSubscriptionResult(log);
				}).catch((e) => {
					subscription._processSubscriptionError(e);
				});
			});
			return subscription;
		});
	}
	static shouldClearSubscription({ sub }) {
		return !(sub instanceof SyncingSubscription);
	}
	/**
	* Resets subscriptions.
	*
	* @param notClearSyncing If `true` it keeps the `syncing` subscription.
	* @returns A promise to an array of subscription ids that were cleared.
	*
	* ```ts
	* web3.eth.clearSubscriptions().then(console.log);
	* > [...] An array of subscription ids that were cleared
	* ```
	*/
	clearSubscriptions(notClearSyncing = false) {
		var _a$3;
		return (_a$3 = this.subscriptionManager) === null || _a$3 === void 0 ? void 0 : _a$3.unsubscribe(notClearSyncing ? Web3Eth.shouldClearSubscription : void 0);
	}
	/**
	* Creates a filter in the node, to notify when new pending transactions arrive. To check if the state has changed.
	*
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
	* @returns A filter id.
	*
	* ```ts
	* web3.eth.createNewPendingTransactionFilter().then(console.log);
	* > 1n
	*
	* web3.eth.createNewPendingTransactionFilter({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);
	* > "0x1"
	* ```
	*/
	createNewPendingTransactionFilter() {
		return __awaiter$13(this, arguments, void 0, function* (returnFormat = this.defaultReturnFormat) {
			return createNewPendingTransactionFilter(this, returnFormat);
		});
	}
	/**
	* Creates a filter object, based on filter options, to notify when the state changes (logs)
	*
	* @param filter A {@link FilterParams} object containing the filter properties.
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
	* @returns A filter id.
	*
	* ```ts
	* web3.eth.createNewFilter(filterParams).then(console.log);
	* > 1n
	*
	* web3.eth.createNewFilter(filterParams, { number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);
	* > "0x1"
	* ```
	*/
	createNewFilter(filter_1) {
		return __awaiter$13(this, arguments, void 0, function* (filter, returnFormat = this.defaultReturnFormat) {
			return createNewFilter(this, filter, returnFormat);
		});
	}
	/**
	* Creates a filter in the node, to notify when a new block arrives.
	*
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
	* @returns A filter id.
	*
	* ```ts
	* web3.eth.createNewBlockFilter().then(console.log);
	* > 1n
	*
	* web3.eth.createNewBlockFilter({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);
	* > "0x1"
	* ```
	*/
	createNewBlockFilter() {
		return __awaiter$13(this, arguments, void 0, function* (returnFormat = this.defaultReturnFormat) {
			return createNewBlockFilter(this, returnFormat);
		});
	}
	/**
	* Uninstalls a filter with given id. Should always be called when watch is no longer needed.
	*
	* @param filterIdentifier ({@link Numbers} filter id
	* @returns true if the filter was successfully uninstalled, otherwise false.
	*
	* ```ts
	* web3.eth.uninstallFilter(123).then(console.log);
	* > true
	*
	* web3.eth.uninstallFilter('0x123').then(console.log);
	* > true
	*
	* web3.eth.uninstallFilter(12n).then(console.log);
	* > true
	* ```
	*/
	uninstallFilter(filterIdentifier) {
		return __awaiter$13(this, void 0, void 0, function* () {
			return uninstallFilter(this, filterIdentifier);
		});
	}
	/**
	*  Polling method for a filter, which returns an array of logs which occurred since last poll.
	*
	* @param filterIdentifier ({@link Numbers} filter id
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
	* @returns {@link FilterResultsAPI}, an array of {@link Log} objects.
	*
	* ```ts
	* web3.eth.getFilterChanges(123).then(console.log);
	* > [{
	*       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
	*       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']
	*       logIndex: 0n,
	*       transactionIndex: 0n,
	*       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
	*       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',
	*       blockNumber: 1234n,
	*       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'
	*   },
	*   {...}]
	*/
	getFilterChanges(filterIdentifier_1) {
		return __awaiter$13(this, arguments, void 0, function* (filterIdentifier, returnFormat = this.defaultReturnFormat) {
			return getFilterChanges(this, filterIdentifier, returnFormat);
		});
	}
	/**
	*  Returns an array of all logs matching filter with given id.
	*
	* @param filterIdentifier ({@link Numbers} filter id
	* @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
	* @returns {@link FilterResultsAPI}, an array of {@link Log} objects.
	*
	* ```ts
	* web3.eth.getFilterLogs(123).then(console.log);
	* > [{
	*       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
	*       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']
	*       logIndex: 0n,
	*       transactionIndex: 0n,
	*       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
	*       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',
	*       blockNumber: 1234n,
	*       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'
	*   },
	*   {...}]
	*/
	getFilterLogs(filterIdentifier_1) {
		return __awaiter$13(this, arguments, void 0, function* (filterIdentifier, returnFormat = this.defaultReturnFormat) {
			return getFilterLogs(this, filterIdentifier, returnFormat);
		});
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth@4.11.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth/lib/esm/validation.js
const validateCustomChainInfo = (transaction) => {
	if (!isNullish$1(transaction.common)) {
		if (isNullish$1(transaction.common.customChain)) throw new MissingCustomChainError();
		if (isNullish$1(transaction.common.customChain.chainId)) throw new MissingCustomChainIdError();
		if (!isNullish$1(transaction.chainId) && transaction.chainId !== transaction.common.customChain.chainId) throw new ChainIdMismatchError({
			txChainId: transaction.chainId,
			customChainId: transaction.common.customChain.chainId
		});
	}
};
const validateChainInfo = (transaction) => {
	if (!isNullish$1(transaction.common) && !isNullish$1(transaction.chain) && !isNullish$1(transaction.hardfork)) throw new CommonOrChainAndHardforkError();
	if (!isNullish$1(transaction.chain) && isNullish$1(transaction.hardfork) || !isNullish$1(transaction.hardfork) && isNullish$1(transaction.chain)) throw new MissingChainOrHardforkError({
		chain: transaction.chain,
		hardfork: transaction.hardfork
	});
};
const validateBaseChain = (transaction) => {
	if (!isNullish$1(transaction.common)) {
		if (!isNullish$1(transaction.common.baseChain)) {
			if (!isNullish$1(transaction.chain) && transaction.chain !== transaction.common.baseChain) throw new ChainMismatchError({
				txChain: transaction.chain,
				baseChain: transaction.common.baseChain
			});
		}
	}
};
const validateHardfork = (transaction) => {
	if (!isNullish$1(transaction.common)) {
		if (!isNullish$1(transaction.common.hardfork)) {
			if (!isNullish$1(transaction.hardfork) && transaction.hardfork !== transaction.common.hardfork) throw new HardforkMismatchError({
				txHardfork: transaction.hardfork,
				commonHardfork: transaction.common.hardfork
			});
		}
	}
};
const validateLegacyGas = (transaction) => {
	if (isNullish$1(transaction.gas) || !isUInt(transaction.gas) || isNullish$1(transaction.gasPrice) || !isUInt(transaction.gasPrice)) throw new InvalidGasOrGasPrice({
		gas: transaction.gas,
		gasPrice: transaction.gasPrice
	});
	if (!isNullish$1(transaction.maxFeePerGas) || !isNullish$1(transaction.maxPriorityFeePerGas)) throw new UnsupportedFeeMarketError({
		maxFeePerGas: transaction.maxFeePerGas,
		maxPriorityFeePerGas: transaction.maxPriorityFeePerGas
	});
};
const validateFeeMarketGas = (transaction) => {
	if (!isNullish$1(transaction.gasPrice) && transaction.type === "0x2") throw new Eip1559GasPriceError(transaction.gasPrice);
	if (transaction.type === "0x0" || transaction.type === "0x1") throw new UnsupportedFeeMarketError({
		maxFeePerGas: transaction.maxFeePerGas,
		maxPriorityFeePerGas: transaction.maxPriorityFeePerGas
	});
	if (isNullish$1(transaction.maxFeePerGas) || !isUInt(transaction.maxFeePerGas) || isNullish$1(transaction.maxPriorityFeePerGas) || !isUInt(transaction.maxPriorityFeePerGas)) throw new InvalidMaxPriorityFeePerGasOrMaxFeePerGas({
		maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,
		maxFeePerGas: transaction.maxFeePerGas
	});
};
/**
* This method checks if all required gas properties are present for either
* legacy gas (type 0x0 and 0x1) OR fee market transactions (0x2)
*/
const validateGas = (transaction) => {
	const gasPresent = !isNullish$1(transaction.gas) || !isNullish$1(transaction.gasLimit);
	const legacyGasPresent = gasPresent && !isNullish$1(transaction.gasPrice);
	const feeMarketGasPresent = gasPresent && !isNullish$1(transaction.maxPriorityFeePerGas) && !isNullish$1(transaction.maxFeePerGas);
	if (!legacyGasPresent && !feeMarketGasPresent) throw new MissingGasError({
		gas: transaction.gas,
		gasPrice: transaction.gasPrice,
		maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,
		maxFeePerGas: transaction.maxFeePerGas
	});
	if (legacyGasPresent && feeMarketGasPresent) throw new TransactionGasMismatchError({
		gas: transaction.gas,
		gasPrice: transaction.gasPrice,
		maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,
		maxFeePerGas: transaction.maxFeePerGas
	});
	(legacyGasPresent ? validateLegacyGas : validateFeeMarketGas)(transaction);
	(!isNullish$1(transaction.type) && transaction.type > "0x1" ? validateFeeMarketGas : validateLegacyGas)(transaction);
};
const validateTransactionForSigning = (transaction, overrideMethod, options = { transactionSchema: void 0 }) => {
	if (!isNullish$1(overrideMethod)) {
		overrideMethod(transaction);
		return;
	}
	if (typeof transaction !== "object" || isNullish$1(transaction)) throw new InvalidTransactionObjectError(transaction);
	validateCustomChainInfo(transaction);
	validateChainInfo(transaction);
	validateBaseChain(transaction);
	validateHardfork(transaction);
	const formattedTransaction = formatTransaction(transaction, ETH_DATA_FORMAT, { transactionSchema: options.transactionSchema });
	validateGas(formattedTransaction);
	if (isNullish$1(formattedTransaction.nonce) || isNullish$1(formattedTransaction.chainId) || formattedTransaction.nonce.startsWith("-") || formattedTransaction.chainId.startsWith("-")) throw new InvalidNonceOrChainIdError({
		nonce: transaction.nonce,
		chainId: transaction.chainId
	});
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth@4.11.1_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth/lib/esm/utils/prepare_transaction_for_signing.js
var __awaiter$12 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
const getEthereumjsTxDataFromTransaction = (transaction) => {
	var _a$3, _b;
	return Object.assign(Object.assign({}, transaction), {
		nonce: transaction.nonce,
		gasPrice: transaction.gasPrice,
		gasLimit: (_a$3 = transaction.gasLimit) !== null && _a$3 !== void 0 ? _a$3 : transaction.gas,
		to: transaction.to,
		value: transaction.value,
		data: (_b = transaction.data) !== null && _b !== void 0 ? _b : transaction.input,
		type: transaction.type,
		chainId: transaction.chainId,
		accessList: transaction.accessList,
		maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,
		maxFeePerGas: transaction.maxFeePerGas
	});
};
const getEthereumjsTransactionOptions = (transaction, web3Context) => {
	var _a$3, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
	const hasTransactionSigningOptions = !isNullish$1(transaction.chain) && !isNullish$1(transaction.hardfork) || !isNullish$1(transaction.common);
	let common;
	if (!hasTransactionSigningOptions) if (web3Context.defaultCommon) {
		common = Object.assign({}, web3Context.defaultCommon);
		if (isNullish$1(common.hardfork)) common.hardfork = (_a$3 = transaction.hardfork) !== null && _a$3 !== void 0 ? _a$3 : web3Context.defaultHardfork;
		if (isNullish$1(common.baseChain)) common.baseChain = web3Context.defaultChain;
	} else common = Common.custom({
		name: "custom-network",
		chainId: toNumber(transaction.chainId),
		networkId: !isNullish$1(transaction.networkId) ? toNumber(transaction.networkId) : void 0,
		defaultHardfork: (_b = transaction.hardfork) !== null && _b !== void 0 ? _b : web3Context.defaultHardfork
	}, { baseChain: web3Context.defaultChain });
	else {
		const name$1 = (_f = (_e = (_d = (_c = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _c === void 0 ? void 0 : _c.customChain) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : transaction.chain) !== null && _f !== void 0 ? _f : "custom-network";
		const chainId = toNumber((_j = (_h = (_g = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _g === void 0 ? void 0 : _g.customChain) === null || _h === void 0 ? void 0 : _h.chainId) !== null && _j !== void 0 ? _j : transaction === null || transaction === void 0 ? void 0 : transaction.chainId);
		const networkId = toNumber((_m = (_l = (_k = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _k === void 0 ? void 0 : _k.customChain) === null || _l === void 0 ? void 0 : _l.networkId) !== null && _m !== void 0 ? _m : transaction === null || transaction === void 0 ? void 0 : transaction.networkId);
		const defaultHardfork = (_q = (_p = (_o = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _o === void 0 ? void 0 : _o.hardfork) !== null && _p !== void 0 ? _p : transaction === null || transaction === void 0 ? void 0 : transaction.hardfork) !== null && _q !== void 0 ? _q : web3Context.defaultHardfork;
		const baseChain = (_t = (_s = (_r = transaction.common) === null || _r === void 0 ? void 0 : _r.baseChain) !== null && _s !== void 0 ? _s : transaction.chain) !== null && _t !== void 0 ? _t : web3Context.defaultChain;
		if (chainId && networkId && name$1) common = Common.custom({
			name: name$1,
			chainId,
			networkId,
			defaultHardfork
		}, { baseChain });
	}
	return { common };
};
const prepareTransactionForSigning = (transaction_1, web3Context_1, privateKey_1, ...args_1) => __awaiter$12(void 0, [
	transaction_1,
	web3Context_1,
	privateKey_1,
	...args_1
], void 0, function* (transaction, web3Context, privateKey, fillGasPrice = false, fillGasLimit = true) {
	const populatedTransaction = yield transactionBuilder({
		transaction,
		web3Context,
		privateKey,
		fillGasPrice,
		fillGasLimit
	});
	const formattedTransaction = formatTransaction(populatedTransaction, ETH_DATA_FORMAT, { transactionSchema: web3Context.config.customTransactionSchema });
	validateTransactionForSigning(formattedTransaction, void 0, { transactionSchema: web3Context.config.customTransactionSchema });
	return TransactionFactory.fromTxData(getEthereumjsTxDataFromTransaction(formattedTransaction), getEthereumjsTransactionOptions(formattedTransaction, web3Context));
});

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-contract@4.7.2_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-contract/lib/esm/encoding.js
const encodeEventABI = ({ address }, event, options) => {
	var _a$3, _b;
	const topics = options === null || options === void 0 ? void 0 : options.topics;
	const filter = (_a$3 = options === null || options === void 0 ? void 0 : options.filter) !== null && _a$3 !== void 0 ? _a$3 : {};
	const opts = {};
	if (!isNullish(options === null || options === void 0 ? void 0 : options.fromBlock)) opts.fromBlock = format(blockSchema.properties.number, options === null || options === void 0 ? void 0 : options.fromBlock, {
		number: FMT_NUMBER.HEX,
		bytes: FMT_BYTES.HEX
	});
	if (!isNullish(options === null || options === void 0 ? void 0 : options.toBlock)) opts.toBlock = format(blockSchema.properties.number, options === null || options === void 0 ? void 0 : options.toBlock, {
		number: FMT_NUMBER.HEX,
		bytes: FMT_BYTES.HEX
	});
	if (topics && Array.isArray(topics)) opts.topics = [...topics];
	else {
		opts.topics = [];
		if (event && !event.anonymous && ![ALL_EVENTS, "allEvents"].includes(event.name)) opts.topics.push((_b = event.signature) !== null && _b !== void 0 ? _b : encodeEventSignature(jsonInterfaceMethodToString(event)));
		if (![ALL_EVENTS, "allEvents"].includes(event.name) && event.inputs) for (const input of event.inputs) {
			if (!input.indexed) continue;
			const value = filter[input.name];
			if (!value) {
				opts.topics.push(null);
				continue;
			}
			if (Array.isArray(value)) opts.topics.push(value.map((v) => encodeParameter(input.type, v)));
			else if (input.type === "string") opts.topics.push(keccak256Wrapper(value));
			else opts.topics.push(encodeParameter(input.type, value));
		}
	}
	if (!opts.topics.length) delete opts.topics;
	if (address) opts.address = address.toLowerCase();
	return opts;
};
const encodeMethodABI = (abi, args, deployData) => {
	const inputLength = Array.isArray(abi.inputs) ? abi.inputs.length : 0;
	if (abi.inputs && inputLength !== args.length) throw new Web3ContractError(`The number of arguments is not matching the methods required number. You need to pass ${inputLength} arguments.`);
	let params;
	if (abi.inputs) params = encodeParameters(Array.isArray(abi.inputs) ? abi.inputs : [], args).replace("0x", "");
	else params = inferTypesAndEncodeParameters(args).replace("0x", "");
	if (isAbiConstructorFragment(abi)) {
		if (!deployData) throw new Web3ContractError("The contract has no contract data option set. This is necessary to append the constructor parameters.");
		if (!deployData.startsWith("0x")) return `0x${deployData}${params}`;
		return `${deployData}${params}`;
	}
	return `${encodeFunctionSignature(abi)}${params}`;
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-contract@4.7.2_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-contract/lib/esm/contract_log_subscription.js
/**
* ContractLogsSubscription to be used to subscribe to events logs.
*
* Following events are supported and can be accessed with either {@link ContractLogsSubscription.once} or ${@link ContractLogsSubscription.on} methods.
*
* - **connected**: Emitted when the subscription is connected.
* - **data**: Fires on each incoming event with the event object as argument.
* - **changed**: Fires on each event which was removed from the blockchain. The event will have the additional property `removed: true`.
* - **error**: Fires on each error.
*
* ```ts
* const subscription = await myContract.events.MyEvent({
*   filter: {myIndexedParam: [20,23], myOtherIndexedParam: '0x123456789...'}, // Using an array means OR: e.g. 20 or 23
*   fromBlock: 0
* });
*
* subscription.on("connected", function(subscriptionId){
*   console.log(subscriptionId);
* });
*
* subscription.on('data', function(event){
*   console.log(event); // same results as the optional callback above
* });
*
* subscription.on('changed', function(event){
*   // remove event from local database
* })
*
* subscription.on('error', function(error, receipt) { // If the transaction was rejected by the network with a receipt, the second parameter will be the receipt.
*   ...
* });
*
* // event output example
* > {
*   returnValues: {
*       myIndexedParam: 20,
*       myOtherIndexedParam: '0x123456789...',
*       myNonIndexParam: 'My String'
*   },
*   raw: {
*       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
*       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']
*   },
*   event: 'MyEvent',
*   signature: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',
*   logIndex: 0,
*   transactionIndex: 0,
*   transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
*   blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',
*   blockNumber: 1234,
*   address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'
* }
* ```
*/
var ContractLogsSubscription = class extends Web3Subscription {
	constructor(args, options) {
		super(args, options);
		this.address = args.address;
		this.topics = args.topics;
		this.abi = args.abi;
		this.jsonInterface = args.jsonInterface;
	}
	_buildSubscriptionParams() {
		return ["logs", {
			address: this.address,
			topics: this.topics
		}];
	}
	formatSubscriptionResult(data) {
		return decodeEventABI(this.abi, data, this.jsonInterface, super.returnFormat);
	}
};

//#endregion
//#region ../../node_modules/.pnpm/@ethereumjs+rlp@5.0.2/node_modules/@ethereumjs/rlp/dist/esm/index.js
const cachedHexes = Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, "0"));

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-contract@4.7.2_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-contract/lib/esm/utils.js
const dataInputEncodeMethodHelper = (txParams, abi, params, dataInputFill) => {
	var _a$3, _b;
	const tx = {};
	if (!isNullish(txParams.data) || dataInputFill === "both") tx.data = encodeMethodABI(abi, params, (_a$3 = txParams.data) !== null && _a$3 !== void 0 ? _a$3 : txParams.input);
	if (!isNullish(txParams.input) || dataInputFill === "both") tx.input = encodeMethodABI(abi, params, (_b = txParams.input) !== null && _b !== void 0 ? _b : txParams.data);
	if (isNullish(tx.input) && isNullish(tx.data)) tx[dataInputFill] = encodeMethodABI(abi, params);
	return {
		data: tx.data,
		input: tx.input
	};
};
const getSendTxParams = ({ abi, params, options, contractOptions }) => {
	var _a$3, _b, _c;
	const deploymentCall = (_c = (_b = (_a$3 = options === null || options === void 0 ? void 0 : options.input) !== null && _a$3 !== void 0 ? _a$3 : options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : contractOptions.input) !== null && _c !== void 0 ? _c : contractOptions.data;
	if (!deploymentCall && !(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) throw new Web3ContractError("Contract address not specified");
	if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) throw new Web3ContractError("Contract \"from\" address not specified");
	let txParams = mergeDeep({
		to: contractOptions.address,
		gas: contractOptions.gas,
		gasPrice: contractOptions.gasPrice,
		from: contractOptions.from,
		input: contractOptions.input,
		maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,
		maxFeePerGas: contractOptions.maxFeePerGas,
		data: contractOptions.data
	}, options);
	const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);
	txParams = Object.assign(Object.assign({}, txParams), {
		data: dataInput.data,
		input: dataInput.input
	});
	return txParams;
};
const getEthTxCallParams = ({ abi, params, options, contractOptions }) => {
	if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) throw new Web3ContractError("Contract address not specified");
	let txParams = mergeDeep({
		to: contractOptions.address,
		gas: contractOptions.gas,
		gasPrice: contractOptions.gasPrice,
		from: contractOptions.from,
		input: contractOptions.input,
		maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,
		maxFeePerGas: contractOptions.maxFeePerGas,
		data: contractOptions.data
	}, options);
	const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);
	txParams = Object.assign(Object.assign({}, txParams), {
		data: dataInput.data,
		input: dataInput.input
	});
	return txParams;
};
const getEstimateGasParams = ({ abi, params, options, contractOptions }) => {
	let txParams = mergeDeep({
		to: contractOptions.address,
		gas: contractOptions.gas,
		gasPrice: contractOptions.gasPrice,
		from: contractOptions.from,
		input: contractOptions.input,
		data: contractOptions.data
	}, options);
	const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);
	txParams = Object.assign(Object.assign({}, txParams), {
		data: dataInput.data,
		input: dataInput.input
	});
	return txParams;
};
const isWeb3ContractContext = (options) => typeof options === "object" && !isNullish(options) && Object.keys(options).length !== 0 && !isContractInitOptions(options);
const getCreateAccessListParams = ({ abi, params, options, contractOptions }) => {
	if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) throw new Web3ContractError("Contract address not specified");
	if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) throw new Web3ContractError("Contract \"from\" address not specified");
	let txParams = mergeDeep({
		to: contractOptions.address,
		gas: contractOptions.gas,
		gasPrice: contractOptions.gasPrice,
		from: contractOptions.from,
		input: contractOptions.input,
		maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,
		maxFeePerGas: contractOptions.maxFeePerGas,
		data: contractOptions.data
	}, options);
	const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);
	txParams = Object.assign(Object.assign({}, txParams), {
		data: dataInput.data,
		input: dataInput.input
	});
	return txParams;
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-contract@4.7.2_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-contract/lib/esm/contract-deployer-method-class.js
var __awaiter$11 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
var DeployerMethodClass = class {
	_contractMethodDeploySend(tx) {
		const returnTxOptions = {
			transactionResolver: (receipt) => {
				if (receipt.status === BigInt(0)) throw new Web3ContractError("code couldn't be stored", receipt);
				const newContract = this.parent.clone();
				newContract.options.address = receipt.contractAddress;
				return newContract;
			},
			contractAbi: this.parent.options.jsonInterface,
			checkRevertBeforeSending: false
		};
		return isNullish$1(this.parent.getTransactionMiddleware()) ? sendTransaction$1(this.parent, tx, this.parent.defaultReturnFormat, returnTxOptions) : sendTransaction$1(this.parent, tx, this.parent.defaultReturnFormat, returnTxOptions, this.parent.getTransactionMiddleware());
	}
	constructor(parent, deployOptions) {
		this.parent = parent;
		this.deployOptions = deployOptions;
		const { args, abi, contractOptions, deployData } = this.calculateDeployParams();
		this.args = args;
		this.constructorAbi = abi;
		this.contractOptions = contractOptions;
		this.deployData = deployData;
	}
	send(options) {
		const modifiedOptions = Object.assign({}, options);
		const tx = this.populateTransaction(modifiedOptions);
		return this._contractMethodDeploySend(tx);
	}
	populateTransaction(txOptions) {
		var _a$3, _b;
		const modifiedContractOptions = Object.assign(Object.assign({}, this.contractOptions), { from: (_b = (_a$3 = this.contractOptions.from) !== null && _a$3 !== void 0 ? _a$3 : this.parent.defaultAccount) !== null && _b !== void 0 ? _b : void 0 });
		const tx = getSendTxParams({
			abi: this.constructorAbi,
			params: this.args,
			options: Object.assign(Object.assign({}, txOptions), { dataInputFill: this.parent.contractDataInputFill }),
			contractOptions: modifiedContractOptions
		});
		if (tx.dataInputFill) delete tx.dataInputFill;
		return tx;
	}
	calculateDeployParams() {
		var _a$3, _b, _c, _d, _e, _f;
		let abi = this.parent.options.jsonInterface.find((j) => j.type === "constructor");
		if (!abi) abi = {
			type: "constructor",
			stateMutability: ""
		};
		const _input = format({ format: "bytes" }, (_b = (_a$3 = this.deployOptions) === null || _a$3 === void 0 ? void 0 : _a$3.input) !== null && _b !== void 0 ? _b : this.parent.options.input, DEFAULT_RETURN_FORMAT);
		const _data = format({ format: "bytes" }, (_d = (_c = this.deployOptions) === null || _c === void 0 ? void 0 : _c.data) !== null && _d !== void 0 ? _d : this.parent.options.data, DEFAULT_RETURN_FORMAT);
		if ((!_input || _input.trim() === "0x") && (!_data || _data.trim() === "0x")) throw new Web3ContractError("contract creation without any data provided.");
		const args = (_f = (_e = this.deployOptions) === null || _e === void 0 ? void 0 : _e.arguments) !== null && _f !== void 0 ? _f : [];
		const contractOptions = Object.assign(Object.assign({}, this.parent.options), {
			input: _input,
			data: _data
		});
		const deployData = _input !== null && _input !== void 0 ? _input : _data;
		return {
			args,
			abi,
			contractOptions,
			deployData
		};
	}
	estimateGas(options_1) {
		return __awaiter$11(this, arguments, void 0, function* (options, returnFormat = this.parent.defaultReturnFormat) {
			const modifiedOptions = Object.assign({}, options);
			return this.parent.contractMethodEstimateGas({
				abi: this.constructorAbi,
				params: this.args,
				returnFormat,
				options: modifiedOptions,
				contractOptions: this.contractOptions
			});
		});
	}
	encodeABI() {
		return encodeMethodABI(this.constructorAbi, this.args, format({ format: "bytes" }, this.deployData, this.parent.defaultReturnFormat));
	}
	decodeData(data) {
		return Object.assign(Object.assign({}, decodeFunctionCall(this.constructorAbi, data.replace(this.deployData, ""), false)), { __method__: this.constructorAbi.type });
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-contract@4.7.2_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-contract/lib/esm/contract-subscription-manager.js
var __awaiter$10 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
/**
* Similar to `Web3SubscriptionManager` but has a reference to the Contract that uses
*/
var ContractSubscriptionManager = class extends Web3SubscriptionManager {
	/**
	*
	* @param - Web3SubscriptionManager
	* @param - parentContract
	*
	* @example
	* ```ts
	* const requestManager = new Web3RequestManager("ws://localhost:8545");
	* const contract = new Contract(...)
	* const subscriptionManager = new Web3SubscriptionManager(requestManager, {}, contract);
	* ```
	*/
	constructor(self$1, parentContract) {
		super(self$1.requestManager, self$1.registeredSubscriptions);
		this.parentContract = parentContract;
	}
	/**
	* Will create a new subscription
	*
	* @param name - The subscription you want to subscribe to
	* @param args - Optional additional parameters, depending on the subscription type
	* @param returnFormat- ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
	*
	* Will subscribe to a specific topic (note: name)
	* @returns The subscription object
	*/
	subscribe(name_1, args_1) {
		const _super = Object.create(null, { subscribe: { get: () => super.subscribe } });
		return __awaiter$10(this, arguments, void 0, function* (name$1, args, returnFormat = DEFAULT_RETURN_FORMAT) {
			return _super.subscribe.call(this, name$1, args !== null && args !== void 0 ? args : this.parentContract.options, returnFormat);
		});
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-contract@4.7.2_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-contract/lib/esm/contract.js
var __awaiter$9 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
const contractSubscriptions = {
	logs: ContractLogsSubscription,
	newHeads: NewHeadsSubscription,
	newBlockHeaders: NewHeadsSubscription
};
/**
* The `web3.eth.Contract` makes it easy to interact with smart contracts on the ethereum blockchain.
* For using contract package, first install Web3 package using: `npm i web3` or `yarn add web3` based on your package manager, after that contracts features can be used as mentioned in following snippet.
* ```ts
*
* import { Web3 } from 'web3';
*
* const web3 = new Web3('https://127.0.0.1:4545');
* const abi = [...] as const; // your contract ABI
*
* let contract = new web3.eth.Contract(abi,'0xdAC17F958D2ee523a2206206994597C13D831ec7');
* await contract.methods.balanceOf('0xdAC17F958D2ee523a2206206994597C13D831ec7').call();
* ```
* For using individual package install `web3-eth-contract` and `web3-core` packages using: `npm i web3-eth-contract web3-core` or `yarn add web3-eth-contract web3-core`. This is more efficient approach for building lightweight applications.
* ```ts
*
* import { Web3Context } from 'web3-core';
* import { Contract } from 'web3-eth-contract';
*
* const abi = [...] as const; // your contract ABI
*
* let contract = new web3.eth.Contract(
* 	abi,
* 	'0xdAC17F958D2ee523a2206206994597C13D831ec7'
* 	 new Web3Context('http://127.0.0.1:8545'));
*
* await contract.methods.balanceOf('0xdAC17F958D2ee523a2206206994597C13D831ec7').call();
* ```
* ## Generated Methods
* Following methods are generated by web3.js contract object for each of contract functions by using its ABI.
*
* ### send
* This is used to send a transaction to the smart contract and execute its method. Note this can alter the smart contract state.
*
* #### Parameters
* options?: PayableTxOptions | NonPayableTxOptions
*
* #### Returns
* [Web3PromiEvent](/api/web3/namespace/core#Web3PromiEvent) : Web3 Promi Event
*
* ```ts
* // using the promise
* myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'})
* 	.then(function(receipt){
* 		// other parts of code to use receipt
* 	});
*
*
* // using the event emitter
* myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'})
* 	.on('transactionHash', function(hash){
* 		// ...
* 	})
* 	.on('confirmation', function(confirmationNumber, receipt){
* 		// ...
* 	})
* 	.on('receipt', function(receipt){
* 		// ...
* 	})
* 	.on('error', function(error, receipt) {
* 		// ...
* 	});
*
* ```
*
* ### call
* This will execute smart contract method in the EVM without sending any transaction. Note calling cannot alter the smart contract state.
*
* #### Parameters
* options?: PayableCallOptions | NonPayableCallOptions,
* block?: BlockNumberOrTag,
*
* #### Returns
* Promise : having results of call
*
* ```ts
*
* let myContract = new web3.eth.Contract(abi, address);
*
* myContract.methods.myFunction().call()
* .then(console.log);
*
* ```
* ### estimateGas
* Returns the amount of gas consumed by executing the method in EVM without creating a new transaction on the blockchain. The returned amount can be used as a gas estimate for executing the transaction publicly. The actual gas used can be different when sending the transaction later, as the state of the smart contract can be different at that time.
*
* #### Parameters
* options?: PayableCallOptions,
* returnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,
*
* #### Returns
* Promise: The gas amount estimated.
*
* ```ts
* const estimatedGas = await contract.methods.approve('0xdAC17F958D2ee523a2206206994597C13D831ec7', 300)
*     .estimateGas();
*
* ```
*
* ### encodeABI
* Encodes the ABI for this method. The resulting hex string is 32-bit function signature hash plus the passed parameters in Solidity tightly packed format. This can be used to send a transaction, call a method, or pass it into another smart contract’s method as arguments. Set the data field on web3.eth.sendTransaction options as the encodeABI() result and it is the same as calling the contract method with contract.myMethod.send().
*
* Some use cases for encodeABI() include: preparing a smart contract transaction for a multisignature wallet, working with offline wallets and cold storage and creating transaction payload for complex smart contract proxy calls.
*
* #### Parameters
* None
*
* #### Returns
* String: The encoded ABI.
*
* ```ts
* const encodedABI = await contract.methods.approve('0xdAC17F958D2ee523a2206206994597C13D831ec7', 300)
*     .encodeABI();
*
* ```
*

* ### decodeMethodData
* Decodes the given ABI-encoded data, revealing both the method name and the parameters used in the smart contract call.
* This function reverses the encoding process happens at the method `encodeABI`.
* It's particularly useful for debugging and understanding the interactions with and between smart contracts.
*
* #### Parameters
*
* - `data` **HexString**: The string of ABI-encoded data that needs to be decoded. This should include the method signature and the encoded parameters.
*
* #### Returns
*
* - **Object**: This object combines both the decoded parameters and the method name in a readable format. Specifically, the returned object contains:
*   - `__method__` **String**: The name of the contract method, reconstructed from the ABI.
*   - `__length__` **Number**: The number of parameters decoded.
*   - Additional properties representing each parameter by name, as well as their position and values.
*
* #### Example
*
* Given an ABI-encoded string from a transaction, you can decode this data to identify the method called and the parameters passed.
* Here's a simplified example:
*
*
* ```typescript
* const GreeterAbi = [
* 	{
* 		inputs: [
* 			{
* 				internalType: 'string',
* 				name: '_greeting',
* 				type: 'string',
* 			},
* 		],
* 		name: 'setGreeting',
* 		outputs: [],
* 		type: 'function',
* 	},
* ];
* const contract = new Contract(GreeterAbi); // Initialize with your contract's ABI
*
* // The ABI-encoded data string for "setGreeting('Hello World')"
* const encodedData =
* 	'0xa41368620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b48656c6c6f20576f726c64000000000000000000000000000000000000000000';
*
* try {
* 	const decoded = contract.decodeMethodData(encodedData);
* 	console.log(decoded.__method__); // Outputs: "setGreeting(string)"
* 	console.log(decoded); // Outputs the detailed parameter data
* 	// This tells that the method called was `setGreeting` with a single string parameter "Hello World":
* 	// {
* 	//   __method__: 'setGreeting(string)',
* 	//   __length__: 1,
* 	//   '0': 'Hello World',
* 	//   _greeting: 'Hello World'
* 	// }
* } catch (error) {
* 	console.error(error);
* }
* ```
*

* ### createAccessList
* This will create an access list a method execution will access when executed in the EVM.
* Note: You must specify a from address and gas if it’s not specified in options when instantiating parent contract object.
*
* #### Parameters
* options?: PayableCallOptions | NonPayableCallOptions,
* block?: BlockNumberOrTag,
*
* #### Returns
* Promise: The generated access list for transaction.
*
* ```ts
* const accessList = await contract.methods.approve('0xbEe634C21c16F05B03B704BaE071536121e6cFeA', 300)
*     .createAccessList({
*         from: "0x9992695e1053bb737d3cfae4743dcfc4b94f203d"
*    });
* ```
*
*/
var Contract = class Contract extends Web3Context {
	get subscriptionManager() {
		return this._subscriptionManager;
	}
	constructor(jsonInterface, addressOrOptionsOrContext, optionsOrContextOrReturnFormat, contextOrReturnFormat, returnFormat) {
		var _a$3, _b, _c;
		const options = isContractInitOptions(addressOrOptionsOrContext) ? addressOrOptionsOrContext : isContractInitOptions(optionsOrContextOrReturnFormat) ? optionsOrContextOrReturnFormat : void 0;
		let contractContext;
		if (isWeb3ContractContext(addressOrOptionsOrContext)) contractContext = addressOrOptionsOrContext;
		else if (isWeb3ContractContext(optionsOrContextOrReturnFormat)) contractContext = optionsOrContextOrReturnFormat;
		else contractContext = contextOrReturnFormat;
		let provider;
		if (typeof addressOrOptionsOrContext === "object" && "provider" in addressOrOptionsOrContext) provider = addressOrOptionsOrContext.provider;
		else if (typeof optionsOrContextOrReturnFormat === "object" && "provider" in optionsOrContextOrReturnFormat) provider = optionsOrContextOrReturnFormat.provider;
		else if (typeof contextOrReturnFormat === "object" && "provider" in contextOrReturnFormat) provider = contextOrReturnFormat.provider;
		else provider = Contract.givenProvider;
		super(Object.assign(Object.assign({}, contractContext), {
			provider,
			registeredSubscriptions: contractSubscriptions
		}));
		/**
		* Set to true if you want contracts' defaults to sync with global defaults.
		*/
		this.syncWithContext = false;
		this._functions = {};
		this._subscriptionManager = new ContractSubscriptionManager(super.subscriptionManager, this);
		if (contractContext === null || contractContext === void 0 ? void 0 : contractContext.wallet) this._wallet = contractContext.wallet;
		if (contractContext === null || contractContext === void 0 ? void 0 : contractContext.accountProvider) this._accountProvider = contractContext.accountProvider;
		if (!isNullish$1(options) && !isNullish$1(options.data) && !isNullish$1(options.input) && this.config.contractDataInputFill !== "both") throw new ContractTransactionDataAndInputError({
			data: options.data,
			input: options.input
		});
		this._overloadedMethodAbis = /* @__PURE__ */ new Map();
		const returnDataFormat = isDataFormat(contextOrReturnFormat) ? contextOrReturnFormat : isDataFormat(optionsOrContextOrReturnFormat) ? optionsOrContextOrReturnFormat : returnFormat !== null && returnFormat !== void 0 ? returnFormat : this.defaultReturnFormat;
		const address = typeof addressOrOptionsOrContext === "string" ? addressOrOptionsOrContext : void 0;
		this.config.contractDataInputFill = (_a$3 = options === null || options === void 0 ? void 0 : options.dataInputFill) !== null && _a$3 !== void 0 ? _a$3 : this.config.contractDataInputFill;
		this._parseAndSetJsonInterface(jsonInterface, returnDataFormat);
		if (this.defaultReturnFormat !== returnDataFormat) this.defaultReturnFormat = returnDataFormat;
		if (!isNullish$1(address)) this._parseAndSetAddress(address, returnDataFormat);
		this.options = {
			address,
			jsonInterface: this._jsonInterface,
			gas: (_b = options === null || options === void 0 ? void 0 : options.gas) !== null && _b !== void 0 ? _b : options === null || options === void 0 ? void 0 : options.gasLimit,
			gasPrice: options === null || options === void 0 ? void 0 : options.gasPrice,
			from: options === null || options === void 0 ? void 0 : options.from,
			input: options === null || options === void 0 ? void 0 : options.input,
			data: options === null || options === void 0 ? void 0 : options.data
		};
		this.syncWithContext = (_c = options === null || options === void 0 ? void 0 : options.syncWithContext) !== null && _c !== void 0 ? _c : false;
		if (contractContext instanceof Web3Context) this.subscribeToContextEvents(contractContext);
		Object.defineProperty(this.options, "address", {
			set: (value) => this._parseAndSetAddress(value, returnDataFormat),
			get: () => this._address
		});
		Object.defineProperty(this.options, "jsonInterface", {
			set: (value) => this._parseAndSetJsonInterface(value, returnDataFormat),
			get: () => this._jsonInterface
		});
		if (contractContext instanceof Web3Context) contractContext.on(Web3ConfigEvent.CONFIG_CHANGE, (event) => {
			this.setConfig({ [event.name]: event.newValue });
		});
	}
	setTransactionMiddleware(transactionMiddleware) {
		this.transactionMiddleware = transactionMiddleware;
	}
	getTransactionMiddleware() {
		return this.transactionMiddleware;
	}
	/**
	* Subscribe to an event.
	*
	* ```ts
	* await myContract.events.MyEvent([options])
	* ```
	*
	* There is a special event `allEvents` that can be used to subscribe all events.
	*
	* ```ts
	* await myContract.events.allEvents([options])
	* ```
	*
	* @returns - When individual event is accessed will returns {@link ContractBoundEvent} object
	*/
	get events() {
		return this._events;
	}
	/**
	* Creates a transaction object for that method, which then can be `called`, `send`, `estimated`, `createAccessList` , or `ABI encoded`.
	*
	* The methods of this smart contract are available through:
	*
	* The name: `myContract.methods.myMethod(123)`
	* The name with parameters: `myContract.methods['myMethod(uint256)'](123)`
	* The signature `myContract.methods['0x58cf5f10'](123)`
	*
	* This allows calling functions with same name but different parameters from the JavaScript contract object.
	*
	* \> The method signature does not provide a type safe interface, so we recommend to use method `name` instead.
	*
	* ```ts
	* // calling a method
	* const result = await myContract.methods.myMethod(123).call({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});
	*
	* // or sending and using a promise
	* const receipt = await myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});
	*
	* // or sending and using the events
	* const sendObject = myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});
	* sendObject.on('transactionHash', function(hash){
	*   ...
	* });
	* sendObject.on('receipt', function(receipt){
	*   ...
	* });
	* sendObject.on('confirmation', function(confirmationNumber, receipt){
	*   ...
	* });
	* sendObject.on('error', function(error, receipt) {
	*   ...
	* });
	* ```
	*
	* @returns - Either returns {@link PayableMethodObject} or {@link NonPayableMethodObject} based on the definitions of the ABI of that contract.
	*/
	get methods() {
		return this._methods;
	}
	/**
	* Clones the current contract instance. This doesn't deploy contract on blockchain and only creates a local clone.
	*
	* @returns - The new contract instance.
	*
	* ```ts
	* const contract1 = new web3.eth.Contract(abi, address, {gasPrice: '12345678', from: fromAddress});
	*
	* const contract2 = contract1.clone();
	* contract2.options.address = '0xdAC17F958D2ee523a2206206994597C13D831ec7';
	*
	* (contract1.options.address !== contract2.options.address);
	* > true
	* ```
	*/
	clone() {
		let newContract;
		if (this.options.address) newContract = new Contract([...this._jsonInterface, ...this._errorsInterface], this.options.address, {
			gas: this.options.gas,
			gasPrice: this.options.gasPrice,
			from: this.options.from,
			input: this.options.input,
			data: this.options.data,
			provider: this.currentProvider,
			syncWithContext: this.syncWithContext,
			dataInputFill: this.config.contractDataInputFill
		}, this.getContextObject());
		else newContract = new Contract([...this._jsonInterface, ...this._errorsInterface], {
			gas: this.options.gas,
			gasPrice: this.options.gasPrice,
			from: this.options.from,
			input: this.options.input,
			data: this.options.data,
			provider: this.currentProvider,
			syncWithContext: this.syncWithContext,
			dataInputFill: this.config.contractDataInputFill
		}, this.getContextObject());
		if (this.context) newContract.subscribeToContextEvents(this.context);
		return newContract;
	}
	/**
	* Call this function to deploy the contract to the blockchain. After successful deployment the promise will resolve with a new contract instance.
	*
	* ```ts
	* myContract.deploy({
	*   input: '0x12345...', // data keyword can be used, too.
	*   arguments: [123, 'My String']
	* })
	* .send({
	*   from: '0x1234567890123456789012345678901234567891',
	*   gas: 1500000,
	*   gasPrice: '30000000000000'
	* }, function(error, transactionHash){ ... })
	* .on('error', function(error){ ... })
	* .on('transactionHash', function(transactionHash){ ... })
	* .on('receipt', function(receipt){
	*  console.log(receipt.contractAddress) // contains the new contract address
	* })
	* .on('confirmation', function(confirmationNumber, receipt){ ... })
	* .then(function(newContractInstance){
	*   console.log(newContractInstance.options.address) // instance with the new contract address
	* });
	*
	*
	* // When the data is already set as an option to the contract itself
	* myContract.options.data = '0x12345...';
	*
	* myContract.deploy({
	*   arguments: [123, 'My String']
	* })
	* .send({
	*   from: '0x1234567890123456789012345678901234567891',
	*   gas: 1500000,
	*   gasPrice: '30000000000000'
	* })
	* .then(function(newContractInstance){
	*   console.log(newContractInstance.options.address) // instance with the new contract address
	* });
	*
	*
	* // Simply encoding
	* myContract.deploy({
	*   input: '0x12345...',
	*   arguments: [123, 'My String']
	* })
	* .encodeABI();
	* > '0x12345...0000012345678765432'
	*
	*
	* // decoding
	* myContract.deploy({
	*   input: '0x12345...',
	*   // arguments: [123, 'My Greeting'] if you just need to decode the data, you can skip the arguments
	* })
	* .decodeData('0x12345...0000012345678765432');
	* > {
	*      __method__: 'constructor',
	*      __length__: 2,
	*      '0': '123',
	*      _id: '123',
	*      '1': 'My Greeting',
	*      _greeting: 'My Greeting',
	*   }
	*
	*
	* // Gas estimation
	* myContract.deploy({
	*   input: '0x12345...',
	*   arguments: [123, 'My String']
	* })
	* .estimateGas(function(err, gas){
	*   console.log(gas);
	* });
	* ```
	*
	* @returns - The transaction object
	*/
	deploy(deployOptions) {
		return new DeployerMethodClass(this, deployOptions);
	}
	getPastEvents(param1, param2, param3) {
		return __awaiter$9(this, void 0, void 0, function* () {
			var _a$3;
			const eventName = typeof param1 === "string" ? param1 : ALL_EVENTS;
			const options = typeof param1 !== "string" && !isDataFormat(param1) ? param1 : !isDataFormat(param2) ? param2 : {};
			const returnFormat = isDataFormat(param1) ? param1 : isDataFormat(param2) ? param2 : param3 !== null && param3 !== void 0 ? param3 : this.defaultReturnFormat;
			const abi = eventName === "allEvents" || eventName === ALL_EVENTS ? ALL_EVENTS_ABI : this._jsonInterface.find((j) => "name" in j && j.name === eventName);
			if (!abi) throw new Web3ContractError(`Event ${String(eventName)} not found.`);
			const { fromBlock, toBlock, topics, address } = encodeEventABI(this.options, abi, options !== null && options !== void 0 ? options : {});
			const logs = yield getLogs(this, {
				fromBlock,
				toBlock,
				topics,
				address
			}, returnFormat);
			const decodedLogs = logs ? logs.map((log) => typeof log === "string" ? log : decodeEventABI(abi, log, this._jsonInterface, returnFormat)) : [];
			const filter = (_a$3 = options === null || options === void 0 ? void 0 : options.filter) !== null && _a$3 !== void 0 ? _a$3 : {};
			const filterKeys = Object.keys(filter);
			if (filterKeys.length > 0) return decodedLogs.filter((log) => {
				if (typeof log === "string") return true;
				return filterKeys.every((key) => {
					var _a$4;
					if (Array.isArray(filter[key])) return filter[key].some((v) => String(log.returnValues[key]).toUpperCase() === String(v).toUpperCase());
					const inputAbi = (_a$4 = abi.inputs) === null || _a$4 === void 0 ? void 0 : _a$4.filter((input) => input.name === key)[0];
					if ((inputAbi === null || inputAbi === void 0 ? void 0 : inputAbi.indexed) && inputAbi.type === "string") {
						const hashedIndexedString = keccak256Wrapper(filter[key]);
						if (hashedIndexedString === String(log.returnValues[key])) return true;
					}
					return String(log.returnValues[key]).toUpperCase() === String(filter[key]).toUpperCase();
				});
			});
			return decodedLogs;
		});
	}
	_parseAndSetAddress(value, returnFormat = this.defaultReturnFormat) {
		this._address = value ? toChecksumAddress(format({ format: "address" }, value, returnFormat)) : value;
	}
	decodeMethodData(data) {
		const methodSignature = data.slice(0, 10);
		const functionsAbis = this._jsonInterface.filter((j) => j.type !== "error");
		const abi = functionsAbis.find((a) => methodSignature === encodeFunctionSignature(jsonInterfaceMethodToString(a)));
		if (!abi) throw new Web3ContractError(`The ABI for the provided method signature ${methodSignature} was not found.`);
		return decodeFunctionCall(abi, data);
	}
	_parseAndSetJsonInterface(abis, returnFormat = this.defaultReturnFormat) {
		var _a$3, _b;
		this._functions = {};
		this._methods = {};
		this._events = {};
		let result = [];
		const functionsAbi = abis.filter((abi) => abi.type !== "error");
		const errorsAbi = abis.filter((abi) => isAbiErrorFragment(abi));
		for (const a of functionsAbi) {
			const abi = Object.assign(Object.assign({}, a), { signature: "" });
			if (isAbiFunctionFragment(abi)) {
				const methodName = jsonInterfaceMethodToString(abi);
				const methodSignature = encodeFunctionSignature(methodName);
				abi.methodNameWithInputs = methodName;
				abi.signature = methodSignature;
				abi.constant = abi.stateMutability === "view" || abi.stateMutability === "pure" || abi.constant;
				abi.payable = abi.stateMutability === "payable" || abi.payable;
				this._overloadedMethodAbis.set(abi.name, [...(_a$3 = this._overloadedMethodAbis.get(abi.name)) !== null && _a$3 !== void 0 ? _a$3 : [], abi]);
				const abiFragment = (_b = this._overloadedMethodAbis.get(abi.name)) !== null && _b !== void 0 ? _b : [];
				const contractMethod = this._createContractMethod(abiFragment, errorsAbi);
				const exactContractMethod = this._createContractMethod(abiFragment, errorsAbi, true);
				this._functions[methodName] = {
					signature: methodSignature,
					method: exactContractMethod
				};
				this._methods[abi.name] = contractMethod;
				this._methods[methodName] = exactContractMethod;
				this._methods[methodSignature] = exactContractMethod;
			} else if (isAbiEventFragment(abi)) {
				const eventName = jsonInterfaceMethodToString(abi);
				const eventSignature = encodeEventSignature(eventName);
				const event = this._createContractEvent(abi, returnFormat);
				abi.signature = eventSignature;
				if (!(eventName in this._events) || abi.name === "bound") this._events[eventName] = event;
				this._events[abi.name] = event;
				this._events[eventSignature] = event;
			}
			result = [...result, abi];
		}
		this._events.allEvents = this._createContractEvent(ALL_EVENTS_ABI, returnFormat);
		this._jsonInterface = [...result];
		this._errorsInterface = errorsAbi;
	}
	_getAbiParams(abi, params) {
		var _a$3;
		try {
			return transformJsonDataToAbiFormat((_a$3 = abi.inputs) !== null && _a$3 !== void 0 ? _a$3 : [], params);
		} catch (error) {
			throw new Web3ContractError(`Invalid parameters for method ${abi.name}: ${error.message}`);
		}
	}
	_createContractMethod(abiArr, errorsAbis, exact = false) {
		const abi = abiArr[abiArr.length - 1];
		return (...params) => {
			var _a$3, _b, _c;
			let abiParams;
			const abis = (_b = exact ? (_a$3 = this._overloadedMethodAbis.get(abi.name)) === null || _a$3 === void 0 ? void 0 : _a$3.filter((_abi) => _abi.signature === abi.signature) : this._overloadedMethodAbis.get(abi.name)) !== null && _b !== void 0 ? _b : [];
			let methodAbi = abis[0];
			const internalErrorsAbis = errorsAbis;
			const arrayOfAbis = abis.filter((_abi) => {
				var _a$4;
				return ((_a$4 = _abi.inputs) !== null && _a$4 !== void 0 ? _a$4 : []).length === params.length;
			});
			if (abis.length === 1 || arrayOfAbis.length === 0) {
				abiParams = this._getAbiParams(methodAbi, params);
				validator.validate((_c = abi.inputs) !== null && _c !== void 0 ? _c : [], abiParams);
			} else {
				const errors = [];
				const applicableMethodAbi = [];
				for (const _abi of arrayOfAbis) try {
					abiParams = this._getAbiParams(_abi, params);
					validator.validate(_abi.inputs, abiParams);
					applicableMethodAbi.push(_abi);
				} catch (e) {
					errors.push(e);
				}
				if (applicableMethodAbi.length === 1) [methodAbi] = applicableMethodAbi;
				else if (applicableMethodAbi.length > 1) {
					[methodAbi] = applicableMethodAbi;
					console.warn(`Multiple methods found that is compatible with the given inputs.\n\tFound ${applicableMethodAbi.length} compatible methods: ${JSON.stringify(applicableMethodAbi.map((m) => `${m.methodNameWithInputs} (signature: ${m.signature})`))} \n\tThe first one will be used: ${methodAbi.methodNameWithInputs}`);
				}
				if (errors.length === arrayOfAbis.length) throw new Web3ValidatorError(errors);
			}
			const methods = {
				arguments: abiParams,
				call: (options, block) => __awaiter$9(this, void 0, void 0, function* () {
					return this._contractMethodCall(methodAbi, abiParams, internalErrorsAbis, options, block);
				}),
				send: (options) => this._contractMethodSend(methodAbi, abiParams, internalErrorsAbis, options),
				populateTransaction: (options, contractOptions) => {
					var _a$4, _b$1;
					let modifiedContractOptions = contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options;
					modifiedContractOptions = Object.assign(Object.assign({}, modifiedContractOptions), {
						input: void 0,
						from: (_b$1 = (_a$4 = modifiedContractOptions === null || modifiedContractOptions === void 0 ? void 0 : modifiedContractOptions.from) !== null && _a$4 !== void 0 ? _a$4 : this.defaultAccount) !== null && _b$1 !== void 0 ? _b$1 : void 0
					});
					const tx = getSendTxParams({
						abi,
						params,
						options: Object.assign(Object.assign({}, options), { dataInputFill: this.config.contractDataInputFill }),
						contractOptions: modifiedContractOptions
					});
					if (tx.dataInputFill) delete tx.dataInputFill;
					return tx;
				},
				estimateGas: (options_1, ...args_1) => __awaiter$9(this, [options_1, ...args_1], void 0, function* (options, returnFormat = this.defaultReturnFormat) {
					return this.contractMethodEstimateGas({
						abi: methodAbi,
						params: abiParams,
						returnFormat,
						options
					});
				}),
				encodeABI: () => encodeMethodABI(methodAbi, abiParams),
				decodeData: (data) => decodeFunctionCall(methodAbi, data),
				createAccessList: (options, block) => __awaiter$9(this, void 0, void 0, function* () {
					return this._contractMethodCreateAccessList(methodAbi, abiParams, internalErrorsAbis, options, block);
				})
			};
			if (methodAbi.stateMutability === "payable") return methods;
			return methods;
		};
	}
	_contractMethodCall(abi, params, errorsAbi, options, block) {
		return __awaiter$9(this, void 0, void 0, function* () {
			var _a$3;
			const tx = getEthTxCallParams({
				abi,
				params,
				options: Object.assign(Object.assign({}, options), { dataInputFill: this.config.contractDataInputFill }),
				contractOptions: Object.assign(Object.assign({}, this.options), { from: (_a$3 = this.options.from) !== null && _a$3 !== void 0 ? _a$3 : this.config.defaultAccount })
			});
			try {
				const result = yield call(this, tx, block, this.defaultReturnFormat);
				return decodeFunctionReturn(abi, result);
			} catch (error) {
				if (error instanceof ContractExecutionError) decodeContractErrorData(errorsAbi, error.cause);
				throw error;
			}
		});
	}
	_contractMethodCreateAccessList(abi, params, errorsAbi, options, block) {
		return __awaiter$9(this, void 0, void 0, function* () {
			var _a$3;
			const tx = getCreateAccessListParams({
				abi,
				params,
				options: Object.assign(Object.assign({}, options), { dataInputFill: this.config.contractDataInputFill }),
				contractOptions: Object.assign(Object.assign({}, this.options), { from: (_a$3 = this.options.from) !== null && _a$3 !== void 0 ? _a$3 : this.config.defaultAccount })
			});
			try {
				return createAccessList(this, tx, block, this.defaultReturnFormat);
			} catch (error) {
				if (error instanceof ContractExecutionError) decodeContractErrorData(errorsAbi, error.cause);
				throw error;
			}
		});
	}
	_contractMethodSend(abi, params, errorsAbi, options, contractOptions) {
		var _a$3, _b;
		let modifiedContractOptions = contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options;
		modifiedContractOptions = Object.assign(Object.assign({}, modifiedContractOptions), {
			input: void 0,
			from: (_b = (_a$3 = modifiedContractOptions.from) !== null && _a$3 !== void 0 ? _a$3 : this.defaultAccount) !== null && _b !== void 0 ? _b : void 0
		});
		const tx = getSendTxParams({
			abi,
			params,
			options: Object.assign(Object.assign({}, options), { dataInputFill: this.config.contractDataInputFill }),
			contractOptions: modifiedContractOptions
		});
		const transactionToSend = isNullish$1(this.transactionMiddleware) ? sendTransaction$1(this, tx, this.defaultReturnFormat, {
			checkRevertBeforeSending: false,
			contractAbi: this._jsonInterface
		}) : sendTransaction$1(this, tx, this.defaultReturnFormat, {
			checkRevertBeforeSending: false,
			contractAbi: this._jsonInterface
		}, this.transactionMiddleware);
		transactionToSend.on("error", (error) => {
			if (error instanceof ContractExecutionError) decodeContractErrorData(errorsAbi, error.cause);
		});
		return transactionToSend;
	}
	contractMethodEstimateGas(_a$3) {
		return __awaiter$9(this, arguments, void 0, function* ({ abi, params, returnFormat, options, contractOptions }) {
			const tx = getEstimateGasParams({
				abi,
				params,
				options: Object.assign(Object.assign({}, options), { dataInputFill: this.config.contractDataInputFill }),
				contractOptions: contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options
			});
			return estimateGas(this, tx, BlockTags.LATEST, returnFormat !== null && returnFormat !== void 0 ? returnFormat : this.defaultReturnFormat);
		});
	}
	_createContractEvent(abi, returnFormat = this.defaultReturnFormat) {
		return (...params) => {
			var _a$3;
			const { topics, fromBlock } = encodeEventABI(this.options, abi, params[0]);
			const sub = new ContractLogsSubscription({
				address: this.options.address,
				topics,
				abi,
				jsonInterface: this._jsonInterface
			}, {
				subscriptionManager: this.subscriptionManager,
				returnFormat
			});
			if (!isNullish$1(fromBlock)) this.getPastEvents(abi.name, {
				fromBlock,
				topics
			}, returnFormat).then((logs) => {
				if (logs) logs.forEach((log) => sub.emit("data", log));
			}).catch((error) => {
				sub.emit("error", new SubscriptionError("Failed to get past events.", error));
			});
			(_a$3 = this.subscriptionManager) === null || _a$3 === void 0 || _a$3.addSubscription(sub).catch((error) => {
				sub.emit("error", new SubscriptionError("Failed to subscribe.", error));
			});
			return sub;
		};
	}
	subscribeToContextEvents(context) {
		const contractThis = this;
		this.context = context;
		if (contractThis.syncWithContext) context.on(Web3ConfigEvent.CONFIG_CHANGE, (event) => {
			contractThis.setConfig({ [event.name]: event.newValue });
		});
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-contract@4.7.2_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-contract/lib/esm/index.js
var esm_default$1 = Contract;

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-ens@4.4.0_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-ens/lib/esm/config.js
/**
* An object holding the interface Ids of the ENS resolver contracts. Please see [how to write a resolver](https://docs.ens.domains/contract-developer-guide/writing-a-resolver).
*/
const interfaceIds = {
	addr: "0x3b3b57de",
	name: "0x691f3431",
	abi: "0x2203ab56",
	pubkey: "0xc8690233",
	text: "0x59d1d43c",
	contenthash: "0xbc1c58d1"
};
/**
* An object holding the functions that are supported by the ENS resolver contracts/interfaces.
*/
const methodsInInterface = {
	setAddr: "addr",
	addr: "addr",
	setPubkey: "pubkey",
	pubkey: "pubkey",
	setContenthash: "contenthash",
	contenthash: "contenthash",
	text: "text",
	name: "name"
};
/**
* An object holding the addressed of the ENS registries on the different networks (mainnet, goerli).
*/
const registryAddresses = {
	main: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
	goerli: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
};
const networkIds = {
	"0x1": "main",
	"0x5": "goerli"
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-ens@4.4.0_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-ens/lib/esm/abi/ens/ENSRegistry.js
const ENSRegistryAbi = [
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "bytes32",
				name: "node",
				type: "bytes32"
			},
			{
				indexed: true,
				internalType: "bytes32",
				name: "label",
				type: "bytes32"
			},
			{
				indexed: false,
				internalType: "address",
				name: "owner",
				type: "address"
			}
		],
		name: "NewOwner",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [{
			indexed: true,
			internalType: "bytes32",
			name: "node",
			type: "bytes32"
		}, {
			indexed: false,
			internalType: "address",
			name: "resolver",
			type: "address"
		}],
		name: "NewResolver",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [{
			indexed: true,
			internalType: "bytes32",
			name: "node",
			type: "bytes32"
		}, {
			indexed: false,
			internalType: "address",
			name: "owner",
			type: "address"
		}],
		name: "Transfer",
		type: "event"
	},
	{
		inputs: [{
			internalType: "address",
			name: "owner",
			type: "address"
		}, {
			internalType: "address",
			name: "operator",
			type: "address"
		}],
		name: "isApprovedForAll",
		outputs: [{
			internalType: "bool",
			name: "",
			type: "bool"
		}],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [{
			internalType: "bytes32",
			name: "node",
			type: "bytes32"
		}],
		name: "owner",
		outputs: [{
			internalType: "address",
			name: "",
			type: "address"
		}],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [{
			internalType: "bytes32",
			name: "node",
			type: "bytes32"
		}],
		name: "recordExists",
		outputs: [{
			internalType: "bool",
			name: "",
			type: "bool"
		}],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [{
			internalType: "bytes32",
			name: "node",
			type: "bytes32"
		}],
		name: "resolver",
		outputs: [{
			internalType: "address",
			name: "",
			type: "address"
		}],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [{
			internalType: "bytes32",
			name: "node",
			type: "bytes32"
		}],
		name: "ttl",
		outputs: [{
			internalType: "uint64",
			name: "",
			type: "uint64"
		}],
		stateMutability: "view",
		type: "function"
	}
];

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-ens@4.4.0_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-ens/lib/esm/abi/ens/PublicResolver.js
const PublicResolverAbi = [
	{
		anonymous: false,
		inputs: [{
			indexed: true,
			internalType: "bytes32",
			name: "node",
			type: "bytes32"
		}, {
			indexed: false,
			internalType: "address",
			name: "a",
			type: "address"
		}],
		name: "AddrChanged",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "bytes32",
				name: "node",
				type: "bytes32"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "coinType",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "bytes",
				name: "newAddress",
				type: "bytes"
			}
		],
		name: "AddressChanged",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "owner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "operator",
				type: "address"
			},
			{
				indexed: false,
				internalType: "bool",
				name: "approved",
				type: "bool"
			}
		],
		name: "ApprovalForAll",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [{
			indexed: true,
			internalType: "bytes32",
			name: "node",
			type: "bytes32"
		}, {
			indexed: false,
			internalType: "bytes",
			name: "hash",
			type: "bytes"
		}],
		name: "ContenthashChanged",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "bytes32",
				name: "node",
				type: "bytes32"
			},
			{
				indexed: false,
				internalType: "bytes",
				name: "name",
				type: "bytes"
			},
			{
				indexed: false,
				internalType: "uint16",
				name: "resource",
				type: "uint16"
			},
			{
				indexed: false,
				internalType: "bytes",
				name: "record",
				type: "bytes"
			}
		],
		name: "DNSRecordChanged",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "bytes32",
				name: "node",
				type: "bytes32"
			},
			{
				indexed: false,
				internalType: "bytes",
				name: "name",
				type: "bytes"
			},
			{
				indexed: false,
				internalType: "uint16",
				name: "resource",
				type: "uint16"
			}
		],
		name: "DNSRecordDeleted",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [{
			indexed: true,
			internalType: "bytes32",
			name: "node",
			type: "bytes32"
		}],
		name: "DNSZoneCleared",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "bytes32",
				name: "node",
				type: "bytes32"
			},
			{
				indexed: false,
				internalType: "bytes",
				name: "lastzonehash",
				type: "bytes"
			},
			{
				indexed: false,
				internalType: "bytes",
				name: "zonehash",
				type: "bytes"
			}
		],
		name: "DNSZonehashChanged",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "bytes32",
				name: "node",
				type: "bytes32"
			},
			{
				indexed: true,
				internalType: "bytes4",
				name: "interfaceID",
				type: "bytes4"
			},
			{
				indexed: false,
				internalType: "address",
				name: "implementer",
				type: "address"
			}
		],
		name: "InterfaceChanged",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [{
			indexed: true,
			internalType: "bytes32",
			name: "node",
			type: "bytes32"
		}, {
			indexed: false,
			internalType: "string",
			name: "name",
			type: "string"
		}],
		name: "NameChanged",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "bytes32",
				name: "node",
				type: "bytes32"
			},
			{
				indexed: false,
				internalType: "bytes32",
				name: "x",
				type: "bytes32"
			},
			{
				indexed: false,
				internalType: "bytes32",
				name: "y",
				type: "bytes32"
			}
		],
		name: "PubkeyChanged",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "bytes32",
				name: "node",
				type: "bytes32"
			},
			{
				indexed: true,
				internalType: "string",
				name: "indexedKey",
				type: "string"
			},
			{
				indexed: false,
				internalType: "string",
				name: "key",
				type: "string"
			}
		],
		name: "TextChanged",
		type: "event"
	},
	{
		inputs: [{
			internalType: "bytes32",
			name: "node",
			type: "bytes32"
		}, {
			internalType: "uint256",
			name: "contentTypes",
			type: "uint256"
		}],
		name: "ABI",
		outputs: [{
			internalType: "uint256",
			name: "",
			type: "uint256"
		}, {
			internalType: "bytes",
			name: "",
			type: "bytes"
		}],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [{
			internalType: "bytes32",
			name: "node",
			type: "bytes32"
		}],
		name: "addr",
		outputs: [{
			internalType: "address payable",
			name: "",
			type: "address"
		}],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [{
			internalType: "bytes32",
			name: "node",
			type: "bytes32"
		}, {
			internalType: "uint256",
			name: "coinType",
			type: "uint256"
		}],
		name: "addr",
		outputs: [{
			internalType: "bytes",
			name: "",
			type: "bytes"
		}],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [{
			internalType: "bytes32",
			name: "node",
			type: "bytes32"
		}],
		name: "contenthash",
		outputs: [{
			internalType: "bytes",
			name: "",
			type: "bytes"
		}],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bytes32",
				name: "node",
				type: "bytes32"
			},
			{
				internalType: "bytes32",
				name: "name",
				type: "bytes32"
			},
			{
				internalType: "uint16",
				name: "resource",
				type: "uint16"
			}
		],
		name: "dnsRecord",
		outputs: [{
			internalType: "bytes",
			name: "",
			type: "bytes"
		}],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [{
			internalType: "bytes32",
			name: "node",
			type: "bytes32"
		}, {
			internalType: "bytes32",
			name: "name",
			type: "bytes32"
		}],
		name: "hasDNSRecords",
		outputs: [{
			internalType: "bool",
			name: "",
			type: "bool"
		}],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [{
			internalType: "bytes32",
			name: "node",
			type: "bytes32"
		}, {
			internalType: "bytes4",
			name: "interfaceID",
			type: "bytes4"
		}],
		name: "interfaceImplementer",
		outputs: [{
			internalType: "address",
			name: "",
			type: "address"
		}],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [{
			internalType: "address",
			name: "account",
			type: "address"
		}, {
			internalType: "address",
			name: "operator",
			type: "address"
		}],
		name: "isApprovedForAll",
		outputs: [{
			internalType: "bool",
			name: "",
			type: "bool"
		}],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [{
			internalType: "bytes32",
			name: "node",
			type: "bytes32"
		}],
		name: "name",
		outputs: [{
			internalType: "string",
			name: "",
			type: "string"
		}],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [{
			internalType: "bytes32",
			name: "node",
			type: "bytes32"
		}],
		name: "pubkey",
		outputs: [{
			internalType: "bytes32",
			name: "x",
			type: "bytes32"
		}, {
			internalType: "bytes32",
			name: "y",
			type: "bytes32"
		}],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [{
			internalType: "bytes4",
			name: "interfaceID",
			type: "bytes4"
		}],
		name: "supportsInterface",
		outputs: [{
			internalType: "bool",
			name: "",
			type: "bool"
		}],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [{
			internalType: "bytes32",
			name: "node",
			type: "bytes32"
		}, {
			internalType: "string",
			name: "key",
			type: "string"
		}],
		name: "text",
		outputs: [{
			internalType: "string",
			name: "",
			type: "string"
		}],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [{
			internalType: "bytes32",
			name: "node",
			type: "bytes32"
		}],
		name: "zonehash",
		outputs: [{
			internalType: "bytes",
			name: "",
			type: "bytes"
		}],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [{
			internalType: "bytes32",
			name: "node",
			type: "bytes32"
		}, {
			internalType: "address",
			name: "a",
			type: "address"
		}],
		name: "setAddr",
		outputs: [],
		stateMutability: "nonpayable",
		type: "function"
	}
];

//#endregion
//#region ../../node_modules/.pnpm/@adraffy+ens-normalize@1.11.0/node_modules/@adraffy/ens-normalize/dist/index.mjs
var COMPRESSED$1 = "";
const FENCED = new Map([
	[8217, "apostrophe"],
	[8260, "fraction slash"],
	[12539, "middle dot"]
]);
const NSM_MAX = 4;
function decode_arithmetic(bytes$1) {
	let pos = 0;
	function u16() {
		return bytes$1[pos++] << 8 | bytes$1[pos++];
	}
	let symbol_count = u16();
	let total = 1;
	let acc = [0, 1];
	for (let i = 1; i < symbol_count; i++) acc.push(total += u16());
	let skip = u16();
	let pos_payload = pos;
	pos += skip;
	let read_width = 0;
	let read_buffer = 0;
	function read_bit() {
		if (read_width == 0) {
			read_buffer = read_buffer << 8 | bytes$1[pos++];
			read_width = 8;
		}
		return read_buffer >> --read_width & 1;
	}
	const N = 31;
	const FULL = 2 ** N;
	const HALF = FULL >>> 1;
	const QRTR = HALF >> 1;
	const MASK = FULL - 1;
	let register = 0;
	for (let i = 0; i < N; i++) register = register << 1 | read_bit();
	let symbols = [];
	let low = 0;
	let range = FULL;
	while (true) {
		let value = Math.floor(((register - low + 1) * total - 1) / range);
		let start = 0;
		let end = symbol_count;
		while (end - start > 1) {
			let mid = start + end >>> 1;
			if (value < acc[mid]) end = mid;
			else start = mid;
		}
		if (start == 0) break;
		symbols.push(start);
		let a = low + Math.floor(range * acc[start] / total);
		let b = low + Math.floor(range * acc[start + 1] / total) - 1;
		while (((a ^ b) & HALF) == 0) {
			register = register << 1 & MASK | read_bit();
			a = a << 1 & MASK;
			b = b << 1 & MASK | 1;
		}
		while (a & ~b & QRTR) {
			register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
			a = a << 1 ^ HALF;
			b = (b ^ HALF) << 1 | HALF | 1;
		}
		low = a;
		range = 1 + b - a;
	}
	let offset = symbol_count - 4;
	return symbols.map((x) => {
		switch (x - offset) {
			case 3: return offset + 65792 + (bytes$1[pos_payload++] << 16 | bytes$1[pos_payload++] << 8 | bytes$1[pos_payload++]);
			case 2: return offset + 256 + (bytes$1[pos_payload++] << 8 | bytes$1[pos_payload++]);
			case 1: return offset + bytes$1[pos_payload++];
			default: return x - 1;
		}
	});
}
function read_payload(v) {
	let pos = 0;
	return () => v[pos++];
}
function read_compressed_payload(s) {
	return read_payload(decode_arithmetic(unsafe_atob(s)));
}
function unsafe_atob(s) {
	let lookup = [];
	[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"].forEach((c, i) => lookup[c.charCodeAt(0)] = i);
	let n = s.length;
	let ret = new Uint8Array(6 * n >> 3);
	for (let i = 0, pos = 0, width = 0, carry = 0; i < n; i++) {
		carry = carry << 6 | lookup[s.charCodeAt(i)];
		width += 6;
		if (width >= 8) ret[pos++] = carry >> (width -= 8);
	}
	return ret;
}
function signed(i) {
	return i & 1 ? ~i >> 1 : i >> 1;
}
function read_deltas(n, next) {
	let v = Array(n);
	for (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());
	return v;
}
function read_sorted(next, prev = 0) {
	let ret = [];
	while (true) {
		let x = next();
		let n = next();
		if (!n) break;
		prev += x;
		for (let i = 0; i < n; i++) ret.push(prev + i);
		prev += n + 1;
	}
	return ret;
}
function read_sorted_arrays(next) {
	return read_array_while(() => {
		let v = read_sorted(next);
		if (v.length) return v;
	});
}
function read_mapped(next) {
	let ret = [];
	while (true) {
		let w = next();
		if (w == 0) break;
		ret.push(read_linear_table(w, next));
	}
	while (true) {
		let w = next() - 1;
		if (w < 0) break;
		ret.push(read_replacement_table(w, next));
	}
	return ret.flat();
}
function read_array_while(next) {
	let v = [];
	while (true) {
		let x = next(v.length);
		if (!x) break;
		v.push(x);
	}
	return v;
}
function read_transposed(n, w, next) {
	let m = Array(n).fill().map(() => []);
	for (let i = 0; i < w; i++) read_deltas(n, next).forEach((x, j) => m[j].push(x));
	return m;
}
function read_linear_table(w, next) {
	let dx = 1 + next();
	let dy = next();
	let vN = read_array_while(next);
	let m = read_transposed(vN.length, 1 + w, next);
	return m.flatMap((v, i) => {
		let [x, ...ys] = v;
		return Array(vN[i]).fill().map((_, j) => {
			let j_dy = j * dy;
			return [x + j * dx, ys.map((y) => y + j_dy)];
		});
	});
}
function read_replacement_table(w, next) {
	let n = 1 + next();
	let m = read_transposed(n, 1 + w, next);
	return m.map((v) => [v[0], v.slice(1)]);
}
function read_trie(next) {
	let ret = [];
	let sorted = read_sorted(next);
	expand(decode$1([]), []);
	return ret;
	function decode$1(Q) {
		let S = next();
		let B = read_array_while(() => {
			let cps = read_sorted(next).map((i) => sorted[i]);
			if (cps.length) return decode$1(cps);
		});
		return {
			S,
			B,
			Q
		};
	}
	function expand({ S, B }, cps, saved) {
		if (S & 4 && saved === cps[cps.length - 1]) return;
		if (S & 2) saved = cps[cps.length - 1];
		if (S & 1) ret.push(cps);
		for (let br of B) for (let cp of br.Q) expand(br, [...cps, cp], saved);
	}
}
function hex_cp(cp) {
	return cp.toString(16).toUpperCase().padStart(2, "0");
}
function quote_cp(cp) {
	return `{${hex_cp(cp)}}`;
}
function explode_cp(s) {
	let cps = [];
	for (let pos = 0, len = s.length; pos < len;) {
		let cp = s.codePointAt(pos);
		pos += cp < 65536 ? 1 : 2;
		cps.push(cp);
	}
	return cps;
}
function str_from_cps(cps) {
	const chunk = 4096;
	let len = cps.length;
	if (len < chunk) return String.fromCodePoint(...cps);
	let buf = [];
	for (let i = 0; i < len;) buf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));
	return buf.join("");
}
function compare_arrays(a, b) {
	let n = a.length;
	let c = n - b.length;
	for (let i = 0; c == 0 && i < n; i++) c = a[i] - b[i];
	return c;
}
var COMPRESSED = "AEUDVgHLCGMATwDUADIAdAAhADQAFAAtABQAIQAPACcADQASAAoAGAAJABIACQARAAUACwAFAAwABQAQAAMABwAEAAoABQAJAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACwANAA0AAwAKAAkABAAdAAYAZwDTAeYDMwCxCl8B8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgPi89uj00MsvBXxEPAGPCDwBnQKoEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiC+AZ4EWRJJFbEu7QDQLARtEbgECxDwAb/RyAk1AV4nD2cEQQKTAzsAGpobWgAahAGPCrysdy0OAKwAfFIcBAQFUmoA/PtZADkBIadVj2UMUgx5Il4ANQC9vAITAdQZWxDzALN9AhsZVwIcGSkCBAgXOhG7AqMZ4M7+1M0UAPDNAWsC+mcJDe8AAQA99zkEXLICyQozAo6lAobcP5JvjQLFzwKD9gU/OD8FEQCtEQL6bW+nAKUEvzjDHsuRyUvOFHcacUz5AqIFRSE2kzsBEQCuaQL5DQTlcgO6twSpTiUgCwIFCAUXBHQEqQV6swAVxUlmTmsCwjqsP/wKJQmXb793UgZBEBsnpRD3DDMBtQE7De1L2ATxBjsEyR99GRkPzZWcCKUt3QztJuMuoYBaI/UqgwXtS/Q83QtNUWgPWQtlCeM6Y4FOAyEBDSKLCt0NOQhtEPMKyWsN5RFFBzkD1UmaAKUHAQsRHTUVtSYQYqwLCTl3Bvsa9guPJq8TKXr8BdMaIQZNASka/wDPLueFsFoxXBxPXwYDCyUjxxSoUCANJUC3eEgaGwcVJakCkUNwSodRNh6TIfY8PQ1mLhNRfAf1PAUZTwuBPJ5Gq0UOEdI+jT1IIklMLAQ1fywvJ4sJzw+FDLl8cgFZCSEJsQxxEzERFzfFCDkHGS2XJCcVCCFGlWCaBPefA/MT0QMLBT8JQQcTA7UcLRMuFSkFDYEk1wLzNtUuswKPVoABFwXLDyUf3xBQR+AO6QibAmUDgyXrAC0VIQAXIpsIQ2MAX4/YUwUuywjHamwjdANnFOdhEXMHkQ5XB6ccMxW/HOFwyF4Lhggoo68JWwF1CZkBXwTjCAk1W4ygIEFnU4tYGJsgYUE/XfwCMQxlFZ9EvYd4AosPaxIbATUBcwc5DQECdxHtEWsQlQjrhgQ1tTP4OiUETyGDIBEKJwNPbM4LJyb5DPhpAaMSYgMMND137merYLYkF/0HGTLFQWAh8QuST80MnBrBGEJULhnkB78D8xrzJ+pBVwX/A6MDEzpNM+4EvQtpCIsJPwBJDqMXB9cYagpxjNABMYsBt5kDV5GDAm+PBjcHCwBnC4cFeeUAHQKnCKMABQDPA1cAOQKtB50AGQCFQQE9AycvASHlAo8DkwgxywGVLwHzKQQbwwwVAPc3bkoCw7ECgGpmogXdWAKOAkk1AU0lBAVOR1EDr3HhANsASwYT30cBFatKyxrjQwHfbysAxwD7AAU1BwVBAc0B820AtwFfCzEJorO1AU3pKQCDABVrAdcCiQDdADUAf/EBUwBNBVn5BdMCT0kBETEYK1dhAbsDHwEzAQ0AeQbLjaXJBx8EbQfTAhAbFeEC7y4HtQEDIt8TzULFAr3eVaFgAmSBAmJCW02vWzcgAqH3AmiYAmYJAp+EOBsLAmY7AmYmBG4EfwN/EwN+kjkGOXcXOYI6IyMCbB0CMjY4CgJtxwJtru+KM2dFKwFnAN4A4QBKBQeYDI0A/gvCAA21AncvAnaiPwJ5S0MCeLodXNtFrkbXAnw/AnrIAn0JAnzwBVkFIEgASH1jJAKBbQKAAAKABQJ/rklYSlsVF0rMAtEBAtDMSycDiE8Dh+ZExZEyAvKhXQMDA65LzkwtJQPPTUxNrwKLPwKK2MEbBx1DZwW3Ao43Ao5cQJeBAo7ZAo5ceFG0UzUKUtRUhQKT+wKTDADpABxVHlWvVdAGLBsplYYy4XhmRTs5ApefAu+yWCGoAFklApaPApZ8nACpWaxaCYFNADsClrUClk5cRFzRApnLAplkXMpdBxkCnJs5wjqdApwWAp+bAp64igAdDzEqDwKd8QKekgC1PWE0Ye8CntMCoG4BqQKenx8Cnk6lY8hkJyUrAievAiZ+AqD7AqBMAqLdAqHEAqYvAqXOAqf/AH0Cp/JofGixAANJahxq0QKs4wKsrgKtZwKtAgJXHQJV3AKx4dcDH05slwKyvQ0CsugXbOBtY21IXwMlzQK2XDs/bpADKUUCuF4CuUcVArkqd3A2cOECvRkCu9pwlgMyEQK+iHICAzNxAr4acyJzTwLDywLDBHOCdEs1RXTgAzynAzyaAz2/AsV8AsZHAsYQiQLIaVECyEQCyU8CyS4CZJ0C3dJ4eWF4rnklS9ADGKNnAgJh9BnzlSR7C16SXrsRAs9rAs9sL0tT0vMTnwDGrQLPcwEp6gNOEn5LBQLcJwLbigLSTwNSXANTXwEBA1WMgIk/AMsW7WBFghyC04LOg40C2scC2d6EEIRJpzwDhqUALwNkDoZxWfkAVQLfZQLeuHN3AuIv7RQB8zAnAfSbAfLShwLr8wLpcHkC6vkC6uQA+UcBuQLuiQLrnJaqlwMC7j8DheCYeXDgcaEC8wMAaQOOFpmTAvcTA5FuA5KHAveYAvnZAvhmmhyaq7s3mx4DnYMC/voBGwA5nxyfswMFjQOmagOm2QDRxQMGaqGIogUJAwxJAtQAPwMA4UEXUwER8wNrB5dnBQCTLSu3r73bAYmZFH8RBDkB+ykFIQ6dCZ8Akv0TtRQrxQL3LScApQC3BbmOkRc/xqdtQS4UJo0uAUMBgPwBtSYAdQMOBG0ALAIWDKEAAAoCPQJqA90DfgSRASBFBSF8CgAFAEQAEwA2EgJ3AQAF1QNr7wrFAgD3Cp8nv7G35QGRIUFCAekUfxE0wIkABAAbAFoCRQKEiwAGOlM6lI1tALg6jzrQAI04wTrcAKUA6ADLATqBOjs5/Dn5O3aJOls7nok6bzkYAVYBMwFsBS81XTWeNa01ZjV1NbY1xTWCNZE10jXhNZ41rTXuNf01sjXBNgI2ETXGNdU2FjYnNd417TYuNj02LjUtITY6Nj02PDbJNwgEkDxXNjg23TcgNw82yiA3iTcwCgSwPGc2JDcZN2w6jTchQtRDB0LgQwscDw8JmyhtKFFVBgDpfwDpsAD+mxQ91wLpNSMArQC9BbeOkRdLxptzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgELgEaJZkC7aMAoQCjBcGOmxdNxrsBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUHqSvAj5Gqwr7YrMUACT9AN3rlr3JG9m8w9lIAXltp/v8kfWaIaaR9OwpAES/I3ZVamDXSgB/UsOgAG6D0tq+5CIqE15FiAhV3yA2VhCQ7tj+m6xXaF53FIfGi/IAZIskMGAi2MU7MDVJNCbMzERyHZi+osdPtnFVbvq653O8rwaCy4IAf9OOok65AqJUtUriUfYsGPPVbe6jm0s9lbKlPCUKjdkHsFsEhvX4kT39ZCtAAbwQdn/h4TpO5hTByWAmr5n+Wuwhdegv6bmvX4LyOes3z2+cuHv2JFYwVMNuq2gzn8YHTjlUQd39osyWei4NKl3LAdfxlO876hh5ENp/cOvpuI9bF55guEthLLPOXjD4dktTH04P5TvZrWTM0e4+BHJxj7MLApXIFOs0sWKhNkG8iwuM5wR83my6V3wW06abhDzTXYfOr/ZpFXgXzmv4d12FFyP00/dPGbIVGV5ao8UufGzUwp/IHx6v/wDWJr9iaoCulhWwlZ7A8q/NMoD12+mBdNRgJYnThRLtMx1Bgwttn8/4Qn2CDfOSup9GVXEvA21ILgp0owHYxNOkpwLWz0G7K+WREIDjIzUzSn8I99CuJSmSpPyH0Ke6/NERYiNx+3dncSebPnOUnnWD61AhJ1n/tSLZmU5wYO5GfgzyAYJm6VL91LxZ8hL1lfximQxIDMRhIecQZBmeE5R0XlrpvwplVrJwpa8BBCdp93GPP9lyBeZ2zkRr920CR3cYbKpKHfogvm0nV7XdDz6EbjzlxADCMjSLXuXpIpyuizy39yY+I+H9rmpoIF3YwEjlH9MgGgWcCNTjHEWMqAbprn2Ox7rOHupaVE3lNyg3nt5XaZID6Y+uml5Ja+aOPu+BI+DZbiJVfaspUadakWUX6TA4dETkIqdJJHYnU4Z4yKpt5y8rVIahoMUf8A8kWtAQNCTbjp71gx3/zVdqNz1Sutkw0gFIMVm2BF4Xdv/0olw+NaDIR9Bb3DPweZA2K/cw+/b+AwyWl9ZOP67A9nexmeTNjfdzPGf9J6E6BMPKa5lJh+qNsdUz3HBUevU71eQFCqOcxiIYhacAhh/8PX0J5DdSViZ6WazDDx7cukJNpMfEkYLJ5Ao4vLoVd3d25Pg4qaVa2p2D2L3WvYPJ5Yf/A/MSxptjlgXL/KJtP2U0cRv2I09ATAiWCJYuRwiapeKFsqmi18yMMulDp3HdcIldq+7jkwsJUOHLHCzzzBw5XFvL0CAmo1ub456z7zb7shk3KPGCLZzr47oT1k/j06XNnJvG3Udv6XrP+wsqTBlZ5MaNPt9FOs/4Bt/ja/vbVhTNpBFl9Gq7MqINvGlWKOAwQzwOZy+EzSdjAqKJVV2YcskTuM94aIK+kc/AZaXiZLPREUDpkXIV947IFfj+85TrqPqLfkGcxgboMQjosf+az+odLNXdyp1mDNGsqSdK/pJ2Ca04mt/4d6s1X+lncOEYaGBBeW4pApGcjf7/XJCFbj3N3mFb+BtlIcw8ZiDKoClFX9Rf0bxCqtLpicObKJzBVVHr/6u4siH2hK75RNv7w9GfTbhJOQBYiFUZAByY4rn37tZBHT//kqKsNi3ryL9AqXJRzqiMIJMhILjoi/i8LVEsbu+Ih9bsyW16sgQqjYLO0qda6KaCPKj3DQcu6CfV5lKtjS3ZCdqLAZkOey9MR+QutJBGiz/r15GVD6rCVwJR4UUKC4GNJkfDf00OMW8aQtLSAGLXV8MIi9mbbl/qQEpxCm2L5hutFX4ekeLH4QgBWUFKs/2VVMKy46WtFE6AbwgmYm/Z0yHk5veDIrcl2HpVqb/rSE0PC9EbDzJEWqeaPhh7vF369Umq2kSiB3s5rBI6c/7N9bkRu4h2n+/h5nSwy+7n+/I+6oXQVANo2Jb5zDwtiBPf1ySCzHdT6yJShMzqSRZfnykX49CaFaxhoVF4PBhEuECJ1PrFYSpmHuyYsl14DTAV9ZxRms1XiR/kBrjhZjidOt0UNe+GSml7XNgpVw8YsUTmZXLTK+6iYnyW/wYR1W4UXwOi14xpFROHb6HcZzksgF5DbL2AFXzKNwHU2adjdAY+KCyM/cwRTBkkq/a227NI0q6DR2MkMCRu620t79bGcYUmACtqN3mk/0uNwd3JSXHqE1kzf6Yyj0W2083JNDRnIXDlgBxJ6uf58NN1f6FQiRCWB4egF8QDx74AixV8oTyw7PluIjr3/rj/WzgwPSq4xPojaF7V0xqG2u5ti2L1h6yYHv73Isrukr0kURDIEjClBsBx7kdcXUxaYMS0syT3ymLzDzslNDWQOT1Tao1YNmJHARUenhCkmV9tqCPGI5GqZaRpkiPxyjoncWjyOHYGqvbvRX+Bn1pn7EhRNXa1lqJPmoeN5VqdqIDPhEVhFsyG0d4iQEIYX0wZUbY2XbZWYlpZ/l66IrDDY0q1C1YzBDpHC4h05YqHQLqS9anyl22JQ6lEvjvdBwMHfE7z0luCXD34/rFeDa2TmSeEAykSpYO5j1G/nsgpR3qn0qaQEmLjnnLfcz+veoYqPnRqmRGwCJ6FJ3Gm/Z1/aVX5PSb03MMnjAf41ww54sD5k8FrkfBP+K0b1MrYpapWjtpZfve2HVf4ickX3LKSOhu7qI1Vd4c1kNrn2ajy1t4y93JhV4fnWCKq7OmFpcr7FjdJCXPTql0Drr14Ho3Z87+GPQ4Z/DcTiGqtvZxlRYi8cNuhXABveZIwNl/BX1huhVLaFax5OqypUrQRyb9OE3SSkPlDdy5uo5XGg2EIGEjLY1MO5cr1ibfiFWV7zspcTgkBKkwo5jPyAin04LqizZXb2tDRgwKJjGx4cVk3ngAQixwcxjYAg2Q7vmUR/hpwInMdw7OhC2qyf41vTPkudQAORS0DdLtOGQxb4fH2VYGsvJCkeWPeUwtf1/tuIhzXEThoCZzzSJqqjUtbaPI3ntHm3T5uf849hGUA0zU8ni5W+EEn3/0Y6oUhQFw9z0aGjkljBbAlFXc0y82G2wkd7VdgWa5KTgJJNjNwZMfmdnUIUn1JU5LiWX5UZEZbVlKSN76mlmjUR2ku+fucTNlO4IAAahnLjBhlvQNR9pe9swGBgq0YR7P3VCyI/seYwQ4QBzy9X+HPePgoF8WfKaJ4MBOhLCGHae6Z8xkNXwni9QAKvTNtVA56x8YJflZ/VvONRSlsSLmiSyNMnTjTaE1ko81zkzGEnVwEhjCzlwIqpxmpDAqwsEmtpdr3xpc7i/ZX3f2TzT3M0FdxIEQvO1jgmmiN+D1YpMduAzEhBtj2OBkMN/rv6p7Th4pSH6f5aH3aTvwFTl7EOSgGASI7ttyMehzpm4AVyK+bFEaFg9gnZsSUPpsbAe/0RFhrH+EXZ12Z7thf4dzN1+Sn+G8QrDA1VKaN4IFxD1rQz9Xq9Coii9S9/hPbTGjyBwFH3H1UdQuz5KsgPDEHua4/kPg2Gp/IIItsaLWBqiT9XH45MiQxSosGJ56H/0F2cjcCFd72l1665RNHURdC3lspI77esfJsl+rXXabkAy7vxDXG/XGGcKpwiKDPFfvMEgjkAHil4Za1F36RnyxxvdIAzvgfH8knukYDck07tc++DP4TdWeI7HXuq5Yl6VVFrUQtf64/dkXewlKZSHQo6YvCSpREB0GDrz+Ys2GfO8nw2SwrYwaf88AifzlPvP17bf1mI3AuccJvAjZIpBmqvharKFAebEjVKfGAwpQjWoXlm9LROsq9bCk1UeQ3CJxJqprzssS/Q04JeS1ReCCubL3J7sx86spkP4eNpp95UF+8K748icIs8vdILFklk9skQqi1So6cx3X906pvy1vz+KipTJ8fiVJxsV5MmT0XwA";
const S0 = 44032;
const L0 = 4352;
const V0 = 4449;
const T0 = 4519;
const L_COUNT = 19;
const V_COUNT = 21;
const T_COUNT = 28;
const N_COUNT = V_COUNT * T_COUNT;
const S_COUNT = L_COUNT * N_COUNT;
const S1 = S0 + S_COUNT;
const L1 = L0 + L_COUNT;
const V1 = V0 + V_COUNT;
const T1 = T0 + T_COUNT;
function unpack_cc(packed) {
	return packed >> 24 & 255;
}
function unpack_cp(packed) {
	return packed & 16777215;
}
let SHIFTED_RANK, EXCLUSIONS, DECOMP, RECOMP;
function init$1() {
	let r = read_compressed_payload(COMPRESSED);
	SHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v, i) => v.map((x) => [x, i + 1 << 24])));
	EXCLUSIONS = new Set(read_sorted(r));
	DECOMP = /* @__PURE__ */ new Map();
	RECOMP = /* @__PURE__ */ new Map();
	for (let [cp, cps] of read_mapped(r)) {
		if (!EXCLUSIONS.has(cp) && cps.length == 2) {
			let [a, b] = cps;
			let bucket = RECOMP.get(a);
			if (!bucket) {
				bucket = /* @__PURE__ */ new Map();
				RECOMP.set(a, bucket);
			}
			bucket.set(b, cp);
		}
		DECOMP.set(cp, cps.reverse());
	}
}
function is_hangul(cp) {
	return cp >= S0 && cp < S1;
}
function compose_pair(a, b) {
	if (a >= L0 && a < L1 && b >= V0 && b < V1) return S0 + (a - L0) * N_COUNT + (b - V0) * T_COUNT;
	else if (is_hangul(a) && b > T0 && b < T1 && (a - S0) % T_COUNT == 0) return a + (b - T0);
	else {
		let recomp = RECOMP.get(a);
		if (recomp) {
			recomp = recomp.get(b);
			if (recomp) return recomp;
		}
		return -1;
	}
}
function decomposed(cps) {
	if (!SHIFTED_RANK) init$1();
	let ret = [];
	let buf = [];
	let check_order = false;
	function add$1(cp) {
		let cc = SHIFTED_RANK.get(cp);
		if (cc) {
			check_order = true;
			cp |= cc;
		}
		ret.push(cp);
	}
	for (let cp of cps) while (true) {
		if (cp < 128) ret.push(cp);
		else if (is_hangul(cp)) {
			let s_index = cp - S0;
			let l_index = s_index / N_COUNT | 0;
			let v_index = s_index % N_COUNT / T_COUNT | 0;
			let t_index = s_index % T_COUNT;
			add$1(L0 + l_index);
			add$1(V0 + v_index);
			if (t_index > 0) add$1(T0 + t_index);
		} else {
			let mapped = DECOMP.get(cp);
			if (mapped) buf.push(...mapped);
			else add$1(cp);
		}
		if (!buf.length) break;
		cp = buf.pop();
	}
	if (check_order && ret.length > 1) {
		let prev_cc = unpack_cc(ret[0]);
		for (let i = 1; i < ret.length; i++) {
			let cc = unpack_cc(ret[i]);
			if (cc == 0 || prev_cc <= cc) {
				prev_cc = cc;
				continue;
			}
			let j = i - 1;
			while (true) {
				let tmp = ret[j + 1];
				ret[j + 1] = ret[j];
				ret[j] = tmp;
				if (!j) break;
				prev_cc = unpack_cc(ret[--j]);
				if (prev_cc <= cc) break;
			}
			prev_cc = unpack_cc(ret[i]);
		}
	}
	return ret;
}
function composed_from_decomposed(v) {
	let ret = [];
	let stack = [];
	let prev_cp = -1;
	let prev_cc = 0;
	for (let packed of v) {
		let cc = unpack_cc(packed);
		let cp = unpack_cp(packed);
		if (prev_cp == -1) if (cc == 0) prev_cp = cp;
		else ret.push(cp);
		else if (prev_cc > 0 && prev_cc >= cc) {
			if (cc == 0) {
				ret.push(prev_cp, ...stack);
				stack.length = 0;
				prev_cp = cp;
			} else stack.push(cp);
			prev_cc = cc;
		} else {
			let composed = compose_pair(prev_cp, cp);
			if (composed >= 0) prev_cp = composed;
			else if (prev_cc == 0 && cc == 0) {
				ret.push(prev_cp);
				prev_cp = cp;
			} else {
				stack.push(cp);
				prev_cc = cc;
			}
		}
	}
	if (prev_cp >= 0) ret.push(prev_cp, ...stack);
	return ret;
}
function nfd(cps) {
	return decomposed(cps).map(unpack_cp);
}
function nfc(cps) {
	return composed_from_decomposed(decomposed(cps));
}
const HYPHEN = 45;
const STOP_CH = ".";
const FE0F = 65039;
const UNIQUE_PH = 1;
const Array_from = (x) => Array.from(x);
function group_has_cp(g, cp) {
	return g.P.has(cp) || g.Q.has(cp);
}
var Emoji = class extends Array {
	get is_emoji() {
		return true;
	}
};
let MAPPED, IGNORED, CM, NSM, ESCAPE, NFC_CHECK, GROUPS, WHOLE_VALID, WHOLE_MAP, VALID, EMOJI_LIST, EMOJI_ROOT;
function init() {
	if (MAPPED) return;
	let r = read_compressed_payload(COMPRESSED$1);
	const read_sorted_array = () => read_sorted(r);
	const read_sorted_set = () => new Set(read_sorted_array());
	const set_add_many = (set, v) => v.forEach((x) => set.add(x));
	MAPPED = new Map(read_mapped(r));
	IGNORED = read_sorted_set();
	CM = read_sorted_array();
	NSM = new Set(read_sorted_array().map((i) => CM[i]));
	CM = new Set(CM);
	ESCAPE = read_sorted_set();
	NFC_CHECK = read_sorted_set();
	let chunks = read_sorted_arrays(r);
	let unrestricted = r();
	const read_chunked = () => {
		let set = /* @__PURE__ */ new Set();
		read_sorted_array().forEach((i) => set_add_many(set, chunks[i]));
		set_add_many(set, read_sorted_array());
		return set;
	};
	GROUPS = read_array_while((i) => {
		let N = read_array_while(r).map((x) => x + 96);
		if (N.length) {
			let R = i >= unrestricted;
			N[0] -= 32;
			N = str_from_cps(N);
			if (R) N = `Restricted[${N}]`;
			let P = read_chunked();
			let Q = read_chunked();
			let M = !r();
			return {
				N,
				P,
				Q,
				M,
				R
			};
		}
	});
	WHOLE_VALID = read_sorted_set();
	WHOLE_MAP = /* @__PURE__ */ new Map();
	let wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a, b) => a - b);
	wholes.forEach((cp, i) => {
		let d = r();
		let w = wholes[i] = d ? wholes[i - d] : {
			V: [],
			M: /* @__PURE__ */ new Map()
		};
		w.V.push(cp);
		if (!WHOLE_VALID.has(cp)) WHOLE_MAP.set(cp, w);
	});
	for (let { V, M } of new Set(WHOLE_MAP.values())) {
		let recs = [];
		for (let cp of V) {
			let gs = GROUPS.filter((g) => group_has_cp(g, cp));
			let rec = recs.find(({ G }) => gs.some((g) => G.has(g)));
			if (!rec) {
				rec = {
					G: /* @__PURE__ */ new Set(),
					V: []
				};
				recs.push(rec);
			}
			rec.V.push(cp);
			set_add_many(rec.G, gs);
		}
		let union = recs.flatMap((x) => Array_from(x.G));
		for (let { G, V: V$1 } of recs) {
			let complement = new Set(union.filter((g) => !G.has(g)));
			for (let cp of V$1) M.set(cp, complement);
		}
	}
	VALID = /* @__PURE__ */ new Set();
	let multi = /* @__PURE__ */ new Set();
	const add_to_union = (cp) => VALID.has(cp) ? multi.add(cp) : VALID.add(cp);
	for (let g of GROUPS) {
		for (let cp of g.P) add_to_union(cp);
		for (let cp of g.Q) add_to_union(cp);
	}
	for (let cp of VALID) if (!WHOLE_MAP.has(cp) && !multi.has(cp)) WHOLE_MAP.set(cp, UNIQUE_PH);
	set_add_many(VALID, nfd(VALID));
	EMOJI_LIST = read_trie(r).map((v) => Emoji.from(v)).sort(compare_arrays);
	EMOJI_ROOT = /* @__PURE__ */ new Map();
	for (let cps of EMOJI_LIST) {
		let prev = [EMOJI_ROOT];
		for (let cp of cps) {
			let next = prev.map((node) => {
				let child = node.get(cp);
				if (!child) {
					child = /* @__PURE__ */ new Map();
					node.set(cp, child);
				}
				return child;
			});
			if (cp === FE0F) prev.push(...next);
			else prev = next;
		}
		for (let x of prev) x.V = cps;
	}
}
function quoted_cp(cp) {
	return (should_escape(cp) ? "" : `${bidi_qq(safe_str_from_cps([cp]))} `) + quote_cp(cp);
}
function bidi_qq(s) {
	return `"${s}"\u200E`;
}
function check_label_extension(cps) {
	if (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) throw new Error(`invalid label extension: "${str_from_cps(cps.slice(0, 4))}"`);
}
function check_leading_underscore(cps) {
	const UNDERSCORE = 95;
	for (let i = cps.lastIndexOf(UNDERSCORE); i > 0;) if (cps[--i] !== UNDERSCORE) throw new Error("underscore allowed only at start");
}
function check_fenced(cps) {
	let cp = cps[0];
	let prev = FENCED.get(cp);
	if (prev) throw error_placement(`leading ${prev}`);
	let n = cps.length;
	let last = -1;
	for (let i = 1; i < n; i++) {
		cp = cps[i];
		let match = FENCED.get(cp);
		if (match) {
			if (last == i) throw error_placement(`${prev} + ${match}`);
			last = i + 1;
			prev = match;
		}
	}
	if (last == n) throw error_placement(`trailing ${prev}`);
}
function safe_str_from_cps(cps, max = Infinity, quoter = quote_cp) {
	let buf = [];
	if (is_combining_mark(cps[0])) buf.push("◌");
	if (cps.length > max) {
		max >>= 1;
		cps = [
			...cps.slice(0, max),
			8230,
			...cps.slice(-max)
		];
	}
	let prev = 0;
	let n = cps.length;
	for (let i = 0; i < n; i++) {
		let cp = cps[i];
		if (should_escape(cp)) {
			buf.push(str_from_cps(cps.slice(prev, i)));
			buf.push(quoter(cp));
			prev = i + 1;
		}
	}
	buf.push(str_from_cps(cps.slice(prev, n)));
	return buf.join("");
}
function is_combining_mark(cp, only_nsm) {
	init();
	return only_nsm ? NSM.has(cp) : CM.has(cp);
}
function should_escape(cp) {
	init();
	return ESCAPE.has(cp);
}
function ens_normalize(name$1) {
	return flatten(split(name$1, nfc, filter_fe0f));
}
function split(name$1, nf, ef) {
	if (!name$1) return [];
	init();
	let offset = 0;
	return name$1.split(STOP_CH).map((label) => {
		let input = explode_cp(label);
		let info = {
			input,
			offset
		};
		offset += input.length + 1;
		try {
			let tokens = info.tokens = tokens_from_str(input, nf, ef);
			let token_count = tokens.length;
			let type;
			if (!token_count) throw new Error(`empty label`);
			let norm = info.output = tokens.flat();
			check_leading_underscore(norm);
			let emoji = info.emoji = token_count > 1 || tokens[0].is_emoji;
			if (!emoji && norm.every((cp) => cp < 128)) {
				check_label_extension(norm);
				type = "ASCII";
			} else {
				let chars = tokens.flatMap((x) => x.is_emoji ? [] : x);
				if (!chars.length) type = "Emoji";
				else {
					if (CM.has(norm[0])) throw error_placement("leading combining mark");
					for (let i = 1; i < token_count; i++) {
						let cps = tokens[i];
						if (!cps.is_emoji && CM.has(cps[0])) throw error_placement(`emoji + combining mark: "${str_from_cps(tokens[i - 1])} + ${safe_str_from_cps([cps[0]])}"`);
					}
					check_fenced(norm);
					let unique = Array_from(new Set(chars));
					let [g] = determine_group(unique);
					check_group(g, chars);
					check_whole(g, unique);
					type = g.N;
				}
			}
			info.type = type;
		} catch (err) {
			info.error = err;
		}
		return info;
	});
}
function check_whole(group, unique) {
	let maker;
	let shared = [];
	for (let cp of unique) {
		let whole = WHOLE_MAP.get(cp);
		if (whole === UNIQUE_PH) return;
		if (whole) {
			let set = whole.M.get(cp);
			maker = maker ? maker.filter((g) => set.has(g)) : Array_from(set);
			if (!maker.length) return;
		} else shared.push(cp);
	}
	if (maker) {
		for (let g of maker) if (shared.every((cp) => group_has_cp(g, cp))) throw new Error(`whole-script confusable: ${group.N}/${g.N}`);
	}
}
function determine_group(unique) {
	let groups = GROUPS;
	for (let cp of unique) {
		let gs = groups.filter((g) => group_has_cp(g, cp));
		if (!gs.length) if (!GROUPS.some((g) => group_has_cp(g, cp))) throw error_disallowed(cp);
		else throw error_group_member(groups[0], cp);
		groups = gs;
		if (gs.length == 1) break;
	}
	return groups;
}
function flatten(split$2) {
	return split$2.map(({ input, error, output: output$1 }) => {
		if (error) {
			let msg = error.message;
			throw new Error(split$2.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input, 63))}: ${msg}`);
		}
		return str_from_cps(output$1);
	}).join(STOP_CH);
}
function error_disallowed(cp) {
	return /* @__PURE__ */ new Error(`disallowed character: ${quoted_cp(cp)}`);
}
function error_group_member(g, cp) {
	let quoted = quoted_cp(cp);
	let gg = GROUPS.find((g$1) => g$1.P.has(cp));
	if (gg) quoted = `${gg.N} ${quoted}`;
	return /* @__PURE__ */ new Error(`illegal mixture: ${g.N} + ${quoted}`);
}
function error_placement(where) {
	return /* @__PURE__ */ new Error(`illegal placement: ${where}`);
}
function check_group(g, cps) {
	for (let cp of cps) if (!group_has_cp(g, cp)) throw error_group_member(g, cp);
	if (g.M) {
		let decomposed$1 = nfd(cps);
		for (let i = 1, e = decomposed$1.length; i < e; i++) if (NSM.has(decomposed$1[i])) {
			let j = i + 1;
			for (let cp; j < e && NSM.has(cp = decomposed$1[j]); j++) for (let k = i; k < j; k++) if (decomposed$1[k] == cp) throw new Error(`duplicate non-spacing marks: ${quoted_cp(cp)}`);
			if (j - i > NSM_MAX) throw new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed$1.slice(i - 1, j)))} (${j - i}/${NSM_MAX})`);
			i = j;
		}
	}
}
function tokens_from_str(input, nf, ef) {
	let ret = [];
	let chars = [];
	input = input.slice().reverse();
	while (input.length) {
		let emoji = consume_emoji_reversed(input);
		if (emoji) {
			if (chars.length) {
				ret.push(nf(chars));
				chars = [];
			}
			ret.push(ef(emoji));
		} else {
			let cp = input.pop();
			if (VALID.has(cp)) chars.push(cp);
			else {
				let cps = MAPPED.get(cp);
				if (cps) chars.push(...cps);
				else if (!IGNORED.has(cp)) throw error_disallowed(cp);
			}
		}
	}
	if (chars.length) ret.push(nf(chars));
	return ret;
}
function filter_fe0f(cps) {
	return cps.filter((cp) => cp != FE0F);
}
function consume_emoji_reversed(cps, eaten) {
	let node = EMOJI_ROOT;
	let emoji;
	let pos = cps.length;
	while (pos) {
		node = node.get(cps[--pos]);
		if (!node) break;
		let { V } = node;
		if (V) {
			emoji = V;
			if (eaten) eaten.push(...cps.slice(pos).reverse());
			cps.length = pos;
		}
	}
	return emoji;
}

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-ens@4.4.0_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-ens/lib/esm/utils.js
const normalize = (name$1) => ens_normalize(name$1);
const namehash = (inputName) => {
	let node = "";
	for (let i = 0; i < 32; i += 1) node += "00";
	if (inputName) {
		const name$1 = normalize(inputName);
		const labels = name$1.split(".");
		for (let i = labels.length - 1; i >= 0; i -= 1) {
			const labelSha = sha3Raw(labels[i]).slice(2);
			node = sha3Raw(`0x${node}${labelSha}`).slice(2);
		}
	}
	return `0x${node}`;
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-ens@4.4.0_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-ens/lib/esm/registry.js
var __awaiter$8 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
var Registry = class {
	constructor(context, customRegistryAddress) {
		this.contract = new Contract(ENSRegistryAbi, customRegistryAddress !== null && customRegistryAddress !== void 0 ? customRegistryAddress : registryAddresses.main, context);
		this.context = context;
	}
	getOwner(name$1) {
		return __awaiter$8(this, void 0, void 0, function* () {
			try {
				const result = this.contract.methods.owner(namehash(name$1)).call();
				return result;
			} catch (error) {
				throw new Error();
			}
		});
	}
	getTTL(name$1) {
		return __awaiter$8(this, void 0, void 0, function* () {
			try {
				return this.contract.methods.ttl(namehash(name$1)).call();
			} catch (error) {
				throw new Error();
			}
		});
	}
	recordExists(name$1) {
		return __awaiter$8(this, void 0, void 0, function* () {
			try {
				const promise = this.contract.methods.recordExists(namehash(name$1)).call();
				return promise;
			} catch (error) {
				throw new Error();
			}
		});
	}
	getResolver(name$1) {
		return __awaiter$8(this, void 0, void 0, function* () {
			try {
				return this.contract.methods.resolver(namehash(name$1)).call().then((address) => {
					if (typeof address === "string") {
						const contract = new Contract(PublicResolverAbi, address, this.context);
						return contract;
					}
					throw new Error();
				});
			} catch (error) {
				throw new Error();
			}
		});
	}
	get events() {
		return this.contract.events;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-ens@4.4.0_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-ens/lib/esm/resolver.js
var __awaiter$7 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
var Resolver = class {
	constructor(registry) {
		this.registry = registry;
	}
	getResolverContractAdapter(ENSName) {
		return __awaiter$7(this, void 0, void 0, function* () {
			return this.registry.getResolver(ENSName);
		});
	}
	checkInterfaceSupport(resolverContract, methodName) {
		var _a$3, _b;
		return __awaiter$7(this, void 0, void 0, function* () {
			if (isNullish(interfaceIds[methodName])) throw new ResolverMethodMissingError((_a$3 = resolverContract.options.address) !== null && _a$3 !== void 0 ? _a$3 : "", methodName);
			const supported = yield resolverContract.methods.supportsInterface(interfaceIds[methodName]).call();
			if (!supported) throw new ResolverMethodMissingError((_b = resolverContract.options.address) !== null && _b !== void 0 ? _b : "", methodName);
		});
	}
	supportsInterface(ENSName, interfaceId) {
		var _a$3;
		return __awaiter$7(this, void 0, void 0, function* () {
			const resolverContract = yield this.getResolverContractAdapter(ENSName);
			let interfaceIdParam = interfaceId;
			if (!isHexStrict(interfaceIdParam)) {
				interfaceIdParam = (_a$3 = sha3(interfaceId)) !== null && _a$3 !== void 0 ? _a$3 : "";
				if (interfaceId === "") throw new Error("Invalid interface Id");
				interfaceIdParam = interfaceIdParam.slice(0, 10);
			}
			return resolverContract.methods.supportsInterface(interfaceIdParam).call();
		});
	}
	getAddress(ENSName, coinType = 60) {
		return __awaiter$7(this, void 0, void 0, function* () {
			const resolverContract = yield this.getResolverContractAdapter(ENSName);
			yield this.checkInterfaceSupport(resolverContract, methodsInInterface.addr);
			return resolverContract.methods.addr(namehash(ENSName), coinType).call();
		});
	}
	getPubkey(ENSName) {
		return __awaiter$7(this, void 0, void 0, function* () {
			const resolverContract = yield this.getResolverContractAdapter(ENSName);
			yield this.checkInterfaceSupport(resolverContract, methodsInInterface.pubkey);
			return resolverContract.methods.pubkey(namehash(ENSName)).call();
		});
	}
	getContenthash(ENSName) {
		return __awaiter$7(this, void 0, void 0, function* () {
			const resolverContract = yield this.getResolverContractAdapter(ENSName);
			yield this.checkInterfaceSupport(resolverContract, methodsInInterface.contenthash);
			return resolverContract.methods.contenthash(namehash(ENSName)).call();
		});
	}
	setAddress(ENSName, address, txConfig) {
		return __awaiter$7(this, void 0, void 0, function* () {
			const resolverContract = yield this.getResolverContractAdapter(ENSName);
			yield this.checkInterfaceSupport(resolverContract, methodsInInterface.setAddr);
			return resolverContract.methods.setAddr(namehash(ENSName), address).send(txConfig);
		});
	}
	getText(ENSName, key) {
		return __awaiter$7(this, void 0, void 0, function* () {
			const resolverContract = yield this.getResolverContractAdapter(ENSName);
			yield this.checkInterfaceSupport(resolverContract, methodsInInterface.text);
			return resolverContract.methods.text(namehash(ENSName), key).call();
		});
	}
	getName(address, checkInterfaceSupport = true) {
		return __awaiter$7(this, void 0, void 0, function* () {
			const reverseName = `${address.toLowerCase().substring(2)}.addr.reverse`;
			const resolverContract = yield this.getResolverContractAdapter(reverseName);
			if (checkInterfaceSupport) yield this.checkInterfaceSupport(resolverContract, methodsInInterface.name);
			return resolverContract.methods.name(namehash(reverseName)).call();
		});
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-ens@4.4.0_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-ens/lib/esm/ens.js
var __awaiter$6 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
/**
* This class is designed to interact with the ENS system on the Ethereum blockchain.
* For using ENS package, first install Web3 package using: `npm i web3` or `yarn add web3` based on your package manager, after that ENS features can be used as mentioned in following snippet.
* ```ts
*
* import { Web3 } from 'web3';
*
* const web3 = new Web3('https://127.0.0.1:4545');
*
* console.log(await web3.eth.ens.getAddress('ethereum.eth'))
* ```
* For using individual package install `web3-eth-ens` packages using: `npm i web3-eth-ens` or `yarn add web3-eth-ens`. This is more efficient approach for building lightweight applications.
*
* ```ts
*import { ENS } from 'web3-eth-ens';
*
* const ens = new ENS(undefined,'https://127.0.0.1:4545');
*
* console.log(await ens.getAddress('vitalik.eth'));
* ```
*/
var ENS = class extends Web3Context {
	/**
	* Use to create an instance of ENS
	* @param registryAddr - (Optional) The address of the ENS registry (default: mainnet registry address)
	* @param provider - (Optional) The provider to use for the ENS instance
	* @example
	* ```ts
	* const ens = new ENS(
	* 	"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
	* 	"http://localhost:8545"
	* );
	*
	* console.log( ens.defaultChain);
	* > mainnet
	* ```
	*/
	constructor(registryAddr, provider) {
		super(provider !== null && provider !== void 0 ? provider : "");
		this.registryAddress = registryAddr !== null && registryAddr !== void 0 ? registryAddr : registryAddresses.main;
		this._registry = new Registry(this.getContextObject(), registryAddr);
		this._resolver = new Resolver(this._registry);
	}
	/**
	* Returns the Resolver by the given address
	* @param name - The name of the ENS domain
	* @returns - An contract instance of the resolver
	*
	* @example
	* ```ts
	* const resolver = await ens.getResolver('resolver');
	*
	* console.log(resolver.options.address);
	* > '0x1234567890123456789012345678901234567890'
	* ```
	*/
	getResolver(name$1) {
		return __awaiter$6(this, void 0, void 0, function* () {
			return this._registry.getResolver(name$1);
		});
	}
	/**
	* Returns true if the record exists
	* @param name - The ENS name
	* @returns - Returns `true` if node exists in this ENS registry. This will return `false` for records that are in the legacy ENS registry but have not yet been migrated to the new one.
	* @example
	* ```ts
	* const exists = await web3.eth.ens.recordExists('ethereum.eth');
	* ```
	*/
	recordExists(name$1) {
		return __awaiter$6(this, void 0, void 0, function* () {
			return this._registry.recordExists(name$1);
		});
	}
	/**
	* Returns the caching TTL (time-to-live) of an ENS name.
	* @param name - The ENS name
	* @returns - Returns the caching TTL (time-to-live) of a name.
	* @example
	* ```ts
	* const owner = await web3.eth.ens.getTTL('ethereum.eth');
	* ```
	*/
	getTTL(name$1) {
		return __awaiter$6(this, void 0, void 0, function* () {
			return this._registry.getTTL(name$1);
		});
	}
	/**
	* Returns the owner by the given name and current configured or detected Registry
	* @param name - The ENS name
	* @returns - Returns the address of the owner of the name.
	* @example
	* ```ts
	* const owner = await web3.eth.ens.getOwner('ethereum.eth');
	* ```
	*/
	getOwner(name$1) {
		return __awaiter$6(this, void 0, void 0, function* () {
			return this._registry.getOwner(name$1);
		});
	}
	/**
	* Resolves an ENS name to an Ethereum address.
	* @param ENSName - The ENS name to resolve
	* @param coinType - (Optional) The coin type, defaults to 60 (ETH)
	* @returns - The Ethereum address of the given name
	* ```ts
	* const address = await web3.eth.ens.getAddress('ethereum.eth');
	* console.log(address);
	* > '0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359'
	* ```
	*/
	getAddress(ENSName, coinType = 60) {
		return __awaiter$6(this, void 0, void 0, function* () {
			return this._resolver.getAddress(ENSName, coinType);
		});
	}
	/**
	* ERC-634 - Returns the text content stored in the resolver for the specified key.
	* @param ENSName - The ENS name to resolve
	* @param key - The key to resolve https://github.com/ethereum/ercs/blob/master/ERCS/erc-634.md#global-keys
	* @returns - The value content stored in the resolver for the specified key
	*/
	getText(ENSNameOrAddr, key) {
		return __awaiter$6(this, void 0, void 0, function* () {
			if (isAddress(ENSNameOrAddr)) return this._resolver.getText(yield this._resolver.getName(ENSNameOrAddr, false), key);
			return this._resolver.getText(ENSNameOrAddr, key);
		});
	}
	/**
	* Resolves the name of an ENS node.
	* @param ENSName - The node to resolve
	* @returns - The name
	*/
	getName(ENSName, checkInterfaceSupport = true) {
		return __awaiter$6(this, void 0, void 0, function* () {
			return this._resolver.getName(ENSName, checkInterfaceSupport);
		});
	}
	/**
	* Returns the X and Y coordinates of the curve point for the public key.
	* @param ENSName - The ENS name
	* @returns - The X and Y coordinates of the curve point for the public key
	* @example
	* ```ts
	* const key = await web3.eth.ens.getPubkey('ethereum.eth');
	* console.log(key);
	* > {
	* "0": "0x0000000000000000000000000000000000000000000000000000000000000000",
	* "1": "0x0000000000000000000000000000000000000000000000000000000000000000",
	* "x": "0x0000000000000000000000000000000000000000000000000000000000000000",
	* "y": "0x0000000000000000000000000000000000000000000000000000000000000000"
	* }
	* ```
	*/
	getPubkey(ENSName) {
		return __awaiter$6(this, void 0, void 0, function* () {
			return this._resolver.getPubkey(ENSName);
		});
	}
	/**
	* Returns the content hash object associated with an ENS node.
	* @param ENSName - The ENS name
	* @returns - The content hash object associated with an ENS node
	* @example
	* ```ts
	* const hash = await web3.eth.ens.getContenthash('ethereum.eth');
	* console.log(hash);
	* > 'QmaEBknbGT4bTQiQoe2VNgBJbRfygQGktnaW5TbuKixjYL'
	* ```
	*/
	getContenthash(ENSName) {
		return __awaiter$6(this, void 0, void 0, function* () {
			return this._resolver.getContenthash(ENSName);
		});
	}
	/**
	* Checks if the current used network is synced and looks for ENS support there.
	* Throws an error if not.
	* @returns - The address of the ENS registry if the network has been detected successfully
	* @example
	* ```ts
	* console.log(await web3.eth.ens.checkNetwork());
	* > '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'
	* ```
	*/
	checkNetwork() {
		return __awaiter$6(this, void 0, void 0, function* () {
			const now = Date.now() / 1e3;
			if (!this._lastSyncCheck || now - this._lastSyncCheck > 3600) {
				const syncInfo = yield isSyncing(this);
				if (!(typeof syncInfo === "boolean" && !syncInfo)) throw new ENSNetworkNotSyncedError();
				this._lastSyncCheck = now;
			}
			if (this._detectedAddress) return this._detectedAddress;
			const networkType = yield getId(this, Object.assign(Object.assign({}, this.defaultReturnFormat), { number: FMT_NUMBER.HEX }));
			const addr = registryAddresses[networkIds[networkType]];
			if (typeof addr === "undefined") throw new ENSUnsupportedNetworkError(networkType);
			this._detectedAddress = addr;
			return this._detectedAddress;
		});
	}
	/**
	* Returns true if the related Resolver does support the given signature or interfaceId.
	* @param ENSName - The ENS name
	* @param interfaceId - The signature of the function or the interfaceId as described in the ENS documentation
	* @returns - `true` if the related Resolver does support the given signature or interfaceId.
	* @example
	* ```ts
	* const supports = await web3.eth.ens.supportsInterface('ethereum.eth', 'addr(bytes32');
	* console.log(supports);
	* > true
	* ```
	*/
	supportsInterface(ENSName, interfaceId) {
		return __awaiter$6(this, void 0, void 0, function* () {
			return this._resolver.supportsInterface(ENSName, interfaceId);
		});
	}
	/**
	* @returns - Returns all events that can be emitted by the ENS registry.
	*/
	get events() {
		return this._registry.events;
	}
	/**
	* Sets the address of an ENS name in his resolver.
	* @param name - The ENS name
	* @param address - The address to set
	* @param txConfig - (Optional) The transaction config
	* @returns - The transaction receipt
	* ```ts
	* const receipt = await ens.setAddress('web3js.eth','0xe2597eb05cf9a87eb1309e86750c903ec38e527e');
	*```
	*/
	setAddress(name$1, address, txConfig) {
		return __awaiter$6(this, void 0, void 0, function* () {
			return this._resolver.setAddress(name$1, address, txConfig);
		});
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-personal@4.1.0_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-personal/lib/esm/rpc_method_wrappers.js
var __awaiter$5 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
const getAccounts = (requestManager) => __awaiter$5(void 0, void 0, void 0, function* () {
	const result = yield getAccounts$1(requestManager);
	return result.map(toChecksumAddress);
});
const newAccount = (requestManager, password) => __awaiter$5(void 0, void 0, void 0, function* () {
	validator.validate(["string"], [password]);
	const result = yield newAccount$1(requestManager, password);
	return toChecksumAddress(result);
});
const unlockAccount = (requestManager, address, password, unlockDuration) => __awaiter$5(void 0, void 0, void 0, function* () {
	validator.validate([
		"address",
		"string",
		"uint"
	], [
		address,
		password,
		unlockDuration
	]);
	return unlockAccount$1(requestManager, address, password, unlockDuration);
});
const lockAccount = (requestManager, address) => __awaiter$5(void 0, void 0, void 0, function* () {
	validator.validate(["address"], [address]);
	return lockAccount$1(requestManager, address);
});
const importRawKey = (requestManager, keyData, passphrase) => __awaiter$5(void 0, void 0, void 0, function* () {
	validator.validate(["string", "string"], [keyData, passphrase]);
	return importRawKey$1(requestManager, keyData, passphrase);
});
const sendTransaction = (requestManager, tx, passphrase, config) => __awaiter$5(void 0, void 0, void 0, function* () {
	const formattedTx = formatTransaction(tx, ETH_DATA_FORMAT, { transactionSchema: config === null || config === void 0 ? void 0 : config.customTransactionSchema });
	return sendTransaction$2(requestManager, formattedTx, passphrase);
});
const signTransaction$1 = (requestManager, tx, passphrase, config) => __awaiter$5(void 0, void 0, void 0, function* () {
	const formattedTx = formatTransaction(tx, ETH_DATA_FORMAT, { transactionSchema: config === null || config === void 0 ? void 0 : config.customTransactionSchema });
	return signTransaction$3(requestManager, formattedTx, passphrase);
});
const sign$1 = (requestManager, data, address, passphrase) => __awaiter$5(void 0, void 0, void 0, function* () {
	validator.validate([
		"string",
		"address",
		"string"
	], [
		data,
		address,
		passphrase
	]);
	const dataToSign = isHexStrict(data) ? data : utf8ToHex(data);
	return sign$3(requestManager, dataToSign, address, passphrase);
});
const ecRecover = (requestManager, signedData, signature) => __awaiter$5(void 0, void 0, void 0, function* () {
	validator.validate(["string", "string"], [signedData, signature]);
	const signedDataString = isHexStrict(signedData) ? signedData : utf8ToHex(signedData);
	return ecRecover$1(requestManager, signedDataString, signature);
});

//#endregion
//#region ../../node_modules/.pnpm/web3-eth-personal@4.1.0_typescript@5.8.3_zod@3.25.67/node_modules/web3-eth-personal/lib/esm/personal.js
var __awaiter$4 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
/**
* Eth Personal allows you to interact with the Ethereum node’s accounts.
* For using Eth Personal package, first install Web3 package using: `npm i web3` or `yarn add web3` based on your package manager.
* ```ts
*
*import { Web3 } from 'web3';
*  const web3 = new Web3('http://127.0.0.1:7545');
*
*  console.log(await web3.eth.personal.getAccounts());
*
* ```
* For using individual package install `web3-eth-personal` packages using: `npm i web3-eth-personal` or `yarn add web3-eth-personal`.
*
* ```ts
* import {Personal} from 'web3-eth-personal';
*
* const personal = new Personal('http://127.0.0.1:7545');
* console.log(await personal.getAccounts());
* ```
*/
var Personal = class extends Web3Context {
	/**
	*Returns a list of accounts the node controls by using the provider and calling the RPC method personal_listAccounts. Using `web3.eth.accounts.create()` will not add accounts into this list. For that use `web3.eth.personal.newAccount()`.
	* @returns - An array of addresses controlled by the node.
	* @example
	* ```ts
	*  const accounts = await personal.getAccounts();
	* console.log(accounts);
	* >
	* [
	* 	'0x79D7BbaC53C9aF700d0B250e9AE789E503Fcd6AE',
	* 	'0xe2597eB05CF9a87eB1309e86750C903EC38E527e',
	* 	'0x7eD0e85B8E1E925600B4373e6d108F34AB38a401',
	* 	'0xE4bEEf667408b99053dC147Ed19592aDa0d77F59',
	* 	'0x7AB80aeB6bb488B7f6c41c58e83Ef248eB39c882',
	* 	'0x12B1D9d74d73b1C3A245B19C1C5501c653aF1af9',
	* 	'0x1a6075A263Ee140e00Dbf8E374Fc5A443d097894',
	* 	'0x4FEC0A51024B13030D26E70904B066C6d41157A5',
	* 	'0x03095dc4857BB26f3a4550c5651Df8b7f6b6B1Ef',
	* 	'0xac0B9b6e8A17991cb172B2ABAF45Fb5eb769E540'
	* ]
	* ```
	*/
	getAccounts() {
		return __awaiter$4(this, void 0, void 0, function* () {
			return getAccounts(this.requestManager);
		});
	}
	/**
	* Creates a new account and returns its address.
	* **_NOTE:_**  This function sends a sensitive information like password. Never call this function over a unsecured Websocket or HTTP provider, as your password will be sent in plain text!
	* @param password - The password to encrypt the account with.
	* @returns - The address of the new account.
	* @example
	* ```ts
	* const addr = await web3.eth.personal.newAccount('password');
	* console.log(addr);
	* > '0x1234567891011121314151617181920212223456'
	* ```
	*/
	newAccount(password) {
		return __awaiter$4(this, void 0, void 0, function* () {
			return newAccount(this.requestManager, password);
		});
	}
	/**
	* Unlocks an account for a given duration.
	* @param address - The address of the account to unlock.
	* @param password - The password of the account to unlock.
	* @param unlockDuration - The duration in seconds to unlock the account for.
	* @example
	* ```ts
	* await personal.unlockAccount(
	* 	"0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e",
	* 	"123456",
	* 	600
	* );
	* ```
	*/
	unlockAccount(address, password, unlockDuration) {
		return __awaiter$4(this, void 0, void 0, function* () {
			return unlockAccount(this.requestManager, address, password, unlockDuration);
		});
	}
	/**
	* Locks the given account
	* @param address - The address of the account to lock.
	* @returns - `true` if the account was locked, otherwise `false`.
	* @example
	* ```ts
	* await personal.lockAccount(
	* 	"0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e"
	* );
	* ```
	*/
	lockAccount(address) {
		return __awaiter$4(this, void 0, void 0, function* () {
			return lockAccount(this.requestManager, address);
		});
	}
	/**
	* Imports the given private key into the key store, encrypting it with the passphrase.
	* @param keyData - An unencrypted private key (hex string).
	* @param passphrase  - The password of the account
	* @returns - The address of the new account.
	* @example
	* ```ts
	* const accountAddress = await personal.importRawKey(
	* 	"abe40cb08850da918ee951b237fa87946499b2d8643e4aa12b0610b050c731f6",
	* 	"123456"
	* );
	*
	* console.log(unlockTx);
	* > 0x8727a8b34ec833154b72b62cac05d69f86eb6556
	* ```
	*/
	importRawKey(keyData, passphrase) {
		return __awaiter$4(this, void 0, void 0, function* () {
			return importRawKey(this.requestManager, keyData, passphrase);
		});
	}
	/**
	* This method sends a transaction over the management API.
	* **_NOTE:_** Sending your account password over an unsecured HTTP RPC connection is highly unsecure.
	* @param tx - The transaction options
	* @param passphrase - The passphrase of the current account
	* @returns - The transaction hash
	* @example
	* ```ts
	* const txHash = personal
	* .sendTransaction({
	*  	from: "0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e",
	* 	gasPrice: "20000000000",
	* 	gas: "21000",
	* 	to: "0x3535353535353535353535353535353535353535",
	* 	value: "1000000",
	* 	data: "",
	* 	nonce: 0,
	* },
	* "123456");
	*
	* console.log(txHash);
	* > 0x9445325c3c5638c9fe425b003b8c32f03e9f99d409555a650a6838ba712bb51b
	* ```
	*/
	sendTransaction(tx, passphrase) {
		return __awaiter$4(this, void 0, void 0, function* () {
			return sendTransaction(this.requestManager, tx, passphrase, this.config);
		});
	}
	/**
	* Signs a transaction. This account needs to be unlocked.
	* **_NOTE:_** Sending your account password over an unsecured HTTP RPC connection is highly unsecure.
	* @param tx - The transaction data to sign. See sendTransaction  for more information.
	* @param passphrase - The password of the `from` account, to sign the transaction with.
	* @returns - The RLP encoded transaction. The `raw` property can be used to send the transaction using  sendSignedTransaction.
	* @example
	* ```ts
	* const tx = personal
	* .signTransaction({
	* 	from: "0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e",
	* 	gasPrice: "20000000000",
	* 	gas: "21000",
	* 	to: "0x3535353535353535353535353535353535353535",
	* 	value: "1000000000000000000",
	* 	data: "",
	* 	nonce: 0,
	* },
	* "123456");
	*
	* console.log(tx);
	*
	* > {
	* 	raw: '0xf86e808504a817c800825208943535353535353535353535353535353535353535880de0b6b3a764000080820a95a0c951c03238fe930e6e69ab9d6af9f29248a514048e44884f0e60c4de40de3526a038b71399bf0c8925749ab79e91ce6cd2fc068c84c18ff6a197b48c4cbef01e00',
	* 	tx: {
	* 	type: '0x0',
	* 	nonce: '0x0',
	* 	gasPrice: '0x4a817c800',
	* 	maxPriorityFeePerGas: null,
	* 	maxFeePerGas: null,
	* 	gas: '0x5208',
	* 	value: '0xde0b6b3a7640000',
	* 	input: '0x',
	* 	v: '0xa95',
	* 	r: '0xc951c03238fe930e6e69ab9d6af9f29248a514048e44884f0e60c4de40de3526',
	* 	s: '0x38b71399bf0c8925749ab79e91ce6cd2fc068c84c18ff6a197b48c4cbef01e00',
	* 	to: '0x3535353535353535353535353535353535353535',
	* 	hash: '0x65e3df790ab2a32068b13cff970b26445b8995229ae4abbed61bd996f09fce69'
	* 	}
	* }
	* ```
	*/
	signTransaction(tx, passphrase) {
		return __awaiter$4(this, void 0, void 0, function* () {
			return signTransaction$1(this.requestManager, tx, passphrase, this.config);
		});
	}
	/**
	* Calculates an Ethereum specific signature with:
	* sign(keccak256("\x19Ethereum Signed Message:\n" + dataToSign.length + dataToSign)))
	* Adding a prefix to the message makes the calculated signature recognisable as an Ethereum specific signature.
	*
	* If you have the original message and the signed message, you can discover the signing account address using web3.eth.personal.ecRecover
	* **_NOTE:_** Sending your account password over an unsecured HTTP RPC connection is highly unsecure.
	* @param data - The data to sign.
	* @param address - The address to sign with.
	* @param passphrase - The passphrase to decrypt the account with.
	* @returns - The signature.
	* @example
	* ```ts
	* const sig = await personal.sign("Hello world", "0x0D4Aa485ECbC499c70860fEb7e5AaeAf5fd8172E", "123456")
	* console.log(sig)
	* > 0x5d21d01b3198ac34d0585a9d76c4d1c8123e5e06746c8962318a1c08ffb207596e6fce4a6f377b7c0fc98c5f646cd73438c80e8a1a95cbec55a84c2889dca0301b
	* ```
	*/
	sign(data, address, passphrase) {
		return __awaiter$4(this, void 0, void 0, function* () {
			return sign$1(this.requestManager, data, address, passphrase);
		});
	}
	/**
	* Recovers the account that signed the data.
	* @param signedData - Data that was signed. If String it will be converted using {@link utf8ToHex}
	* @param signature - The signature
	* @returns - The address of the account that signed the data.
	* @example
	* ```ts
	*  const address = await personal.ecRecover(
	* 	"Hello world",
	* 	"0x5d21d01b3198ac34d0585a9d76c4d1c8123e5e06746c8962318a1c08ffb207596e6fce4a6f377b7c0fc98c5f646cd73438c80e8a1a95cbec55a84c2889dca0301b"
	* );
	* console.log(address);
	* > 0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e
	* ```
	*/
	ecRecover(signedData, signature) {
		return __awaiter$4(this, void 0, void 0, function* () {
			return ecRecover(this.requestManager, signedData, signature);
		});
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-rpc-providers@1.0.0-rc.4/node_modules/web3-rpc-providers/lib/esm/types.js
var Transport;
(function(Transport$1) {
	Transport$1["HTTPS"] = "https";
	Transport$1["WebSocket"] = "wss";
})(Transport || (Transport = {}));
var Network;
(function(Network$1) {
	Network$1["ETH_MAINNET"] = "eth_mainnet";
	Network$1["ETH_SEPOLIA"] = "eth_sepolia";
	Network$1["ETH_HOLESKY"] = "eth_holesky";
	Network$1["POLYGON_MAINNET"] = "polygon_mainnet";
	Network$1["POLYGON_AMOY"] = "polygon_amoy";
	Network$1["AVALANCHE_C_MAINNET"] = "avalanche_c_mainnet";
	Network$1["AVALANCHE_P_MAINNET"] = "avalanche_p_mainnet";
	Network$1["AVALANCHE_X_MAINNET"] = "avalanche_x_mainnet";
	Network$1["ARBITRUM_MAINNET"] = "arbitrum_mainnet";
	Network$1["ARBITRUM_SEPOLIA"] = "arbitrum_sepolia";
	Network$1["BASE_MAINNET"] = "base_mainnet";
	Network$1["BASE_SEPOLIA"] = "base_sepolia";
	Network$1["OPTIMISM_MAINNET"] = "optimism_mainnet";
	Network$1["OPTIMISM_SEPOLIA"] = "optimism_sepolia";
	Network$1["FANTOM_MAINNET"] = "fantom_mainnet";
	Network$1["FANTOM_TESTNET"] = "fantom_testnet";
	Network$1["DYMENSION_MAINNET"] = "dymension_mainnet";
	Network$1["DYMENSION_TESTNET"] = "dymension_testnet";
	Network$1["BNB_MAINNET"] = "bnb_mainnet";
	Network$1["BNB_TESTNET"] = "bnb_testnet";
	Network$1["BSC_MAINNET"] = "bsc_mainnet";
	Network$1["BSC_TESTNET"] = "bsc_testnet";
	Network$1["ARBITRUM_ONE"] = "arbitrum_one";
	Network$1["ARBITRUM_NOVA"] = "arbitrum_nova";
	Network$1["AVALANCHE_FUJI_C"] = "avalanche_fuji_c";
	Network$1["AVALANCHE_FUJI_P"] = "avalanche_fuji_p";
	Network$1["AVALANCHE_FUJI_X"] = "avalanche_fuji_x";
	Network$1["BLAST_MAINNET"] = "blast_mainnet";
	Network$1["OPBNB_MAINNET"] = "opbnb_mainnet";
	Network$1["OPBNB_TESTNET"] = "opbnb_testnet";
	Network$1["GNOSIS_MAINNET"] = "gnosis_mainnet";
	Network$1["GNOSIS_CHIADO"] = "gnosis_chiado";
	Network$1["PULSECHAIN_MAINNET"] = "pulsechain_mainnet";
	Network$1["PULSECHAIN_TESTNET"] = "pulsechain_testnet";
	Network$1["KAVA_MAINNET"] = "kava_mainnet";
	Network$1["CRONOS_MAINNET"] = "cronos_mainnet";
	Network$1["MANTLE_MAINNET"] = "mantle_mainnet";
	Network$1["CHILIZ_MAINNET"] = "chiliz_mainnet";
	Network$1["CHILIZ_SPICY"] = "chiliz_spicy";
	Network$1["MOONBEAM_MAINNET"] = "moonbeam_mainnet";
	Network$1["TAIKO_MAINNET"] = "taiko_mainnet";
	Network$1["TAIKO_HEKLA"] = "taiko_hekla";
	Network$1["LINEA_MAINNET"] = "linea_mainnet";
	Network$1["LINEA_SEPOLIA"] = "linea_sepolia";
	Network$1["BAHAMUT_MAINNET"] = "bahamut_mainnet";
	Network$1["SCROLL_MAINNET"] = "scroll_mainnet";
	Network$1["SCROLL_SEPOLIA"] = "scroll_sepolia";
	Network$1["TRON_MAINNET"] = "tron_mainnet";
	Network$1["SYSCOIN_MAINNET"] = "syscoin_mainnet";
	Network$1["SYSCOIN_TANENBAUM"] = "syscoin_tanenbaum";
	Network$1["MOONRIVER_MAINNET"] = "moonriver_mainnet";
	Network$1["HAQQ_MAINNET"] = "haqq_mainnet";
	Network$1["EVMOS_MAINNET"] = "evmos_mainnet";
	Network$1["EVMOS_TESTNET"] = "evmos_testnet";
	Network$1["BERACHAIN_TESTNET"] = "berachain_testnet";
})(Network || (Network = {}));

//#endregion
//#region ../../node_modules/.pnpm/web3-rpc-providers@1.0.0-rc.4/node_modules/web3-rpc-providers/lib/esm/errors.js
const ERR_QUICK_NODE_RATE_LIMIT = 1300;
var QuickNodeRateLimitError = class extends BaseWeb3Error {
	constructor(error) {
		super(`You've reach the rate limit of free RPC calls from our Partner Quick Nodes. There are two options you can either create a paid Quick Nodes account and get 20% off for 2 months using WEB3JS referral code, or use Free public RPC endpoint.`, error);
		this.code = ERR_QUICK_NODE_RATE_LIMIT;
	}
};
const ERR_PROVIDER_CONFIG_OPTIONS = 1301;
var ProviderConfigOptionsError = class extends BaseWeb3Error {
	constructor(msg) {
		super(`Invalid provider config options given for ${msg}`);
		this.code = ERR_PROVIDER_CONFIG_OPTIONS;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-rpc-providers@1.0.0-rc.4/node_modules/web3-rpc-providers/lib/esm/web3_provider.js
var __awaiter$3 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
var Web3ExternalProvider = class extends Eip1193Provider {
	constructor(network, transport, token, host, providerConfigOptions) {
		super();
		if (providerConfigOptions !== void 0 && transport === Transport.HTTPS && !("providerOptions" in providerConfigOptions)) throw new ProviderConfigOptionsError("HTTP Provider");
		else if (providerConfigOptions !== void 0 && transport === Transport.WebSocket && !("socketOptions" in providerConfigOptions || "reconnectOptions" in providerConfigOptions)) throw new ProviderConfigOptionsError("Websocket Provider");
		this.transport = transport;
		if (transport === Transport.HTTPS) this.provider = new HttpProvider(this.getRPCURL(network, transport, token, host), providerConfigOptions);
		else if (transport === Transport.WebSocket) this.provider = new WebSocketProvider(this.getRPCURL(network, transport, token, host), providerConfigOptions === null || providerConfigOptions === void 0 ? void 0 : providerConfigOptions.socketOptions, providerConfigOptions === null || providerConfigOptions === void 0 ? void 0 : providerConfigOptions.reconnectOptions);
	}
	request(payload, requestOptions) {
		return __awaiter$3(this, void 0, void 0, function* () {
			if (this.transport === Transport.HTTPS) return yield this.provider.request(payload, requestOptions);
			return this.provider.request(payload);
		});
	}
	getStatus() {
		return this.provider.getStatus();
	}
	supportsSubscriptions() {
		return this.provider.supportsSubscriptions();
	}
	once(_type, _listener) {
		var _a$3;
		if ((_a$3 = this.provider) === null || _a$3 === void 0 ? void 0 : _a$3.once) this.provider.once(_type, _listener);
	}
	removeAllListeners(_type) {
		var _a$3;
		if ((_a$3 = this.provider) === null || _a$3 === void 0 ? void 0 : _a$3.removeAllListeners) this.provider.removeAllListeners(_type);
	}
	connect() {
		var _a$3;
		if ((_a$3 = this.provider) === null || _a$3 === void 0 ? void 0 : _a$3.connect) this.provider.connect();
	}
	disconnect(_code, _data) {
		var _a$3;
		if ((_a$3 = this.provider) === null || _a$3 === void 0 ? void 0 : _a$3.disconnect) this.provider.disconnect(_code, _data);
	}
	reset() {
		var _a$3;
		if ((_a$3 = this.provider) === null || _a$3 === void 0 ? void 0 : _a$3.reset) this.provider.reset();
	}
	on(_type, _listener) {
		if (this.provider) this.provider.on(_type, _listener);
	}
	removeListener(_type, _listener) {
		if (this.provider) this.provider.removeListener(_type, _listener);
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-rpc-providers@1.0.0-rc.4/node_modules/web3-rpc-providers/lib/esm/web3_provider_quicknode.js
var __awaiter$2 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
const isValid$1 = (str) => str !== void 0 && str.trim().length > 0;
var QuickNodeProvider = class extends Web3ExternalProvider {
	constructor(network = Network.ETH_MAINNET, transport = Transport.HTTPS, token = "", host = "", providerConfigOptions) {
		super(network, transport, token, host, providerConfigOptions);
	}
	request(payload, requestOptions) {
		const _super = Object.create(null, { request: { get: () => super.request } });
		return __awaiter$2(this, void 0, void 0, function* () {
			try {
				return yield _super.request.call(this, payload, requestOptions);
			} catch (error) {
				if (error instanceof ResponseError && error.statusCode === 429) throw new QuickNodeRateLimitError(error);
				throw error;
			}
		});
	}
	getRPCURL(network, transport, _token, _host) {
		let host = "";
		let token = "";
		switch (network) {
			case Network.ETH_MAINNET:
				host = isValid$1(_host) ? _host : "powerful-holy-bush.quiknode.pro";
				token = isValid$1(_token) ? _token : "3240624a343867035925ff7561eb60dfdba2a668";
				break;
			case Network.ETH_SEPOLIA:
				host = isValid$1(_host) ? _host : "dimensional-fabled-glitter.ethereum-sepolia.quiknode.pro";
				token = isValid$1(_token) ? _token : "382a3b5a4b938f2d6e8686c19af4b22921fde2cd";
				break;
			case Network.ETH_HOLESKY:
				host = isValid$1(_host) ? _host : "yolo-morning-card.ethereum-holesky.quiknode.pro";
				token = isValid$1(_token) ? _token : "481ebe70638c4dcf176af617a16d02ab866b9af9";
				break;
			case Network.ARBITRUM_MAINNET:
				host = isValid$1(_host) ? _host : "autumn-divine-dinghy.arbitrum-mainnet.quiknode.pro";
				token = isValid$1(_token) ? _token : "a5d7bfbf60b5ae9ce3628e53d69ef50d529e9a8c";
				break;
			case Network.ARBITRUM_SEPOLIA:
				host = isValid$1(_host) ? _host : "few-patient-pond.arbitrum-sepolia.quiknode.pro";
				token = isValid$1(_token) ? _token : "3be985450970628c860b959c65cd2642dcafe53c";
				break;
			case Network.BNB_MAINNET:
				host = isValid$1(_host) ? _host : "purple-empty-reel.bsc.quiknode.pro";
				token = isValid$1(_token) ? _token : "ebf6c532961e21f092ff2facce1ec4c89c540158";
				break;
			case Network.BNB_TESTNET:
				host = isValid$1(_host) ? _host : "floral-rough-scion.bsc-testnet.quiknode.pro";
				token = isValid$1(_token) ? _token : "5b297e5acff5f81f4c37ebf6f235f7299b6f9d28";
				break;
			case Network.POLYGON_MAINNET:
				host = isValid$1(_host) ? _host : "small-chaotic-moon.matic.quiknode.pro";
				token = isValid$1(_token) ? _token : "847569f8a017e84d985e10d0f44365d965a951f1";
				break;
			case Network.POLYGON_AMOY:
				host = isValid$1(_host) ? _host : "prettiest-side-shape.matic-amoy.quiknode.pro";
				token = isValid$1(_token) ? _token : "79a9476eea661d4f82de614db1d8a895b14b881c";
				break;
			default: throw new Error("Network info not avalible.");
		}
		return `${transport}://${host}/${token}`;
	}
};

//#endregion
//#region ../../node_modules/.pnpm/web3-rpc-providers@1.0.0-rc.4/node_modules/web3-rpc-providers/lib/esm/web3_provider_publicnode.js
const isValid = (str) => str !== void 0 && str.trim().length > 0;
const websocketExclusions = [
	Network.DYMENSION_MAINNET,
	Network.DYMENSION_TESTNET,
	Network.KAVA_MAINNET,
	Network.CRONOS_MAINNET,
	Network.POLYGON_MAINNET
];
var PublicNodeProvider = class PublicNodeProvider extends Web3ExternalProvider {
	constructor(network = Network.ETH_MAINNET, transport = Transport.HTTPS, host = "", providerConfigOptions) {
		super(network, transport, "", host, providerConfigOptions);
	}
	getRPCURL(network, transport, _, _host) {
		if (!PublicNodeProvider.networkHostMap[network]) throw new Error("Network info not avalible.");
		const defaultHost = `${PublicNodeProvider.networkHostMap[network]}.publicnode.com`;
		const host = isValid(_host) ? _host : defaultHost;
		if (websocketExclusions.includes(network) && transport === Transport.WebSocket) return `${transport}://${host}/websocket`;
		return `${transport}://${host}`;
	}
};
PublicNodeProvider.networkHostMap = {
	[Network.POLYGON_AMOY]: "polygon-amoy-bor-rpc",
	[Network.DYMENSION_MAINNET]: "dymension-evm-rpc",
	[Network.DYMENSION_TESTNET]: "dymension-testnet-evm-rpc",
	[Network.BLAST_MAINNET]: "blast-rpc",
	[Network.GNOSIS_MAINNET]: "gnosis-rpc",
	[Network.PULSECHAIN_MAINNET]: "pulsechain-rpc",
	[Network.PULSECHAIN_TESTNET]: "pulsechain-testnet-rpc",
	[Network.KAVA_MAINNET]: "kava-evm-rpc",
	[Network.CRONOS_MAINNET]: "cronos-evm-rpc",
	[Network.MANTLE_MAINNET]: "mantle-rpc",
	[Network.TAIKO_MAINNET]: "taiko-rpc",
	[Network.TAIKO_HEKLA]: "taiko-hekla-rpc",
	[Network.LINEA_MAINNET]: "linea-rpc",
	[Network.LINEA_SEPOLIA]: "linea-sepolia-rpc",
	[Network.SCROLL_MAINNET]: "scroll-rpc",
	[Network.SCROLL_SEPOLIA]: "scroll-sepolia-rpc",
	[Network.SYSCOIN_MAINNET]: "syscoin-evm-rpc",
	[Network.SYSCOIN_TANENBAUM]: "syscoin-tanenbaum-evm-rpc",
	[Network.HAQQ_MAINNET]: "haqq-evm-rpc",
	[Network.EVMOS_MAINNET]: "evmos-evm-rpc",
	[Network.EVMOS_TESTNET]: "evmos-testnet-evm-rpc",
	[Network.BERACHAIN_TESTNET]: "berachain-testnet-evm-rpc",
	[Network.ETH_MAINNET]: "ethereum-rpc",
	[Network.ETH_SEPOLIA]: "ethereum-sepolia-rpc",
	[Network.ETH_HOLESKY]: "ethereum-holesky-rpc",
	[Network.BSC_MAINNET]: "bsc-rpc",
	[Network.BSC_TESTNET]: "bsc-testnet-rpc",
	[Network.POLYGON_MAINNET]: "polygon-bor-rpc",
	[Network.BASE_MAINNET]: "base-rpc",
	[Network.BASE_SEPOLIA]: "base-sepolia-rpc",
	[Network.ARBITRUM_ONE]: "arbitrum-one-rpc",
	[Network.ARBITRUM_NOVA]: "arbitrum-nova-rpc",
	[Network.ARBITRUM_SEPOLIA]: "arbitrum-sepolia-rpc",
	[Network.AVALANCHE_C_MAINNET]: "avalanche-c-chain-rpc",
	[Network.AVALANCHE_P_MAINNET]: "avalanche-p-chain-rpc",
	[Network.AVALANCHE_X_MAINNET]: "avalanche-x-chain-rpc",
	[Network.AVALANCHE_FUJI_C]: "avalanche-fuji-c-chain-rpc",
	[Network.AVALANCHE_FUJI_P]: "avalanche-fuji-p-chain-rpc",
	[Network.AVALANCHE_FUJI_X]: "avalanche-fuji-x-chain-rpc",
	[Network.OPTIMISM_MAINNET]: "optimism-rpc",
	[Network.OPTIMISM_SEPOLIA]: "optimism-sepolia-rpc",
	[Network.FANTOM_MAINNET]: "fantom-rpc",
	[Network.FANTOM_TESTNET]: "fantom-testnet-rpc",
	[Network.OPBNB_MAINNET]: "opbnb-rpc",
	[Network.OPBNB_TESTNET]: "opbnb-testnet-rpc",
	[Network.GNOSIS_CHIADO]: "gnosis-chiado-rpc",
	[Network.CHILIZ_MAINNET]: "chiliz-rpc",
	[Network.CHILIZ_SPICY]: "chiliz-spicy-rpc",
	[Network.MOONBEAM_MAINNET]: "moonbeam-rpc",
	[Network.BAHAMUT_MAINNET]: "bahamut-rpc",
	[Network.TRON_MAINNET]: "tron-evm-rpc",
	[Network.MOONRIVER_MAINNET]: "moonriver-rpc"
};

//#endregion
//#region ../../node_modules/.pnpm/web3-rpc-providers@1.0.0-rc.4/node_modules/web3-rpc-providers/lib/esm/index.js
const mainnet = new QuickNodeProvider();

//#endregion
//#region ../../node_modules/.pnpm/web3@4.16.0_typescript@5.8.3_zod@3.25.67/node_modules/web3/lib/esm/abi.js
/**
* The object for `web3.abi`
*/
var abi_default = {
	encodeEventSignature,
	encodeFunctionCall,
	encodeFunctionSignature,
	encodeParameter,
	encodeParameters,
	decodeParameter,
	decodeParameters,
	decodeLog
};

//#endregion
//#region ../../node_modules/.pnpm/web3@4.16.0_typescript@5.8.3_zod@3.25.67/node_modules/web3/lib/esm/accounts.js
var __awaiter$1 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
/**
* Initialize the accounts module for the given context.
*
* To avoid multiple package dependencies for `web3-eth-accounts` we are creating
* this function in `web3` package. In future the actual `web3-eth-accounts` package
* should be converted to context aware.
*/
const initAccountsForContext = (context) => {
	const signTransactionWithContext = (transaction, privateKey) => __awaiter$1(void 0, void 0, void 0, function* () {
		const tx = yield prepareTransactionForSigning(transaction, context);
		const privateKeyBytes = format({ format: "bytes" }, privateKey, ETH_DATA_FORMAT);
		return signTransaction(tx, privateKeyBytes);
	});
	const privateKeyToAccountWithContext = (privateKey) => {
		const account = privateKeyToAccount(privateKey);
		return Object.assign(Object.assign({}, account), { signTransaction: (transaction) => __awaiter$1(void 0, void 0, void 0, function* () {
			return signTransactionWithContext(transaction, account.privateKey);
		}) });
	};
	const decryptWithContext = (keystore, password, options) => __awaiter$1(void 0, void 0, void 0, function* () {
		var _a$3;
		const account = yield decrypt(keystore, password, (_a$3 = options === null || options === void 0 ? void 0 : options.nonStrict) !== null && _a$3 !== void 0 ? _a$3 : true);
		return Object.assign(Object.assign({}, account), { signTransaction: (transaction) => __awaiter$1(void 0, void 0, void 0, function* () {
			return signTransactionWithContext(transaction, account.privateKey);
		}) });
	});
	const createWithContext = () => {
		const account = create();
		return Object.assign(Object.assign({}, account), { signTransaction: (transaction) => __awaiter$1(void 0, void 0, void 0, function* () {
			return signTransactionWithContext(transaction, account.privateKey);
		}) });
	};
	const wallet = new Wallet$1({
		create: createWithContext,
		privateKeyToAccount: privateKeyToAccountWithContext,
		decrypt: decryptWithContext
	});
	return {
		signTransaction: signTransactionWithContext,
		create: createWithContext,
		privateKeyToAccount: privateKeyToAccountWithContext,
		decrypt: decryptWithContext,
		recoverTransaction,
		hashMessage,
		sign,
		recover,
		encrypt,
		wallet,
		privateKeyToAddress,
		parseAndValidatePrivateKey,
		privateKeyToPublicKey
	};
};

//#endregion
//#region ../../node_modules/.pnpm/web3@4.16.0_typescript@5.8.3_zod@3.25.67/node_modules/web3/lib/esm/version.js
const Web3PkgInfo = { version: "4.16.0" };

//#endregion
//#region ../../node_modules/.pnpm/web3@4.16.0_typescript@5.8.3_zod@3.25.67/node_modules/web3/lib/esm/web3_eip6963.js
var __awaiter = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
	function adopt(value) {
		return value instanceof P ? value : new P(function(resolve) {
			resolve(value);
		});
	}
	return new (P || (P = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e) {
				reject(e);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e) {
				reject(e);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
};
var Eip6963EventName;
(function(Eip6963EventName$1) {
	Eip6963EventName$1["eip6963announceProvider"] = "eip6963:announceProvider";
	Eip6963EventName$1["eip6963requestProvider"] = "eip6963:requestProvider";
})(Eip6963EventName || (Eip6963EventName = {}));
const eip6963ProvidersMap = /* @__PURE__ */ new Map();
const web3ProvidersMapUpdated = "web3:providersMapUpdated";
const requestEIP6963Providers = () => __awaiter(void 0, void 0, void 0, function* () {
	return new Promise((resolve, reject) => {
		if (typeof window === "undefined") reject(/* @__PURE__ */ new Error("window object not available, EIP-6963 is intended to be used within a browser"));
		window.addEventListener(Eip6963EventName.eip6963announceProvider, (event) => {
			eip6963ProvidersMap.set(event.detail.info.uuid, event.detail);
			const newEvent = new CustomEvent(web3ProvidersMapUpdated, { detail: eip6963ProvidersMap });
			window.dispatchEvent(newEvent);
			resolve(eip6963ProvidersMap);
		});
		window.dispatchEvent(new Event(Eip6963EventName.eip6963requestProvider));
	});
});
const onNewProviderDiscovered = (callback) => {
	if (typeof window === "undefined") throw new Error("window object not available, EIP-6963 is intended to be used within a browser");
	window.addEventListener(web3ProvidersMapUpdated, callback);
};

//#endregion
//#region ../../node_modules/.pnpm/web3@4.16.0_typescript@5.8.3_zod@3.25.67/node_modules/web3/lib/esm/web3.js
var Web3 = class extends Web3Context {
	constructor(providerOrContext = mainnet) {
		var _a$3;
		if (isNullish(providerOrContext) || typeof providerOrContext === "string" && providerOrContext.trim() === "" || typeof providerOrContext !== "string" && !isSupportedProvider(providerOrContext) && !providerOrContext.provider) console.warn("NOTE: web3.js is running without provider. You need to pass a provider in order to interact with the network!");
		let contextInitOptions = {};
		if (typeof providerOrContext === "string" || isSupportedProvider(providerOrContext)) contextInitOptions.provider = providerOrContext;
		else if (providerOrContext) contextInitOptions = providerOrContext;
		else contextInitOptions = {};
		contextInitOptions.registeredSubscriptions = Object.assign(Object.assign({}, registeredSubscriptions), (_a$3 = contextInitOptions.registeredSubscriptions) !== null && _a$3 !== void 0 ? _a$3 : {});
		super(contextInitOptions);
		const accounts = initAccountsForContext(this);
		this._wallet = accounts.wallet;
		this._accountProvider = accounts;
		this.utils = esm_exports;
		const self$1 = this;
		class ContractBuilder extends esm_default$1 {
			constructor(jsonInterface, addressOrOptionsOrContext, optionsOrContextOrReturnFormat, contextOrReturnFormat, returnFormat) {
				if (isContractInitOptions(addressOrOptionsOrContext) && isContractInitOptions(optionsOrContextOrReturnFormat)) throw new InvalidMethodParamsError("Should not provide options at both 2nd and 3rd parameters");
				let address;
				let options = {};
				let context;
				let dataFormat;
				if (!isNullish(addressOrOptionsOrContext) && typeof addressOrOptionsOrContext !== "object" && typeof addressOrOptionsOrContext !== "string") throw new InvalidMethodParamsError();
				if (typeof addressOrOptionsOrContext === "string") address = addressOrOptionsOrContext;
				if (isContractInitOptions(addressOrOptionsOrContext)) options = addressOrOptionsOrContext;
				else if (isContractInitOptions(optionsOrContextOrReturnFormat)) options = optionsOrContextOrReturnFormat;
				else options = {};
				if (addressOrOptionsOrContext instanceof Web3Context) context = addressOrOptionsOrContext;
				else if (optionsOrContextOrReturnFormat instanceof Web3Context) context = optionsOrContextOrReturnFormat;
				else if (contextOrReturnFormat instanceof Web3Context) context = contextOrReturnFormat;
				else context = self$1.getContextObject();
				if (returnFormat) dataFormat = returnFormat;
				else if (isDataFormat(optionsOrContextOrReturnFormat)) dataFormat = optionsOrContextOrReturnFormat;
				else if (isDataFormat(contextOrReturnFormat)) dataFormat = contextOrReturnFormat;
				super(jsonInterface, address, options, context, dataFormat);
				super.subscribeToContextEvents(self$1);
				if (!isNullish(eth)) {
					const TxMiddleware = eth.getTransactionMiddleware();
					if (!isNullish(TxMiddleware)) super.setTransactionMiddleware(TxMiddleware);
				}
			}
		}
		const eth = self$1.use(Web3Eth);
		this.eth = Object.assign(eth, {
			ens: self$1.use(ENS, registryAddresses.main),
			Iban,
			net: self$1.use(Net),
			personal: self$1.use(Personal),
			Contract: ContractBuilder,
			abi: abi_default,
			accounts
		});
	}
};
Web3.version = Web3PkgInfo.version;
Web3.utils = esm_exports;
Web3.requestEIP6963Providers = requestEIP6963Providers;
Web3.onNewProviderDiscovered = onNewProviderDiscovered;
Web3.modules = {
	Web3Eth,
	Iban,
	Net,
	ENS,
	Personal
};
var web3_default = Web3;

//#endregion
//#region ../../node_modules/.pnpm/web3@4.16.0_typescript@5.8.3_zod@3.25.67/node_modules/web3/lib/esm/index.js
var esm_default = web3_default;

//#endregion
//#region src/types.ts
/**
* 以太坊钱包连接状态
*/
let EthWalletStatus = /* @__PURE__ */ function(EthWalletStatus$1) {
	EthWalletStatus$1["DISCONNECTED"] = "disconnected";
	EthWalletStatus$1["CONNECTING"] = "connecting";
	EthWalletStatus$1["CONNECTED"] = "connected";
	EthWalletStatus$1["ERROR"] = "error";
	return EthWalletStatus$1;
}({});

//#endregion
//#region src/index.ts
var Wallet = class Wallet {
	/** web3 实例 */
	web3 = null;
	/** 单例实例 */
	static instance = null;
	/** 以太坊 provider */
	provider;
	/** 钱包连接状态 */
	_status = EthWalletStatus.DISCONNECTED;
	/** 当前连接的账户信息 */
	_account = null;
	/** 状态变化监听器集合 */
	statusChangeHandlers = /* @__PURE__ */ new Set();
	/** 已初始化的合约实例缓存 */
	contractInstances = /* @__PURE__ */ new Map();
	/**
	* 构造函数
	* @param options 以太坊钱包配置选项
	*/
	constructor() {
		if (typeof window !== "undefined" && window.ethereum) {
			this.provider = window.ethereum;
			this.web3 = new esm_default(this.provider);
			this.initStatus();
			this.bindProviderEvents();
		}
	}
	/**
	* 获取单例实例
	*/
	static getInstance() {
		if (!Wallet.instance) Wallet.instance = new Wallet();
		return Wallet.instance;
	}
	handleAccountsChanged = (accounts) => {
		this.handleProviderStatusChange(accounts);
	};
	handleDisconnect = () => {
		this.handleProviderStatusChange([]);
	};
	handleChainChanged = () => {
		this.initStatus();
	};
	/**
	* 绑定 provider 的事件
	*/
	bindProviderEvents() {
		this.provider?.on?.("accountsChanged", this.handleAccountsChanged);
		this.provider?.on?.("disconnect", this.handleDisconnect);
		this.provider?.on?.("chainChanged", this.handleChainChanged);
	}
	/**
	* 移除 provider 的事件
	*/
	unbindProviderEvents() {
		this.provider?.removeListener?.("accountsChanged", this.handleAccountsChanged);
		this.provider?.removeListener?.("disconnect", this.handleDisconnect);
		this.provider?.removeListener?.("chainChanged", this.handleChainChanged);
	}
	/**
	* 初始化钱包连接状态
	*/
	async initStatus() {
		try {
			const explicitlyConnected = localStorage.getItem("ethWalletExplicitlyConnected") === "true";
			const accounts = await this.provider?.request({ method: "eth_accounts" });
			if (explicitlyConnected && accounts && accounts.length > 0) this.handleProviderStatusChange(accounts);
			else this.updateStatus(EthWalletStatus.DISCONNECTED, null);
		} catch {
			this.updateStatus(EthWalletStatus.DISCONNECTED, null);
		}
	}
	/**
	* 处理 provider 状态变化
	* @param accounts 账户列表
	*/
	handleProviderStatusChange(accounts) {
		if (accounts && accounts.length > 0) {
			const account = { address: accounts[0] };
			this.updateStatus(EthWalletStatus.CONNECTED, account);
		} else this.updateStatus(EthWalletStatus.DISCONNECTED, null);
	}
	/**
	* 更新钱包状态，通知监听器
	* @param status 钱包状态
	* @param account 账户信息
	*/
	updateStatus(status, account) {
		this._status = status;
		this._account = account;
		if (status === EthWalletStatus.CONNECTED && this._account) {
			localStorage.setItem("ethWalletStatus", "connected");
			localStorage.setItem("ethWalletAccount", this._account.address);
		} else {
			localStorage.removeItem("ethWalletStatus");
			localStorage.removeItem("ethWalletAccount");
		}
		this.notifyStatusChange(status, account);
	}
	/**
	* 通知所有状态变化监听器
	* @param status 钱包状态
	* @param account 账户信息
	*/
	notifyStatusChange(status, account) {
		this.statusChangeHandlers.forEach((handler) => {
			try {
				handler(status, account);
			} catch (error) {
				console.warn("钱包状态变化监听器执行出错:", error);
			}
		});
	}
	/**
	* 获取钱包连接状态
	* @returns 钱包状态
	*/
	get status() {
		return this._status;
	}
	/**
	* 获取当前连接的账户信息
	* @returns 账户信息
	*/
	get account() {
		return this._account;
	}
	/**
	* 获取是否已连接
	* @returns 是否已连接
	*/
	get connected() {
		return this._status === EthWalletStatus.CONNECTED && this._account !== null;
	}
	/**
	* 获取 MetaMask 深度链接
	* @returns MetaMask 深度链接
	*/
	getMetaMaskDeepLink() {
		if (typeof window === "undefined") throw new Error("Not running in a browser environment");
		const host = window.location.host;
		return `https://metamask.app.link/dapp/${host}`;
	}
	/**
	* 添加状态变化监听器
	* @param handler 状态变化监听器
	*/
	addStatusChangeListener(handler) {
		this.statusChangeHandlers.add(handler);
	}
	/**
	* 移除状态变化监听器
	* @param handler 状态变化监听器
	*/
	removeStatusChangeListener(handler) {
		this.statusChangeHandlers.delete(handler);
	}
	/**
	* 连接钱包
	* @param deeplinkUrl 可选，移动端唤起钱包的deeplink，不传则自动构造
	*/
	async connect(deeplinkUrl) {
		if (typeof window === "undefined") throw new Error("Not running in a browser environment");
		if (window.ethereum) try {
			await window.ethereum.request({
				method: "wallet_requestPermissions",
				params: [{ eth_accounts: {} }]
			});
			const response = await window.ethereum.request({ method: "eth_requestAccounts" });
			const accounts = response;
			localStorage.setItem("ethWalletExplicitlyConnected", "true");
			this.handleProviderStatusChange(accounts);
		} catch (error) {
			console.error("连接钱包失败或用户拒绝:", error);
			throw error;
		}
		else {
			const url = deeplinkUrl ?? this.getMetaMaskDeepLink();
			window.location.href = url;
		}
	}
	/**
	* 断开钱包连接
	*/
	async disconnect() {
		try {
			this._account = null;
			this.updateStatus(EthWalletStatus.DISCONNECTED, null);
			this.unbindProviderEvents();
			localStorage.removeItem("ethWalletStatus");
			localStorage.removeItem("ethWalletAccount");
		} catch (error) {
			console.warn("断开钱包连接时出错:", error);
		}
	}
	/**
	* 销毁 Wallet 单例实例
	*/
	static destroy() {
		if (Wallet.instance) {
			const instance = Wallet.instance;
			instance.disconnect();
			instance.statusChangeHandlers.clear();
			instance.provider = void 0;
			instance.web3 = null;
			Wallet.instance = null;
		}
	}
	/**
	* 发送最基础的 ETH 转账交易
	* @param to 接收地址
	* @param amount 转账金额
	* @param unit 单位（可选，默认为 'ether'，也可为 'wei'）
	* @returns 交易哈希
	*/
	async sendTransaction(to, amount, unit = "ether") {
		if (!this.connected || !this._account) throw new Error("钱包未连接");
		if (!this.web3) throw new Error("web3 实例不存在");
		if (!this.provider) throw new Error("provider 不存在");
		const from = this._account.address;
		const valueInWei = this.web3.utils.toWei(amount.toString(), unit);
		try {
			const txParams = {
				from,
				to,
				value: valueInWei
			};
			const response = await this.provider.request({
				method: "eth_sendTransaction",
				params: [txParams]
			});
			if (!response.result || typeof response.result !== "string") throw new Error("交易哈希格式错误");
			return response.result;
		} catch (error) {
			console.error("发送 ETH 交易失败:", error);
			throw error;
		}
	}
	/**
	* 初始化智能合约
	* @param contractABI 合约 ABI
	* @param contractAddress 合约地址
	* @returns 合约实例
	*/
	initContract(contractABI, contractAddress) {
		if (!this.web3) throw new Error("web3 实例不存在");
		const cacheKey = `${contractAddress.toLowerCase()}`;
		const cachedContract = this.contractInstances.get(cacheKey);
		if (cachedContract) return cachedContract;
		try {
			const contract = new this.web3.eth.Contract(contractABI, contractAddress);
			this.contractInstances.set(cacheKey, contract);
			return contract;
		} catch (error) {
			console.error("初始化智能合约失败:", error);
			throw error;
		}
	}
	/**
	* 获取已初始化的合约实例
	* @param contractAddress 合约地址
	* @returns 合约实例，如果未初始化则返回 undefined
	*/
	getContract(contractAddress) {
		const cacheKey = `${contractAddress.toLowerCase()}`;
		return this.contractInstances.get(cacheKey);
	}
	/**
	* 清除合约实例缓存
	* @param contractAddress 可选的合约地址，如果不提供则清除所有缓存
	*/
	clearContractCache(contractAddress) {
		if (contractAddress) {
			const cacheKey = `${contractAddress.toLowerCase()}`;
			this.contractInstances.delete(cacheKey);
		} else this.contractInstances.clear();
	}
	/**
	* 根据 chainId 获取网络名称
	*/
	getChainName(chainId) {
		const chainIdMap = {
			"0x1": "Ethereum Mainnet",
			"0x5": "Goerli Testnet",
			"0xaa36a7": "Sepolia Testnet",
			"0x89": "Polygon Mainnet",
			"0x13881": "Mumbai Testnet",
			"0xa": "Optimism",
			"0x420": "Optimism Goerli",
			"0xa4b1": "Arbitrum One",
			"0x66eed": "Arbitrum Goerli"
		};
		return chainIdMap[chainId.toLowerCase()];
	}
	/**
	* 将 chainId 统一转换为十六进制格式
	* @param chainId 链 ID（可以是数字或十六进制字符串）
	* @returns 十六进制格式的 chainId
	*/
	formatChainId(chainId) {
		if (chainId == null) throw new Error("chainId 不能为空");
		if (typeof chainId === "object") if ("chainId" in chainId) chainId = chainId.chainId;
		else throw new Error("无效的 chainId 格式");
		if (typeof chainId === "number") return `0x${chainId.toString(16)}`;
		if (typeof chainId === "string") {
			if (chainId.startsWith("0x")) return chainId.toLowerCase();
			const num = parseInt(chainId);
			if (isNaN(num)) throw new Error("无效的 chainId 格式");
			return `0x${num.toString(16)}`;
		}
		throw new Error("无效的 chainId 格式");
	}
	/**
	* 切换网络
	* @param chainId 目标网络的 chainId
	* @param networkInfo 网络信息（仅在需要添加网络时使用）
	*/
	async switchNetwork(chainId, networkInfo) {
		if (!this.provider) throw new Error("provider 不存在");
		const formattedChainId = this.formatChainId(chainId);
		try {
			await this.provider.request({
				method: "wallet_switchEthereumChain",
				params: [{ chainId: formattedChainId }]
			});
		} catch (error) {
			if (error.code === 4902 && networkInfo) try {
				await this.provider.request({
					method: "wallet_addEthereumChain",
					params: [{
						chainId: formattedChainId,
						chainName: networkInfo.chainName,
						nativeCurrency: networkInfo.nativeCurrency,
						rpcUrls: networkInfo.rpcUrls,
						blockExplorerUrls: networkInfo.blockExplorerUrls
					}]
				});
			} catch (addError) {
				console.error("添加网络失败:", addError);
				throw new Error("添加网络失败，请手动添加网络");
			}
			else {
				console.error("切换网络失败:", error);
				throw new Error("切换网络失败");
			}
		}
	}
	/**
	* 获取当前链 ID
	*/
	get currentChainId() {
		if (!this.provider) throw new Error("provider 不存在");
		return this.provider.request({ method: "eth_chainId" }).then((response) => response);
	}
	/**
	* 获取当前网络信息
	*/
	async getNetworkInfo() {
		if (!this.provider) throw new Error("provider 不存在");
		try {
			const chainId = await this.currentChainId;
			return {
				chainId,
				chainName: this.getChainName(chainId)
			};
		} catch (error) {
			console.error("获取网络信息失败:", error);
			throw new Error("获取网络信息失败");
		}
	}
	/**
	* 切换到自定义网络
	* @param chainId 目标网络的 chainId
	* @param networkInfo 网络信息
	*/
	async switchToCustomNetwork(chainId, networkInfo) {
		if (!this.provider) throw new Error("provider 不存在");
		const formattedChainId = this.formatChainId(chainId);
		try {
			await this.provider.request({
				method: "wallet_switchEthereumChain",
				params: [{ chainId: formattedChainId }]
			});
		} catch (error) {
			if (error.code === 4902) try {
				await this.provider.request({
					method: "wallet_addEthereumChain",
					params: [{
						chainId: formattedChainId,
						chainName: networkInfo.chainName,
						nativeCurrency: networkInfo.nativeCurrency,
						rpcUrls: networkInfo.rpcUrls,
						blockExplorerUrls: networkInfo.blockExplorerUrls
					}]
				});
			} catch (addError) {
				console.error("添加网络失败:", addError);
				throw new Error("添加网络失败，请手动添加网络");
			}
			else {
				console.error("切换网络失败:", error);
				throw new Error("切换网络失败");
			}
		}
	}
};

//#endregion
exports.EthWalletStatus = EthWalletStatus;
exports.Wallet = Wallet;
return exports;
})({});