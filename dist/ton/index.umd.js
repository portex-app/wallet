(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ?  factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.PortexTON = {})));
})(this, function(exports) {
//#region rolldown:runtime
var __create = Object.create;
var __defProp$1 = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function() {
	return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from$1, except, desc) => {
	if (from$1 && typeof from$1 === "object" || typeof from$1 === "function") for (var keys = __getOwnPropNames(from$1), i$2 = 0, n$1 = keys.length, key; i$2 < n$1; i$2++) {
		key = keys[i$2];
		if (!__hasOwnProp$1.call(to, key) && key !== except) __defProp$1(to, key, {
			get: ((k) => from$1[k]).bind(null, key),
			enumerable: !(desc = __getOwnPropDesc(from$1, key)) || desc.enumerable
		});
	}
	return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp$1(target, "default", {
	value: mod,
	enumerable: true
}) : target, mod));

//#endregion

//#region ../../node_modules/.pnpm/tweetnacl-util@0.15.1/node_modules/tweetnacl-util/nacl-util.js
var require_nacl_util = __commonJS({ "../../node_modules/.pnpm/tweetnacl-util@0.15.1/node_modules/tweetnacl-util/nacl-util.js"(exports, module) {
	(function(root, f) {
		"use strict";
		if (typeof module !== "undefined" && module.exports) module.exports = f();
		else if (root.nacl) root.nacl.util = f();
		else {
			root.nacl = {};
			root.nacl.util = f();
		}
	})(void 0, function() {
		"use strict";
		var util = {};
		function validateBase64(s$1) {
			if (!/^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.test(s$1)) throw new TypeError("invalid encoding");
		}
		util.decodeUTF8 = function(s$1) {
			if (typeof s$1 !== "string") throw new TypeError("expected string");
			var i$2, d = unescape(encodeURIComponent(s$1)), b = new Uint8Array(d.length);
			for (i$2 = 0; i$2 < d.length; i$2++) b[i$2] = d.charCodeAt(i$2);
			return b;
		};
		util.encodeUTF8 = function(arr) {
			var i$2, s$1 = [];
			for (i$2 = 0; i$2 < arr.length; i$2++) s$1.push(String.fromCharCode(arr[i$2]));
			return decodeURIComponent(escape(s$1.join("")));
		};
		if (typeof atob === "undefined") if (typeof Buffer.from !== "undefined") {
			util.encodeBase64 = function(arr) {
				return Buffer.from(arr).toString("base64");
			};
			util.decodeBase64 = function(s$1) {
				validateBase64(s$1);
				return new Uint8Array(Array.prototype.slice.call(Buffer.from(s$1, "base64"), 0));
			};
		} else {
			util.encodeBase64 = function(arr) {
				return new Buffer(arr).toString("base64");
			};
			util.decodeBase64 = function(s$1) {
				validateBase64(s$1);
				return new Uint8Array(Array.prototype.slice.call(new Buffer(s$1, "base64"), 0));
			};
		}
		else {
			util.encodeBase64 = function(arr) {
				var i$2, s$1 = [], len$1 = arr.length;
				for (i$2 = 0; i$2 < len$1; i$2++) s$1.push(String.fromCharCode(arr[i$2]));
				return btoa(s$1.join(""));
			};
			util.decodeBase64 = function(s$1) {
				validateBase64(s$1);
				var i$2, d = atob(s$1), b = new Uint8Array(d.length);
				for (i$2 = 0; i$2 < d.length; i$2++) b[i$2] = d.charCodeAt(i$2);
				return b;
			};
		}
		return util;
	});
} });

//#endregion
//#region (ignored) ../../node_modules/.pnpm/tweetnacl@1.0.3/node_modules/tweetnacl
var require_tweetnacl = __commonJS({ "../../node_modules/.pnpm/tweetnacl@1.0.3/node_modules/tweetnacl"() {} });

//#endregion
//#region ../../node_modules/.pnpm/tweetnacl@1.0.3/node_modules/tweetnacl/nacl-fast.js
var require_nacl_fast = __commonJS({ "../../node_modules/.pnpm/tweetnacl@1.0.3/node_modules/tweetnacl/nacl-fast.js"(exports, module) {
	(function(nacl$2) {
		"use strict";
		var gf = function(init) {
			var i$2, r = new Float64Array(16);
			if (init) for (i$2 = 0; i$2 < init.length; i$2++) r[i$2] = init[i$2];
			return r;
		};
		var randombytes = function() {
			throw new Error("no PRNG");
		};
		var _0 = new Uint8Array(16);
		var _9 = new Uint8Array(32);
		_9[0] = 9;
		var gf0 = gf(), gf1 = gf([1]), _121665 = gf([56129, 1]), D = gf([
			30883,
			4953,
			19914,
			30187,
			55467,
			16705,
			2637,
			112,
			59544,
			30585,
			16505,
			36039,
			65139,
			11119,
			27886,
			20995
		]), D2 = gf([
			61785,
			9906,
			39828,
			60374,
			45398,
			33411,
			5274,
			224,
			53552,
			61171,
			33010,
			6542,
			64743,
			22239,
			55772,
			9222
		]), X = gf([
			54554,
			36645,
			11616,
			51542,
			42930,
			38181,
			51040,
			26924,
			56412,
			64982,
			57905,
			49316,
			21502,
			52590,
			14035,
			8553
		]), Y = gf([
			26200,
			26214,
			26214,
			26214,
			26214,
			26214,
			26214,
			26214,
			26214,
			26214,
			26214,
			26214,
			26214,
			26214,
			26214,
			26214
		]), I = gf([
			41136,
			18958,
			6951,
			50414,
			58488,
			44335,
			6150,
			12099,
			55207,
			15867,
			153,
			11085,
			57099,
			20417,
			9344,
			11139
		]);
		function ts64(x, i$2, h$1, l$1) {
			x[i$2] = h$1 >> 24 & 255;
			x[i$2 + 1] = h$1 >> 16 & 255;
			x[i$2 + 2] = h$1 >> 8 & 255;
			x[i$2 + 3] = h$1 & 255;
			x[i$2 + 4] = l$1 >> 24 & 255;
			x[i$2 + 5] = l$1 >> 16 & 255;
			x[i$2 + 6] = l$1 >> 8 & 255;
			x[i$2 + 7] = l$1 & 255;
		}
		function vn(x, xi, y, yi, n$1) {
			var i$2, d = 0;
			for (i$2 = 0; i$2 < n$1; i$2++) d |= x[xi + i$2] ^ y[yi + i$2];
			return (1 & d - 1 >>> 8) - 1;
		}
		function crypto_verify_16(x, xi, y, yi) {
			return vn(x, xi, y, yi, 16);
		}
		function crypto_verify_32(x, xi, y, yi) {
			return vn(x, xi, y, yi, 32);
		}
		function core_salsa20(o$1, p$1, k, c$1) {
			var j0 = c$1[0] & 255 | (c$1[1] & 255) << 8 | (c$1[2] & 255) << 16 | (c$1[3] & 255) << 24, j1 = k[0] & 255 | (k[1] & 255) << 8 | (k[2] & 255) << 16 | (k[3] & 255) << 24, j2 = k[4] & 255 | (k[5] & 255) << 8 | (k[6] & 255) << 16 | (k[7] & 255) << 24, j3 = k[8] & 255 | (k[9] & 255) << 8 | (k[10] & 255) << 16 | (k[11] & 255) << 24, j4 = k[12] & 255 | (k[13] & 255) << 8 | (k[14] & 255) << 16 | (k[15] & 255) << 24, j5 = c$1[4] & 255 | (c$1[5] & 255) << 8 | (c$1[6] & 255) << 16 | (c$1[7] & 255) << 24, j6 = p$1[0] & 255 | (p$1[1] & 255) << 8 | (p$1[2] & 255) << 16 | (p$1[3] & 255) << 24, j7 = p$1[4] & 255 | (p$1[5] & 255) << 8 | (p$1[6] & 255) << 16 | (p$1[7] & 255) << 24, j8 = p$1[8] & 255 | (p$1[9] & 255) << 8 | (p$1[10] & 255) << 16 | (p$1[11] & 255) << 24, j9 = p$1[12] & 255 | (p$1[13] & 255) << 8 | (p$1[14] & 255) << 16 | (p$1[15] & 255) << 24, j10 = c$1[8] & 255 | (c$1[9] & 255) << 8 | (c$1[10] & 255) << 16 | (c$1[11] & 255) << 24, j11 = k[16] & 255 | (k[17] & 255) << 8 | (k[18] & 255) << 16 | (k[19] & 255) << 24, j12 = k[20] & 255 | (k[21] & 255) << 8 | (k[22] & 255) << 16 | (k[23] & 255) << 24, j13 = k[24] & 255 | (k[25] & 255) << 8 | (k[26] & 255) << 16 | (k[27] & 255) << 24, j14 = k[28] & 255 | (k[29] & 255) << 8 | (k[30] & 255) << 16 | (k[31] & 255) << 24, j15 = c$1[12] & 255 | (c$1[13] & 255) << 8 | (c$1[14] & 255) << 16 | (c$1[15] & 255) << 24;
			var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7, x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14, x15 = j15, u$1;
			for (var i$2 = 0; i$2 < 20; i$2 += 2) {
				u$1 = x0 + x12 | 0;
				x4 ^= u$1 << 7 | u$1 >>> 25;
				u$1 = x4 + x0 | 0;
				x8 ^= u$1 << 9 | u$1 >>> 23;
				u$1 = x8 + x4 | 0;
				x12 ^= u$1 << 13 | u$1 >>> 19;
				u$1 = x12 + x8 | 0;
				x0 ^= u$1 << 18 | u$1 >>> 14;
				u$1 = x5 + x1 | 0;
				x9 ^= u$1 << 7 | u$1 >>> 25;
				u$1 = x9 + x5 | 0;
				x13 ^= u$1 << 9 | u$1 >>> 23;
				u$1 = x13 + x9 | 0;
				x1 ^= u$1 << 13 | u$1 >>> 19;
				u$1 = x1 + x13 | 0;
				x5 ^= u$1 << 18 | u$1 >>> 14;
				u$1 = x10 + x6 | 0;
				x14 ^= u$1 << 7 | u$1 >>> 25;
				u$1 = x14 + x10 | 0;
				x2 ^= u$1 << 9 | u$1 >>> 23;
				u$1 = x2 + x14 | 0;
				x6 ^= u$1 << 13 | u$1 >>> 19;
				u$1 = x6 + x2 | 0;
				x10 ^= u$1 << 18 | u$1 >>> 14;
				u$1 = x15 + x11 | 0;
				x3 ^= u$1 << 7 | u$1 >>> 25;
				u$1 = x3 + x15 | 0;
				x7 ^= u$1 << 9 | u$1 >>> 23;
				u$1 = x7 + x3 | 0;
				x11 ^= u$1 << 13 | u$1 >>> 19;
				u$1 = x11 + x7 | 0;
				x15 ^= u$1 << 18 | u$1 >>> 14;
				u$1 = x0 + x3 | 0;
				x1 ^= u$1 << 7 | u$1 >>> 25;
				u$1 = x1 + x0 | 0;
				x2 ^= u$1 << 9 | u$1 >>> 23;
				u$1 = x2 + x1 | 0;
				x3 ^= u$1 << 13 | u$1 >>> 19;
				u$1 = x3 + x2 | 0;
				x0 ^= u$1 << 18 | u$1 >>> 14;
				u$1 = x5 + x4 | 0;
				x6 ^= u$1 << 7 | u$1 >>> 25;
				u$1 = x6 + x5 | 0;
				x7 ^= u$1 << 9 | u$1 >>> 23;
				u$1 = x7 + x6 | 0;
				x4 ^= u$1 << 13 | u$1 >>> 19;
				u$1 = x4 + x7 | 0;
				x5 ^= u$1 << 18 | u$1 >>> 14;
				u$1 = x10 + x9 | 0;
				x11 ^= u$1 << 7 | u$1 >>> 25;
				u$1 = x11 + x10 | 0;
				x8 ^= u$1 << 9 | u$1 >>> 23;
				u$1 = x8 + x11 | 0;
				x9 ^= u$1 << 13 | u$1 >>> 19;
				u$1 = x9 + x8 | 0;
				x10 ^= u$1 << 18 | u$1 >>> 14;
				u$1 = x15 + x14 | 0;
				x12 ^= u$1 << 7 | u$1 >>> 25;
				u$1 = x12 + x15 | 0;
				x13 ^= u$1 << 9 | u$1 >>> 23;
				u$1 = x13 + x12 | 0;
				x14 ^= u$1 << 13 | u$1 >>> 19;
				u$1 = x14 + x13 | 0;
				x15 ^= u$1 << 18 | u$1 >>> 14;
			}
			x0 = x0 + j0 | 0;
			x1 = x1 + j1 | 0;
			x2 = x2 + j2 | 0;
			x3 = x3 + j3 | 0;
			x4 = x4 + j4 | 0;
			x5 = x5 + j5 | 0;
			x6 = x6 + j6 | 0;
			x7 = x7 + j7 | 0;
			x8 = x8 + j8 | 0;
			x9 = x9 + j9 | 0;
			x10 = x10 + j10 | 0;
			x11 = x11 + j11 | 0;
			x12 = x12 + j12 | 0;
			x13 = x13 + j13 | 0;
			x14 = x14 + j14 | 0;
			x15 = x15 + j15 | 0;
			o$1[0] = x0 >>> 0 & 255;
			o$1[1] = x0 >>> 8 & 255;
			o$1[2] = x0 >>> 16 & 255;
			o$1[3] = x0 >>> 24 & 255;
			o$1[4] = x1 >>> 0 & 255;
			o$1[5] = x1 >>> 8 & 255;
			o$1[6] = x1 >>> 16 & 255;
			o$1[7] = x1 >>> 24 & 255;
			o$1[8] = x2 >>> 0 & 255;
			o$1[9] = x2 >>> 8 & 255;
			o$1[10] = x2 >>> 16 & 255;
			o$1[11] = x2 >>> 24 & 255;
			o$1[12] = x3 >>> 0 & 255;
			o$1[13] = x3 >>> 8 & 255;
			o$1[14] = x3 >>> 16 & 255;
			o$1[15] = x3 >>> 24 & 255;
			o$1[16] = x4 >>> 0 & 255;
			o$1[17] = x4 >>> 8 & 255;
			o$1[18] = x4 >>> 16 & 255;
			o$1[19] = x4 >>> 24 & 255;
			o$1[20] = x5 >>> 0 & 255;
			o$1[21] = x5 >>> 8 & 255;
			o$1[22] = x5 >>> 16 & 255;
			o$1[23] = x5 >>> 24 & 255;
			o$1[24] = x6 >>> 0 & 255;
			o$1[25] = x6 >>> 8 & 255;
			o$1[26] = x6 >>> 16 & 255;
			o$1[27] = x6 >>> 24 & 255;
			o$1[28] = x7 >>> 0 & 255;
			o$1[29] = x7 >>> 8 & 255;
			o$1[30] = x7 >>> 16 & 255;
			o$1[31] = x7 >>> 24 & 255;
			o$1[32] = x8 >>> 0 & 255;
			o$1[33] = x8 >>> 8 & 255;
			o$1[34] = x8 >>> 16 & 255;
			o$1[35] = x8 >>> 24 & 255;
			o$1[36] = x9 >>> 0 & 255;
			o$1[37] = x9 >>> 8 & 255;
			o$1[38] = x9 >>> 16 & 255;
			o$1[39] = x9 >>> 24 & 255;
			o$1[40] = x10 >>> 0 & 255;
			o$1[41] = x10 >>> 8 & 255;
			o$1[42] = x10 >>> 16 & 255;
			o$1[43] = x10 >>> 24 & 255;
			o$1[44] = x11 >>> 0 & 255;
			o$1[45] = x11 >>> 8 & 255;
			o$1[46] = x11 >>> 16 & 255;
			o$1[47] = x11 >>> 24 & 255;
			o$1[48] = x12 >>> 0 & 255;
			o$1[49] = x12 >>> 8 & 255;
			o$1[50] = x12 >>> 16 & 255;
			o$1[51] = x12 >>> 24 & 255;
			o$1[52] = x13 >>> 0 & 255;
			o$1[53] = x13 >>> 8 & 255;
			o$1[54] = x13 >>> 16 & 255;
			o$1[55] = x13 >>> 24 & 255;
			o$1[56] = x14 >>> 0 & 255;
			o$1[57] = x14 >>> 8 & 255;
			o$1[58] = x14 >>> 16 & 255;
			o$1[59] = x14 >>> 24 & 255;
			o$1[60] = x15 >>> 0 & 255;
			o$1[61] = x15 >>> 8 & 255;
			o$1[62] = x15 >>> 16 & 255;
			o$1[63] = x15 >>> 24 & 255;
		}
		function core_hsalsa20(o$1, p$1, k, c$1) {
			var j0 = c$1[0] & 255 | (c$1[1] & 255) << 8 | (c$1[2] & 255) << 16 | (c$1[3] & 255) << 24, j1 = k[0] & 255 | (k[1] & 255) << 8 | (k[2] & 255) << 16 | (k[3] & 255) << 24, j2 = k[4] & 255 | (k[5] & 255) << 8 | (k[6] & 255) << 16 | (k[7] & 255) << 24, j3 = k[8] & 255 | (k[9] & 255) << 8 | (k[10] & 255) << 16 | (k[11] & 255) << 24, j4 = k[12] & 255 | (k[13] & 255) << 8 | (k[14] & 255) << 16 | (k[15] & 255) << 24, j5 = c$1[4] & 255 | (c$1[5] & 255) << 8 | (c$1[6] & 255) << 16 | (c$1[7] & 255) << 24, j6 = p$1[0] & 255 | (p$1[1] & 255) << 8 | (p$1[2] & 255) << 16 | (p$1[3] & 255) << 24, j7 = p$1[4] & 255 | (p$1[5] & 255) << 8 | (p$1[6] & 255) << 16 | (p$1[7] & 255) << 24, j8 = p$1[8] & 255 | (p$1[9] & 255) << 8 | (p$1[10] & 255) << 16 | (p$1[11] & 255) << 24, j9 = p$1[12] & 255 | (p$1[13] & 255) << 8 | (p$1[14] & 255) << 16 | (p$1[15] & 255) << 24, j10 = c$1[8] & 255 | (c$1[9] & 255) << 8 | (c$1[10] & 255) << 16 | (c$1[11] & 255) << 24, j11 = k[16] & 255 | (k[17] & 255) << 8 | (k[18] & 255) << 16 | (k[19] & 255) << 24, j12 = k[20] & 255 | (k[21] & 255) << 8 | (k[22] & 255) << 16 | (k[23] & 255) << 24, j13 = k[24] & 255 | (k[25] & 255) << 8 | (k[26] & 255) << 16 | (k[27] & 255) << 24, j14 = k[28] & 255 | (k[29] & 255) << 8 | (k[30] & 255) << 16 | (k[31] & 255) << 24, j15 = c$1[12] & 255 | (c$1[13] & 255) << 8 | (c$1[14] & 255) << 16 | (c$1[15] & 255) << 24;
			var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7, x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14, x15 = j15, u$1;
			for (var i$2 = 0; i$2 < 20; i$2 += 2) {
				u$1 = x0 + x12 | 0;
				x4 ^= u$1 << 7 | u$1 >>> 25;
				u$1 = x4 + x0 | 0;
				x8 ^= u$1 << 9 | u$1 >>> 23;
				u$1 = x8 + x4 | 0;
				x12 ^= u$1 << 13 | u$1 >>> 19;
				u$1 = x12 + x8 | 0;
				x0 ^= u$1 << 18 | u$1 >>> 14;
				u$1 = x5 + x1 | 0;
				x9 ^= u$1 << 7 | u$1 >>> 25;
				u$1 = x9 + x5 | 0;
				x13 ^= u$1 << 9 | u$1 >>> 23;
				u$1 = x13 + x9 | 0;
				x1 ^= u$1 << 13 | u$1 >>> 19;
				u$1 = x1 + x13 | 0;
				x5 ^= u$1 << 18 | u$1 >>> 14;
				u$1 = x10 + x6 | 0;
				x14 ^= u$1 << 7 | u$1 >>> 25;
				u$1 = x14 + x10 | 0;
				x2 ^= u$1 << 9 | u$1 >>> 23;
				u$1 = x2 + x14 | 0;
				x6 ^= u$1 << 13 | u$1 >>> 19;
				u$1 = x6 + x2 | 0;
				x10 ^= u$1 << 18 | u$1 >>> 14;
				u$1 = x15 + x11 | 0;
				x3 ^= u$1 << 7 | u$1 >>> 25;
				u$1 = x3 + x15 | 0;
				x7 ^= u$1 << 9 | u$1 >>> 23;
				u$1 = x7 + x3 | 0;
				x11 ^= u$1 << 13 | u$1 >>> 19;
				u$1 = x11 + x7 | 0;
				x15 ^= u$1 << 18 | u$1 >>> 14;
				u$1 = x0 + x3 | 0;
				x1 ^= u$1 << 7 | u$1 >>> 25;
				u$1 = x1 + x0 | 0;
				x2 ^= u$1 << 9 | u$1 >>> 23;
				u$1 = x2 + x1 | 0;
				x3 ^= u$1 << 13 | u$1 >>> 19;
				u$1 = x3 + x2 | 0;
				x0 ^= u$1 << 18 | u$1 >>> 14;
				u$1 = x5 + x4 | 0;
				x6 ^= u$1 << 7 | u$1 >>> 25;
				u$1 = x6 + x5 | 0;
				x7 ^= u$1 << 9 | u$1 >>> 23;
				u$1 = x7 + x6 | 0;
				x4 ^= u$1 << 13 | u$1 >>> 19;
				u$1 = x4 + x7 | 0;
				x5 ^= u$1 << 18 | u$1 >>> 14;
				u$1 = x10 + x9 | 0;
				x11 ^= u$1 << 7 | u$1 >>> 25;
				u$1 = x11 + x10 | 0;
				x8 ^= u$1 << 9 | u$1 >>> 23;
				u$1 = x8 + x11 | 0;
				x9 ^= u$1 << 13 | u$1 >>> 19;
				u$1 = x9 + x8 | 0;
				x10 ^= u$1 << 18 | u$1 >>> 14;
				u$1 = x15 + x14 | 0;
				x12 ^= u$1 << 7 | u$1 >>> 25;
				u$1 = x12 + x15 | 0;
				x13 ^= u$1 << 9 | u$1 >>> 23;
				u$1 = x13 + x12 | 0;
				x14 ^= u$1 << 13 | u$1 >>> 19;
				u$1 = x14 + x13 | 0;
				x15 ^= u$1 << 18 | u$1 >>> 14;
			}
			o$1[0] = x0 >>> 0 & 255;
			o$1[1] = x0 >>> 8 & 255;
			o$1[2] = x0 >>> 16 & 255;
			o$1[3] = x0 >>> 24 & 255;
			o$1[4] = x5 >>> 0 & 255;
			o$1[5] = x5 >>> 8 & 255;
			o$1[6] = x5 >>> 16 & 255;
			o$1[7] = x5 >>> 24 & 255;
			o$1[8] = x10 >>> 0 & 255;
			o$1[9] = x10 >>> 8 & 255;
			o$1[10] = x10 >>> 16 & 255;
			o$1[11] = x10 >>> 24 & 255;
			o$1[12] = x15 >>> 0 & 255;
			o$1[13] = x15 >>> 8 & 255;
			o$1[14] = x15 >>> 16 & 255;
			o$1[15] = x15 >>> 24 & 255;
			o$1[16] = x6 >>> 0 & 255;
			o$1[17] = x6 >>> 8 & 255;
			o$1[18] = x6 >>> 16 & 255;
			o$1[19] = x6 >>> 24 & 255;
			o$1[20] = x7 >>> 0 & 255;
			o$1[21] = x7 >>> 8 & 255;
			o$1[22] = x7 >>> 16 & 255;
			o$1[23] = x7 >>> 24 & 255;
			o$1[24] = x8 >>> 0 & 255;
			o$1[25] = x8 >>> 8 & 255;
			o$1[26] = x8 >>> 16 & 255;
			o$1[27] = x8 >>> 24 & 255;
			o$1[28] = x9 >>> 0 & 255;
			o$1[29] = x9 >>> 8 & 255;
			o$1[30] = x9 >>> 16 & 255;
			o$1[31] = x9 >>> 24 & 255;
		}
		function crypto_core_salsa20(out, inp, k, c$1) {
			core_salsa20(out, inp, k, c$1);
		}
		function crypto_core_hsalsa20(out, inp, k, c$1) {
			core_hsalsa20(out, inp, k, c$1);
		}
		var sigma = new Uint8Array([
			101,
			120,
			112,
			97,
			110,
			100,
			32,
			51,
			50,
			45,
			98,
			121,
			116,
			101,
			32,
			107
		]);
		function crypto_stream_salsa20_xor(c$1, cpos, m, mpos, b, n$1, k) {
			var z = new Uint8Array(16), x = new Uint8Array(64);
			var u$1, i$2;
			for (i$2 = 0; i$2 < 16; i$2++) z[i$2] = 0;
			for (i$2 = 0; i$2 < 8; i$2++) z[i$2] = n$1[i$2];
			while (b >= 64) {
				crypto_core_salsa20(x, z, k, sigma);
				for (i$2 = 0; i$2 < 64; i$2++) c$1[cpos + i$2] = m[mpos + i$2] ^ x[i$2];
				u$1 = 1;
				for (i$2 = 8; i$2 < 16; i$2++) {
					u$1 = u$1 + (z[i$2] & 255) | 0;
					z[i$2] = u$1 & 255;
					u$1 >>>= 8;
				}
				b -= 64;
				cpos += 64;
				mpos += 64;
			}
			if (b > 0) {
				crypto_core_salsa20(x, z, k, sigma);
				for (i$2 = 0; i$2 < b; i$2++) c$1[cpos + i$2] = m[mpos + i$2] ^ x[i$2];
			}
			return 0;
		}
		function crypto_stream_salsa20(c$1, cpos, b, n$1, k) {
			var z = new Uint8Array(16), x = new Uint8Array(64);
			var u$1, i$2;
			for (i$2 = 0; i$2 < 16; i$2++) z[i$2] = 0;
			for (i$2 = 0; i$2 < 8; i$2++) z[i$2] = n$1[i$2];
			while (b >= 64) {
				crypto_core_salsa20(x, z, k, sigma);
				for (i$2 = 0; i$2 < 64; i$2++) c$1[cpos + i$2] = x[i$2];
				u$1 = 1;
				for (i$2 = 8; i$2 < 16; i$2++) {
					u$1 = u$1 + (z[i$2] & 255) | 0;
					z[i$2] = u$1 & 255;
					u$1 >>>= 8;
				}
				b -= 64;
				cpos += 64;
			}
			if (b > 0) {
				crypto_core_salsa20(x, z, k, sigma);
				for (i$2 = 0; i$2 < b; i$2++) c$1[cpos + i$2] = x[i$2];
			}
			return 0;
		}
		function crypto_stream(c$1, cpos, d, n$1, k) {
			var s$1 = new Uint8Array(32);
			crypto_core_hsalsa20(s$1, n$1, k, sigma);
			var sn = new Uint8Array(8);
			for (var i$2 = 0; i$2 < 8; i$2++) sn[i$2] = n$1[i$2 + 16];
			return crypto_stream_salsa20(c$1, cpos, d, sn, s$1);
		}
		function crypto_stream_xor(c$1, cpos, m, mpos, d, n$1, k) {
			var s$1 = new Uint8Array(32);
			crypto_core_hsalsa20(s$1, n$1, k, sigma);
			var sn = new Uint8Array(8);
			for (var i$2 = 0; i$2 < 8; i$2++) sn[i$2] = n$1[i$2 + 16];
			return crypto_stream_salsa20_xor(c$1, cpos, m, mpos, d, sn, s$1);
		}
		var poly1305 = function(key) {
			this.buffer = new Uint8Array(16);
			this.r = new Uint16Array(10);
			this.h = new Uint16Array(10);
			this.pad = new Uint16Array(8);
			this.leftover = 0;
			this.fin = 0;
			var t0, t1, t2, t3, t4, t5, t6, t7;
			t0 = key[0] & 255 | (key[1] & 255) << 8;
			this.r[0] = t0 & 8191;
			t1 = key[2] & 255 | (key[3] & 255) << 8;
			this.r[1] = (t0 >>> 13 | t1 << 3) & 8191;
			t2 = key[4] & 255 | (key[5] & 255) << 8;
			this.r[2] = (t1 >>> 10 | t2 << 6) & 7939;
			t3 = key[6] & 255 | (key[7] & 255) << 8;
			this.r[3] = (t2 >>> 7 | t3 << 9) & 8191;
			t4 = key[8] & 255 | (key[9] & 255) << 8;
			this.r[4] = (t3 >>> 4 | t4 << 12) & 255;
			this.r[5] = t4 >>> 1 & 8190;
			t5 = key[10] & 255 | (key[11] & 255) << 8;
			this.r[6] = (t4 >>> 14 | t5 << 2) & 8191;
			t6 = key[12] & 255 | (key[13] & 255) << 8;
			this.r[7] = (t5 >>> 11 | t6 << 5) & 8065;
			t7 = key[14] & 255 | (key[15] & 255) << 8;
			this.r[8] = (t6 >>> 8 | t7 << 8) & 8191;
			this.r[9] = t7 >>> 5 & 127;
			this.pad[0] = key[16] & 255 | (key[17] & 255) << 8;
			this.pad[1] = key[18] & 255 | (key[19] & 255) << 8;
			this.pad[2] = key[20] & 255 | (key[21] & 255) << 8;
			this.pad[3] = key[22] & 255 | (key[23] & 255) << 8;
			this.pad[4] = key[24] & 255 | (key[25] & 255) << 8;
			this.pad[5] = key[26] & 255 | (key[27] & 255) << 8;
			this.pad[6] = key[28] & 255 | (key[29] & 255) << 8;
			this.pad[7] = key[30] & 255 | (key[31] & 255) << 8;
		};
		poly1305.prototype.blocks = function(m, mpos, bytes) {
			var hibit = this.fin ? 0 : 2048;
			var t0, t1, t2, t3, t4, t5, t6, t7, c$1;
			var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;
			var h0 = this.h[0], h1 = this.h[1], h2 = this.h[2], h3 = this.h[3], h4 = this.h[4], h5 = this.h[5], h6 = this.h[6], h7 = this.h[7], h8 = this.h[8], h9 = this.h[9];
			var r0 = this.r[0], r1 = this.r[1], r2 = this.r[2], r3 = this.r[3], r4 = this.r[4], r5 = this.r[5], r6 = this.r[6], r7 = this.r[7], r8 = this.r[8], r9 = this.r[9];
			while (bytes >= 16) {
				t0 = m[mpos + 0] & 255 | (m[mpos + 1] & 255) << 8;
				h0 += t0 & 8191;
				t1 = m[mpos + 2] & 255 | (m[mpos + 3] & 255) << 8;
				h1 += (t0 >>> 13 | t1 << 3) & 8191;
				t2 = m[mpos + 4] & 255 | (m[mpos + 5] & 255) << 8;
				h2 += (t1 >>> 10 | t2 << 6) & 8191;
				t3 = m[mpos + 6] & 255 | (m[mpos + 7] & 255) << 8;
				h3 += (t2 >>> 7 | t3 << 9) & 8191;
				t4 = m[mpos + 8] & 255 | (m[mpos + 9] & 255) << 8;
				h4 += (t3 >>> 4 | t4 << 12) & 8191;
				h5 += t4 >>> 1 & 8191;
				t5 = m[mpos + 10] & 255 | (m[mpos + 11] & 255) << 8;
				h6 += (t4 >>> 14 | t5 << 2) & 8191;
				t6 = m[mpos + 12] & 255 | (m[mpos + 13] & 255) << 8;
				h7 += (t5 >>> 11 | t6 << 5) & 8191;
				t7 = m[mpos + 14] & 255 | (m[mpos + 15] & 255) << 8;
				h8 += (t6 >>> 8 | t7 << 8) & 8191;
				h9 += t7 >>> 5 | hibit;
				c$1 = 0;
				d0 = c$1;
				d0 += h0 * r0;
				d0 += h1 * (5 * r9);
				d0 += h2 * (5 * r8);
				d0 += h3 * (5 * r7);
				d0 += h4 * (5 * r6);
				c$1 = d0 >>> 13;
				d0 &= 8191;
				d0 += h5 * (5 * r5);
				d0 += h6 * (5 * r4);
				d0 += h7 * (5 * r3);
				d0 += h8 * (5 * r2);
				d0 += h9 * (5 * r1);
				c$1 += d0 >>> 13;
				d0 &= 8191;
				d1 = c$1;
				d1 += h0 * r1;
				d1 += h1 * r0;
				d1 += h2 * (5 * r9);
				d1 += h3 * (5 * r8);
				d1 += h4 * (5 * r7);
				c$1 = d1 >>> 13;
				d1 &= 8191;
				d1 += h5 * (5 * r6);
				d1 += h6 * (5 * r5);
				d1 += h7 * (5 * r4);
				d1 += h8 * (5 * r3);
				d1 += h9 * (5 * r2);
				c$1 += d1 >>> 13;
				d1 &= 8191;
				d2 = c$1;
				d2 += h0 * r2;
				d2 += h1 * r1;
				d2 += h2 * r0;
				d2 += h3 * (5 * r9);
				d2 += h4 * (5 * r8);
				c$1 = d2 >>> 13;
				d2 &= 8191;
				d2 += h5 * (5 * r7);
				d2 += h6 * (5 * r6);
				d2 += h7 * (5 * r5);
				d2 += h8 * (5 * r4);
				d2 += h9 * (5 * r3);
				c$1 += d2 >>> 13;
				d2 &= 8191;
				d3 = c$1;
				d3 += h0 * r3;
				d3 += h1 * r2;
				d3 += h2 * r1;
				d3 += h3 * r0;
				d3 += h4 * (5 * r9);
				c$1 = d3 >>> 13;
				d3 &= 8191;
				d3 += h5 * (5 * r8);
				d3 += h6 * (5 * r7);
				d3 += h7 * (5 * r6);
				d3 += h8 * (5 * r5);
				d3 += h9 * (5 * r4);
				c$1 += d3 >>> 13;
				d3 &= 8191;
				d4 = c$1;
				d4 += h0 * r4;
				d4 += h1 * r3;
				d4 += h2 * r2;
				d4 += h3 * r1;
				d4 += h4 * r0;
				c$1 = d4 >>> 13;
				d4 &= 8191;
				d4 += h5 * (5 * r9);
				d4 += h6 * (5 * r8);
				d4 += h7 * (5 * r7);
				d4 += h8 * (5 * r6);
				d4 += h9 * (5 * r5);
				c$1 += d4 >>> 13;
				d4 &= 8191;
				d5 = c$1;
				d5 += h0 * r5;
				d5 += h1 * r4;
				d5 += h2 * r3;
				d5 += h3 * r2;
				d5 += h4 * r1;
				c$1 = d5 >>> 13;
				d5 &= 8191;
				d5 += h5 * r0;
				d5 += h6 * (5 * r9);
				d5 += h7 * (5 * r8);
				d5 += h8 * (5 * r7);
				d5 += h9 * (5 * r6);
				c$1 += d5 >>> 13;
				d5 &= 8191;
				d6 = c$1;
				d6 += h0 * r6;
				d6 += h1 * r5;
				d6 += h2 * r4;
				d6 += h3 * r3;
				d6 += h4 * r2;
				c$1 = d6 >>> 13;
				d6 &= 8191;
				d6 += h5 * r1;
				d6 += h6 * r0;
				d6 += h7 * (5 * r9);
				d6 += h8 * (5 * r8);
				d6 += h9 * (5 * r7);
				c$1 += d6 >>> 13;
				d6 &= 8191;
				d7 = c$1;
				d7 += h0 * r7;
				d7 += h1 * r6;
				d7 += h2 * r5;
				d7 += h3 * r4;
				d7 += h4 * r3;
				c$1 = d7 >>> 13;
				d7 &= 8191;
				d7 += h5 * r2;
				d7 += h6 * r1;
				d7 += h7 * r0;
				d7 += h8 * (5 * r9);
				d7 += h9 * (5 * r8);
				c$1 += d7 >>> 13;
				d7 &= 8191;
				d8 = c$1;
				d8 += h0 * r8;
				d8 += h1 * r7;
				d8 += h2 * r6;
				d8 += h3 * r5;
				d8 += h4 * r4;
				c$1 = d8 >>> 13;
				d8 &= 8191;
				d8 += h5 * r3;
				d8 += h6 * r2;
				d8 += h7 * r1;
				d8 += h8 * r0;
				d8 += h9 * (5 * r9);
				c$1 += d8 >>> 13;
				d8 &= 8191;
				d9 = c$1;
				d9 += h0 * r9;
				d9 += h1 * r8;
				d9 += h2 * r7;
				d9 += h3 * r6;
				d9 += h4 * r5;
				c$1 = d9 >>> 13;
				d9 &= 8191;
				d9 += h5 * r4;
				d9 += h6 * r3;
				d9 += h7 * r2;
				d9 += h8 * r1;
				d9 += h9 * r0;
				c$1 += d9 >>> 13;
				d9 &= 8191;
				c$1 = (c$1 << 2) + c$1 | 0;
				c$1 = c$1 + d0 | 0;
				d0 = c$1 & 8191;
				c$1 = c$1 >>> 13;
				d1 += c$1;
				h0 = d0;
				h1 = d1;
				h2 = d2;
				h3 = d3;
				h4 = d4;
				h5 = d5;
				h6 = d6;
				h7 = d7;
				h8 = d8;
				h9 = d9;
				mpos += 16;
				bytes -= 16;
			}
			this.h[0] = h0;
			this.h[1] = h1;
			this.h[2] = h2;
			this.h[3] = h3;
			this.h[4] = h4;
			this.h[5] = h5;
			this.h[6] = h6;
			this.h[7] = h7;
			this.h[8] = h8;
			this.h[9] = h9;
		};
		poly1305.prototype.finish = function(mac, macpos) {
			var g = new Uint16Array(10);
			var c$1, mask, f, i$2;
			if (this.leftover) {
				i$2 = this.leftover;
				this.buffer[i$2++] = 1;
				for (; i$2 < 16; i$2++) this.buffer[i$2] = 0;
				this.fin = 1;
				this.blocks(this.buffer, 0, 16);
			}
			c$1 = this.h[1] >>> 13;
			this.h[1] &= 8191;
			for (i$2 = 2; i$2 < 10; i$2++) {
				this.h[i$2] += c$1;
				c$1 = this.h[i$2] >>> 13;
				this.h[i$2] &= 8191;
			}
			this.h[0] += c$1 * 5;
			c$1 = this.h[0] >>> 13;
			this.h[0] &= 8191;
			this.h[1] += c$1;
			c$1 = this.h[1] >>> 13;
			this.h[1] &= 8191;
			this.h[2] += c$1;
			g[0] = this.h[0] + 5;
			c$1 = g[0] >>> 13;
			g[0] &= 8191;
			for (i$2 = 1; i$2 < 10; i$2++) {
				g[i$2] = this.h[i$2] + c$1;
				c$1 = g[i$2] >>> 13;
				g[i$2] &= 8191;
			}
			g[9] -= 8192;
			mask = (c$1 ^ 1) - 1;
			for (i$2 = 0; i$2 < 10; i$2++) g[i$2] &= mask;
			mask = ~mask;
			for (i$2 = 0; i$2 < 10; i$2++) this.h[i$2] = this.h[i$2] & mask | g[i$2];
			this.h[0] = (this.h[0] | this.h[1] << 13) & 65535;
			this.h[1] = (this.h[1] >>> 3 | this.h[2] << 10) & 65535;
			this.h[2] = (this.h[2] >>> 6 | this.h[3] << 7) & 65535;
			this.h[3] = (this.h[3] >>> 9 | this.h[4] << 4) & 65535;
			this.h[4] = (this.h[4] >>> 12 | this.h[5] << 1 | this.h[6] << 14) & 65535;
			this.h[5] = (this.h[6] >>> 2 | this.h[7] << 11) & 65535;
			this.h[6] = (this.h[7] >>> 5 | this.h[8] << 8) & 65535;
			this.h[7] = (this.h[8] >>> 8 | this.h[9] << 5) & 65535;
			f = this.h[0] + this.pad[0];
			this.h[0] = f & 65535;
			for (i$2 = 1; i$2 < 8; i$2++) {
				f = (this.h[i$2] + this.pad[i$2] | 0) + (f >>> 16) | 0;
				this.h[i$2] = f & 65535;
			}
			mac[macpos + 0] = this.h[0] >>> 0 & 255;
			mac[macpos + 1] = this.h[0] >>> 8 & 255;
			mac[macpos + 2] = this.h[1] >>> 0 & 255;
			mac[macpos + 3] = this.h[1] >>> 8 & 255;
			mac[macpos + 4] = this.h[2] >>> 0 & 255;
			mac[macpos + 5] = this.h[2] >>> 8 & 255;
			mac[macpos + 6] = this.h[3] >>> 0 & 255;
			mac[macpos + 7] = this.h[3] >>> 8 & 255;
			mac[macpos + 8] = this.h[4] >>> 0 & 255;
			mac[macpos + 9] = this.h[4] >>> 8 & 255;
			mac[macpos + 10] = this.h[5] >>> 0 & 255;
			mac[macpos + 11] = this.h[5] >>> 8 & 255;
			mac[macpos + 12] = this.h[6] >>> 0 & 255;
			mac[macpos + 13] = this.h[6] >>> 8 & 255;
			mac[macpos + 14] = this.h[7] >>> 0 & 255;
			mac[macpos + 15] = this.h[7] >>> 8 & 255;
		};
		poly1305.prototype.update = function(m, mpos, bytes) {
			var i$2, want;
			if (this.leftover) {
				want = 16 - this.leftover;
				if (want > bytes) want = bytes;
				for (i$2 = 0; i$2 < want; i$2++) this.buffer[this.leftover + i$2] = m[mpos + i$2];
				bytes -= want;
				mpos += want;
				this.leftover += want;
				if (this.leftover < 16) return;
				this.blocks(this.buffer, 0, 16);
				this.leftover = 0;
			}
			if (bytes >= 16) {
				want = bytes - bytes % 16;
				this.blocks(m, mpos, want);
				mpos += want;
				bytes -= want;
			}
			if (bytes) {
				for (i$2 = 0; i$2 < bytes; i$2++) this.buffer[this.leftover + i$2] = m[mpos + i$2];
				this.leftover += bytes;
			}
		};
		function crypto_onetimeauth(out, outpos, m, mpos, n$1, k) {
			var s$1 = new poly1305(k);
			s$1.update(m, mpos, n$1);
			s$1.finish(out, outpos);
			return 0;
		}
		function crypto_onetimeauth_verify(h$1, hpos, m, mpos, n$1, k) {
			var x = new Uint8Array(16);
			crypto_onetimeauth(x, 0, m, mpos, n$1, k);
			return crypto_verify_16(h$1, hpos, x, 0);
		}
		function crypto_secretbox(c$1, m, d, n$1, k) {
			var i$2;
			if (d < 32) return -1;
			crypto_stream_xor(c$1, 0, m, 0, d, n$1, k);
			crypto_onetimeauth(c$1, 16, c$1, 32, d - 32, c$1);
			for (i$2 = 0; i$2 < 16; i$2++) c$1[i$2] = 0;
			return 0;
		}
		function crypto_secretbox_open(m, c$1, d, n$1, k) {
			var i$2;
			var x = new Uint8Array(32);
			if (d < 32) return -1;
			crypto_stream(x, 0, 32, n$1, k);
			if (crypto_onetimeauth_verify(c$1, 16, c$1, 32, d - 32, x) !== 0) return -1;
			crypto_stream_xor(m, 0, c$1, 0, d, n$1, k);
			for (i$2 = 0; i$2 < 32; i$2++) m[i$2] = 0;
			return 0;
		}
		function set25519(r, a$1) {
			var i$2;
			for (i$2 = 0; i$2 < 16; i$2++) r[i$2] = a$1[i$2] | 0;
		}
		function car25519(o$1) {
			var i$2, v, c$1 = 1;
			for (i$2 = 0; i$2 < 16; i$2++) {
				v = o$1[i$2] + c$1 + 65535;
				c$1 = Math.floor(v / 65536);
				o$1[i$2] = v - c$1 * 65536;
			}
			o$1[0] += c$1 - 1 + 37 * (c$1 - 1);
		}
		function sel25519(p$1, q, b) {
			var t$1, c$1 = ~(b - 1);
			for (var i$2 = 0; i$2 < 16; i$2++) {
				t$1 = c$1 & (p$1[i$2] ^ q[i$2]);
				p$1[i$2] ^= t$1;
				q[i$2] ^= t$1;
			}
		}
		function pack25519(o$1, n$1) {
			var i$2, j, b;
			var m = gf(), t$1 = gf();
			for (i$2 = 0; i$2 < 16; i$2++) t$1[i$2] = n$1[i$2];
			car25519(t$1);
			car25519(t$1);
			car25519(t$1);
			for (j = 0; j < 2; j++) {
				m[0] = t$1[0] - 65517;
				for (i$2 = 1; i$2 < 15; i$2++) {
					m[i$2] = t$1[i$2] - 65535 - (m[i$2 - 1] >> 16 & 1);
					m[i$2 - 1] &= 65535;
				}
				m[15] = t$1[15] - 32767 - (m[14] >> 16 & 1);
				b = m[15] >> 16 & 1;
				m[14] &= 65535;
				sel25519(t$1, m, 1 - b);
			}
			for (i$2 = 0; i$2 < 16; i$2++) {
				o$1[2 * i$2] = t$1[i$2] & 255;
				o$1[2 * i$2 + 1] = t$1[i$2] >> 8;
			}
		}
		function neq25519(a$1, b) {
			var c$1 = new Uint8Array(32), d = new Uint8Array(32);
			pack25519(c$1, a$1);
			pack25519(d, b);
			return crypto_verify_32(c$1, 0, d, 0);
		}
		function par25519(a$1) {
			var d = new Uint8Array(32);
			pack25519(d, a$1);
			return d[0] & 1;
		}
		function unpack25519(o$1, n$1) {
			var i$2;
			for (i$2 = 0; i$2 < 16; i$2++) o$1[i$2] = n$1[2 * i$2] + (n$1[2 * i$2 + 1] << 8);
			o$1[15] &= 32767;
		}
		function A(o$1, a$1, b) {
			for (var i$2 = 0; i$2 < 16; i$2++) o$1[i$2] = a$1[i$2] + b[i$2];
		}
		function Z(o$1, a$1, b) {
			for (var i$2 = 0; i$2 < 16; i$2++) o$1[i$2] = a$1[i$2] - b[i$2];
		}
		function M(o$1, a$1, b) {
			var v, c$1, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
			v = a$1[0];
			t0 += v * b0;
			t1 += v * b1;
			t2 += v * b2;
			t3 += v * b3;
			t4 += v * b4;
			t5 += v * b5;
			t6 += v * b6;
			t7 += v * b7;
			t8 += v * b8;
			t9 += v * b9;
			t10 += v * b10;
			t11 += v * b11;
			t12 += v * b12;
			t13 += v * b13;
			t14 += v * b14;
			t15 += v * b15;
			v = a$1[1];
			t1 += v * b0;
			t2 += v * b1;
			t3 += v * b2;
			t4 += v * b3;
			t5 += v * b4;
			t6 += v * b5;
			t7 += v * b6;
			t8 += v * b7;
			t9 += v * b8;
			t10 += v * b9;
			t11 += v * b10;
			t12 += v * b11;
			t13 += v * b12;
			t14 += v * b13;
			t15 += v * b14;
			t16 += v * b15;
			v = a$1[2];
			t2 += v * b0;
			t3 += v * b1;
			t4 += v * b2;
			t5 += v * b3;
			t6 += v * b4;
			t7 += v * b5;
			t8 += v * b6;
			t9 += v * b7;
			t10 += v * b8;
			t11 += v * b9;
			t12 += v * b10;
			t13 += v * b11;
			t14 += v * b12;
			t15 += v * b13;
			t16 += v * b14;
			t17 += v * b15;
			v = a$1[3];
			t3 += v * b0;
			t4 += v * b1;
			t5 += v * b2;
			t6 += v * b3;
			t7 += v * b4;
			t8 += v * b5;
			t9 += v * b6;
			t10 += v * b7;
			t11 += v * b8;
			t12 += v * b9;
			t13 += v * b10;
			t14 += v * b11;
			t15 += v * b12;
			t16 += v * b13;
			t17 += v * b14;
			t18 += v * b15;
			v = a$1[4];
			t4 += v * b0;
			t5 += v * b1;
			t6 += v * b2;
			t7 += v * b3;
			t8 += v * b4;
			t9 += v * b5;
			t10 += v * b6;
			t11 += v * b7;
			t12 += v * b8;
			t13 += v * b9;
			t14 += v * b10;
			t15 += v * b11;
			t16 += v * b12;
			t17 += v * b13;
			t18 += v * b14;
			t19 += v * b15;
			v = a$1[5];
			t5 += v * b0;
			t6 += v * b1;
			t7 += v * b2;
			t8 += v * b3;
			t9 += v * b4;
			t10 += v * b5;
			t11 += v * b6;
			t12 += v * b7;
			t13 += v * b8;
			t14 += v * b9;
			t15 += v * b10;
			t16 += v * b11;
			t17 += v * b12;
			t18 += v * b13;
			t19 += v * b14;
			t20 += v * b15;
			v = a$1[6];
			t6 += v * b0;
			t7 += v * b1;
			t8 += v * b2;
			t9 += v * b3;
			t10 += v * b4;
			t11 += v * b5;
			t12 += v * b6;
			t13 += v * b7;
			t14 += v * b8;
			t15 += v * b9;
			t16 += v * b10;
			t17 += v * b11;
			t18 += v * b12;
			t19 += v * b13;
			t20 += v * b14;
			t21 += v * b15;
			v = a$1[7];
			t7 += v * b0;
			t8 += v * b1;
			t9 += v * b2;
			t10 += v * b3;
			t11 += v * b4;
			t12 += v * b5;
			t13 += v * b6;
			t14 += v * b7;
			t15 += v * b8;
			t16 += v * b9;
			t17 += v * b10;
			t18 += v * b11;
			t19 += v * b12;
			t20 += v * b13;
			t21 += v * b14;
			t22 += v * b15;
			v = a$1[8];
			t8 += v * b0;
			t9 += v * b1;
			t10 += v * b2;
			t11 += v * b3;
			t12 += v * b4;
			t13 += v * b5;
			t14 += v * b6;
			t15 += v * b7;
			t16 += v * b8;
			t17 += v * b9;
			t18 += v * b10;
			t19 += v * b11;
			t20 += v * b12;
			t21 += v * b13;
			t22 += v * b14;
			t23 += v * b15;
			v = a$1[9];
			t9 += v * b0;
			t10 += v * b1;
			t11 += v * b2;
			t12 += v * b3;
			t13 += v * b4;
			t14 += v * b5;
			t15 += v * b6;
			t16 += v * b7;
			t17 += v * b8;
			t18 += v * b9;
			t19 += v * b10;
			t20 += v * b11;
			t21 += v * b12;
			t22 += v * b13;
			t23 += v * b14;
			t24 += v * b15;
			v = a$1[10];
			t10 += v * b0;
			t11 += v * b1;
			t12 += v * b2;
			t13 += v * b3;
			t14 += v * b4;
			t15 += v * b5;
			t16 += v * b6;
			t17 += v * b7;
			t18 += v * b8;
			t19 += v * b9;
			t20 += v * b10;
			t21 += v * b11;
			t22 += v * b12;
			t23 += v * b13;
			t24 += v * b14;
			t25 += v * b15;
			v = a$1[11];
			t11 += v * b0;
			t12 += v * b1;
			t13 += v * b2;
			t14 += v * b3;
			t15 += v * b4;
			t16 += v * b5;
			t17 += v * b6;
			t18 += v * b7;
			t19 += v * b8;
			t20 += v * b9;
			t21 += v * b10;
			t22 += v * b11;
			t23 += v * b12;
			t24 += v * b13;
			t25 += v * b14;
			t26 += v * b15;
			v = a$1[12];
			t12 += v * b0;
			t13 += v * b1;
			t14 += v * b2;
			t15 += v * b3;
			t16 += v * b4;
			t17 += v * b5;
			t18 += v * b6;
			t19 += v * b7;
			t20 += v * b8;
			t21 += v * b9;
			t22 += v * b10;
			t23 += v * b11;
			t24 += v * b12;
			t25 += v * b13;
			t26 += v * b14;
			t27 += v * b15;
			v = a$1[13];
			t13 += v * b0;
			t14 += v * b1;
			t15 += v * b2;
			t16 += v * b3;
			t17 += v * b4;
			t18 += v * b5;
			t19 += v * b6;
			t20 += v * b7;
			t21 += v * b8;
			t22 += v * b9;
			t23 += v * b10;
			t24 += v * b11;
			t25 += v * b12;
			t26 += v * b13;
			t27 += v * b14;
			t28 += v * b15;
			v = a$1[14];
			t14 += v * b0;
			t15 += v * b1;
			t16 += v * b2;
			t17 += v * b3;
			t18 += v * b4;
			t19 += v * b5;
			t20 += v * b6;
			t21 += v * b7;
			t22 += v * b8;
			t23 += v * b9;
			t24 += v * b10;
			t25 += v * b11;
			t26 += v * b12;
			t27 += v * b13;
			t28 += v * b14;
			t29 += v * b15;
			v = a$1[15];
			t15 += v * b0;
			t16 += v * b1;
			t17 += v * b2;
			t18 += v * b3;
			t19 += v * b4;
			t20 += v * b5;
			t21 += v * b6;
			t22 += v * b7;
			t23 += v * b8;
			t24 += v * b9;
			t25 += v * b10;
			t26 += v * b11;
			t27 += v * b12;
			t28 += v * b13;
			t29 += v * b14;
			t30 += v * b15;
			t0 += 38 * t16;
			t1 += 38 * t17;
			t2 += 38 * t18;
			t3 += 38 * t19;
			t4 += 38 * t20;
			t5 += 38 * t21;
			t6 += 38 * t22;
			t7 += 38 * t23;
			t8 += 38 * t24;
			t9 += 38 * t25;
			t10 += 38 * t26;
			t11 += 38 * t27;
			t12 += 38 * t28;
			t13 += 38 * t29;
			t14 += 38 * t30;
			c$1 = 1;
			v = t0 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t0 = v - c$1 * 65536;
			v = t1 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t1 = v - c$1 * 65536;
			v = t2 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t2 = v - c$1 * 65536;
			v = t3 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t3 = v - c$1 * 65536;
			v = t4 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t4 = v - c$1 * 65536;
			v = t5 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t5 = v - c$1 * 65536;
			v = t6 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t6 = v - c$1 * 65536;
			v = t7 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t7 = v - c$1 * 65536;
			v = t8 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t8 = v - c$1 * 65536;
			v = t9 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t9 = v - c$1 * 65536;
			v = t10 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t10 = v - c$1 * 65536;
			v = t11 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t11 = v - c$1 * 65536;
			v = t12 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t12 = v - c$1 * 65536;
			v = t13 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t13 = v - c$1 * 65536;
			v = t14 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t14 = v - c$1 * 65536;
			v = t15 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t15 = v - c$1 * 65536;
			t0 += c$1 - 1 + 37 * (c$1 - 1);
			c$1 = 1;
			v = t0 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t0 = v - c$1 * 65536;
			v = t1 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t1 = v - c$1 * 65536;
			v = t2 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t2 = v - c$1 * 65536;
			v = t3 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t3 = v - c$1 * 65536;
			v = t4 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t4 = v - c$1 * 65536;
			v = t5 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t5 = v - c$1 * 65536;
			v = t6 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t6 = v - c$1 * 65536;
			v = t7 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t7 = v - c$1 * 65536;
			v = t8 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t8 = v - c$1 * 65536;
			v = t9 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t9 = v - c$1 * 65536;
			v = t10 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t10 = v - c$1 * 65536;
			v = t11 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t11 = v - c$1 * 65536;
			v = t12 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t12 = v - c$1 * 65536;
			v = t13 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t13 = v - c$1 * 65536;
			v = t14 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t14 = v - c$1 * 65536;
			v = t15 + c$1 + 65535;
			c$1 = Math.floor(v / 65536);
			t15 = v - c$1 * 65536;
			t0 += c$1 - 1 + 37 * (c$1 - 1);
			o$1[0] = t0;
			o$1[1] = t1;
			o$1[2] = t2;
			o$1[3] = t3;
			o$1[4] = t4;
			o$1[5] = t5;
			o$1[6] = t6;
			o$1[7] = t7;
			o$1[8] = t8;
			o$1[9] = t9;
			o$1[10] = t10;
			o$1[11] = t11;
			o$1[12] = t12;
			o$1[13] = t13;
			o$1[14] = t14;
			o$1[15] = t15;
		}
		function S(o$1, a$1) {
			M(o$1, a$1, a$1);
		}
		function inv25519(o$1, i$2) {
			var c$1 = gf();
			var a$1;
			for (a$1 = 0; a$1 < 16; a$1++) c$1[a$1] = i$2[a$1];
			for (a$1 = 253; a$1 >= 0; a$1--) {
				S(c$1, c$1);
				if (a$1 !== 2 && a$1 !== 4) M(c$1, c$1, i$2);
			}
			for (a$1 = 0; a$1 < 16; a$1++) o$1[a$1] = c$1[a$1];
		}
		function pow2523(o$1, i$2) {
			var c$1 = gf();
			var a$1;
			for (a$1 = 0; a$1 < 16; a$1++) c$1[a$1] = i$2[a$1];
			for (a$1 = 250; a$1 >= 0; a$1--) {
				S(c$1, c$1);
				if (a$1 !== 1) M(c$1, c$1, i$2);
			}
			for (a$1 = 0; a$1 < 16; a$1++) o$1[a$1] = c$1[a$1];
		}
		function crypto_scalarmult(q, n$1, p$1) {
			var z = new Uint8Array(32);
			var x = new Float64Array(80), r, i$2;
			var a$1 = gf(), b = gf(), c$1 = gf(), d = gf(), e$1 = gf(), f = gf();
			for (i$2 = 0; i$2 < 31; i$2++) z[i$2] = n$1[i$2];
			z[31] = n$1[31] & 127 | 64;
			z[0] &= 248;
			unpack25519(x, p$1);
			for (i$2 = 0; i$2 < 16; i$2++) {
				b[i$2] = x[i$2];
				d[i$2] = a$1[i$2] = c$1[i$2] = 0;
			}
			a$1[0] = d[0] = 1;
			for (i$2 = 254; i$2 >= 0; --i$2) {
				r = z[i$2 >>> 3] >>> (i$2 & 7) & 1;
				sel25519(a$1, b, r);
				sel25519(c$1, d, r);
				A(e$1, a$1, c$1);
				Z(a$1, a$1, c$1);
				A(c$1, b, d);
				Z(b, b, d);
				S(d, e$1);
				S(f, a$1);
				M(a$1, c$1, a$1);
				M(c$1, b, e$1);
				A(e$1, a$1, c$1);
				Z(a$1, a$1, c$1);
				S(b, a$1);
				Z(c$1, d, f);
				M(a$1, c$1, _121665);
				A(a$1, a$1, d);
				M(c$1, c$1, a$1);
				M(a$1, d, f);
				M(d, b, x);
				S(b, e$1);
				sel25519(a$1, b, r);
				sel25519(c$1, d, r);
			}
			for (i$2 = 0; i$2 < 16; i$2++) {
				x[i$2 + 16] = a$1[i$2];
				x[i$2 + 32] = c$1[i$2];
				x[i$2 + 48] = b[i$2];
				x[i$2 + 64] = d[i$2];
			}
			var x32 = x.subarray(32);
			var x16 = x.subarray(16);
			inv25519(x32, x32);
			M(x16, x16, x32);
			pack25519(q, x16);
			return 0;
		}
		function crypto_scalarmult_base(q, n$1) {
			return crypto_scalarmult(q, n$1, _9);
		}
		function crypto_box_keypair(y, x) {
			randombytes(x, 32);
			return crypto_scalarmult_base(y, x);
		}
		function crypto_box_beforenm(k, y, x) {
			var s$1 = new Uint8Array(32);
			crypto_scalarmult(s$1, x, y);
			return crypto_core_hsalsa20(k, _0, s$1, sigma);
		}
		var crypto_box_afternm = crypto_secretbox;
		var crypto_box_open_afternm = crypto_secretbox_open;
		function crypto_box(c$1, m, d, n$1, y, x) {
			var k = new Uint8Array(32);
			crypto_box_beforenm(k, y, x);
			return crypto_box_afternm(c$1, m, d, n$1, k);
		}
		function crypto_box_open(m, c$1, d, n$1, y, x) {
			var k = new Uint8Array(32);
			crypto_box_beforenm(k, y, x);
			return crypto_box_open_afternm(m, c$1, d, n$1, k);
		}
		var K = [
			1116352408,
			3609767458,
			1899447441,
			602891725,
			3049323471,
			3964484399,
			3921009573,
			2173295548,
			961987163,
			4081628472,
			1508970993,
			3053834265,
			2453635748,
			2937671579,
			2870763221,
			3664609560,
			3624381080,
			2734883394,
			310598401,
			1164996542,
			607225278,
			1323610764,
			1426881987,
			3590304994,
			1925078388,
			4068182383,
			2162078206,
			991336113,
			2614888103,
			633803317,
			3248222580,
			3479774868,
			3835390401,
			2666613458,
			4022224774,
			944711139,
			264347078,
			2341262773,
			604807628,
			2007800933,
			770255983,
			1495990901,
			1249150122,
			1856431235,
			1555081692,
			3175218132,
			1996064986,
			2198950837,
			2554220882,
			3999719339,
			2821834349,
			766784016,
			2952996808,
			2566594879,
			3210313671,
			3203337956,
			3336571891,
			1034457026,
			3584528711,
			2466948901,
			113926993,
			3758326383,
			338241895,
			168717936,
			666307205,
			1188179964,
			773529912,
			1546045734,
			1294757372,
			1522805485,
			1396182291,
			2643833823,
			1695183700,
			2343527390,
			1986661051,
			1014477480,
			2177026350,
			1206759142,
			2456956037,
			344077627,
			2730485921,
			1290863460,
			2820302411,
			3158454273,
			3259730800,
			3505952657,
			3345764771,
			106217008,
			3516065817,
			3606008344,
			3600352804,
			1432725776,
			4094571909,
			1467031594,
			275423344,
			851169720,
			430227734,
			3100823752,
			506948616,
			1363258195,
			659060556,
			3750685593,
			883997877,
			3785050280,
			958139571,
			3318307427,
			1322822218,
			3812723403,
			1537002063,
			2003034995,
			1747873779,
			3602036899,
			1955562222,
			1575990012,
			2024104815,
			1125592928,
			2227730452,
			2716904306,
			2361852424,
			442776044,
			2428436474,
			593698344,
			2756734187,
			3733110249,
			3204031479,
			2999351573,
			3329325298,
			3815920427,
			3391569614,
			3928383900,
			3515267271,
			566280711,
			3940187606,
			3454069534,
			4118630271,
			4000239992,
			116418474,
			1914138554,
			174292421,
			2731055270,
			289380356,
			3203993006,
			460393269,
			320620315,
			685471733,
			587496836,
			852142971,
			1086792851,
			1017036298,
			365543100,
			1126000580,
			2618297676,
			1288033470,
			3409855158,
			1501505948,
			4234509866,
			1607167915,
			987167468,
			1816402316,
			1246189591
		];
		function crypto_hashblocks_hl(hh, hl, m, n$1) {
			var wh = new Int32Array(16), wl = new Int32Array(16), bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7, bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7, th, tl, i$2, j, h$1, l$1, a$1, b, c$1, d;
			var ah0 = hh[0], ah1 = hh[1], ah2 = hh[2], ah3 = hh[3], ah4 = hh[4], ah5 = hh[5], ah6 = hh[6], ah7 = hh[7], al0 = hl[0], al1 = hl[1], al2 = hl[2], al3 = hl[3], al4 = hl[4], al5 = hl[5], al6 = hl[6], al7 = hl[7];
			var pos = 0;
			while (n$1 >= 128) {
				for (i$2 = 0; i$2 < 16; i$2++) {
					j = 8 * i$2 + pos;
					wh[i$2] = m[j + 0] << 24 | m[j + 1] << 16 | m[j + 2] << 8 | m[j + 3];
					wl[i$2] = m[j + 4] << 24 | m[j + 5] << 16 | m[j + 6] << 8 | m[j + 7];
				}
				for (i$2 = 0; i$2 < 80; i$2++) {
					bh0 = ah0;
					bh1 = ah1;
					bh2 = ah2;
					bh3 = ah3;
					bh4 = ah4;
					bh5 = ah5;
					bh6 = ah6;
					bh7 = ah7;
					bl0 = al0;
					bl1 = al1;
					bl2 = al2;
					bl3 = al3;
					bl4 = al4;
					bl5 = al5;
					bl6 = al6;
					bl7 = al7;
					h$1 = ah7;
					l$1 = al7;
					a$1 = l$1 & 65535;
					b = l$1 >>> 16;
					c$1 = h$1 & 65535;
					d = h$1 >>> 16;
					h$1 = (ah4 >>> 14 | al4 << 18) ^ (ah4 >>> 18 | al4 << 14) ^ (al4 >>> 9 | ah4 << 23);
					l$1 = (al4 >>> 14 | ah4 << 18) ^ (al4 >>> 18 | ah4 << 14) ^ (ah4 >>> 9 | al4 << 23);
					a$1 += l$1 & 65535;
					b += l$1 >>> 16;
					c$1 += h$1 & 65535;
					d += h$1 >>> 16;
					h$1 = ah4 & ah5 ^ ~ah4 & ah6;
					l$1 = al4 & al5 ^ ~al4 & al6;
					a$1 += l$1 & 65535;
					b += l$1 >>> 16;
					c$1 += h$1 & 65535;
					d += h$1 >>> 16;
					h$1 = K[i$2 * 2];
					l$1 = K[i$2 * 2 + 1];
					a$1 += l$1 & 65535;
					b += l$1 >>> 16;
					c$1 += h$1 & 65535;
					d += h$1 >>> 16;
					h$1 = wh[i$2 % 16];
					l$1 = wl[i$2 % 16];
					a$1 += l$1 & 65535;
					b += l$1 >>> 16;
					c$1 += h$1 & 65535;
					d += h$1 >>> 16;
					b += a$1 >>> 16;
					c$1 += b >>> 16;
					d += c$1 >>> 16;
					th = c$1 & 65535 | d << 16;
					tl = a$1 & 65535 | b << 16;
					h$1 = th;
					l$1 = tl;
					a$1 = l$1 & 65535;
					b = l$1 >>> 16;
					c$1 = h$1 & 65535;
					d = h$1 >>> 16;
					h$1 = (ah0 >>> 28 | al0 << 4) ^ (al0 >>> 2 | ah0 << 30) ^ (al0 >>> 7 | ah0 << 25);
					l$1 = (al0 >>> 28 | ah0 << 4) ^ (ah0 >>> 2 | al0 << 30) ^ (ah0 >>> 7 | al0 << 25);
					a$1 += l$1 & 65535;
					b += l$1 >>> 16;
					c$1 += h$1 & 65535;
					d += h$1 >>> 16;
					h$1 = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;
					l$1 = al0 & al1 ^ al0 & al2 ^ al1 & al2;
					a$1 += l$1 & 65535;
					b += l$1 >>> 16;
					c$1 += h$1 & 65535;
					d += h$1 >>> 16;
					b += a$1 >>> 16;
					c$1 += b >>> 16;
					d += c$1 >>> 16;
					bh7 = c$1 & 65535 | d << 16;
					bl7 = a$1 & 65535 | b << 16;
					h$1 = bh3;
					l$1 = bl3;
					a$1 = l$1 & 65535;
					b = l$1 >>> 16;
					c$1 = h$1 & 65535;
					d = h$1 >>> 16;
					h$1 = th;
					l$1 = tl;
					a$1 += l$1 & 65535;
					b += l$1 >>> 16;
					c$1 += h$1 & 65535;
					d += h$1 >>> 16;
					b += a$1 >>> 16;
					c$1 += b >>> 16;
					d += c$1 >>> 16;
					bh3 = c$1 & 65535 | d << 16;
					bl3 = a$1 & 65535 | b << 16;
					ah1 = bh0;
					ah2 = bh1;
					ah3 = bh2;
					ah4 = bh3;
					ah5 = bh4;
					ah6 = bh5;
					ah7 = bh6;
					ah0 = bh7;
					al1 = bl0;
					al2 = bl1;
					al3 = bl2;
					al4 = bl3;
					al5 = bl4;
					al6 = bl5;
					al7 = bl6;
					al0 = bl7;
					if (i$2 % 16 === 15) for (j = 0; j < 16; j++) {
						h$1 = wh[j];
						l$1 = wl[j];
						a$1 = l$1 & 65535;
						b = l$1 >>> 16;
						c$1 = h$1 & 65535;
						d = h$1 >>> 16;
						h$1 = wh[(j + 9) % 16];
						l$1 = wl[(j + 9) % 16];
						a$1 += l$1 & 65535;
						b += l$1 >>> 16;
						c$1 += h$1 & 65535;
						d += h$1 >>> 16;
						th = wh[(j + 1) % 16];
						tl = wl[(j + 1) % 16];
						h$1 = (th >>> 1 | tl << 31) ^ (th >>> 8 | tl << 24) ^ th >>> 7;
						l$1 = (tl >>> 1 | th << 31) ^ (tl >>> 8 | th << 24) ^ (tl >>> 7 | th << 25);
						a$1 += l$1 & 65535;
						b += l$1 >>> 16;
						c$1 += h$1 & 65535;
						d += h$1 >>> 16;
						th = wh[(j + 14) % 16];
						tl = wl[(j + 14) % 16];
						h$1 = (th >>> 19 | tl << 13) ^ (tl >>> 29 | th << 3) ^ th >>> 6;
						l$1 = (tl >>> 19 | th << 13) ^ (th >>> 29 | tl << 3) ^ (tl >>> 6 | th << 26);
						a$1 += l$1 & 65535;
						b += l$1 >>> 16;
						c$1 += h$1 & 65535;
						d += h$1 >>> 16;
						b += a$1 >>> 16;
						c$1 += b >>> 16;
						d += c$1 >>> 16;
						wh[j] = c$1 & 65535 | d << 16;
						wl[j] = a$1 & 65535 | b << 16;
					}
				}
				h$1 = ah0;
				l$1 = al0;
				a$1 = l$1 & 65535;
				b = l$1 >>> 16;
				c$1 = h$1 & 65535;
				d = h$1 >>> 16;
				h$1 = hh[0];
				l$1 = hl[0];
				a$1 += l$1 & 65535;
				b += l$1 >>> 16;
				c$1 += h$1 & 65535;
				d += h$1 >>> 16;
				b += a$1 >>> 16;
				c$1 += b >>> 16;
				d += c$1 >>> 16;
				hh[0] = ah0 = c$1 & 65535 | d << 16;
				hl[0] = al0 = a$1 & 65535 | b << 16;
				h$1 = ah1;
				l$1 = al1;
				a$1 = l$1 & 65535;
				b = l$1 >>> 16;
				c$1 = h$1 & 65535;
				d = h$1 >>> 16;
				h$1 = hh[1];
				l$1 = hl[1];
				a$1 += l$1 & 65535;
				b += l$1 >>> 16;
				c$1 += h$1 & 65535;
				d += h$1 >>> 16;
				b += a$1 >>> 16;
				c$1 += b >>> 16;
				d += c$1 >>> 16;
				hh[1] = ah1 = c$1 & 65535 | d << 16;
				hl[1] = al1 = a$1 & 65535 | b << 16;
				h$1 = ah2;
				l$1 = al2;
				a$1 = l$1 & 65535;
				b = l$1 >>> 16;
				c$1 = h$1 & 65535;
				d = h$1 >>> 16;
				h$1 = hh[2];
				l$1 = hl[2];
				a$1 += l$1 & 65535;
				b += l$1 >>> 16;
				c$1 += h$1 & 65535;
				d += h$1 >>> 16;
				b += a$1 >>> 16;
				c$1 += b >>> 16;
				d += c$1 >>> 16;
				hh[2] = ah2 = c$1 & 65535 | d << 16;
				hl[2] = al2 = a$1 & 65535 | b << 16;
				h$1 = ah3;
				l$1 = al3;
				a$1 = l$1 & 65535;
				b = l$1 >>> 16;
				c$1 = h$1 & 65535;
				d = h$1 >>> 16;
				h$1 = hh[3];
				l$1 = hl[3];
				a$1 += l$1 & 65535;
				b += l$1 >>> 16;
				c$1 += h$1 & 65535;
				d += h$1 >>> 16;
				b += a$1 >>> 16;
				c$1 += b >>> 16;
				d += c$1 >>> 16;
				hh[3] = ah3 = c$1 & 65535 | d << 16;
				hl[3] = al3 = a$1 & 65535 | b << 16;
				h$1 = ah4;
				l$1 = al4;
				a$1 = l$1 & 65535;
				b = l$1 >>> 16;
				c$1 = h$1 & 65535;
				d = h$1 >>> 16;
				h$1 = hh[4];
				l$1 = hl[4];
				a$1 += l$1 & 65535;
				b += l$1 >>> 16;
				c$1 += h$1 & 65535;
				d += h$1 >>> 16;
				b += a$1 >>> 16;
				c$1 += b >>> 16;
				d += c$1 >>> 16;
				hh[4] = ah4 = c$1 & 65535 | d << 16;
				hl[4] = al4 = a$1 & 65535 | b << 16;
				h$1 = ah5;
				l$1 = al5;
				a$1 = l$1 & 65535;
				b = l$1 >>> 16;
				c$1 = h$1 & 65535;
				d = h$1 >>> 16;
				h$1 = hh[5];
				l$1 = hl[5];
				a$1 += l$1 & 65535;
				b += l$1 >>> 16;
				c$1 += h$1 & 65535;
				d += h$1 >>> 16;
				b += a$1 >>> 16;
				c$1 += b >>> 16;
				d += c$1 >>> 16;
				hh[5] = ah5 = c$1 & 65535 | d << 16;
				hl[5] = al5 = a$1 & 65535 | b << 16;
				h$1 = ah6;
				l$1 = al6;
				a$1 = l$1 & 65535;
				b = l$1 >>> 16;
				c$1 = h$1 & 65535;
				d = h$1 >>> 16;
				h$1 = hh[6];
				l$1 = hl[6];
				a$1 += l$1 & 65535;
				b += l$1 >>> 16;
				c$1 += h$1 & 65535;
				d += h$1 >>> 16;
				b += a$1 >>> 16;
				c$1 += b >>> 16;
				d += c$1 >>> 16;
				hh[6] = ah6 = c$1 & 65535 | d << 16;
				hl[6] = al6 = a$1 & 65535 | b << 16;
				h$1 = ah7;
				l$1 = al7;
				a$1 = l$1 & 65535;
				b = l$1 >>> 16;
				c$1 = h$1 & 65535;
				d = h$1 >>> 16;
				h$1 = hh[7];
				l$1 = hl[7];
				a$1 += l$1 & 65535;
				b += l$1 >>> 16;
				c$1 += h$1 & 65535;
				d += h$1 >>> 16;
				b += a$1 >>> 16;
				c$1 += b >>> 16;
				d += c$1 >>> 16;
				hh[7] = ah7 = c$1 & 65535 | d << 16;
				hl[7] = al7 = a$1 & 65535 | b << 16;
				pos += 128;
				n$1 -= 128;
			}
			return n$1;
		}
		function crypto_hash(out, m, n$1) {
			var hh = new Int32Array(8), hl = new Int32Array(8), x = new Uint8Array(256), i$2, b = n$1;
			hh[0] = 1779033703;
			hh[1] = 3144134277;
			hh[2] = 1013904242;
			hh[3] = 2773480762;
			hh[4] = 1359893119;
			hh[5] = 2600822924;
			hh[6] = 528734635;
			hh[7] = 1541459225;
			hl[0] = 4089235720;
			hl[1] = 2227873595;
			hl[2] = 4271175723;
			hl[3] = 1595750129;
			hl[4] = 2917565137;
			hl[5] = 725511199;
			hl[6] = 4215389547;
			hl[7] = 327033209;
			crypto_hashblocks_hl(hh, hl, m, n$1);
			n$1 %= 128;
			for (i$2 = 0; i$2 < n$1; i$2++) x[i$2] = m[b - n$1 + i$2];
			x[n$1] = 128;
			n$1 = 256 - 128 * (n$1 < 112 ? 1 : 0);
			x[n$1 - 9] = 0;
			ts64(x, n$1 - 8, b / 536870912 | 0, b << 3);
			crypto_hashblocks_hl(hh, hl, x, n$1);
			for (i$2 = 0; i$2 < 8; i$2++) ts64(out, 8 * i$2, hh[i$2], hl[i$2]);
			return 0;
		}
		function add(p$1, q) {
			var a$1 = gf(), b = gf(), c$1 = gf(), d = gf(), e$1 = gf(), f = gf(), g = gf(), h$1 = gf(), t$1 = gf();
			Z(a$1, p$1[1], p$1[0]);
			Z(t$1, q[1], q[0]);
			M(a$1, a$1, t$1);
			A(b, p$1[0], p$1[1]);
			A(t$1, q[0], q[1]);
			M(b, b, t$1);
			M(c$1, p$1[3], q[3]);
			M(c$1, c$1, D2);
			M(d, p$1[2], q[2]);
			A(d, d, d);
			Z(e$1, b, a$1);
			Z(f, d, c$1);
			A(g, d, c$1);
			A(h$1, b, a$1);
			M(p$1[0], e$1, f);
			M(p$1[1], h$1, g);
			M(p$1[2], g, f);
			M(p$1[3], e$1, h$1);
		}
		function cswap(p$1, q, b) {
			var i$2;
			for (i$2 = 0; i$2 < 4; i$2++) sel25519(p$1[i$2], q[i$2], b);
		}
		function pack(r, p$1) {
			var tx = gf(), ty = gf(), zi = gf();
			inv25519(zi, p$1[2]);
			M(tx, p$1[0], zi);
			M(ty, p$1[1], zi);
			pack25519(r, ty);
			r[31] ^= par25519(tx) << 7;
		}
		function scalarmult(p$1, q, s$1) {
			var b, i$2;
			set25519(p$1[0], gf0);
			set25519(p$1[1], gf1);
			set25519(p$1[2], gf1);
			set25519(p$1[3], gf0);
			for (i$2 = 255; i$2 >= 0; --i$2) {
				b = s$1[i$2 / 8 | 0] >> (i$2 & 7) & 1;
				cswap(p$1, q, b);
				add(q, p$1);
				add(p$1, p$1);
				cswap(p$1, q, b);
			}
		}
		function scalarbase(p$1, s$1) {
			var q = [
				gf(),
				gf(),
				gf(),
				gf()
			];
			set25519(q[0], X);
			set25519(q[1], Y);
			set25519(q[2], gf1);
			M(q[3], X, Y);
			scalarmult(p$1, q, s$1);
		}
		function crypto_sign_keypair(pk, sk, seeded) {
			var d = new Uint8Array(64);
			var p$1 = [
				gf(),
				gf(),
				gf(),
				gf()
			];
			var i$2;
			if (!seeded) randombytes(sk, 32);
			crypto_hash(d, sk, 32);
			d[0] &= 248;
			d[31] &= 127;
			d[31] |= 64;
			scalarbase(p$1, d);
			pack(pk, p$1);
			for (i$2 = 0; i$2 < 32; i$2++) sk[i$2 + 32] = pk[i$2];
			return 0;
		}
		var L = new Float64Array([
			237,
			211,
			245,
			92,
			26,
			99,
			18,
			88,
			214,
			156,
			247,
			162,
			222,
			249,
			222,
			20,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			16
		]);
		function modL(r, x) {
			var carry, i$2, j, k;
			for (i$2 = 63; i$2 >= 32; --i$2) {
				carry = 0;
				for (j = i$2 - 32, k = i$2 - 12; j < k; ++j) {
					x[j] += carry - 16 * x[i$2] * L[j - (i$2 - 32)];
					carry = Math.floor((x[j] + 128) / 256);
					x[j] -= carry * 256;
				}
				x[j] += carry;
				x[i$2] = 0;
			}
			carry = 0;
			for (j = 0; j < 32; j++) {
				x[j] += carry - (x[31] >> 4) * L[j];
				carry = x[j] >> 8;
				x[j] &= 255;
			}
			for (j = 0; j < 32; j++) x[j] -= carry * L[j];
			for (i$2 = 0; i$2 < 32; i$2++) {
				x[i$2 + 1] += x[i$2] >> 8;
				r[i$2] = x[i$2] & 255;
			}
		}
		function reduce(r) {
			var x = new Float64Array(64), i$2;
			for (i$2 = 0; i$2 < 64; i$2++) x[i$2] = r[i$2];
			for (i$2 = 0; i$2 < 64; i$2++) r[i$2] = 0;
			modL(r, x);
		}
		function crypto_sign(sm, m, n$1, sk) {
			var d = new Uint8Array(64), h$1 = new Uint8Array(64), r = new Uint8Array(64);
			var i$2, j, x = new Float64Array(64);
			var p$1 = [
				gf(),
				gf(),
				gf(),
				gf()
			];
			crypto_hash(d, sk, 32);
			d[0] &= 248;
			d[31] &= 127;
			d[31] |= 64;
			var smlen = n$1 + 64;
			for (i$2 = 0; i$2 < n$1; i$2++) sm[64 + i$2] = m[i$2];
			for (i$2 = 0; i$2 < 32; i$2++) sm[32 + i$2] = d[32 + i$2];
			crypto_hash(r, sm.subarray(32), n$1 + 32);
			reduce(r);
			scalarbase(p$1, r);
			pack(sm, p$1);
			for (i$2 = 32; i$2 < 64; i$2++) sm[i$2] = sk[i$2];
			crypto_hash(h$1, sm, n$1 + 64);
			reduce(h$1);
			for (i$2 = 0; i$2 < 64; i$2++) x[i$2] = 0;
			for (i$2 = 0; i$2 < 32; i$2++) x[i$2] = r[i$2];
			for (i$2 = 0; i$2 < 32; i$2++) for (j = 0; j < 32; j++) x[i$2 + j] += h$1[i$2] * d[j];
			modL(sm.subarray(32), x);
			return smlen;
		}
		function unpackneg(r, p$1) {
			var t$1 = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf();
			set25519(r[2], gf1);
			unpack25519(r[1], p$1);
			S(num, r[1]);
			M(den, num, D);
			Z(num, num, r[2]);
			A(den, r[2], den);
			S(den2, den);
			S(den4, den2);
			M(den6, den4, den2);
			M(t$1, den6, num);
			M(t$1, t$1, den);
			pow2523(t$1, t$1);
			M(t$1, t$1, num);
			M(t$1, t$1, den);
			M(t$1, t$1, den);
			M(r[0], t$1, den);
			S(chk, r[0]);
			M(chk, chk, den);
			if (neq25519(chk, num)) M(r[0], r[0], I);
			S(chk, r[0]);
			M(chk, chk, den);
			if (neq25519(chk, num)) return -1;
			if (par25519(r[0]) === p$1[31] >> 7) Z(r[0], gf0, r[0]);
			M(r[3], r[0], r[1]);
			return 0;
		}
		function crypto_sign_open(m, sm, n$1, pk) {
			var i$2;
			var t$1 = new Uint8Array(32), h$1 = new Uint8Array(64);
			var p$1 = [
				gf(),
				gf(),
				gf(),
				gf()
			], q = [
				gf(),
				gf(),
				gf(),
				gf()
			];
			if (n$1 < 64) return -1;
			if (unpackneg(q, pk)) return -1;
			for (i$2 = 0; i$2 < n$1; i$2++) m[i$2] = sm[i$2];
			for (i$2 = 0; i$2 < 32; i$2++) m[i$2 + 32] = pk[i$2];
			crypto_hash(h$1, m, n$1);
			reduce(h$1);
			scalarmult(p$1, q, h$1);
			scalarbase(q, sm.subarray(32));
			add(p$1, q);
			pack(t$1, p$1);
			n$1 -= 64;
			if (crypto_verify_32(sm, 0, t$1, 0)) {
				for (i$2 = 0; i$2 < n$1; i$2++) m[i$2] = 0;
				return -1;
			}
			for (i$2 = 0; i$2 < n$1; i$2++) m[i$2] = sm[i$2 + 64];
			return n$1;
		}
		var crypto_secretbox_KEYBYTES = 32, crypto_secretbox_NONCEBYTES = 24, crypto_secretbox_ZEROBYTES = 32, crypto_secretbox_BOXZEROBYTES = 16, crypto_scalarmult_BYTES = 32, crypto_scalarmult_SCALARBYTES = 32, crypto_box_PUBLICKEYBYTES = 32, crypto_box_SECRETKEYBYTES = 32, crypto_box_BEFORENMBYTES = 32, crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES, crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES, crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES, crypto_sign_BYTES = 64, crypto_sign_PUBLICKEYBYTES = 32, crypto_sign_SECRETKEYBYTES = 64, crypto_sign_SEEDBYTES = 32, crypto_hash_BYTES = 64;
		nacl$2.lowlevel = {
			crypto_core_hsalsa20,
			crypto_stream_xor,
			crypto_stream,
			crypto_stream_salsa20_xor,
			crypto_stream_salsa20,
			crypto_onetimeauth,
			crypto_onetimeauth_verify,
			crypto_verify_16,
			crypto_verify_32,
			crypto_secretbox,
			crypto_secretbox_open,
			crypto_scalarmult,
			crypto_scalarmult_base,
			crypto_box_beforenm,
			crypto_box_afternm,
			crypto_box,
			crypto_box_open,
			crypto_box_keypair,
			crypto_hash,
			crypto_sign,
			crypto_sign_keypair,
			crypto_sign_open,
			crypto_secretbox_KEYBYTES,
			crypto_secretbox_NONCEBYTES,
			crypto_secretbox_ZEROBYTES,
			crypto_secretbox_BOXZEROBYTES,
			crypto_scalarmult_BYTES,
			crypto_scalarmult_SCALARBYTES,
			crypto_box_PUBLICKEYBYTES,
			crypto_box_SECRETKEYBYTES,
			crypto_box_BEFORENMBYTES,
			crypto_box_NONCEBYTES,
			crypto_box_ZEROBYTES,
			crypto_box_BOXZEROBYTES,
			crypto_sign_BYTES,
			crypto_sign_PUBLICKEYBYTES,
			crypto_sign_SECRETKEYBYTES,
			crypto_sign_SEEDBYTES,
			crypto_hash_BYTES,
			gf,
			D,
			L,
			pack25519,
			unpack25519,
			M,
			A,
			S,
			Z,
			pow2523,
			add,
			set25519,
			modL,
			scalarmult,
			scalarbase
		};
		function checkLengths(k, n$1) {
			if (k.length !== crypto_secretbox_KEYBYTES) throw new Error("bad key size");
			if (n$1.length !== crypto_secretbox_NONCEBYTES) throw new Error("bad nonce size");
		}
		function checkBoxLengths(pk, sk) {
			if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error("bad public key size");
			if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error("bad secret key size");
		}
		function checkArrayTypes() {
			for (var i$2 = 0; i$2 < arguments.length; i$2++) if (!(arguments[i$2] instanceof Uint8Array)) throw new TypeError("unexpected type, use Uint8Array");
		}
		function cleanup(arr) {
			for (var i$2 = 0; i$2 < arr.length; i$2++) arr[i$2] = 0;
		}
		nacl$2.randomBytes = function(n$1) {
			var b = new Uint8Array(n$1);
			randombytes(b, n$1);
			return b;
		};
		nacl$2.secretbox = function(msg, nonce, key) {
			checkArrayTypes(msg, nonce, key);
			checkLengths(key, nonce);
			var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
			var c$1 = new Uint8Array(m.length);
			for (var i$2 = 0; i$2 < msg.length; i$2++) m[i$2 + crypto_secretbox_ZEROBYTES] = msg[i$2];
			crypto_secretbox(c$1, m, m.length, nonce, key);
			return c$1.subarray(crypto_secretbox_BOXZEROBYTES);
		};
		nacl$2.secretbox.open = function(box, nonce, key) {
			checkArrayTypes(box, nonce, key);
			checkLengths(key, nonce);
			var c$1 = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
			var m = new Uint8Array(c$1.length);
			for (var i$2 = 0; i$2 < box.length; i$2++) c$1[i$2 + crypto_secretbox_BOXZEROBYTES] = box[i$2];
			if (c$1.length < 32) return null;
			if (crypto_secretbox_open(m, c$1, c$1.length, nonce, key) !== 0) return null;
			return m.subarray(crypto_secretbox_ZEROBYTES);
		};
		nacl$2.secretbox.keyLength = crypto_secretbox_KEYBYTES;
		nacl$2.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
		nacl$2.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;
		nacl$2.scalarMult = function(n$1, p$1) {
			checkArrayTypes(n$1, p$1);
			if (n$1.length !== crypto_scalarmult_SCALARBYTES) throw new Error("bad n size");
			if (p$1.length !== crypto_scalarmult_BYTES) throw new Error("bad p size");
			var q = new Uint8Array(crypto_scalarmult_BYTES);
			crypto_scalarmult(q, n$1, p$1);
			return q;
		};
		nacl$2.scalarMult.base = function(n$1) {
			checkArrayTypes(n$1);
			if (n$1.length !== crypto_scalarmult_SCALARBYTES) throw new Error("bad n size");
			var q = new Uint8Array(crypto_scalarmult_BYTES);
			crypto_scalarmult_base(q, n$1);
			return q;
		};
		nacl$2.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
		nacl$2.scalarMult.groupElementLength = crypto_scalarmult_BYTES;
		nacl$2.box = function(msg, nonce, publicKey, secretKey) {
			var k = nacl$2.box.before(publicKey, secretKey);
			return nacl$2.secretbox(msg, nonce, k);
		};
		nacl$2.box.before = function(publicKey, secretKey) {
			checkArrayTypes(publicKey, secretKey);
			checkBoxLengths(publicKey, secretKey);
			var k = new Uint8Array(crypto_box_BEFORENMBYTES);
			crypto_box_beforenm(k, publicKey, secretKey);
			return k;
		};
		nacl$2.box.after = nacl$2.secretbox;
		nacl$2.box.open = function(msg, nonce, publicKey, secretKey) {
			var k = nacl$2.box.before(publicKey, secretKey);
			return nacl$2.secretbox.open(msg, nonce, k);
		};
		nacl$2.box.open.after = nacl$2.secretbox.open;
		nacl$2.box.keyPair = function() {
			var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
			var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
			crypto_box_keypair(pk, sk);
			return {
				publicKey: pk,
				secretKey: sk
			};
		};
		nacl$2.box.keyPair.fromSecretKey = function(secretKey) {
			checkArrayTypes(secretKey);
			if (secretKey.length !== crypto_box_SECRETKEYBYTES) throw new Error("bad secret key size");
			var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
			crypto_scalarmult_base(pk, secretKey);
			return {
				publicKey: pk,
				secretKey: new Uint8Array(secretKey)
			};
		};
		nacl$2.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
		nacl$2.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
		nacl$2.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
		nacl$2.box.nonceLength = crypto_box_NONCEBYTES;
		nacl$2.box.overheadLength = nacl$2.secretbox.overheadLength;
		nacl$2.sign = function(msg, secretKey) {
			checkArrayTypes(msg, secretKey);
			if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error("bad secret key size");
			var signedMsg = new Uint8Array(crypto_sign_BYTES + msg.length);
			crypto_sign(signedMsg, msg, msg.length, secretKey);
			return signedMsg;
		};
		nacl$2.sign.open = function(signedMsg, publicKey) {
			checkArrayTypes(signedMsg, publicKey);
			if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error("bad public key size");
			var tmp = new Uint8Array(signedMsg.length);
			var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
			if (mlen < 0) return null;
			var m = new Uint8Array(mlen);
			for (var i$2 = 0; i$2 < m.length; i$2++) m[i$2] = tmp[i$2];
			return m;
		};
		nacl$2.sign.detached = function(msg, secretKey) {
			var signedMsg = nacl$2.sign(msg, secretKey);
			var sig = new Uint8Array(crypto_sign_BYTES);
			for (var i$2 = 0; i$2 < sig.length; i$2++) sig[i$2] = signedMsg[i$2];
			return sig;
		};
		nacl$2.sign.detached.verify = function(msg, sig, publicKey) {
			checkArrayTypes(msg, sig, publicKey);
			if (sig.length !== crypto_sign_BYTES) throw new Error("bad signature size");
			if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error("bad public key size");
			var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
			var m = new Uint8Array(crypto_sign_BYTES + msg.length);
			var i$2;
			for (i$2 = 0; i$2 < crypto_sign_BYTES; i$2++) sm[i$2] = sig[i$2];
			for (i$2 = 0; i$2 < msg.length; i$2++) sm[i$2 + crypto_sign_BYTES] = msg[i$2];
			return crypto_sign_open(m, sm, sm.length, publicKey) >= 0;
		};
		nacl$2.sign.keyPair = function() {
			var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
			var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
			crypto_sign_keypair(pk, sk);
			return {
				publicKey: pk,
				secretKey: sk
			};
		};
		nacl$2.sign.keyPair.fromSecretKey = function(secretKey) {
			checkArrayTypes(secretKey);
			if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error("bad secret key size");
			var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
			for (var i$2 = 0; i$2 < pk.length; i$2++) pk[i$2] = secretKey[32 + i$2];
			return {
				publicKey: pk,
				secretKey: new Uint8Array(secretKey)
			};
		};
		nacl$2.sign.keyPair.fromSeed = function(seed) {
			checkArrayTypes(seed);
			if (seed.length !== crypto_sign_SEEDBYTES) throw new Error("bad seed size");
			var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
			var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
			for (var i$2 = 0; i$2 < 32; i$2++) sk[i$2] = seed[i$2];
			crypto_sign_keypair(pk, sk, true);
			return {
				publicKey: pk,
				secretKey: sk
			};
		};
		nacl$2.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
		nacl$2.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
		nacl$2.sign.seedLength = crypto_sign_SEEDBYTES;
		nacl$2.sign.signatureLength = crypto_sign_BYTES;
		nacl$2.hash = function(msg) {
			checkArrayTypes(msg);
			var h$1 = new Uint8Array(crypto_hash_BYTES);
			crypto_hash(h$1, msg, msg.length);
			return h$1;
		};
		nacl$2.hash.hashLength = crypto_hash_BYTES;
		nacl$2.verify = function(x, y) {
			checkArrayTypes(x, y);
			if (x.length === 0 || y.length === 0) return false;
			if (x.length !== y.length) return false;
			return vn(x, 0, y, 0, x.length) === 0 ? true : false;
		};
		nacl$2.setPRNG = function(fn) {
			randombytes = fn;
		};
		(function() {
			var crypto$1 = typeof self !== "undefined" ? self.crypto || self.msCrypto : null;
			if (crypto$1 && crypto$1.getRandomValues) {
				var QUOTA = 65536;
				nacl$2.setPRNG(function(x, n$1) {
					var i$2, v = new Uint8Array(n$1);
					for (i$2 = 0; i$2 < n$1; i$2 += QUOTA) crypto$1.getRandomValues(v.subarray(i$2, i$2 + Math.min(n$1 - i$2, QUOTA)));
					for (i$2 = 0; i$2 < n$1; i$2++) x[i$2] = v[i$2];
					cleanup(v);
				});
			} else if (typeof require !== "undefined") {
				crypto$1 = require_tweetnacl();
				if (crypto$1 && crypto$1.randomBytes) nacl$2.setPRNG(function(x, n$1) {
					var i$2, v = crypto$1.randomBytes(n$1);
					for (i$2 = 0; i$2 < n$1; i$2++) x[i$2] = v[i$2];
					cleanup(v);
				});
			}
		})();
	})(typeof module !== "undefined" && module.exports ? module.exports : self.nacl = self.nacl || {});
} });

//#endregion
//#region ../../node_modules/.pnpm/@tonconnect+protocol@2.3.0/node_modules/@tonconnect/protocol/lib/esm/index.mjs
var import_nacl_util = __toESM(require_nacl_util(), 1);
var import_nacl_fast = __toESM(require_nacl_fast(), 1);
var CONNECT_EVENT_ERROR_CODES;
(function(CONNECT_EVENT_ERROR_CODES$1) {
	CONNECT_EVENT_ERROR_CODES$1[CONNECT_EVENT_ERROR_CODES$1["UNKNOWN_ERROR"] = 0] = "UNKNOWN_ERROR";
	CONNECT_EVENT_ERROR_CODES$1[CONNECT_EVENT_ERROR_CODES$1["BAD_REQUEST_ERROR"] = 1] = "BAD_REQUEST_ERROR";
	CONNECT_EVENT_ERROR_CODES$1[CONNECT_EVENT_ERROR_CODES$1["MANIFEST_NOT_FOUND_ERROR"] = 2] = "MANIFEST_NOT_FOUND_ERROR";
	CONNECT_EVENT_ERROR_CODES$1[CONNECT_EVENT_ERROR_CODES$1["MANIFEST_CONTENT_ERROR"] = 3] = "MANIFEST_CONTENT_ERROR";
	CONNECT_EVENT_ERROR_CODES$1[CONNECT_EVENT_ERROR_CODES$1["UNKNOWN_APP_ERROR"] = 100] = "UNKNOWN_APP_ERROR";
	CONNECT_EVENT_ERROR_CODES$1[CONNECT_EVENT_ERROR_CODES$1["USER_REJECTS_ERROR"] = 300] = "USER_REJECTS_ERROR";
	CONNECT_EVENT_ERROR_CODES$1[CONNECT_EVENT_ERROR_CODES$1["METHOD_NOT_SUPPORTED"] = 400] = "METHOD_NOT_SUPPORTED";
})(CONNECT_EVENT_ERROR_CODES || (CONNECT_EVENT_ERROR_CODES = {}));
var CONNECT_ITEM_ERROR_CODES;
(function(CONNECT_ITEM_ERROR_CODES$1) {
	CONNECT_ITEM_ERROR_CODES$1[CONNECT_ITEM_ERROR_CODES$1["UNKNOWN_ERROR"] = 0] = "UNKNOWN_ERROR";
	CONNECT_ITEM_ERROR_CODES$1[CONNECT_ITEM_ERROR_CODES$1["METHOD_NOT_SUPPORTED"] = 400] = "METHOD_NOT_SUPPORTED";
})(CONNECT_ITEM_ERROR_CODES || (CONNECT_ITEM_ERROR_CODES = {}));
var SEND_TRANSACTION_ERROR_CODES;
(function(SEND_TRANSACTION_ERROR_CODES$1) {
	SEND_TRANSACTION_ERROR_CODES$1[SEND_TRANSACTION_ERROR_CODES$1["UNKNOWN_ERROR"] = 0] = "UNKNOWN_ERROR";
	SEND_TRANSACTION_ERROR_CODES$1[SEND_TRANSACTION_ERROR_CODES$1["BAD_REQUEST_ERROR"] = 1] = "BAD_REQUEST_ERROR";
	SEND_TRANSACTION_ERROR_CODES$1[SEND_TRANSACTION_ERROR_CODES$1["UNKNOWN_APP_ERROR"] = 100] = "UNKNOWN_APP_ERROR";
	SEND_TRANSACTION_ERROR_CODES$1[SEND_TRANSACTION_ERROR_CODES$1["USER_REJECTS_ERROR"] = 300] = "USER_REJECTS_ERROR";
	SEND_TRANSACTION_ERROR_CODES$1[SEND_TRANSACTION_ERROR_CODES$1["METHOD_NOT_SUPPORTED"] = 400] = "METHOD_NOT_SUPPORTED";
})(SEND_TRANSACTION_ERROR_CODES || (SEND_TRANSACTION_ERROR_CODES = {}));
var SIGN_DATA_ERROR_CODES;
(function(SIGN_DATA_ERROR_CODES$1) {
	SIGN_DATA_ERROR_CODES$1[SIGN_DATA_ERROR_CODES$1["UNKNOWN_ERROR"] = 0] = "UNKNOWN_ERROR";
	SIGN_DATA_ERROR_CODES$1[SIGN_DATA_ERROR_CODES$1["BAD_REQUEST_ERROR"] = 1] = "BAD_REQUEST_ERROR";
	SIGN_DATA_ERROR_CODES$1[SIGN_DATA_ERROR_CODES$1["UNKNOWN_APP_ERROR"] = 100] = "UNKNOWN_APP_ERROR";
	SIGN_DATA_ERROR_CODES$1[SIGN_DATA_ERROR_CODES$1["USER_REJECTS_ERROR"] = 300] = "USER_REJECTS_ERROR";
	SIGN_DATA_ERROR_CODES$1[SIGN_DATA_ERROR_CODES$1["METHOD_NOT_SUPPORTED"] = 400] = "METHOD_NOT_SUPPORTED";
})(SIGN_DATA_ERROR_CODES || (SIGN_DATA_ERROR_CODES = {}));
var DISCONNECT_ERROR_CODES;
(function(DISCONNECT_ERROR_CODES$1) {
	DISCONNECT_ERROR_CODES$1[DISCONNECT_ERROR_CODES$1["UNKNOWN_ERROR"] = 0] = "UNKNOWN_ERROR";
	DISCONNECT_ERROR_CODES$1[DISCONNECT_ERROR_CODES$1["BAD_REQUEST_ERROR"] = 1] = "BAD_REQUEST_ERROR";
	DISCONNECT_ERROR_CODES$1[DISCONNECT_ERROR_CODES$1["UNKNOWN_APP_ERROR"] = 100] = "UNKNOWN_APP_ERROR";
	DISCONNECT_ERROR_CODES$1[DISCONNECT_ERROR_CODES$1["METHOD_NOT_SUPPORTED"] = 400] = "METHOD_NOT_SUPPORTED";
})(DISCONNECT_ERROR_CODES || (DISCONNECT_ERROR_CODES = {}));
var CHAIN;
(function(CHAIN$1) {
	CHAIN$1["MAINNET"] = "-239";
	CHAIN$1["TESTNET"] = "-3";
})(CHAIN || (CHAIN = {}));
function encodeUint8Array(value, urlSafe) {
	const encoded = import_nacl_util.default.encodeBase64(value);
	if (!urlSafe) return encoded;
	return encodeURIComponent(encoded);
}
function decodeToUint8Array(value, urlSafe) {
	if (urlSafe) value = decodeURIComponent(value);
	return import_nacl_util.default.decodeBase64(value);
}
function encode(value, urlSafe = false) {
	let uint8Array;
	if (value instanceof Uint8Array) uint8Array = value;
	else {
		if (typeof value !== "string") value = JSON.stringify(value);
		uint8Array = import_nacl_util.default.decodeUTF8(value);
	}
	return encodeUint8Array(uint8Array, urlSafe);
}
function decode(value, urlSafe = false) {
	const decodedUint8Array = decodeToUint8Array(value, urlSafe);
	return {
		toString() {
			return import_nacl_util.default.encodeUTF8(decodedUint8Array);
		},
		toObject() {
			try {
				return JSON.parse(import_nacl_util.default.encodeUTF8(decodedUint8Array));
			} catch (e$1) {
				return null;
			}
		},
		toUint8Array() {
			return decodedUint8Array;
		}
	};
}
const Base64 = {
	encode,
	decode
};
function concatUint8Arrays(buffer1, buffer2) {
	const mergedArray = new Uint8Array(buffer1.length + buffer2.length);
	mergedArray.set(buffer1);
	mergedArray.set(buffer2, buffer1.length);
	return mergedArray;
}
function splitToUint8Arrays(array, index) {
	if (index >= array.length) throw new Error("Index is out of buffer");
	const subArray1 = array.slice(0, index);
	const subArray2 = array.slice(index);
	return [subArray1, subArray2];
}
function toHexString(byteArray) {
	let hexString = "";
	byteArray.forEach((byte) => {
		hexString += ("0" + (byte & 255).toString(16)).slice(-2);
	});
	return hexString;
}
function hexToByteArray(hexString) {
	if (hexString.length % 2 !== 0) throw new Error(`Cannot convert ${hexString} to bytesArray`);
	const result = new Uint8Array(hexString.length / 2);
	for (let i$2 = 0; i$2 < hexString.length; i$2 += 2) result[i$2 / 2] = parseInt(hexString.slice(i$2, i$2 + 2), 16);
	return result;
}
var SessionCrypto = class {
	constructor(keyPair) {
		this.nonceLength = 24;
		this.keyPair = keyPair ? this.createKeypairFromString(keyPair) : this.createKeypair();
		this.sessionId = toHexString(this.keyPair.publicKey);
	}
	createKeypair() {
		return import_nacl_fast.default.box.keyPair();
	}
	createKeypairFromString(keyPair) {
		return {
			publicKey: hexToByteArray(keyPair.publicKey),
			secretKey: hexToByteArray(keyPair.secretKey)
		};
	}
	createNonce() {
		return import_nacl_fast.default.randomBytes(this.nonceLength);
	}
	encrypt(message, receiverPublicKey) {
		const encodedMessage = new TextEncoder().encode(message);
		const nonce = this.createNonce();
		const encrypted = import_nacl_fast.default.box(encodedMessage, nonce, receiverPublicKey, this.keyPair.secretKey);
		return concatUint8Arrays(nonce, encrypted);
	}
	decrypt(message, senderPublicKey) {
		const [nonce, internalMessage] = splitToUint8Arrays(message, this.nonceLength);
		const decrypted = import_nacl_fast.default.box.open(internalMessage, nonce, senderPublicKey, this.keyPair.secretKey);
		if (!decrypted) throw new Error(`Decryption error: \n message: ${message.toString()} \n sender pubkey: ${senderPublicKey.toString()} \n keypair pubkey: ${this.keyPair.publicKey.toString()} \n keypair secretkey: ${this.keyPair.secretKey.toString()}`);
		return new TextDecoder().decode(decrypted);
	}
	stringifyKeypair() {
		return {
			publicKey: toHexString(this.keyPair.publicKey),
			secretKey: toHexString(this.keyPair.secretKey)
		};
	}
};

//#endregion
//#region ../../node_modules/.pnpm/@tonconnect+sdk@3.1.0/node_modules/@tonconnect/sdk/lib/esm/index.mjs
/*! *****************************************************************************

Copyright (c) Microsoft Corporation.



Permission to use, copy, modify, and/or distribute this software for any

purpose with or without fee is hereby granted.



THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH

REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY

AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,

INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM

LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR

OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR

PERFORMANCE OF THIS SOFTWARE.

***************************************************************************** */
function __rest(s$1, e$1) {
	var t$1 = {};
	for (var p$1 in s$1) if (Object.prototype.hasOwnProperty.call(s$1, p$1) && e$1.indexOf(p$1) < 0) t$1[p$1] = s$1[p$1];
	if (s$1 != null && typeof Object.getOwnPropertySymbols === "function") {
		for (var i$2 = 0, p$1 = Object.getOwnPropertySymbols(s$1); i$2 < p$1.length; i$2++) if (e$1.indexOf(p$1[i$2]) < 0 && Object.prototype.propertyIsEnumerable.call(s$1, p$1[i$2])) t$1[p$1[i$2]] = s$1[p$1[i$2]];
	}
	return t$1;
}
function __awaiter(thisArg, _arguments, P$1, generator) {
	function adopt(value) {
		return value instanceof P$1 ? value : new P$1(function(resolve) {
			resolve(value);
		});
	}
	return new (P$1 || (P$1 = Promise))(function(resolve, reject) {
		function fulfilled(value) {
			try {
				step(generator.next(value));
			} catch (e$1) {
				reject(e$1);
			}
		}
		function rejected(value) {
			try {
				step(generator["throw"](value));
			} catch (e$1) {
				reject(e$1);
			}
		}
		function step(result) {
			result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
		}
		step((generator = generator.apply(thisArg, _arguments || [])).next());
	});
}
/**
* Base class for TonConnect errors. You can check if the error was triggered by the @tonconnect/sdk using `err instanceof TonConnectError`.
*/
var TonConnectError = class TonConnectError extends Error {
	constructor(message, options) {
		super(message, options);
		this.message = `${TonConnectError.prefix} ${this.constructor.name}${this.info ? ": " + this.info : ""}${message ? "\n" + message : ""}`;
		Object.setPrototypeOf(this, TonConnectError.prototype);
	}
	get info() {
		return "";
	}
};
TonConnectError.prefix = "[TON_CONNECT_SDK_ERROR]";
/**
* Thrown when passed DappMetadata is in incorrect format.
*/
var DappMetadataError = class DappMetadataError extends TonConnectError {
	get info() {
		return "Passed DappMetadata is in incorrect format.";
	}
	constructor(...args) {
		super(...args);
		Object.setPrototypeOf(this, DappMetadataError.prototype);
	}
};
/**
* Thrown when passed manifest contains errors.
*/
var ManifestContentErrorError = class ManifestContentErrorError extends TonConnectError {
	get info() {
		return "Passed `tonconnect-manifest.json` contains errors. Check format of your manifest. See more https://github.com/ton-connect/docs/blob/main/requests-responses.md#app-manifest";
	}
	constructor(...args) {
		super(...args);
		Object.setPrototypeOf(this, ManifestContentErrorError.prototype);
	}
};
/**
* Thrown when wallet can't get manifest by passed manifestUrl.
*/
var ManifestNotFoundError = class ManifestNotFoundError extends TonConnectError {
	get info() {
		return "Manifest not found. Make sure you added `tonconnect-manifest.json` to the root of your app or passed correct manifestUrl. See more https://github.com/ton-connect/docs/blob/main/requests-responses.md#app-manifest";
	}
	constructor(...args) {
		super(...args);
		Object.setPrototypeOf(this, ManifestNotFoundError.prototype);
	}
};
/**
* Thrown when wallet connection called but wallet already connected. To avoid the error, disconnect the wallet before doing a new connection.
*/
var WalletAlreadyConnectedError = class WalletAlreadyConnectedError extends TonConnectError {
	get info() {
		return "Wallet connection called but wallet already connected. To avoid the error, disconnect the wallet before doing a new connection.";
	}
	constructor(...args) {
		super(...args);
		Object.setPrototypeOf(this, WalletAlreadyConnectedError.prototype);
	}
};
/**
* Thrown when send transaction or other protocol methods called while wallet is not connected.
*/
var WalletNotConnectedError = class WalletNotConnectedError extends TonConnectError {
	get info() {
		return "Send transaction or other protocol methods called while wallet is not connected.";
	}
	constructor(...args) {
		super(...args);
		Object.setPrototypeOf(this, WalletNotConnectedError.prototype);
	}
};
/**
* Thrown when there is an attempt to connect to the injected wallet while it is not exists in the webpage.
*/
var WalletNotInjectedError = class WalletNotInjectedError extends TonConnectError {
	get info() {
		return "There is an attempt to connect to the injected wallet while it is not exists in the webpage.";
	}
	constructor(...args) {
		super(...args);
		Object.setPrototypeOf(this, WalletNotInjectedError.prototype);
	}
};
/**
* Thrown when wallet doesn't support requested feature method.
*/
var WalletNotSupportFeatureError = class WalletNotSupportFeatureError extends TonConnectError {
	get info() {
		return "Wallet doesn't support requested feature method.";
	}
	constructor(...args) {
		super(...args);
		Object.setPrototypeOf(this, WalletNotSupportFeatureError.prototype);
	}
};
/**
* Thrown when wallet can't get manifest by passed manifestUrl.
*/
var WalletMissingRequiredFeaturesError = class WalletMissingRequiredFeaturesError extends TonConnectError {
	get info() {
		return "Missing required features. You need to update your wallet.";
	}
	constructor(message, options) {
		super(message, options);
		Object.setPrototypeOf(this, WalletMissingRequiredFeaturesError.prototype);
	}
};
function isWalletConnectionSourceJS(value) {
	return "jsBridgeKey" in value;
}
/**
* Thrown when user rejects the action in the wallet.
*/
var UserRejectsError = class UserRejectsError extends TonConnectError {
	get info() {
		return "User rejects the action in the wallet.";
	}
	constructor(...args) {
		super(...args);
		Object.setPrototypeOf(this, UserRejectsError.prototype);
	}
};
/**
* Thrown when request to the wallet contains errors.
*/
var BadRequestError = class BadRequestError extends TonConnectError {
	get info() {
		return "Request to the wallet contains errors.";
	}
	constructor(...args) {
		super(...args);
		Object.setPrototypeOf(this, BadRequestError.prototype);
	}
};
/**
* Thrown when app tries to send rpc request to the injected wallet while not connected.
*/
var UnknownAppError = class UnknownAppError extends TonConnectError {
	get info() {
		return "App tries to send rpc request to the injected wallet while not connected.";
	}
	constructor(...args) {
		super(...args);
		Object.setPrototypeOf(this, UnknownAppError.prototype);
	}
};
/**
* Thrown when an error occurred while fetching the wallets list.
*/
var FetchWalletsError = class FetchWalletsError extends TonConnectError {
	get info() {
		return "An error occurred while fetching the wallets list.";
	}
	constructor(...args) {
		super(...args);
		Object.setPrototypeOf(this, FetchWalletsError.prototype);
	}
};
/**
* Thrown when passed address is in incorrect format.
*/
var WrongAddressError = class WrongAddressError extends TonConnectError {
	get info() {
		return "Passed address is in incorrect format.";
	}
	constructor(...args) {
		super(...args);
		Object.setPrototypeOf(this, WrongAddressError.prototype);
	}
};
/**
* Thrown when passed hex is in incorrect format.
*/
var ParseHexError = class ParseHexError extends TonConnectError {
	get info() {
		return "Passed hex is in incorrect format.";
	}
	constructor(...args) {
		super(...args);
		Object.setPrototypeOf(this, ParseHexError.prototype);
	}
};
/**
* Unhanded unknown error.
*/
var UnknownError = class UnknownError extends TonConnectError {
	constructor(...args) {
		super(...args);
		Object.setPrototypeOf(this, UnknownError.prototype);
	}
};
const connectEventErrorsCodes = {
	[CONNECT_EVENT_ERROR_CODES.UNKNOWN_ERROR]: UnknownError,
	[CONNECT_EVENT_ERROR_CODES.USER_REJECTS_ERROR]: UserRejectsError,
	[CONNECT_EVENT_ERROR_CODES.BAD_REQUEST_ERROR]: BadRequestError,
	[CONNECT_EVENT_ERROR_CODES.UNKNOWN_APP_ERROR]: UnknownAppError,
	[CONNECT_EVENT_ERROR_CODES.MANIFEST_NOT_FOUND_ERROR]: ManifestNotFoundError,
	[CONNECT_EVENT_ERROR_CODES.MANIFEST_CONTENT_ERROR]: ManifestContentErrorError
};
var ConnectErrorsParser = class {
	parseError(error) {
		let ErrorConstructor = UnknownError;
		if (error.code in connectEventErrorsCodes) ErrorConstructor = connectEventErrorsCodes[error.code] || UnknownError;
		return new ErrorConstructor(error.message);
	}
};
const connectErrorsParser = new ConnectErrorsParser();
var RpcParser = class {
	isError(response) {
		return "error" in response;
	}
};
const sendTransactionErrors = {
	[SEND_TRANSACTION_ERROR_CODES.UNKNOWN_ERROR]: UnknownError,
	[SEND_TRANSACTION_ERROR_CODES.USER_REJECTS_ERROR]: UserRejectsError,
	[SEND_TRANSACTION_ERROR_CODES.BAD_REQUEST_ERROR]: BadRequestError,
	[SEND_TRANSACTION_ERROR_CODES.UNKNOWN_APP_ERROR]: UnknownAppError
};
var SendTransactionParser = class extends RpcParser {
	convertToRpcRequest(request) {
		return {
			method: "sendTransaction",
			params: [JSON.stringify(request)]
		};
	}
	parseAndThrowError(response) {
		let ErrorConstructor = UnknownError;
		if (response.error.code in sendTransactionErrors) ErrorConstructor = sendTransactionErrors[response.error.code] || UnknownError;
		throw new ErrorConstructor(response.error.message);
	}
	convertFromRpcResponse(rpcResponse) {
		return { boc: rpcResponse.result };
	}
};
const sendTransactionParser = new SendTransactionParser();
var HttpBridgeGatewayStorage = class {
	constructor(storage, bridgeUrl) {
		this.storage = storage;
		this.storeKey = "ton-connect-storage_http-bridge-gateway::" + bridgeUrl;
	}
	storeLastEventId(lastEventId) {
		return __awaiter(this, void 0, void 0, function* () {
			return this.storage.setItem(this.storeKey, lastEventId);
		});
	}
	removeLastEventId() {
		return __awaiter(this, void 0, void 0, function* () {
			return this.storage.removeItem(this.storeKey);
		});
	}
	getLastEventId() {
		return __awaiter(this, void 0, void 0, function* () {
			const stored = yield this.storage.getItem(this.storeKey);
			if (!stored) return null;
			return stored;
		});
	}
};
function removeUrlLastSlash(url) {
	if (url.slice(-1) === "/") return url.slice(0, -1);
	return url;
}
function addPathToUrl(url, path) {
	return removeUrlLastSlash(url) + "/" + path;
}
function isTelegramUrl(link) {
	if (!link) return false;
	const url = new URL(link);
	return url.protocol === "tg:" || url.hostname === "t.me";
}
function encodeTelegramUrlParameters(parameters) {
	return parameters.replaceAll(".", "%2E").replaceAll("-", "%2D").replaceAll("_", "%5F").replaceAll("&", "-").replaceAll("=", "__").replaceAll("%", "--");
}
/**
* Delays the execution of code for a specified number of milliseconds.
* @param {number} timeout - The number of milliseconds to delay the execution.
* @param {DelayOptions} [options] - Optional configuration options for the delay.
* @return {Promise<void>} - A promise that resolves after the specified delay, or rejects if the delay is aborted.
*/
function delay(timeout$1, options) {
	return __awaiter(this, void 0, void 0, function* () {
		return new Promise((resolve, reject) => {
			var _a$7, _b$1;
			if ((_a$7 = options === null || options === void 0 ? void 0 : options.signal) === null || _a$7 === void 0 ? void 0 : _a$7.aborted) {
				reject(new TonConnectError("Delay aborted"));
				return;
			}
			const timeoutId = setTimeout(() => resolve(), timeout$1);
			(_b$1 = options === null || options === void 0 ? void 0 : options.signal) === null || _b$1 === void 0 || _b$1.addEventListener("abort", () => {
				clearTimeout(timeoutId);
				reject(new TonConnectError("Delay aborted"));
			});
		});
	});
}
/**
* Creates an AbortController instance with an optional AbortSignal.
*
* @param {AbortSignal} [signal] - An optional AbortSignal to use for aborting the controller.
* @returns {AbortController} - An instance of AbortController.
*/
function createAbortController(signal) {
	const abortController = new AbortController();
	if (signal === null || signal === void 0 ? void 0 : signal.aborted) abortController.abort();
	else signal === null || signal === void 0 || signal.addEventListener("abort", () => abortController.abort(), { once: true });
	return abortController;
}
/**
* Function to call ton api until we get response.
* Because ton network is pretty unstable we need to make sure response is final.
* @param {T} fn - function to call
* @param {CallForSuccessOptions} [options] - optional configuration options
*/
function callForSuccess(fn, options) {
	var _a$7, _b$1;
	return __awaiter(this, void 0, void 0, function* () {
		const attempts = (_a$7 = options === null || options === void 0 ? void 0 : options.attempts) !== null && _a$7 !== void 0 ? _a$7 : 10;
		const delayMs = (_b$1 = options === null || options === void 0 ? void 0 : options.delayMs) !== null && _b$1 !== void 0 ? _b$1 : 200;
		const abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);
		if (typeof fn !== "function") throw new TonConnectError(`Expected a function, got ${typeof fn}`);
		let i$2 = 0;
		let lastError;
		while (i$2 < attempts) {
			if (abortController.signal.aborted) throw new TonConnectError(`Aborted after attempts ${i$2}`);
			try {
				return yield fn({ signal: abortController.signal });
			} catch (err) {
				lastError = err;
				i$2++;
				if (i$2 < attempts) yield delay(delayMs);
			}
		}
		throw lastError;
	});
}
function logDebug$1(...args) {
	try {
		console.debug("[TON_CONNECT_SDK]", ...args);
	} catch (_a$7) {}
}
function logError$1(...args) {
	try {
		console.error("[TON_CONNECT_SDK]", ...args);
	} catch (_a$7) {}
}
function logWarning$1(...args) {
	try {
		console.warn("[TON_CONNECT_SDK]", ...args);
	} catch (_a$7) {}
}
/**
* Create a resource.
*
* @template T - The type of the resource.
* @template Args - The type of the arguments for creating the resource.
*
* @param {(...args: Args) => Promise<T>} createFn - A function that creates the resource.
* @param {(resource: T) => Promise<void>} [disposeFn] - An optional function that disposes the resource.
*/
function createResource$1(createFn, disposeFn) {
	let currentResource = null;
	let currentArgs = null;
	let currentPromise = null;
	let currentSignal = null;
	let abortController = null;
	const create = (signal, ...args) => __awaiter(this, void 0, void 0, function* () {
		currentSignal = signal !== null && signal !== void 0 ? signal : null;
		abortController === null || abortController === void 0 || abortController.abort();
		abortController = createAbortController(signal);
		if (abortController.signal.aborted) throw new TonConnectError("Resource creation was aborted");
		currentArgs = args !== null && args !== void 0 ? args : null;
		const promise = createFn(abortController.signal, ...args);
		currentPromise = promise;
		const resource = yield promise;
		if (currentPromise !== promise && resource !== currentResource) {
			yield disposeFn(resource);
			throw new TonConnectError("Resource creation was aborted by a new resource creation");
		}
		currentResource = resource;
		return currentResource;
	});
	const current = () => {
		return currentResource !== null && currentResource !== void 0 ? currentResource : null;
	};
	const dispose$1 = () => __awaiter(this, void 0, void 0, function* () {
		try {
			const resource = currentResource;
			currentResource = null;
			const promise = currentPromise;
			currentPromise = null;
			try {
				abortController === null || abortController === void 0 || abortController.abort();
			} catch (e$1) {}
			yield Promise.allSettled([resource ? disposeFn(resource) : Promise.resolve(), promise ? disposeFn(yield promise) : Promise.resolve()]);
		} catch (e$1) {}
	});
	const recreate = (delayMs) => __awaiter(this, void 0, void 0, function* () {
		const resource = currentResource;
		const promise = currentPromise;
		const args = currentArgs;
		const signal = currentSignal;
		yield delay(delayMs);
		if (resource === currentResource && promise === currentPromise && args === currentArgs && signal === currentSignal) return yield create(currentSignal, ...args !== null && args !== void 0 ? args : []);
		throw new TonConnectError("Resource recreation was aborted by a new resource creation");
	});
	return {
		create,
		current,
		dispose: dispose$1,
		recreate
	};
}
/**
* Executes a function and provides deferred behavior, allowing for a timeout and abort functionality.
*
* @param {Deferrable<T>} fn - The function to execute. It should return a promise that resolves with the desired result.
* @param {DeferOptions} options - Optional configuration options for the defer behavior.
* @returns {Promise<T>} - A promise that resolves with the result of the executed function, or rejects with an error if it times out or is aborted.
*/
function timeout(fn, options) {
	const timeout$1 = options === null || options === void 0 ? void 0 : options.timeout;
	const signal = options === null || options === void 0 ? void 0 : options.signal;
	const abortController = createAbortController(signal);
	return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
		if (abortController.signal.aborted) {
			reject(new TonConnectError("Operation aborted"));
			return;
		}
		let timeoutId;
		if (typeof timeout$1 !== "undefined") timeoutId = setTimeout(() => {
			abortController.abort();
			reject(new TonConnectError(`Timeout after ${timeout$1}ms`));
		}, timeout$1);
		abortController.signal.addEventListener("abort", () => {
			clearTimeout(timeoutId);
			reject(new TonConnectError("Operation aborted"));
		}, { once: true });
		const deferOptions = {
			timeout: timeout$1,
			abort: abortController.signal
		};
		yield fn((...args) => {
			clearTimeout(timeoutId);
			resolve(...args);
		}, () => {
			clearTimeout(timeoutId);
			reject();
		}, deferOptions);
	}));
}
var BridgeGateway = class {
	constructor(storage, bridgeUrl, sessionId, listener, errorsListener) {
		this.bridgeUrl = bridgeUrl;
		this.sessionId = sessionId;
		this.listener = listener;
		this.errorsListener = errorsListener;
		this.ssePath = "events";
		this.postPath = "message";
		this.heartbeatMessage = "heartbeat";
		this.defaultTtl = 300;
		this.defaultReconnectDelay = 2e3;
		this.defaultResendDelay = 5e3;
		this.eventSource = createResource$1((signal, openingDeadlineMS) => __awaiter(this, void 0, void 0, function* () {
			const eventSourceConfig = {
				bridgeUrl: this.bridgeUrl,
				ssePath: this.ssePath,
				sessionId: this.sessionId,
				bridgeGatewayStorage: this.bridgeGatewayStorage,
				errorHandler: this.errorsHandler.bind(this),
				messageHandler: this.messagesHandler.bind(this),
				signal,
				openingDeadlineMS
			};
			return yield createEventSource(eventSourceConfig);
		}), (resource) => __awaiter(this, void 0, void 0, function* () {
			resource.close();
		}));
		this.bridgeGatewayStorage = new HttpBridgeGatewayStorage(storage, bridgeUrl);
	}
	get isReady() {
		const eventSource = this.eventSource.current();
		return (eventSource === null || eventSource === void 0 ? void 0 : eventSource.readyState) === EventSource.OPEN;
	}
	get isClosed() {
		const eventSource = this.eventSource.current();
		return (eventSource === null || eventSource === void 0 ? void 0 : eventSource.readyState) !== EventSource.OPEN;
	}
	get isConnecting() {
		const eventSource = this.eventSource.current();
		return (eventSource === null || eventSource === void 0 ? void 0 : eventSource.readyState) === EventSource.CONNECTING;
	}
	registerSession(options) {
		return __awaiter(this, void 0, void 0, function* () {
			yield this.eventSource.create(options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.openingDeadlineMS);
		});
	}
	send(message, receiver, topic, ttlOrOptions) {
		var _a$7;
		return __awaiter(this, void 0, void 0, function* () {
			const options = {};
			if (typeof ttlOrOptions === "number") options.ttl = ttlOrOptions;
			else {
				options.ttl = ttlOrOptions === null || ttlOrOptions === void 0 ? void 0 : ttlOrOptions.ttl;
				options.signal = ttlOrOptions === null || ttlOrOptions === void 0 ? void 0 : ttlOrOptions.signal;
				options.attempts = ttlOrOptions === null || ttlOrOptions === void 0 ? void 0 : ttlOrOptions.attempts;
			}
			const url = new URL(addPathToUrl(this.bridgeUrl, this.postPath));
			url.searchParams.append("client_id", this.sessionId);
			url.searchParams.append("to", receiver);
			url.searchParams.append("ttl", ((options === null || options === void 0 ? void 0 : options.ttl) || this.defaultTtl).toString());
			url.searchParams.append("topic", topic);
			const body = Base64.encode(message);
			yield callForSuccess((options$1) => __awaiter(this, void 0, void 0, function* () {
				const response = yield this.post(url, body, options$1.signal);
				if (!response.ok) throw new TonConnectError(`Bridge send failed, status ${response.status}`);
			}), {
				attempts: (_a$7 = options === null || options === void 0 ? void 0 : options.attempts) !== null && _a$7 !== void 0 ? _a$7 : Number.MAX_SAFE_INTEGER,
				delayMs: this.defaultResendDelay,
				signal: options === null || options === void 0 ? void 0 : options.signal
			});
		});
	}
	pause() {
		this.eventSource.dispose().catch((e$1) => logError$1(`Bridge pause failed, ${e$1}`));
	}
	unPause() {
		return __awaiter(this, void 0, void 0, function* () {
			const RECREATE_WITHOUT_DELAY = 0;
			yield this.eventSource.recreate(RECREATE_WITHOUT_DELAY);
		});
	}
	close() {
		return __awaiter(this, void 0, void 0, function* () {
			yield this.eventSource.dispose().catch((e$1) => logError$1(`Bridge close failed, ${e$1}`));
		});
	}
	setListener(listener) {
		this.listener = listener;
	}
	setErrorsListener(errorsListener) {
		this.errorsListener = errorsListener;
	}
	post(url, body, signal) {
		return __awaiter(this, void 0, void 0, function* () {
			const response = yield fetch(url, {
				method: "post",
				body,
				signal
			});
			if (!response.ok) throw new TonConnectError(`Bridge send failed, status ${response.status}`);
			return response;
		});
	}
	errorsHandler(eventSource, e$1) {
		return __awaiter(this, void 0, void 0, function* () {
			if (this.isConnecting) {
				eventSource.close();
				throw new TonConnectError("Bridge error, failed to connect");
			}
			if (this.isReady) {
				try {
					this.errorsListener(e$1);
				} catch (e$2) {}
				return;
			}
			if (this.isClosed) {
				eventSource.close();
				logDebug$1(`Bridge reconnecting, ${this.defaultReconnectDelay}ms delay`);
				return yield this.eventSource.recreate(this.defaultReconnectDelay);
			}
			throw new TonConnectError("Bridge error, unknown state");
		});
	}
	messagesHandler(e$1) {
		return __awaiter(this, void 0, void 0, function* () {
			if (e$1.data === this.heartbeatMessage) return;
			yield this.bridgeGatewayStorage.storeLastEventId(e$1.lastEventId);
			if (this.isClosed) return;
			let bridgeIncomingMessage;
			try {
				bridgeIncomingMessage = JSON.parse(e$1.data);
			} catch (e$2) {
				throw new TonConnectError(`Bridge message parse failed, message ${e$2.data}`);
			}
			this.listener(bridgeIncomingMessage);
		});
	}
};
/**
* Creates an event source.
* @param {CreateEventSourceConfig} config - Configuration for creating an event source.
*/
function createEventSource(config) {
	return __awaiter(this, void 0, void 0, function* () {
		return yield timeout((resolve, reject, deferOptions) => __awaiter(this, void 0, void 0, function* () {
			var _a$7;
			const abortController = createAbortController(deferOptions.signal);
			const signal = abortController.signal;
			if (signal.aborted) {
				reject(new TonConnectError("Bridge connection aborted"));
				return;
			}
			const url = new URL(addPathToUrl(config.bridgeUrl, config.ssePath));
			url.searchParams.append("client_id", config.sessionId);
			const lastEventId = yield config.bridgeGatewayStorage.getLastEventId();
			if (lastEventId) url.searchParams.append("last_event_id", lastEventId);
			if (signal.aborted) {
				reject(new TonConnectError("Bridge connection aborted"));
				return;
			}
			const eventSource = new EventSource(url.toString());
			eventSource.onerror = (reason) => __awaiter(this, void 0, void 0, function* () {
				if (signal.aborted) {
					eventSource.close();
					reject(new TonConnectError("Bridge connection aborted"));
					return;
				}
				try {
					const newInstance = yield config.errorHandler(eventSource, reason);
					if (newInstance !== eventSource) eventSource.close();
					if (newInstance && newInstance !== eventSource) resolve(newInstance);
				} catch (e$1) {
					eventSource.close();
					reject(e$1);
				}
			});
			eventSource.onopen = () => {
				if (signal.aborted) {
					eventSource.close();
					reject(new TonConnectError("Bridge connection aborted"));
					return;
				}
				resolve(eventSource);
			};
			eventSource.onmessage = (event) => {
				if (signal.aborted) {
					eventSource.close();
					reject(new TonConnectError("Bridge connection aborted"));
					return;
				}
				config.messageHandler(event);
			};
			(_a$7 = config.signal) === null || _a$7 === void 0 || _a$7.addEventListener("abort", () => {
				eventSource.close();
				reject(new TonConnectError("Bridge connection aborted"));
			});
		}), {
			timeout: config.openingDeadlineMS,
			signal: config.signal
		});
	});
}
function isPendingConnectionHttp(connection) {
	return !("connectEvent" in connection);
}
var BridgeConnectionStorage = class {
	constructor(storage) {
		this.storage = storage;
		this.storeKey = "ton-connect-storage_bridge-connection";
	}
	storeConnection(connection) {
		return __awaiter(this, void 0, void 0, function* () {
			if (connection.type === "injected") return this.storage.setItem(this.storeKey, JSON.stringify(connection));
			if (!isPendingConnectionHttp(connection)) {
				const rawSession = {
					sessionKeyPair: connection.session.sessionCrypto.stringifyKeypair(),
					walletPublicKey: connection.session.walletPublicKey,
					bridgeUrl: connection.session.bridgeUrl
				};
				const rawConnection$1 = {
					type: "http",
					connectEvent: connection.connectEvent,
					session: rawSession,
					lastWalletEventId: connection.lastWalletEventId,
					nextRpcRequestId: connection.nextRpcRequestId
				};
				return this.storage.setItem(this.storeKey, JSON.stringify(rawConnection$1));
			}
			const rawConnection = {
				type: "http",
				connectionSource: connection.connectionSource,
				sessionCrypto: connection.sessionCrypto.stringifyKeypair()
			};
			return this.storage.setItem(this.storeKey, JSON.stringify(rawConnection));
		});
	}
	removeConnection() {
		return __awaiter(this, void 0, void 0, function* () {
			return this.storage.removeItem(this.storeKey);
		});
	}
	getConnection() {
		return __awaiter(this, void 0, void 0, function* () {
			const stored = yield this.storage.getItem(this.storeKey);
			if (!stored) return null;
			const connection = JSON.parse(stored);
			if (connection.type === "injected") return connection;
			if ("connectEvent" in connection) {
				const sessionCrypto = new SessionCrypto(connection.session.sessionKeyPair);
				return {
					type: "http",
					connectEvent: connection.connectEvent,
					lastWalletEventId: connection.lastWalletEventId,
					nextRpcRequestId: connection.nextRpcRequestId,
					session: {
						sessionCrypto,
						bridgeUrl: connection.session.bridgeUrl,
						walletPublicKey: connection.session.walletPublicKey
					}
				};
			}
			return {
				type: "http",
				sessionCrypto: new SessionCrypto(connection.sessionCrypto),
				connectionSource: connection.connectionSource
			};
		});
	}
	getHttpConnection() {
		return __awaiter(this, void 0, void 0, function* () {
			const connection = yield this.getConnection();
			if (!connection) throw new TonConnectError("Trying to read HTTP connection source while nothing is stored");
			if (connection.type === "injected") throw new TonConnectError("Trying to read HTTP connection source while injected connection is stored");
			return connection;
		});
	}
	getHttpPendingConnection() {
		return __awaiter(this, void 0, void 0, function* () {
			const connection = yield this.getConnection();
			if (!connection) throw new TonConnectError("Trying to read HTTP connection source while nothing is stored");
			if (connection.type === "injected") throw new TonConnectError("Trying to read HTTP connection source while injected connection is stored");
			if (!isPendingConnectionHttp(connection)) throw new TonConnectError("Trying to read HTTP-pending connection while http connection is stored");
			return connection;
		});
	}
	getInjectedConnection() {
		return __awaiter(this, void 0, void 0, function* () {
			const connection = yield this.getConnection();
			if (!connection) throw new TonConnectError("Trying to read Injected bridge connection source while nothing is stored");
			if ((connection === null || connection === void 0 ? void 0 : connection.type) === "http") throw new TonConnectError("Trying to read Injected bridge connection source while HTTP connection is stored");
			return connection;
		});
	}
	storedConnectionType() {
		return __awaiter(this, void 0, void 0, function* () {
			const stored = yield this.storage.getItem(this.storeKey);
			if (!stored) return null;
			const connection = JSON.parse(stored);
			return connection.type;
		});
	}
	storeLastWalletEventId(id) {
		return __awaiter(this, void 0, void 0, function* () {
			const connection = yield this.getConnection();
			if (connection && connection.type === "http" && !isPendingConnectionHttp(connection)) {
				connection.lastWalletEventId = id;
				return this.storeConnection(connection);
			}
		});
	}
	getLastWalletEventId() {
		return __awaiter(this, void 0, void 0, function* () {
			const connection = yield this.getConnection();
			if (connection && "lastWalletEventId" in connection) return connection.lastWalletEventId;
			return void 0;
		});
	}
	increaseNextRpcRequestId() {
		return __awaiter(this, void 0, void 0, function* () {
			const connection = yield this.getConnection();
			if (connection && "nextRpcRequestId" in connection) {
				const lastId = connection.nextRpcRequestId || 0;
				connection.nextRpcRequestId = lastId + 1;
				return this.storeConnection(connection);
			}
		});
	}
	getNextRpcRequestId() {
		return __awaiter(this, void 0, void 0, function* () {
			const connection = yield this.getConnection();
			if (connection && "nextRpcRequestId" in connection) return connection.nextRpcRequestId || 0;
			return 0;
		});
	}
};
const PROTOCOL_VERSION = 2;
var BridgeProvider = class BridgeProvider {
	constructor(storage, walletConnectionSource) {
		this.storage = storage;
		this.walletConnectionSource = walletConnectionSource;
		this.type = "http";
		this.standardUniversalLink = "tc://";
		this.pendingRequests = /* @__PURE__ */ new Map();
		this.session = null;
		this.gateway = null;
		this.pendingGateways = [];
		this.listeners = [];
		this.defaultOpeningDeadlineMS = 12e3;
		this.defaultRetryTimeoutMS = 2e3;
		this.connectionStorage = new BridgeConnectionStorage(storage);
	}
	static fromStorage(storage) {
		return __awaiter(this, void 0, void 0, function* () {
			const bridgeConnectionStorage = new BridgeConnectionStorage(storage);
			const connection = yield bridgeConnectionStorage.getHttpConnection();
			if (isPendingConnectionHttp(connection)) return new BridgeProvider(storage, connection.connectionSource);
			return new BridgeProvider(storage, { bridgeUrl: connection.session.bridgeUrl });
		});
	}
	connect(message, options) {
		var _a$7;
		const abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);
		(_a$7 = this.abortController) === null || _a$7 === void 0 || _a$7.abort();
		this.abortController = abortController;
		this.closeGateways();
		const sessionCrypto = new SessionCrypto();
		this.session = {
			sessionCrypto,
			bridgeUrl: "bridgeUrl" in this.walletConnectionSource ? this.walletConnectionSource.bridgeUrl : ""
		};
		this.connectionStorage.storeConnection({
			type: "http",
			connectionSource: this.walletConnectionSource,
			sessionCrypto
		}).then(() => __awaiter(this, void 0, void 0, function* () {
			if (abortController.signal.aborted) return;
			yield callForSuccess((_options) => {
				var _a$8;
				return this.openGateways(sessionCrypto, {
					openingDeadlineMS: (_a$8 = options === null || options === void 0 ? void 0 : options.openingDeadlineMS) !== null && _a$8 !== void 0 ? _a$8 : this.defaultOpeningDeadlineMS,
					signal: _options === null || _options === void 0 ? void 0 : _options.signal
				});
			}, {
				attempts: Number.MAX_SAFE_INTEGER,
				delayMs: this.defaultRetryTimeoutMS,
				signal: abortController.signal
			});
		}));
		const universalLink = "universalLink" in this.walletConnectionSource && this.walletConnectionSource.universalLink ? this.walletConnectionSource.universalLink : this.standardUniversalLink;
		return this.generateUniversalLink(universalLink, message);
	}
	restoreConnection(options) {
		var _a$7, _b$1;
		return __awaiter(this, void 0, void 0, function* () {
			const abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);
			(_a$7 = this.abortController) === null || _a$7 === void 0 || _a$7.abort();
			this.abortController = abortController;
			if (abortController.signal.aborted) return;
			this.closeGateways();
			const storedConnection = yield this.connectionStorage.getHttpConnection();
			if (!storedConnection) return;
			if (abortController.signal.aborted) return;
			const openingDeadlineMS = (_b$1 = options === null || options === void 0 ? void 0 : options.openingDeadlineMS) !== null && _b$1 !== void 0 ? _b$1 : this.defaultOpeningDeadlineMS;
			if (isPendingConnectionHttp(storedConnection)) {
				this.session = {
					sessionCrypto: storedConnection.sessionCrypto,
					bridgeUrl: "bridgeUrl" in this.walletConnectionSource ? this.walletConnectionSource.bridgeUrl : ""
				};
				return yield this.openGateways(storedConnection.sessionCrypto, {
					openingDeadlineMS,
					signal: abortController === null || abortController === void 0 ? void 0 : abortController.signal
				});
			}
			if (Array.isArray(this.walletConnectionSource)) throw new TonConnectError("Internal error. Connection source is array while WalletConnectionSourceHTTP was expected.");
			this.session = storedConnection.session;
			if (this.gateway) {
				logDebug$1("Gateway is already opened, closing previous gateway");
				yield this.gateway.close();
			}
			this.gateway = new BridgeGateway(this.storage, this.walletConnectionSource.bridgeUrl, storedConnection.session.sessionCrypto.sessionId, this.gatewayListener.bind(this), this.gatewayErrorsListener.bind(this));
			if (abortController.signal.aborted) return;
			this.listeners.forEach((listener) => listener(storedConnection.connectEvent));
			try {
				yield callForSuccess((options$1) => this.gateway.registerSession({
					openingDeadlineMS,
					signal: options$1.signal
				}), {
					attempts: Number.MAX_SAFE_INTEGER,
					delayMs: this.defaultRetryTimeoutMS,
					signal: abortController.signal
				});
			} catch (e$1) {
				yield this.disconnect({ signal: abortController.signal });
				return;
			}
		});
	}
	sendRequest(request, optionsOrOnRequestSent) {
		const options = {};
		if (typeof optionsOrOnRequestSent === "function") options.onRequestSent = optionsOrOnRequestSent;
		else {
			options.onRequestSent = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.onRequestSent;
			options.signal = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.signal;
			options.attempts = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.attempts;
		}
		return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
			var _a$7;
			if (!this.gateway || !this.session || !("walletPublicKey" in this.session)) throw new TonConnectError("Trying to send bridge request without session");
			const id = (yield this.connectionStorage.getNextRpcRequestId()).toString();
			yield this.connectionStorage.increaseNextRpcRequestId();
			logDebug$1("Send http-bridge request:", Object.assign(Object.assign({}, request), { id }));
			const encodedRequest = this.session.sessionCrypto.encrypt(JSON.stringify(Object.assign(Object.assign({}, request), { id })), hexToByteArray(this.session.walletPublicKey));
			try {
				yield this.gateway.send(encodedRequest, this.session.walletPublicKey, request.method, {
					attempts: options === null || options === void 0 ? void 0 : options.attempts,
					signal: options === null || options === void 0 ? void 0 : options.signal
				});
				(_a$7 = options === null || options === void 0 ? void 0 : options.onRequestSent) === null || _a$7 === void 0 || _a$7.call(options);
				this.pendingRequests.set(id.toString(), resolve);
			} catch (e$1) {
				reject(e$1);
			}
		}));
	}
	closeConnection() {
		this.closeGateways();
		this.listeners = [];
		this.session = null;
		this.gateway = null;
	}
	disconnect(options) {
		return __awaiter(this, void 0, void 0, function* () {
			return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
				let called = false;
				let timeoutId = null;
				const onRequestSent = () => {
					if (!called) {
						called = true;
						this.removeBridgeAndSession().then(resolve);
					}
				};
				try {
					this.closeGateways();
					const abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);
					timeoutId = setTimeout(() => {
						abortController.abort();
					}, this.defaultOpeningDeadlineMS);
					yield this.sendRequest({
						method: "disconnect",
						params: []
					}, {
						onRequestSent,
						signal: abortController.signal,
						attempts: 1
					});
				} catch (e$1) {
					logDebug$1("Disconnect error:", e$1);
					if (!called) this.removeBridgeAndSession().then(resolve);
				} finally {
					if (timeoutId) clearTimeout(timeoutId);
					onRequestSent();
				}
			}));
		});
	}
	listen(callback) {
		this.listeners.push(callback);
		return () => this.listeners = this.listeners.filter((listener) => listener !== callback);
	}
	pause() {
		var _a$7;
		(_a$7 = this.gateway) === null || _a$7 === void 0 || _a$7.pause();
		this.pendingGateways.forEach((bridge) => bridge.pause());
	}
	unPause() {
		return __awaiter(this, void 0, void 0, function* () {
			const promises = this.pendingGateways.map((bridge) => bridge.unPause());
			if (this.gateway) promises.push(this.gateway.unPause());
			yield Promise.all(promises);
		});
	}
	pendingGatewaysListener(gateway, bridgeUrl, bridgeIncomingMessage) {
		return __awaiter(this, void 0, void 0, function* () {
			if (!this.pendingGateways.includes(gateway)) {
				yield gateway.close();
				return;
			}
			this.closeGateways({ except: gateway });
			if (this.gateway) {
				logDebug$1("Gateway is already opened, closing previous gateway");
				yield this.gateway.close();
			}
			this.session.bridgeUrl = bridgeUrl;
			this.gateway = gateway;
			this.gateway.setErrorsListener(this.gatewayErrorsListener.bind(this));
			this.gateway.setListener(this.gatewayListener.bind(this));
			return this.gatewayListener(bridgeIncomingMessage);
		});
	}
	gatewayListener(bridgeIncomingMessage) {
		return __awaiter(this, void 0, void 0, function* () {
			const walletMessage = JSON.parse(this.session.sessionCrypto.decrypt(Base64.decode(bridgeIncomingMessage.message).toUint8Array(), hexToByteArray(bridgeIncomingMessage.from)));
			logDebug$1("Wallet message received:", walletMessage);
			if (!("event" in walletMessage)) {
				const id = walletMessage.id.toString();
				const resolve = this.pendingRequests.get(id);
				if (!resolve) {
					logDebug$1(`Response id ${id} doesn't match any request's id`);
					return;
				}
				resolve(walletMessage);
				this.pendingRequests.delete(id);
				return;
			}
			if (walletMessage.id !== void 0) {
				const lastId = yield this.connectionStorage.getLastWalletEventId();
				if (lastId !== void 0 && walletMessage.id <= lastId) {
					logError$1(`Received event id (=${walletMessage.id}) must be greater than stored last wallet event id (=${lastId}) `);
					return;
				}
				if (walletMessage.event !== "connect") yield this.connectionStorage.storeLastWalletEventId(walletMessage.id);
			}
			const listeners = this.listeners;
			if (walletMessage.event === "connect") yield this.updateSession(walletMessage, bridgeIncomingMessage.from);
			if (walletMessage.event === "disconnect") {
				logDebug$1(`Removing bridge and session: received disconnect event`);
				yield this.removeBridgeAndSession();
			}
			listeners.forEach((listener) => listener(walletMessage));
		});
	}
	gatewayErrorsListener(e$1) {
		return __awaiter(this, void 0, void 0, function* () {
			throw new TonConnectError(`Bridge error ${JSON.stringify(e$1)}`);
		});
	}
	updateSession(connectEvent, walletPublicKey) {
		return __awaiter(this, void 0, void 0, function* () {
			this.session = Object.assign(Object.assign({}, this.session), { walletPublicKey });
			const tonAddrItem = connectEvent.payload.items.find((item) => item.name === "ton_addr");
			const connectEventToSave = Object.assign(Object.assign({}, connectEvent), { payload: Object.assign(Object.assign({}, connectEvent.payload), { items: [tonAddrItem] }) });
			yield this.connectionStorage.storeConnection({
				type: "http",
				session: this.session,
				lastWalletEventId: connectEvent.id,
				connectEvent: connectEventToSave,
				nextRpcRequestId: 0
			});
		});
	}
	removeBridgeAndSession() {
		return __awaiter(this, void 0, void 0, function* () {
			this.closeConnection();
			yield this.connectionStorage.removeConnection();
		});
	}
	generateUniversalLink(universalLink, message) {
		if (isTelegramUrl(universalLink)) return this.generateTGUniversalLink(universalLink, message);
		return this.generateRegularUniversalLink(universalLink, message);
	}
	generateRegularUniversalLink(universalLink, message) {
		const url = new URL(universalLink);
		url.searchParams.append("v", PROTOCOL_VERSION.toString());
		url.searchParams.append("id", this.session.sessionCrypto.sessionId);
		url.searchParams.append("r", JSON.stringify(message));
		return url.toString();
	}
	generateTGUniversalLink(universalLink, message) {
		const urlToWrap = this.generateRegularUniversalLink("about:blank", message);
		const linkParams = urlToWrap.split("?")[1];
		const startapp = "tonconnect-" + encodeTelegramUrlParameters(linkParams);
		const updatedUniversalLink = this.convertToDirectLink(universalLink);
		const url = new URL(updatedUniversalLink);
		url.searchParams.append("startapp", startapp);
		return url.toString();
	}
	convertToDirectLink(universalLink) {
		const url = new URL(universalLink);
		if (url.searchParams.has("attach")) {
			url.searchParams.delete("attach");
			url.pathname += "/start";
		}
		return url.toString();
	}
	openGateways(sessionCrypto, options) {
		return __awaiter(this, void 0, void 0, function* () {
			if (Array.isArray(this.walletConnectionSource)) {
				this.pendingGateways.map((bridge) => bridge.close().catch());
				this.pendingGateways = this.walletConnectionSource.map((source) => {
					const gateway = new BridgeGateway(this.storage, source.bridgeUrl, sessionCrypto.sessionId, () => {}, () => {});
					gateway.setListener((message) => this.pendingGatewaysListener(gateway, source.bridgeUrl, message));
					return gateway;
				});
				yield Promise.allSettled(this.pendingGateways.map((bridge) => callForSuccess((_options) => {
					var _a$7;
					if (!this.pendingGateways.some((item) => item === bridge)) return bridge.close();
					return bridge.registerSession({
						openingDeadlineMS: (_a$7 = options === null || options === void 0 ? void 0 : options.openingDeadlineMS) !== null && _a$7 !== void 0 ? _a$7 : this.defaultOpeningDeadlineMS,
						signal: _options.signal
					});
				}, {
					attempts: Number.MAX_SAFE_INTEGER,
					delayMs: this.defaultRetryTimeoutMS,
					signal: options === null || options === void 0 ? void 0 : options.signal
				})));
				return;
			} else {
				if (this.gateway) {
					logDebug$1(`Gateway is already opened, closing previous gateway`);
					yield this.gateway.close();
				}
				this.gateway = new BridgeGateway(this.storage, this.walletConnectionSource.bridgeUrl, sessionCrypto.sessionId, this.gatewayListener.bind(this), this.gatewayErrorsListener.bind(this));
				return yield this.gateway.registerSession({
					openingDeadlineMS: options === null || options === void 0 ? void 0 : options.openingDeadlineMS,
					signal: options === null || options === void 0 ? void 0 : options.signal
				});
			}
		});
	}
	closeGateways(options) {
		var _a$7;
		(_a$7 = this.gateway) === null || _a$7 === void 0 || _a$7.close();
		this.pendingGateways.filter((item) => item !== (options === null || options === void 0 ? void 0 : options.except)).forEach((bridge) => bridge.close());
		this.pendingGateways = [];
	}
};
function hasProperty(value, propertyKey) {
	return hasProperties(value, [propertyKey]);
}
function hasProperties(value, propertyKeys) {
	if (!value || typeof value !== "object") return false;
	return propertyKeys.every((propertyKey) => propertyKey in value);
}
function isJSBridgeWithMetadata(value) {
	try {
		if (!hasProperty(value, "tonconnect") || !hasProperty(value.tonconnect, "walletInfo")) return false;
		return hasProperties(value.tonconnect.walletInfo, [
			"name",
			"app_name",
			"image",
			"about_url",
			"platforms"
		]);
	} catch (_a$7) {
		return false;
	}
}
/**
* In memory storage like localStorage, but without persistence.
* Uses as a fallback for localStorage in Safari's private mode.
*/
var InMemoryStorage$1 = class InMemoryStorage$1 {
	constructor() {
		this.storage = {};
	}
	static getInstance() {
		if (!InMemoryStorage$1.instance) InMemoryStorage$1.instance = new InMemoryStorage$1();
		return InMemoryStorage$1.instance;
	}
	get length() {
		return Object.keys(this.storage).length;
	}
	clear() {
		this.storage = {};
	}
	getItem(key) {
		var _a$7;
		return (_a$7 = this.storage[key]) !== null && _a$7 !== void 0 ? _a$7 : null;
	}
	key(index) {
		var _a$7;
		const keys = Object.keys(this.storage);
		if (index < 0 || index >= keys.length) return null;
		return (_a$7 = keys[index]) !== null && _a$7 !== void 0 ? _a$7 : null;
	}
	removeItem(key) {
		delete this.storage[key];
	}
	setItem(key, value) {
		this.storage[key] = value;
	}
};
function getWindow$2() {
	if (typeof window === "undefined") return void 0;
	return window;
}
/**
* The function try to get window keys, if it is not available it returns empty array.
* As an example, for Safari's private mode it returns empty array, because the browser does not allow to get window keys.
*/
function tryGetWindowKeys() {
	const window$1 = getWindow$2();
	if (!window$1) return [];
	try {
		return Object.keys(window$1);
	} catch (_a$7) {
		return [];
	}
}
function getDocument() {
	if (typeof document === "undefined") return void 0;
	return document;
}
function getWebPageManifest() {
	var _a$7;
	const origin = (_a$7 = getWindow$2()) === null || _a$7 === void 0 ? void 0 : _a$7.location.origin;
	if (origin) return origin + "/tonconnect-manifest.json";
	return "";
}
/**
* Returns `localStorage` if it is available. In Safari's private mode, it returns `InMemoryStorage`. In Node.js, it throws an error.
*/
function tryGetLocalStorage$1() {
	if (isLocalStorageAvailable$1()) return localStorage;
	if (isNodeJs$1()) throw new TonConnectError("`localStorage` is unavailable, but it is required for TonConnect. For more details, see https://github.com/ton-connect/sdk/tree/main/packages/sdk#init-connector");
	return InMemoryStorage$1.getInstance();
}
/**
* Checks if `localStorage` is available.
*/
function isLocalStorageAvailable$1() {
	try {
		return typeof localStorage !== "undefined";
	} catch (_a$7) {
		return false;
	}
}
/**
* Checks if the environment is Node.js.
*/
function isNodeJs$1() {
	return typeof process !== "undefined" && process.versions != null && process.versions.node != null;
}
var InjectedProvider = class InjectedProvider {
	constructor(storage, injectedWalletKey) {
		this.injectedWalletKey = injectedWalletKey;
		this.type = "injected";
		this.unsubscribeCallback = null;
		this.listenSubscriptions = false;
		this.listeners = [];
		const window$1 = InjectedProvider.window;
		if (!InjectedProvider.isWindowContainsWallet(window$1, injectedWalletKey)) throw new WalletNotInjectedError();
		this.connectionStorage = new BridgeConnectionStorage(storage);
		this.injectedWallet = window$1[injectedWalletKey].tonconnect;
	}
	static fromStorage(storage) {
		return __awaiter(this, void 0, void 0, function* () {
			const bridgeConnectionStorage = new BridgeConnectionStorage(storage);
			const connection = yield bridgeConnectionStorage.getInjectedConnection();
			return new InjectedProvider(storage, connection.jsBridgeKey);
		});
	}
	static isWalletInjected(injectedWalletKey) {
		return InjectedProvider.isWindowContainsWallet(this.window, injectedWalletKey);
	}
	static isInsideWalletBrowser(injectedWalletKey) {
		if (InjectedProvider.isWindowContainsWallet(this.window, injectedWalletKey)) return this.window[injectedWalletKey].tonconnect.isWalletBrowser;
		return false;
	}
	static getCurrentlyInjectedWallets() {
		if (!this.window) return [];
		const windowKeys = tryGetWindowKeys();
		const wallets = windowKeys.filter(([_, value]) => isJSBridgeWithMetadata(value));
		return wallets.map(([jsBridgeKey, wallet]) => ({
			name: wallet.tonconnect.walletInfo.name,
			appName: wallet.tonconnect.walletInfo.app_name,
			aboutUrl: wallet.tonconnect.walletInfo.about_url,
			imageUrl: wallet.tonconnect.walletInfo.image,
			tondns: wallet.tonconnect.walletInfo.tondns,
			jsBridgeKey,
			injected: true,
			embedded: wallet.tonconnect.isWalletBrowser,
			platforms: wallet.tonconnect.walletInfo.platforms,
			features: wallet.tonconnect.walletInfo.features
		}));
	}
	static isWindowContainsWallet(window$1, injectedWalletKey) {
		return !!window$1 && injectedWalletKey in window$1 && typeof window$1[injectedWalletKey] === "object" && "tonconnect" in window$1[injectedWalletKey];
	}
	connect(message) {
		this._connect(PROTOCOL_VERSION, message);
	}
	restoreConnection() {
		return __awaiter(this, void 0, void 0, function* () {
			try {
				logDebug$1(`Injected Provider restoring connection...`);
				const connectEvent = yield this.injectedWallet.restoreConnection();
				logDebug$1("Injected Provider restoring connection response", connectEvent);
				if (connectEvent.event === "connect") {
					this.makeSubscriptions();
					this.listeners.forEach((listener) => listener(connectEvent));
				} else yield this.connectionStorage.removeConnection();
			} catch (e$1) {
				yield this.connectionStorage.removeConnection();
				console.error(e$1);
			}
		});
	}
	closeConnection() {
		if (this.listenSubscriptions) this.injectedWallet.disconnect();
		this.closeAllListeners();
	}
	disconnect() {
		return __awaiter(this, void 0, void 0, function* () {
			return new Promise((resolve) => {
				const onRequestSent = () => {
					this.closeAllListeners();
					this.connectionStorage.removeConnection().then(resolve);
				};
				try {
					this.injectedWallet.disconnect();
					onRequestSent();
				} catch (e$1) {
					logDebug$1(e$1);
					this.sendRequest({
						method: "disconnect",
						params: []
					}, onRequestSent);
				}
			});
		});
	}
	closeAllListeners() {
		var _a$7;
		this.listenSubscriptions = false;
		this.listeners = [];
		(_a$7 = this.unsubscribeCallback) === null || _a$7 === void 0 || _a$7.call(this);
	}
	listen(eventsCallback) {
		this.listeners.push(eventsCallback);
		return () => this.listeners = this.listeners.filter((listener) => listener !== eventsCallback);
	}
	sendRequest(request, optionsOrOnRequestSent) {
		var _a$7;
		return __awaiter(this, void 0, void 0, function* () {
			const options = {};
			if (typeof optionsOrOnRequestSent === "function") options.onRequestSent = optionsOrOnRequestSent;
			else {
				options.onRequestSent = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.onRequestSent;
				options.signal = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.signal;
			}
			const id = (yield this.connectionStorage.getNextRpcRequestId()).toString();
			yield this.connectionStorage.increaseNextRpcRequestId();
			logDebug$1("Send injected-bridge request:", Object.assign(Object.assign({}, request), { id }));
			const result = this.injectedWallet.send(Object.assign(Object.assign({}, request), { id }));
			result.then((response) => logDebug$1("Wallet message received:", response));
			(_a$7 = options === null || options === void 0 ? void 0 : options.onRequestSent) === null || _a$7 === void 0 || _a$7.call(options);
			return result;
		});
	}
	_connect(protocolVersion, message) {
		return __awaiter(this, void 0, void 0, function* () {
			try {
				logDebug$1(`Injected Provider connect request: protocolVersion: ${protocolVersion}, message:`, message);
				const connectEvent = yield this.injectedWallet.connect(protocolVersion, message);
				logDebug$1("Injected Provider connect response:", connectEvent);
				if (connectEvent.event === "connect") {
					yield this.updateSession();
					this.makeSubscriptions();
				}
				this.listeners.forEach((listener) => listener(connectEvent));
			} catch (e$1) {
				logDebug$1("Injected Provider connect error:", e$1);
				const connectEventError = {
					event: "connect_error",
					payload: {
						code: 0,
						message: e$1 === null || e$1 === void 0 ? void 0 : e$1.toString()
					}
				};
				this.listeners.forEach((listener) => listener(connectEventError));
			}
		});
	}
	makeSubscriptions() {
		this.listenSubscriptions = true;
		this.unsubscribeCallback = this.injectedWallet.listen((e$1) => {
			logDebug$1("Wallet message received:", e$1);
			if (this.listenSubscriptions) this.listeners.forEach((listener) => listener(e$1));
			if (e$1.event === "disconnect") this.disconnect();
		});
	}
	updateSession() {
		return this.connectionStorage.storeConnection({
			type: "injected",
			jsBridgeKey: this.injectedWalletKey,
			nextRpcRequestId: 0
		});
	}
};
InjectedProvider.window = getWindow$2();
/**
* Default storage to save protocol data, uses `localStorage` if it is available. In Safari's private mode, it uses `InMemoryStorage`. In Node.js, it throws an error.
*/
var DefaultStorage = class {
	constructor() {
		this.localStorage = tryGetLocalStorage$1();
	}
	getItem(key) {
		return __awaiter(this, void 0, void 0, function* () {
			return this.localStorage.getItem(key);
		});
	}
	removeItem(key) {
		return __awaiter(this, void 0, void 0, function* () {
			this.localStorage.removeItem(key);
		});
	}
	setItem(key, value) {
		return __awaiter(this, void 0, void 0, function* () {
			this.localStorage.setItem(key, value);
		});
	}
};
/**
* Checks if `WalletInfo` is `WalletInfoInjectable` and `WalletInfo` is injected to the current webpage (`walletInfo.injected === true`).
* @param value WalletInfo to check.
*/
function isWalletInfoCurrentlyInjected(value) {
	return isWalletInfoInjectable(value) && value.injected;
}
/**
* Checks if `WalletInfo` is `WalletInfoInjectable` and dApp is opened inside this wallet's browser.
* @param value WalletInfo to check.
*/
function isWalletInfoCurrentlyEmbedded(value) {
	return isWalletInfoCurrentlyInjected(value) && value.embedded;
}
/**
* Checks if `WalletInfo` is `WalletInfoInjected`, but doesn't check if it is injected to the page or not.
* @param value WalletInfo to check.
*/
function isWalletInfoInjectable(value) {
	return "jsBridgeKey" in value;
}
/**
* Checks if `WalletInfo` is `WalletInfoRemote`.
* @param value WalletInfo to check.
*/
function isWalletInfoRemote(value) {
	return "bridgeUrl" in value;
}
const FALLBACK_WALLETS_LIST = [
	{
		app_name: "telegram-wallet",
		name: "Wallet",
		image: "https://wallet.tg/images/logo-288.png",
		about_url: "https://wallet.tg/",
		universal_url: "https://t.me/wallet?attach=wallet",
		bridge: [{
			type: "sse",
			url: "https://walletbot.me/tonconnect-bridge/bridge"
		}],
		platforms: [
			"ios",
			"android",
			"macos",
			"windows",
			"linux"
		]
	},
	{
		app_name: "tonkeeper",
		name: "Tonkeeper",
		image: "https://tonkeeper.com/assets/tonconnect-icon.png",
		tondns: "tonkeeper.ton",
		about_url: "https://tonkeeper.com",
		universal_url: "https://app.tonkeeper.com/ton-connect",
		deepLink: "tonkeeper-tc://",
		bridge: [{
			type: "sse",
			url: "https://bridge.tonapi.io/bridge"
		}, {
			type: "js",
			key: "tonkeeper"
		}],
		platforms: [
			"ios",
			"android",
			"chrome",
			"firefox",
			"macos"
		]
	},
	{
		app_name: "mytonwallet",
		name: "MyTonWallet",
		image: "https://static.mytonwallet.io/icon-256.png",
		about_url: "https://mytonwallet.io",
		universal_url: "https://connect.mytonwallet.org",
		bridge: [{
			type: "js",
			key: "mytonwallet"
		}, {
			type: "sse",
			url: "https://tonconnectbridge.mytonwallet.org/bridge/"
		}],
		platforms: [
			"chrome",
			"windows",
			"macos",
			"linux",
			"ios",
			"android",
			"firefox"
		]
	},
	{
		app_name: "tonhub",
		name: "Tonhub",
		image: "https://tonhub.com/tonconnect_logo.png",
		about_url: "https://tonhub.com",
		universal_url: "https://tonhub.com/ton-connect",
		bridge: [{
			type: "js",
			key: "tonhub"
		}, {
			type: "sse",
			url: "https://connect.tonhubapi.com/tonconnect"
		}],
		platforms: ["ios", "android"]
	},
	{
		app_name: "bitgetTonWallet",
		name: "Bitget Wallet",
		image: "https://raw.githubusercontent.com/bitgetwallet/download/refs/heads/main/logo/png/bitget_wallet_logo_288_mini.png",
		about_url: "https://web3.bitget.com",
		deepLink: "bitkeep://",
		bridge: [{
			type: "js",
			key: "bitgetTonWallet"
		}, {
			type: "sse",
			url: "https://ton-connect-bridge.bgwapi.io/bridge"
		}],
		platforms: [
			"ios",
			"android",
			"chrome"
		],
		universal_url: "https://bkcode.vip/ton-connect"
	},
	{
		app_name: "okxMiniWallet",
		name: "OKX Mini Wallet",
		image: "https://static.okx.com/cdn/assets/imgs/2411/8BE1A4A434D8F58A.png",
		about_url: "https://www.okx.com/web3",
		universal_url: "https://t.me/OKX_WALLET_BOT?attach=wallet",
		bridge: [{
			type: "sse",
			url: "https://www.okx.com/tonbridge/discover/rpc/bridge"
		}],
		platforms: [
			"ios",
			"android",
			"macos",
			"windows",
			"linux"
		]
	},
	{
		app_name: "binanceWeb3TonWallet",
		name: "Binance Web3 Wallet",
		image: "https://public.bnbstatic.com/static/binance-w3w/ton-provider/binancew3w.png",
		about_url: "https://www.binance.com/en/web3wallet",
		deepLink: "bnc://app.binance.com/cedefi/ton-connect",
		bridge: [{
			type: "js",
			key: "binancew3w"
		}, {
			type: "sse",
			url: "https://wallet.binance.com/tonbridge/bridge"
		}],
		platforms: [
			"ios",
			"android",
			"macos",
			"windows",
			"linux"
		],
		universal_url: "https://app.binance.com/cedefi/ton-connect"
	},
	{
		app_name: "fintopio-tg",
		name: "Fintopio",
		image: "https://fintopio.com/tonconnect-icon.png",
		about_url: "https://fintopio.com",
		universal_url: "https://t.me/fintopio?attach=wallet",
		bridge: [{
			type: "sse",
			url: "https://wallet-bridge.fintopio.com/bridge"
		}],
		platforms: [
			"ios",
			"android",
			"macos",
			"windows",
			"linux"
		]
	},
	{
		app_name: "okxTonWallet",
		name: "OKX Wallet",
		image: "https://static.okx.com/cdn/assets/imgs/247/58E63FEA47A2B7D7.png",
		about_url: "https://www.okx.com/web3",
		universal_url: "https://www.okx.com/download?appendQuery=true&deeplink=okx://web3/wallet/tonconnect",
		bridge: [{
			type: "js",
			key: "okxTonWallet"
		}, {
			type: "sse",
			url: "https://www.okx.com/tonbridge/discover/rpc/bridge"
		}],
		platforms: [
			"chrome",
			"safari",
			"firefox",
			"ios",
			"android"
		]
	},
	{
		app_name: "hot",
		name: "HOT",
		image: "https://raw.githubusercontent.com/hot-dao/media/main/logo.png",
		about_url: "https://hot-labs.org/",
		universal_url: "https://t.me/herewalletbot?attach=wallet",
		bridge: [{
			type: "sse",
			url: "https://sse-bridge.hot-labs.org"
		}, {
			type: "js",
			key: "hotWallet"
		}],
		platforms: [
			"ios",
			"android",
			"macos",
			"windows",
			"linux"
		]
	},
	{
		app_name: "bybitTonWallet",
		name: "Bybit Wallet",
		image: "https://raw.githubusercontent.com/bybit-web3/bybit-web3.github.io/main/docs/images/bybit-logo.png",
		about_url: "https://www.bybit.com/web3",
		universal_url: "https://app.bybit.com/ton-connect",
		deepLink: "bybitapp://",
		bridge: [{
			type: "js",
			key: "bybitTonWallet"
		}, {
			type: "sse",
			url: "https://api-node.bybit.com/spot/api/web3/bridge/ton/bridge"
		}],
		platforms: [
			"ios",
			"android",
			"chrome"
		]
	},
	{
		app_name: "dewallet",
		name: "DeWallet",
		image: "https://raw.githubusercontent.com/delab-team/manifests-images/main/WalletAvatar.png",
		about_url: "https://delabwallet.com",
		universal_url: "https://t.me/dewallet?attach=wallet",
		bridge: [{
			type: "sse",
			url: "https://bridge.dewallet.pro/bridge"
		}],
		platforms: [
			"ios",
			"android",
			"macos",
			"windows",
			"linux"
		]
	},
	{
		app_name: "safepalwallet",
		name: "SafePal",
		image: "https://s.pvcliping.com/web/public_image/SafePal_x288.png",
		tondns: "",
		about_url: "https://www.safepal.com",
		universal_url: "https://link.safepal.io/ton-connect",
		deepLink: "safepal-tc://",
		bridge: [{
			type: "sse",
			url: "https://ton-bridge.safepal.com/tonbridge/v1/bridge"
		}, {
			type: "js",
			key: "safepalwallet"
		}],
		platforms: [
			"ios",
			"android",
			"chrome",
			"firefox"
		]
	},
	{
		app_name: "GateWallet",
		name: "GateWallet",
		image: "https://img.gatedataimg.com/prd-ordinal-imgs/036f07bb8730716e/gateio-0925.png",
		about_url: "https://www.gate.io/",
		bridge: [{
			type: "js",
			key: "gatetonwallet"
		}, {
			type: "sse",
			url: "https://dapp.gateio.services/tonbridge_api/bridge/v1"
		}],
		platforms: ["ios", "android"],
		universal_url: "https://gateio.go.link/gateio/web3?adj_t=1ff8khdw_1fu4ccc7"
	},
	{
		app_name: "openmask",
		name: "OpenMask",
		image: "https://raw.githubusercontent.com/OpenProduct/openmask-extension/main/public/openmask-logo-288.png",
		about_url: "https://www.openmask.app/",
		bridge: [{
			type: "js",
			key: "openmask"
		}],
		platforms: ["chrome"]
	},
	{
		app_name: "BitgetWeb3",
		name: "BitgetWeb3",
		image: "https://img.bitgetimg.com/image/third/1731638059795.png",
		about_url: "​https://www.bitget.com",
		universal_url: "https://t.me/BitgetOfficialBot?attach=wallet",
		bridge: [{
			type: "sse",
			url: "https://ton-connect-bridge.bgwapi.io/bridge"
		}],
		platforms: [
			"ios",
			"android",
			"windows",
			"macos",
			"linux"
		]
	},
	{
		app_name: "tobi",
		name: "Tobi",
		image: "https://app.tobiwallet.app/icons/logo-288.png",
		about_url: "https://tobi.fun",
		universal_url: "https://t.me/TobiCopilotBot?attach=wallet",
		bridge: [{
			type: "sse",
			url: "https://ton-bridge.tobiwallet.app/bridge"
		}],
		platforms: [
			"ios",
			"android",
			"macos",
			"windows",
			"linux"
		]
	},
	{
		app_name: "xtonwallet",
		name: "XTONWallet",
		image: "https://xtonwallet.com/assets/img/icon-256-back.png",
		about_url: "https://xtonwallet.com",
		bridge: [{
			type: "js",
			key: "xtonwallet"
		}],
		platforms: ["chrome", "firefox"]
	},
	{
		app_name: "tonwallet",
		name: "TON Wallet",
		image: "https://wallet.ton.org/assets/ui/qr-logo.png",
		about_url: "https://chrome.google.com/webstore/detail/ton-wallet/nphplpgoakhhjchkkhmiggakijnkhfnd",
		bridge: [{
			type: "js",
			key: "tonwallet"
		}],
		platforms: ["chrome"]
	}
];
var WalletsListManager = class {
	constructor(options) {
		var _a$7;
		this.walletsListCache = null;
		this.walletsListCacheCreationTimestamp = null;
		this.walletsListSource = (_a$7 = options === null || options === void 0 ? void 0 : options.walletsListSource) !== null && _a$7 !== void 0 ? _a$7 : "https://raw.githubusercontent.com/ton-blockchain/wallets-list/main/wallets-v2.json";
		this.cacheTTLMs = options === null || options === void 0 ? void 0 : options.cacheTTLMs;
	}
	getWallets() {
		return __awaiter(this, void 0, void 0, function* () {
			if (this.cacheTTLMs && this.walletsListCacheCreationTimestamp && Date.now() > this.walletsListCacheCreationTimestamp + this.cacheTTLMs) this.walletsListCache = null;
			if (!this.walletsListCache) {
				this.walletsListCache = this.fetchWalletsList();
				this.walletsListCache.then(() => {
					this.walletsListCacheCreationTimestamp = Date.now();
				}).catch(() => {
					this.walletsListCache = null;
					this.walletsListCacheCreationTimestamp = null;
				});
			}
			return this.walletsListCache;
		});
	}
	getEmbeddedWallet() {
		return __awaiter(this, void 0, void 0, function* () {
			const walletsList = yield this.getWallets();
			const embeddedWallets = walletsList.filter(isWalletInfoCurrentlyEmbedded);
			return embeddedWallets.length === 1 ? embeddedWallets[0] : null;
		});
	}
	fetchWalletsList() {
		return __awaiter(this, void 0, void 0, function* () {
			let walletsList = [];
			try {
				const walletsResponse = yield fetch(this.walletsListSource);
				walletsList = yield walletsResponse.json();
				if (!Array.isArray(walletsList)) throw new FetchWalletsError("Wrong wallets list format, wallets list must be an array.");
				const wrongFormatWallets = walletsList.filter((wallet) => !this.isCorrectWalletConfigDTO(wallet));
				if (wrongFormatWallets.length) {
					logError$1(`Wallet(s) ${wrongFormatWallets.map((wallet) => (wallet === null || wallet === void 0 ? void 0 : wallet.name) || "unknown").join(", ")} config format is wrong. They were removed from the wallets list.`);
					walletsList = walletsList.filter((wallet) => this.isCorrectWalletConfigDTO(wallet));
				}
			} catch (e$1) {
				logError$1(e$1);
				walletsList = FALLBACK_WALLETS_LIST;
			}
			let currentlyInjectedWallets = [];
			try {
				currentlyInjectedWallets = InjectedProvider.getCurrentlyInjectedWallets();
			} catch (e$1) {
				logError$1(e$1);
			}
			return this.mergeWalletsLists(this.walletConfigDTOListToWalletConfigList(walletsList), currentlyInjectedWallets);
		});
	}
	walletConfigDTOListToWalletConfigList(walletConfigDTO) {
		return walletConfigDTO.map((walletConfigDTO$1) => {
			const walletConfig = {
				name: walletConfigDTO$1.name,
				appName: walletConfigDTO$1.app_name,
				imageUrl: walletConfigDTO$1.image,
				aboutUrl: walletConfigDTO$1.about_url,
				tondns: walletConfigDTO$1.tondns,
				platforms: walletConfigDTO$1.platforms,
				features: walletConfigDTO$1.features
			};
			walletConfigDTO$1.bridge.forEach((bridge) => {
				if (bridge.type === "sse") {
					walletConfig.bridgeUrl = bridge.url;
					walletConfig.universalLink = walletConfigDTO$1.universal_url;
					walletConfig.deepLink = walletConfigDTO$1.deepLink;
				}
				if (bridge.type === "js") {
					const jsBridgeKey = bridge.key;
					walletConfig.jsBridgeKey = jsBridgeKey;
					walletConfig.injected = InjectedProvider.isWalletInjected(jsBridgeKey);
					walletConfig.embedded = InjectedProvider.isInsideWalletBrowser(jsBridgeKey);
				}
			});
			return walletConfig;
		});
	}
	mergeWalletsLists(list1, list2) {
		const names = new Set(list1.concat(list2).map((item) => item.name));
		return [...names.values()].map((name) => {
			const list1Item = list1.find((item) => item.name === name);
			const list2Item = list2.find((item) => item.name === name);
			return Object.assign(Object.assign({}, list1Item && Object.assign({}, list1Item)), list2Item && Object.assign({}, list2Item));
		});
	}
	isCorrectWalletConfigDTO(value) {
		if (!value || !(typeof value === "object")) return false;
		const containsName = "name" in value;
		const containsAppName = "app_name" in value;
		const containsImage = "image" in value;
		const containsAbout = "about_url" in value;
		const containsPlatforms = "platforms" in value;
		if (!containsName || !containsImage || !containsAbout || !containsPlatforms || !containsAppName) return false;
		if (!value.platforms || !Array.isArray(value.platforms) || !value.platforms.length) return false;
		if (!("bridge" in value) || !Array.isArray(value.bridge) || !value.bridge.length) return false;
		const bridge = value.bridge;
		if (bridge.some((item) => !item || typeof item !== "object" || !("type" in item))) return false;
		const sseBridge = bridge.find((item) => item.type === "sse");
		if (sseBridge) {
			if (!(typeof sseBridge === "object" && "url" in sseBridge) || !sseBridge.url || !value.universal_url) return false;
		}
		const jsBridge = bridge.find((item) => item.type === "js");
		if (jsBridge) {
			if (typeof jsBridge !== "object" || !("key" in jsBridge) || !jsBridge.key) return false;
		}
		return true;
	}
};
function checkSendTransactionSupport(features, options) {
	const supportsDeprecatedSendTransactionFeature = features.includes("SendTransaction");
	const sendTransactionFeature = findFeature(features, "SendTransaction");
	if (!supportsDeprecatedSendTransactionFeature && !sendTransactionFeature) throw new WalletNotSupportFeatureError("Wallet doesn't support SendTransaction feature.");
	if (options.requireExtraCurrencies) {
		if (!sendTransactionFeature || !sendTransactionFeature.extraCurrencySupported) throw new WalletNotSupportFeatureError(`Wallet is not able to handle such SendTransaction request. Extra currencies support is required.`);
	}
	if (sendTransactionFeature && sendTransactionFeature.maxMessages !== void 0) {
		if (sendTransactionFeature.maxMessages < options.requiredMessagesNumber) throw new WalletNotSupportFeatureError(`Wallet is not able to handle such SendTransaction request. Max support messages number is ${sendTransactionFeature.maxMessages}, but ${options.requiredMessagesNumber} is required.`);
		return;
	}
	logWarning$1("Connected wallet didn't provide information about max allowed messages in the SendTransaction request. Request may be rejected by the wallet.");
}
function checkRequiredWalletFeatures(features, walletsRequiredFeatures) {
	if (typeof walletsRequiredFeatures !== "object") return true;
	const { sendTransaction } = walletsRequiredFeatures;
	if (sendTransaction) {
		const feature = findFeature(features, "SendTransaction");
		if (!feature) return false;
		if (!checkSendTransaction(feature, sendTransaction)) return false;
	}
	return true;
}
function findFeature(features, requiredFeatureName) {
	return features.find((f) => f && typeof f === "object" && f.name === requiredFeatureName);
}
function checkSendTransaction(feature, requiredFeature) {
	const correctMessagesNumber = requiredFeature.minMessages === void 0 || requiredFeature.minMessages <= feature.maxMessages;
	const correctExtraCurrency = !requiredFeature.extraCurrencyRequired || feature.extraCurrencySupported;
	return !!(correctMessagesNumber && correctExtraCurrency);
}
/**
* Create a request version event.
*/
function createRequestVersionEvent() {
	return { type: "request-version" };
}
/**
* Create a response version event.
* @param version
*/
function createResponseVersionEvent(version) {
	return {
		type: "response-version",
		version
	};
}
/**
* Create a version info.
* @param version
*/
function createVersionInfo(version) {
	return {
		ton_connect_sdk_lib: version.ton_connect_sdk_lib,
		ton_connect_ui_lib: version.ton_connect_ui_lib
	};
}
function createConnectionInfo(version, wallet) {
	var _a$7, _b$1, _c$1, _d$1, _e$1, _f$1, _g$1, _h$1;
	const isTonProof = ((_a$7 = wallet === null || wallet === void 0 ? void 0 : wallet.connectItems) === null || _a$7 === void 0 ? void 0 : _a$7.tonProof) && "proof" in wallet.connectItems.tonProof;
	const authType = isTonProof ? "ton_proof" : "ton_addr";
	return {
		wallet_address: (_c$1 = (_b$1 = wallet === null || wallet === void 0 ? void 0 : wallet.account) === null || _b$1 === void 0 ? void 0 : _b$1.address) !== null && _c$1 !== void 0 ? _c$1 : null,
		wallet_type: (_d$1 = wallet === null || wallet === void 0 ? void 0 : wallet.device.appName) !== null && _d$1 !== void 0 ? _d$1 : null,
		wallet_version: (_e$1 = wallet === null || wallet === void 0 ? void 0 : wallet.device.appVersion) !== null && _e$1 !== void 0 ? _e$1 : null,
		auth_type: authType,
		custom_data: Object.assign({
			chain_id: (_g$1 = (_f$1 = wallet === null || wallet === void 0 ? void 0 : wallet.account) === null || _f$1 === void 0 ? void 0 : _f$1.chain) !== null && _g$1 !== void 0 ? _g$1 : null,
			provider: (_h$1 = wallet === null || wallet === void 0 ? void 0 : wallet.provider) !== null && _h$1 !== void 0 ? _h$1 : null
		}, createVersionInfo(version))
	};
}
/**
* Create a connection init event.
*/
function createConnectionStartedEvent(version) {
	return {
		type: "connection-started",
		custom_data: createVersionInfo(version)
	};
}
/**
* Create a connection completed event.
* @param version
* @param wallet
*/
function createConnectionCompletedEvent(version, wallet) {
	return Object.assign({
		type: "connection-completed",
		is_success: true
	}, createConnectionInfo(version, wallet));
}
/**
* Create a connection error event.
* @param version
* @param error_message
* @param errorCode
*/
function createConnectionErrorEvent(version, error_message, errorCode) {
	return {
		type: "connection-error",
		is_success: false,
		error_message,
		error_code: errorCode !== null && errorCode !== void 0 ? errorCode : null,
		custom_data: createVersionInfo(version)
	};
}
/**
* Create a connection restoring started event.
*/
function createConnectionRestoringStartedEvent(version) {
	return {
		type: "connection-restoring-started",
		custom_data: createVersionInfo(version)
	};
}
/**
* Create a connection restoring completed event.
* @param version
* @param wallet
*/
function createConnectionRestoringCompletedEvent(version, wallet) {
	return Object.assign({
		type: "connection-restoring-completed",
		is_success: true
	}, createConnectionInfo(version, wallet));
}
/**
* Create a connection restoring error event.
* @param version
* @param errorMessage
*/
function createConnectionRestoringErrorEvent(version, errorMessage) {
	return {
		type: "connection-restoring-error",
		is_success: false,
		error_message: errorMessage,
		custom_data: createVersionInfo(version)
	};
}
function createTransactionInfo(wallet, transaction) {
	var _a$7, _b$1, _c$1, _d$1;
	return {
		valid_until: (_a$7 = String(transaction.validUntil)) !== null && _a$7 !== void 0 ? _a$7 : null,
		from: (_d$1 = (_b$1 = transaction.from) !== null && _b$1 !== void 0 ? _b$1 : (_c$1 = wallet === null || wallet === void 0 ? void 0 : wallet.account) === null || _c$1 === void 0 ? void 0 : _c$1.address) !== null && _d$1 !== void 0 ? _d$1 : null,
		messages: transaction.messages.map((message) => {
			var _a$8, _b$2;
			return {
				address: (_a$8 = message.address) !== null && _a$8 !== void 0 ? _a$8 : null,
				amount: (_b$2 = message.amount) !== null && _b$2 !== void 0 ? _b$2 : null
			};
		})
	};
}
/**
* Create a transaction init event.
* @param version
* @param wallet
* @param transaction
*/
function createTransactionSentForSignatureEvent(version, wallet, transaction) {
	return Object.assign(Object.assign({ type: "transaction-sent-for-signature" }, createConnectionInfo(version, wallet)), createTransactionInfo(wallet, transaction));
}
/**
* Create a transaction signed event.
* @param version
* @param wallet
* @param transaction
* @param signedTransaction
*/
function createTransactionSignedEvent(version, wallet, transaction, signedTransaction) {
	return Object.assign(Object.assign({
		type: "transaction-signed",
		is_success: true,
		signed_transaction: signedTransaction.boc
	}, createConnectionInfo(version, wallet)), createTransactionInfo(wallet, transaction));
}
/**
* Create a transaction error event.
* @param version
* @param wallet
* @param transaction
* @param errorMessage
* @param errorCode
*/
function createTransactionSigningFailedEvent(version, wallet, transaction, errorMessage, errorCode) {
	return Object.assign(Object.assign({
		type: "transaction-signing-failed",
		is_success: false,
		error_message: errorMessage,
		error_code: errorCode !== null && errorCode !== void 0 ? errorCode : null
	}, createConnectionInfo(version, wallet)), createTransactionInfo(wallet, transaction));
}
/**
* Create a disconnect event.
* @param version
* @param wallet
* @param scope
* @returns
*/
function createDisconnectionEvent(version, wallet, scope) {
	return Object.assign({
		type: "disconnection",
		scope
	}, createConnectionInfo(version, wallet));
}
/**
* A concrete implementation of EventDispatcher that dispatches events to the browser window.
*/
var BrowserEventDispatcher = class {
	constructor() {
		/**
		* The window object, possibly undefined in a server environment.
		* @private
		*/
		this.window = getWindow$2();
	}
	/**
	* Dispatches an event with the given name and details to the browser window.
	* @param eventName - The name of the event to dispatch.
	* @param eventDetails - The details of the event to dispatch.
	* @returns A promise that resolves when the event has been dispatched.
	*/
	dispatchEvent(eventName, eventDetails) {
		var _a$7;
		return __awaiter(this, void 0, void 0, function* () {
			const event = new CustomEvent(eventName, { detail: eventDetails });
			(_a$7 = this.window) === null || _a$7 === void 0 || _a$7.dispatchEvent(event);
		});
	}
	/**
	* Adds an event listener to the browser window.
	* @param eventName - The name of the event to listen for.
	* @param listener - The listener to add.
	* @param options - The options for the listener.
	* @returns A function that removes the listener.
	*/
	addEventListener(eventName, listener, options) {
		var _a$7;
		return __awaiter(this, void 0, void 0, function* () {
			(_a$7 = this.window) === null || _a$7 === void 0 || _a$7.addEventListener(eventName, listener, options);
			return () => {
				var _a$8;
				return (_a$8 = this.window) === null || _a$8 === void 0 ? void 0 : _a$8.removeEventListener(eventName, listener);
			};
		});
	}
};
/**
* Tracker for TonConnect user actions, such as transaction signing, connection, etc.
*
* List of events:
*  * `connection-started`: when a user starts connecting a wallet.
*  * `connection-completed`: when a user successfully connected a wallet.
*  * `connection-error`: when a user cancels a connection or there is an error during the connection process.
*  * `connection-restoring-started`: when the dApp starts restoring a connection.
*  * `connection-restoring-completed`: when the dApp successfully restores a connection.
*  * `connection-restoring-error`: when the dApp fails to restore a connection.
*  * `disconnection`: when a user starts disconnecting a wallet.
*  * `transaction-sent-for-signature`: when a user sends a transaction for signature.
*  * `transaction-signed`: when a user successfully signs a transaction.
*  * `transaction-signing-failed`: when a user cancels transaction signing or there is an error during the signing process.
*
* If you want to track user actions, you can subscribe to the window events with prefix `ton-connect-`:
*
* @example
* window.addEventListener('ton-connect-transaction-sent-for-signature', (event) => {
*    console.log('Transaction init', event.detail);
* });
*
* @internal
*/
var TonConnectTracker = class {
	constructor(options) {
		var _a$7;
		/**
		* Event prefix for user actions.
		* @private
		*/
		this.eventPrefix = "ton-connect-";
		/**
		* TonConnect UI version.
		*/
		this.tonConnectUiVersion = null;
		this.eventDispatcher = (_a$7 = options === null || options === void 0 ? void 0 : options.eventDispatcher) !== null && _a$7 !== void 0 ? _a$7 : new BrowserEventDispatcher();
		this.tonConnectSdkVersion = options.tonConnectSdkVersion;
		this.init().catch();
	}
	/**
	* Version of the library.
	*/
	get version() {
		return createVersionInfo({
			ton_connect_sdk_lib: this.tonConnectSdkVersion,
			ton_connect_ui_lib: this.tonConnectUiVersion
		});
	}
	/**
	* Called once when the tracker is created and request version other libraries.
	*/
	init() {
		return __awaiter(this, void 0, void 0, function* () {
			try {
				yield this.setRequestVersionHandler();
				this.tonConnectUiVersion = yield this.requestTonConnectUiVersion();
			} catch (e$1) {}
		});
	}
	/**
	* Set request version handler.
	* @private
	*/
	setRequestVersionHandler() {
		return __awaiter(this, void 0, void 0, function* () {
			yield this.eventDispatcher.addEventListener("ton-connect-request-version", () => __awaiter(this, void 0, void 0, function* () {
				yield this.eventDispatcher.dispatchEvent("ton-connect-response-version", createResponseVersionEvent(this.tonConnectSdkVersion));
			}));
		});
	}
	/**
	* Request TonConnect UI version.
	* @private
	*/
	requestTonConnectUiVersion() {
		return __awaiter(this, void 0, void 0, function* () {
			return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
				try {
					yield this.eventDispatcher.addEventListener("ton-connect-ui-response-version", (event) => {
						resolve(event.detail.version);
					}, { once: true });
					yield this.eventDispatcher.dispatchEvent("ton-connect-ui-request-version", createRequestVersionEvent());
				} catch (e$1) {
					reject(e$1);
				}
			}));
		});
	}
	/**
	* Emit user action event to the window.
	* @param eventDetails
	* @private
	*/
	dispatchUserActionEvent(eventDetails) {
		try {
			this.eventDispatcher.dispatchEvent(`${this.eventPrefix}${eventDetails.type}`, eventDetails).catch();
		} catch (e$1) {}
	}
	/**
	* Track connection init event.
	* @param args
	*/
	trackConnectionStarted(...args) {
		try {
			const event = createConnectionStartedEvent(this.version, ...args);
			this.dispatchUserActionEvent(event);
		} catch (e$1) {}
	}
	/**
	* Track connection success event.
	* @param args
	*/
	trackConnectionCompleted(...args) {
		try {
			const event = createConnectionCompletedEvent(this.version, ...args);
			this.dispatchUserActionEvent(event);
		} catch (e$1) {}
	}
	/**
	* Track connection error event.
	* @param args
	*/
	trackConnectionError(...args) {
		try {
			const event = createConnectionErrorEvent(this.version, ...args);
			this.dispatchUserActionEvent(event);
		} catch (e$1) {}
	}
	/**
	* Track connection restoring init event.
	* @param args
	*/
	trackConnectionRestoringStarted(...args) {
		try {
			const event = createConnectionRestoringStartedEvent(this.version, ...args);
			this.dispatchUserActionEvent(event);
		} catch (e$1) {}
	}
	/**
	* Track connection restoring success event.
	* @param args
	*/
	trackConnectionRestoringCompleted(...args) {
		try {
			const event = createConnectionRestoringCompletedEvent(this.version, ...args);
			this.dispatchUserActionEvent(event);
		} catch (e$1) {}
	}
	/**
	* Track connection restoring error event.
	* @param args
	*/
	trackConnectionRestoringError(...args) {
		try {
			const event = createConnectionRestoringErrorEvent(this.version, ...args);
			this.dispatchUserActionEvent(event);
		} catch (e$1) {}
	}
	/**
	* Track disconnect event.
	* @param args
	*/
	trackDisconnection(...args) {
		try {
			const event = createDisconnectionEvent(this.version, ...args);
			this.dispatchUserActionEvent(event);
		} catch (e$1) {}
	}
	/**
	* Track transaction init event.
	* @param args
	*/
	trackTransactionSentForSignature(...args) {
		try {
			const event = createTransactionSentForSignatureEvent(this.version, ...args);
			this.dispatchUserActionEvent(event);
		} catch (e$1) {}
	}
	/**
	* Track transaction signed event.
	* @param args
	*/
	trackTransactionSigned(...args) {
		try {
			const event = createTransactionSignedEvent(this.version, ...args);
			this.dispatchUserActionEvent(event);
		} catch (e$1) {}
	}
	/**
	* Track transaction error event.
	* @param args
	*/
	trackTransactionSigningFailed(...args) {
		try {
			const event = createTransactionSigningFailedEvent(this.version, ...args);
			this.dispatchUserActionEvent(event);
		} catch (e$1) {}
	}
};
const tonConnectSdkVersion = "3.1.0";
var TonConnect = class {
	constructor(options) {
		this.walletsList = new WalletsListManager();
		this._wallet = null;
		this.provider = null;
		this.statusChangeSubscriptions = [];
		this.statusChangeErrorSubscriptions = [];
		this.dappSettings = {
			manifestUrl: (options === null || options === void 0 ? void 0 : options.manifestUrl) || getWebPageManifest(),
			storage: (options === null || options === void 0 ? void 0 : options.storage) || new DefaultStorage()
		};
		this.walletsRequiredFeatures = options === null || options === void 0 ? void 0 : options.walletsRequiredFeatures;
		this.walletsList = new WalletsListManager({
			walletsListSource: options === null || options === void 0 ? void 0 : options.walletsListSource,
			cacheTTLMs: options === null || options === void 0 ? void 0 : options.walletsListCacheTTLMs
		});
		this.tracker = new TonConnectTracker({
			eventDispatcher: options === null || options === void 0 ? void 0 : options.eventDispatcher,
			tonConnectSdkVersion
		});
		if (!this.dappSettings.manifestUrl) throw new DappMetadataError("Dapp tonconnect-manifest.json must be specified if window.location.origin is undefined. See more https://github.com/ton-connect/docs/blob/main/requests-responses.md#app-manifest");
		this.bridgeConnectionStorage = new BridgeConnectionStorage(this.dappSettings.storage);
		if (!(options === null || options === void 0 ? void 0 : options.disableAutoPauseConnection)) this.addWindowFocusAndBlurSubscriptions();
	}
	/**
	* Returns available wallets list.
	*/
	static getWallets() {
		return this.walletsList.getWallets();
	}
	/**
	* Shows if the wallet is connected right now.
	*/
	get connected() {
		return this._wallet !== null;
	}
	/**
	* Current connected account or null if no account is connected.
	*/
	get account() {
		var _a$7;
		return ((_a$7 = this._wallet) === null || _a$7 === void 0 ? void 0 : _a$7.account) || null;
	}
	/**
	* Current connected wallet or null if no account is connected.
	*/
	get wallet() {
		return this._wallet;
	}
	set wallet(value) {
		this._wallet = value;
		this.statusChangeSubscriptions.forEach((callback) => callback(this._wallet));
	}
	/**
	* Returns available wallets list.
	*/
	getWallets() {
		return this.walletsList.getWallets();
	}
	/**
	* Allows to subscribe to connection status changes and handle connection errors.
	* @param callback will be called after connections status changes with actual wallet or null.
	* @param errorsHandler (optional) will be called with some instance of TonConnectError when connect error is received.
	* @returns unsubscribe callback.
	*/
	onStatusChange(callback, errorsHandler) {
		this.statusChangeSubscriptions.push(callback);
		if (errorsHandler) this.statusChangeErrorSubscriptions.push(errorsHandler);
		return () => {
			this.statusChangeSubscriptions = this.statusChangeSubscriptions.filter((item) => item !== callback);
			if (errorsHandler) this.statusChangeErrorSubscriptions = this.statusChangeErrorSubscriptions.filter((item) => item !== errorsHandler);
		};
	}
	connect(wallet, requestOrOptions) {
		var _a$7, _b$1;
		const options = {};
		if (typeof requestOrOptions === "object" && "tonProof" in requestOrOptions) options.request = requestOrOptions;
		if (typeof requestOrOptions === "object" && ("openingDeadlineMS" in requestOrOptions || "signal" in requestOrOptions || "request" in requestOrOptions)) {
			options.request = requestOrOptions === null || requestOrOptions === void 0 ? void 0 : requestOrOptions.request;
			options.openingDeadlineMS = requestOrOptions === null || requestOrOptions === void 0 ? void 0 : requestOrOptions.openingDeadlineMS;
			options.signal = requestOrOptions === null || requestOrOptions === void 0 ? void 0 : requestOrOptions.signal;
		}
		if (this.connected) throw new WalletAlreadyConnectedError();
		const abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);
		(_a$7 = this.abortController) === null || _a$7 === void 0 || _a$7.abort();
		this.abortController = abortController;
		if (abortController.signal.aborted) throw new TonConnectError("Connection was aborted");
		(_b$1 = this.provider) === null || _b$1 === void 0 || _b$1.closeConnection();
		this.provider = this.createProvider(wallet);
		abortController.signal.addEventListener("abort", () => {
			var _a$8;
			(_a$8 = this.provider) === null || _a$8 === void 0 || _a$8.closeConnection();
			this.provider = null;
		});
		this.tracker.trackConnectionStarted();
		return this.provider.connect(this.createConnectRequest(options === null || options === void 0 ? void 0 : options.request), {
			openingDeadlineMS: options === null || options === void 0 ? void 0 : options.openingDeadlineMS,
			signal: abortController.signal
		});
	}
	/**
	* Try to restore existing session and reconnect to the corresponding wallet. Call it immediately when your app is loaded.
	*/
	restoreConnection(options) {
		var _a$7, _b$1;
		return __awaiter(this, void 0, void 0, function* () {
			this.tracker.trackConnectionRestoringStarted();
			const abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);
			(_a$7 = this.abortController) === null || _a$7 === void 0 || _a$7.abort();
			this.abortController = abortController;
			if (abortController.signal.aborted) {
				this.tracker.trackConnectionRestoringError("Connection restoring was aborted");
				return;
			}
			const [bridgeConnectionType, embeddedWallet] = yield Promise.all([this.bridgeConnectionStorage.storedConnectionType(), this.walletsList.getEmbeddedWallet()]);
			if (abortController.signal.aborted) {
				this.tracker.trackConnectionRestoringError("Connection restoring was aborted");
				return;
			}
			let provider = null;
			try {
				switch (bridgeConnectionType) {
					case "http":
						provider = yield BridgeProvider.fromStorage(this.dappSettings.storage);
						break;
					case "injected":
						provider = yield InjectedProvider.fromStorage(this.dappSettings.storage);
						break;
					default: if (embeddedWallet) provider = this.createProvider(embeddedWallet);
					else return;
				}
			} catch (_c$1) {
				this.tracker.trackConnectionRestoringError("Provider is not restored");
				yield this.bridgeConnectionStorage.removeConnection();
				provider === null || provider === void 0 || provider.closeConnection();
				provider = null;
				return;
			}
			if (abortController.signal.aborted) {
				provider === null || provider === void 0 || provider.closeConnection();
				this.tracker.trackConnectionRestoringError("Connection restoring was aborted");
				return;
			}
			if (!provider) {
				logError$1("Provider is not restored");
				this.tracker.trackConnectionRestoringError("Provider is not restored");
				return;
			}
			(_b$1 = this.provider) === null || _b$1 === void 0 || _b$1.closeConnection();
			this.provider = provider;
			provider.listen(this.walletEventsListener.bind(this));
			const onAbortRestore = () => {
				this.tracker.trackConnectionRestoringError("Connection restoring was aborted");
				provider === null || provider === void 0 || provider.closeConnection();
				provider = null;
			};
			abortController.signal.addEventListener("abort", onAbortRestore);
			const restoreConnectionTask = callForSuccess((_options) => __awaiter(this, void 0, void 0, function* () {
				yield provider === null || provider === void 0 ? void 0 : provider.restoreConnection({
					openingDeadlineMS: options === null || options === void 0 ? void 0 : options.openingDeadlineMS,
					signal: _options.signal
				});
				abortController.signal.removeEventListener("abort", onAbortRestore);
				if (this.connected) this.tracker.trackConnectionRestoringCompleted(this.wallet);
				else this.tracker.trackConnectionRestoringError("Connection restoring failed");
			}), {
				attempts: Number.MAX_SAFE_INTEGER,
				delayMs: 2e3,
				signal: options === null || options === void 0 ? void 0 : options.signal
			});
			const restoreConnectionTimeout = new Promise((resolve) => setTimeout(() => resolve(), 12e3));
			return Promise.race([restoreConnectionTask, restoreConnectionTimeout]);
		});
	}
	sendTransaction(transaction, optionsOrOnRequestSent) {
		return __awaiter(this, void 0, void 0, function* () {
			const options = {};
			if (typeof optionsOrOnRequestSent === "function") options.onRequestSent = optionsOrOnRequestSent;
			else {
				options.onRequestSent = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.onRequestSent;
				options.signal = optionsOrOnRequestSent === null || optionsOrOnRequestSent === void 0 ? void 0 : optionsOrOnRequestSent.signal;
			}
			const abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);
			if (abortController.signal.aborted) throw new TonConnectError("Transaction sending was aborted");
			this.checkConnection();
			const requiredMessagesNumber = transaction.messages.length;
			const requireExtraCurrencies = transaction.messages.some((m) => m.extraCurrency && Object.keys(m.extraCurrency).length > 0);
			checkSendTransactionSupport(this.wallet.device.features, {
				requiredMessagesNumber,
				requireExtraCurrencies
			});
			this.tracker.trackTransactionSentForSignature(this.wallet, transaction);
			const { validUntil, messages } = transaction, tx = __rest(transaction, ["validUntil", "messages"]);
			const from$1 = transaction.from || this.account.address;
			const network = transaction.network || this.account.chain;
			const response = yield this.provider.sendRequest(sendTransactionParser.convertToRpcRequest(Object.assign(Object.assign({}, tx), {
				from: from$1,
				network,
				valid_until: validUntil,
				messages: messages.map((_a$7) => {
					var { extraCurrency } = _a$7, msg = __rest(_a$7, ["extraCurrency"]);
					return Object.assign(Object.assign({}, msg), { extra_currency: extraCurrency });
				})
			})), {
				onRequestSent: options.onRequestSent,
				signal: abortController.signal
			});
			if (sendTransactionParser.isError(response)) {
				this.tracker.trackTransactionSigningFailed(this.wallet, transaction, response.error.message, response.error.code);
				return sendTransactionParser.parseAndThrowError(response);
			}
			const result = sendTransactionParser.convertFromRpcResponse(response);
			this.tracker.trackTransactionSigned(this.wallet, transaction, result);
			return result;
		});
	}
	/**
	* Disconnect form thw connected wallet and drop current session.
	*/
	disconnect(options) {
		var _a$7;
		return __awaiter(this, void 0, void 0, function* () {
			if (!this.connected) throw new WalletNotConnectedError();
			const abortController = createAbortController(options === null || options === void 0 ? void 0 : options.signal);
			const prevAbortController = this.abortController;
			this.abortController = abortController;
			if (abortController.signal.aborted) throw new TonConnectError("Disconnect was aborted");
			this.onWalletDisconnected("dapp");
			yield (_a$7 = this.provider) === null || _a$7 === void 0 ? void 0 : _a$7.disconnect({ signal: abortController.signal });
			prevAbortController === null || prevAbortController === void 0 || prevAbortController.abort();
		});
	}
	/**
	* Pause bridge HTTP connection. Might be helpful, if you want to pause connections while browser tab is unfocused,
	* or if you use SDK with NodeJS and want to save server resources.
	*/
	pauseConnection() {
		var _a$7;
		if (((_a$7 = this.provider) === null || _a$7 === void 0 ? void 0 : _a$7.type) !== "http") return;
		this.provider.pause();
	}
	/**
	* Unpause bridge HTTP connection if it is paused.
	*/
	unPauseConnection() {
		var _a$7;
		if (((_a$7 = this.provider) === null || _a$7 === void 0 ? void 0 : _a$7.type) !== "http") return Promise.resolve();
		return this.provider.unPause();
	}
	addWindowFocusAndBlurSubscriptions() {
		const document$1 = getDocument();
		if (!document$1) return;
		try {
			document$1.addEventListener("visibilitychange", () => {
				if (document$1.hidden) this.pauseConnection();
				else this.unPauseConnection().catch();
			});
		} catch (e$1) {
			logError$1("Cannot subscribe to the document.visibilitychange: ", e$1);
		}
	}
	createProvider(wallet) {
		let provider;
		if (!Array.isArray(wallet) && isWalletConnectionSourceJS(wallet)) provider = new InjectedProvider(this.dappSettings.storage, wallet.jsBridgeKey);
		else provider = new BridgeProvider(this.dappSettings.storage, wallet);
		provider.listen(this.walletEventsListener.bind(this));
		return provider;
	}
	walletEventsListener(e$1) {
		switch (e$1.event) {
			case "connect":
				this.onWalletConnected(e$1.payload);
				break;
			case "connect_error":
				this.tracker.trackConnectionError(e$1.payload.message, e$1.payload.code);
				const walletError = connectErrorsParser.parseError(e$1.payload);
				this.onWalletConnectError(walletError);
				break;
			case "disconnect": this.onWalletDisconnected("wallet");
		}
	}
	onWalletConnected(connectEvent) {
		var _a$7;
		const tonAccountItem = connectEvent.items.find((item) => item.name === "ton_addr");
		const tonProofItem = connectEvent.items.find((item) => item.name === "ton_proof");
		if (!tonAccountItem) throw new TonConnectError("ton_addr connection item was not found");
		const hasRequiredFeatures = checkRequiredWalletFeatures(connectEvent.device.features, this.walletsRequiredFeatures);
		if (!hasRequiredFeatures) {
			(_a$7 = this.provider) === null || _a$7 === void 0 || _a$7.disconnect();
			this.onWalletConnectError(new WalletMissingRequiredFeaturesError("Wallet does not support required features", { cause: { connectEvent } }));
			return;
		}
		const wallet = {
			device: connectEvent.device,
			provider: this.provider.type,
			account: {
				address: tonAccountItem.address,
				chain: tonAccountItem.network,
				walletStateInit: tonAccountItem.walletStateInit,
				publicKey: tonAccountItem.publicKey
			}
		};
		if (tonProofItem) wallet.connectItems = { tonProof: tonProofItem };
		this.wallet = wallet;
		this.tracker.trackConnectionCompleted(wallet);
	}
	onWalletConnectError(error) {
		this.statusChangeErrorSubscriptions.forEach((errorsHandler) => errorsHandler(error));
		logDebug$1(error);
		if (error instanceof ManifestNotFoundError || error instanceof ManifestContentErrorError) {
			logError$1(error);
			throw error;
		}
	}
	onWalletDisconnected(scope) {
		this.tracker.trackDisconnection(this.wallet, scope);
		this.wallet = null;
	}
	checkConnection() {
		if (!this.connected) throw new WalletNotConnectedError();
	}
	createConnectRequest(request) {
		const items = [{ name: "ton_addr" }];
		if (request === null || request === void 0 ? void 0 : request.tonProof) items.push({
			name: "ton_proof",
			payload: request.tonProof
		});
		return {
			manifestUrl: this.dappSettings.manifestUrl,
			items
		};
	}
};
TonConnect.walletsList = new WalletsListManager();
/**
* Check if specified wallet is injected and available to use with the app.
* @param walletJSKey target wallet's js bridge key.
*/
TonConnect.isWalletInjected = (walletJSKey) => InjectedProvider.isWalletInjected(walletJSKey);
/**
* Check if the app is opened inside specified wallet's browser.
* @param walletJSKey target wallet's js bridge key.
*/
TonConnect.isInsideWalletBrowser = (walletJSKey) => InjectedProvider.isInsideWalletBrowser(walletJSKey);
const noBounceableTag = 81;
const testOnlyTag = 128;
/**
* Converts raw TON address to no-bounceable user-friendly format. [See details]{@link https://ton.org/docs/learn/overviews/addresses#user-friendly-address}
* @param hexAddress raw TON address formatted as "0:<hex string without 0x>".
* @param [testOnly=false] convert address to test-only form. [See details]{@link https://ton.org/docs/learn/overviews/addresses#user-friendly-address}
*/
function toUserFriendlyAddress(hexAddress, testOnly = false) {
	const { wc, hex } = parseHexAddress(hexAddress);
	let tag = noBounceableTag;
	if (testOnly) tag |= testOnlyTag;
	const addr = new Int8Array(34);
	addr[0] = tag;
	addr[1] = wc;
	addr.set(hex, 2);
	const addressWithChecksum = new Uint8Array(36);
	addressWithChecksum.set(addr);
	addressWithChecksum.set(crc16$2(addr), 34);
	let addressBase64 = Base64.encode(addressWithChecksum);
	return addressBase64.replace(/\+/g, "-").replace(/\//g, "_");
}
function parseHexAddress(hexAddress) {
	if (!hexAddress.includes(":")) throw new WrongAddressError(`Wrong address ${hexAddress}. Address must include ":".`);
	const parts = hexAddress.split(":");
	if (parts.length !== 2) throw new WrongAddressError(`Wrong address ${hexAddress}. Address must include ":" only once.`);
	const wc = parseInt(parts[0]);
	if (wc !== 0 && wc !== -1) throw new WrongAddressError(`Wrong address ${hexAddress}. WC must be eq 0 or -1, but ${wc} received.`);
	const hex = parts[1];
	if ((hex === null || hex === void 0 ? void 0 : hex.length) !== 64) throw new WrongAddressError(`Wrong address ${hexAddress}. Hex part must be 64bytes length, but ${hex === null || hex === void 0 ? void 0 : hex.length} received.`);
	return {
		wc,
		hex: hexToBytes(hex)
	};
}
function crc16$2(data) {
	const poly = 4129;
	let reg = 0;
	const message = new Uint8Array(data.length + 2);
	message.set(data);
	for (let byte of message) {
		let mask = 128;
		while (mask > 0) {
			reg <<= 1;
			if (byte & mask) reg += 1;
			mask >>= 1;
			if (reg > 65535) {
				reg &= 65535;
				reg ^= poly;
			}
		}
	}
	return new Uint8Array([Math.floor(reg / 256), reg % 256]);
}
const toByteMap = {};
for (let ord = 0; ord <= 255; ord++) {
	let s$1 = ord.toString(16);
	if (s$1.length < 2) s$1 = "0" + s$1;
	toByteMap[s$1] = ord;
}
function hexToBytes(hex) {
	hex = hex.toLowerCase();
	const length2 = hex.length;
	if (length2 % 2 !== 0) throw new ParseHexError("Hex string must have length a multiple of 2: " + hex);
	const length = length2 / 2;
	const result = new Uint8Array(length);
	for (let i$2 = 0; i$2 < length; i$2++) {
		const doubled = i$2 * 2;
		const hexSubstring = hex.substring(doubled, doubled + 2);
		if (!toByteMap.hasOwnProperty(hexSubstring)) throw new ParseHexError("Invalid hex character: " + hexSubstring);
		result[i$2] = toByteMap[hexSubstring];
	}
	return result;
}

//#endregion
//#region ../../node_modules/.pnpm/ua-parser-js@1.0.40/node_modules/ua-parser-js/src/ua-parser.js
var require_ua_parser = __commonJS({ "../../node_modules/.pnpm/ua-parser-js@1.0.40/node_modules/ua-parser-js/src/ua-parser.js"(exports, module) {
	(function(window$1, undefined$1) {
		"use strict";
		var LIBVERSION = "1.0.40", EMPTY = "", UNKNOWN = "?", FUNC_TYPE = "function", UNDEF_TYPE = "undefined", OBJ_TYPE = "object", STR_TYPE = "string", MAJOR = "major", MODEL = "model", NAME = "name", TYPE = "type", VENDOR = "vendor", VERSION = "version", ARCHITECTURE = "architecture", CONSOLE = "console", MOBILE = "mobile", TABLET = "tablet", SMARTTV = "smarttv", WEARABLE = "wearable", EMBEDDED = "embedded", UA_MAX_LENGTH = 500;
		var AMAZON = "Amazon", APPLE = "Apple", ASUS = "ASUS", BLACKBERRY = "BlackBerry", BROWSER = "Browser", CHROME = "Chrome", EDGE = "Edge", FIREFOX = "Firefox", GOOGLE = "Google", HUAWEI = "Huawei", LG = "LG", MICROSOFT = "Microsoft", MOTOROLA = "Motorola", OPERA = "Opera", SAMSUNG = "Samsung", SHARP = "Sharp", SONY = "Sony", XIAOMI = "Xiaomi", ZEBRA = "Zebra", FACEBOOK = "Facebook", CHROMIUM_OS = "Chromium OS", MAC_OS = "Mac OS", SUFFIX_BROWSER = " Browser";
		var extend = function(regexes$1, extensions) {
			var mergedRegexes = {};
			for (var i$2 in regexes$1) if (extensions[i$2] && extensions[i$2].length % 2 === 0) mergedRegexes[i$2] = extensions[i$2].concat(regexes$1[i$2]);
			else mergedRegexes[i$2] = regexes$1[i$2];
			return mergedRegexes;
		}, enumerize = function(arr) {
			var enums = {};
			for (var i$2 = 0; i$2 < arr.length; i$2++) enums[arr[i$2].toUpperCase()] = arr[i$2];
			return enums;
		}, has = function(str1, str2) {
			return typeof str1 === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;
		}, lowerize = function(str) {
			return str.toLowerCase();
		}, majorize = function(version) {
			return typeof version === STR_TYPE ? version.replace(/[^\d\.]/g, EMPTY).split(".")[0] : undefined$1;
		}, trim = function(str, len$1) {
			if (typeof str === STR_TYPE) {
				str = str.replace(/^\s\s*/, EMPTY);
				return typeof len$1 === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);
			}
		};
		var rgxMapper = function(ua, arrays) {
			var i$2 = 0, j, k, p$1, q, matches, match;
			while (i$2 < arrays.length && !matches) {
				var regex = arrays[i$2], props = arrays[i$2 + 1];
				j = k = 0;
				while (j < regex.length && !matches) {
					if (!regex[j]) break;
					matches = regex[j++].exec(ua);
					if (!!matches) for (p$1 = 0; p$1 < props.length; p$1++) {
						match = matches[++k];
						q = props[p$1];
						if (typeof q === OBJ_TYPE && q.length > 0) {
							if (q.length === 2) if (typeof q[1] == FUNC_TYPE) this[q[0]] = q[1].call(this, match);
							else this[q[0]] = q[1];
							else if (q.length === 3) if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined$1;
							else this[q[0]] = match ? match.replace(q[1], q[2]) : undefined$1;
							else if (q.length === 4) this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined$1;
						} else this[q] = match ? match : undefined$1;
					}
				}
				i$2 += 2;
			}
		}, strMapper = function(str, map) {
			for (var i$2 in map) if (typeof map[i$2] === OBJ_TYPE && map[i$2].length > 0) {
				for (var j = 0; j < map[i$2].length; j++) if (has(map[i$2][j], str)) return i$2 === UNKNOWN ? undefined$1 : i$2;
			} else if (has(map[i$2], str)) return i$2 === UNKNOWN ? undefined$1 : i$2;
			return map.hasOwnProperty("*") ? map["*"] : str;
		};
		var oldSafariMap = {
			"1.0": "/8",
			"1.2": "/1",
			"1.3": "/3",
			"2.0": "/412",
			"2.0.2": "/416",
			"2.0.3": "/417",
			"2.0.4": "/419",
			"?": "/"
		}, windowsVersionMap = {
			"ME": "4.90",
			"NT 3.11": "NT3.51",
			"NT 4.0": "NT4.0",
			"2000": "NT 5.0",
			"XP": ["NT 5.1", "NT 5.2"],
			"Vista": "NT 6.0",
			"7": "NT 6.1",
			"8": "NT 6.2",
			"8.1": "NT 6.3",
			"10": ["NT 6.4", "NT 10.0"],
			"RT": "ARM"
		};
		var regexes = {
			browser: [
				[/\b(?:crmo|crios)\/([\w\.]+)/i],
				[VERSION, [NAME, "Chrome"]],
				[/edg(?:e|ios|a)?\/([\w\.]+)/i],
				[VERSION, [NAME, "Edge"]],
				[
					/(opera mini)\/([-\w\.]+)/i,
					/(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,
					/(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i
				],
				[NAME, VERSION],
				[/opios[\/ ]+([\w\.]+)/i],
				[VERSION, [NAME, OPERA + " Mini"]],
				[/\bop(?:rg)?x\/([\w\.]+)/i],
				[VERSION, [NAME, OPERA + " GX"]],
				[/\bopr\/([\w\.]+)/i],
				[VERSION, [NAME, OPERA]],
				[/\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\/ ]?([\w\.]+)/i],
				[VERSION, [NAME, "Baidu"]],
				[/\b(?:mxbrowser|mxios|myie2)\/?([-\w\.]*)\b/i],
				[VERSION, [NAME, "Maxthon"]],
				[
					/(kindle)\/([\w\.]+)/i,
					/(lunascape|maxthon|netfront|jasmine|blazer|sleipnir)[\/ ]?([\w\.]*)/i,
					/(avant|iemobile|slim(?:browser|boat|jet))[\/ ]?([\d\.]*)/i,
					/(?:ms|\()(ie) ([\w\.]+)/i,
					/(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|duckduckgo|klar|helio|(?=comodo_)?dragon)\/([-\w\.]+)/i,
					/(heytap|ovi|115)browser\/([\d\.]+)/i,
					/(weibo)__([\d\.]+)/i
				],
				[NAME, VERSION],
				[/quark(?:pc)?\/([-\w\.]+)/i],
				[VERSION, [NAME, "Quark"]],
				[/\bddg\/([\w\.]+)/i],
				[VERSION, [NAME, "DuckDuckGo"]],
				[/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i],
				[VERSION, [NAME, "UC" + BROWSER]],
				[
					/microm.+\bqbcore\/([\w\.]+)/i,
					/\bqbcore\/([\w\.]+).+microm/i,
					/micromessenger\/([\w\.]+)/i
				],
				[VERSION, [NAME, "WeChat"]],
				[/konqueror\/([\w\.]+)/i],
				[VERSION, [NAME, "Konqueror"]],
				[/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i],
				[VERSION, [NAME, "IE"]],
				[/ya(?:search)?browser\/([\w\.]+)/i],
				[VERSION, [NAME, "Yandex"]],
				[/slbrowser\/([\w\.]+)/i],
				[VERSION, [NAME, "Smart Lenovo " + BROWSER]],
				[/(avast|avg)\/([\w\.]+)/i],
				[[
					NAME,
					/(.+)/,
					"$1 Secure " + BROWSER
				], VERSION],
				[/\bfocus\/([\w\.]+)/i],
				[VERSION, [NAME, FIREFOX + " Focus"]],
				[/\bopt\/([\w\.]+)/i],
				[VERSION, [NAME, OPERA + " Touch"]],
				[/coc_coc\w+\/([\w\.]+)/i],
				[VERSION, [NAME, "Coc Coc"]],
				[/dolfin\/([\w\.]+)/i],
				[VERSION, [NAME, "Dolphin"]],
				[/coast\/([\w\.]+)/i],
				[VERSION, [NAME, OPERA + " Coast"]],
				[/miuibrowser\/([\w\.]+)/i],
				[VERSION, [NAME, "MIUI" + SUFFIX_BROWSER]],
				[/fxios\/([\w\.-]+)/i],
				[VERSION, [NAME, FIREFOX]],
				[/\bqihoobrowser\/?([\w\.]*)/i],
				[VERSION, [NAME, "360"]],
				[/\b(qq)\/([\w\.]+)/i],
				[[
					NAME,
					/(.+)/,
					"$1Browser"
				], VERSION],
				[/(oculus|sailfish|huawei|vivo|pico)browser\/([\w\.]+)/i],
				[[
					NAME,
					/(.+)/,
					"$1" + SUFFIX_BROWSER
				], VERSION],
				[/samsungbrowser\/([\w\.]+)/i],
				[VERSION, [NAME, SAMSUNG + " Internet"]],
				[/metasr[\/ ]?([\d\.]+)/i],
				[VERSION, [NAME, "Sogou Explorer"]],
				[/(sogou)mo\w+\/([\d\.]+)/i],
				[[NAME, "Sogou Mobile"], VERSION],
				[
					/(electron)\/([\w\.]+) safari/i,
					/(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,
					/m?(qqbrowser|2345(?=browser|chrome|explorer))\w*[\/ ]?v?([\w\.]+)/i
				],
				[NAME, VERSION],
				[/(lbbrowser|rekonq)/i, /\[(linkedin)app\]/i],
				[NAME],
				[/ome\/([\w\.]+) \w* ?(iron) saf/i, /ome\/([\w\.]+).+qihu (360)[es]e/i],
				[VERSION, NAME],
				[/((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i],
				[[NAME, FACEBOOK], VERSION],
				[
					/(Klarna)\/([\w\.]+)/i,
					/(kakao(?:talk|story))[\/ ]([\w\.]+)/i,
					/(naver)\(.*?(\d+\.[\w\.]+).*\)/i,
					/safari (line)\/([\w\.]+)/i,
					/\b(line)\/([\w\.]+)\/iab/i,
					/(alipay)client\/([\w\.]+)/i,
					/(twitter)(?:and| f.+e\/([\w\.]+))/i,
					/(chromium|instagram|snapchat)[\/ ]([-\w\.]+)/i
				],
				[NAME, VERSION],
				[/\bgsa\/([\w\.]+) .*safari\//i],
				[VERSION, [NAME, "GSA"]],
				[/musical_ly(?:.+app_?version\/|_)([\w\.]+)/i],
				[VERSION, [NAME, "TikTok"]],
				[/headlesschrome(?:\/([\w\.]+)| )/i],
				[VERSION, [NAME, CHROME + " Headless"]],
				[/ wv\).+(chrome)\/([\w\.]+)/i],
				[[NAME, CHROME + " WebView"], VERSION],
				[/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i],
				[VERSION, [NAME, "Android " + BROWSER]],
				[/(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i],
				[NAME, VERSION],
				[/version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i],
				[VERSION, [NAME, "Mobile Safari"]],
				[/version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i],
				[VERSION, NAME],
				[/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i],
				[NAME, [
					VERSION,
					strMapper,
					oldSafariMap
				]],
				[/(webkit|khtml)\/([\w\.]+)/i],
				[NAME, VERSION],
				[/(navigator|netscape\d?)\/([-\w\.]+)/i],
				[[NAME, "Netscape"], VERSION],
				[/(wolvic|librewolf)\/([\w\.]+)/i],
				[NAME, VERSION],
				[/mobile vr; rv:([\w\.]+)\).+firefox/i],
				[VERSION, [NAME, FIREFOX + " Reality"]],
				[
					/ekiohf.+(flow)\/([\w\.]+)/i,
					/(swiftfox)/i,
					/(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror)[\/ ]?([\w\.\+]+)/i,
					/(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
					/(firefox)\/([\w\.]+)/i,
					/(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,
					/(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
					/(links) \(([\w\.]+)/i
				],
				[NAME, [
					VERSION,
					/_/g,
					"."
				]],
				[/(cobalt)\/([\w\.]+)/i],
				[NAME, [
					VERSION,
					/master.|lts./,
					""
				]]
			],
			cpu: [
				[/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i],
				[[ARCHITECTURE, "amd64"]],
				[/(ia32(?=;))/i],
				[[ARCHITECTURE, lowerize]],
				[/((?:i[346]|x)86)[;\)]/i],
				[[ARCHITECTURE, "ia32"]],
				[/\b(aarch64|arm(v?8e?l?|_?64))\b/i],
				[[ARCHITECTURE, "arm64"]],
				[/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i],
				[[ARCHITECTURE, "armhf"]],
				[/windows (ce|mobile); ppc;/i],
				[[ARCHITECTURE, "arm"]],
				[/((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i],
				[[
					ARCHITECTURE,
					/ower/,
					EMPTY,
					lowerize
				]],
				[/(sun4\w)[;\)]/i],
				[[ARCHITECTURE, "sparc"]],
				[/((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i],
				[[ARCHITECTURE, lowerize]]
			],
			device: [
				[/\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i],
				[
					MODEL,
					[VENDOR, SAMSUNG],
					[TYPE, TABLET]
				],
				[
					/\b((?:s[cgp]h|gt|sm)-(?![lr])\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,
					/samsung[- ]((?!sm-[lr])[-\w]+)/i,
					/sec-(sgh\w+)/i
				],
				[
					MODEL,
					[VENDOR, SAMSUNG],
					[TYPE, MOBILE]
				],
				[/(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i],
				[
					MODEL,
					[VENDOR, APPLE],
					[TYPE, MOBILE]
				],
				[
					/\((ipad);[-\w\),; ]+apple/i,
					/applecoremedia\/[\w\.]+ \((ipad)/i,
					/\b(ipad)\d\d?,\d\d?[;\]].+ios/i
				],
				[
					MODEL,
					[VENDOR, APPLE],
					[TYPE, TABLET]
				],
				[/(macintosh);/i],
				[MODEL, [VENDOR, APPLE]],
				[/\b(sh-?[altvz]?\d\d[a-ekm]?)/i],
				[
					MODEL,
					[VENDOR, SHARP],
					[TYPE, MOBILE]
				],
				[/(?:honor)([-\w ]+)[;\)]/i],
				[
					MODEL,
					[VENDOR, "Honor"],
					[TYPE, MOBILE]
				],
				[/\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i],
				[
					MODEL,
					[VENDOR, HUAWEI],
					[TYPE, TABLET]
				],
				[/(?:huawei)([-\w ]+)[;\)]/i, /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i],
				[
					MODEL,
					[VENDOR, HUAWEI],
					[TYPE, MOBILE]
				],
				[
					/\b(poco[\w ]+|m2\d{3}j\d\d[a-z]{2})(?: bui|\))/i,
					/\b; (\w+) build\/hm\1/i,
					/\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,
					/\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,
					/oid[^\)]+; (m?[12][0-389][01]\w{3,6}[c-y])( bui|; wv|\))/i,
					/\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite|pro)?)(?: bui|\))/i
				],
				[
					[
						MODEL,
						/_/g,
						" "
					],
					[VENDOR, XIAOMI],
					[TYPE, MOBILE]
				],
				[/oid[^\)]+; (2\d{4}(283|rpbf)[cgl])( bui|\))/i, /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i],
				[
					[
						MODEL,
						/_/g,
						" "
					],
					[VENDOR, XIAOMI],
					[TYPE, TABLET]
				],
				[/; (\w+) bui.+ oppo/i, /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i],
				[
					MODEL,
					[VENDOR, "OPPO"],
					[TYPE, MOBILE]
				],
				[/\b(opd2\d{3}a?) bui/i],
				[
					MODEL,
					[VENDOR, "OPPO"],
					[TYPE, TABLET]
				],
				[/vivo (\w+)(?: bui|\))/i, /\b(v[12]\d{3}\w?[at])(?: bui|;)/i],
				[
					MODEL,
					[VENDOR, "Vivo"],
					[TYPE, MOBILE]
				],
				[/\b(rmx[1-3]\d{3})(?: bui|;|\))/i],
				[
					MODEL,
					[VENDOR, "Realme"],
					[TYPE, MOBILE]
				],
				[
					/\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
					/\bmot(?:orola)?[- ](\w*)/i,
					/((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i
				],
				[
					MODEL,
					[VENDOR, MOTOROLA],
					[TYPE, MOBILE]
				],
				[/\b(mz60\d|xoom[2 ]{0,2}) build\//i],
				[
					MODEL,
					[VENDOR, MOTOROLA],
					[TYPE, TABLET]
				],
				[/((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i],
				[
					MODEL,
					[VENDOR, LG],
					[TYPE, TABLET]
				],
				[
					/(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
					/\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
					/\blg-?([\d\w]+) bui/i
				],
				[
					MODEL,
					[VENDOR, LG],
					[TYPE, MOBILE]
				],
				[/(ideatab[-\w ]+)/i, /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i],
				[
					MODEL,
					[VENDOR, "Lenovo"],
					[TYPE, TABLET]
				],
				[/(?:maemo|nokia).*(n900|lumia \d+)/i, /nokia[-_ ]?([-\w\.]*)/i],
				[
					[
						MODEL,
						/_/g,
						" "
					],
					[VENDOR, "Nokia"],
					[TYPE, MOBILE]
				],
				[/(pixel c)\b/i],
				[
					MODEL,
					[VENDOR, GOOGLE],
					[TYPE, TABLET]
				],
				[/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i],
				[
					MODEL,
					[VENDOR, GOOGLE],
					[TYPE, MOBILE]
				],
				[/droid.+; (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i],
				[
					MODEL,
					[VENDOR, SONY],
					[TYPE, MOBILE]
				],
				[/sony tablet [ps]/i, /\b(?:sony)?sgp\w+(?: bui|\))/i],
				[
					[MODEL, "Xperia Tablet"],
					[VENDOR, SONY],
					[TYPE, TABLET]
				],
				[/ (kb2005|in20[12]5|be20[12][59])\b/i, /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i],
				[
					MODEL,
					[VENDOR, "OnePlus"],
					[TYPE, MOBILE]
				],
				[
					/(alexa)webm/i,
					/(kf[a-z]{2}wi|aeo(?!bc)\w\w)( bui|\))/i,
					/(kf[a-z]+)( bui|\)).+silk\//i
				],
				[
					MODEL,
					[VENDOR, AMAZON],
					[TYPE, TABLET]
				],
				[/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i],
				[
					[
						MODEL,
						/(.+)/g,
						"Fire Phone $1"
					],
					[VENDOR, AMAZON],
					[TYPE, MOBILE]
				],
				[/(playbook);[-\w\),; ]+(rim)/i],
				[
					MODEL,
					VENDOR,
					[TYPE, TABLET]
				],
				[/\b((?:bb[a-f]|st[hv])100-\d)/i, /\(bb10; (\w+)/i],
				[
					MODEL,
					[VENDOR, BLACKBERRY],
					[TYPE, MOBILE]
				],
				[/(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i],
				[
					MODEL,
					[VENDOR, ASUS],
					[TYPE, TABLET]
				],
				[/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i],
				[
					MODEL,
					[VENDOR, ASUS],
					[TYPE, MOBILE]
				],
				[/(nexus 9)/i],
				[
					MODEL,
					[VENDOR, "HTC"],
					[TYPE, TABLET]
				],
				[
					/(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,
					/(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
					/(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i
				],
				[
					VENDOR,
					[
						MODEL,
						/_/g,
						" "
					],
					[TYPE, MOBILE]
				],
				[/droid [\w\.]+; ((?:8[14]9[16]|9(?:0(?:48|60|8[01])|1(?:3[27]|66)|2(?:6[69]|9[56])|466))[gqswx])\w*(\)| bui)/i],
				[
					MODEL,
					[VENDOR, "TCL"],
					[TYPE, TABLET]
				],
				[/(itel) ((\w+))/i],
				[
					[VENDOR, lowerize],
					MODEL,
					[
						TYPE,
						strMapper,
						{
							"tablet": ["p10001l", "w7001"],
							"*": "mobile"
						}
					]
				],
				[/droid.+; ([ab][1-7]-?[0178a]\d\d?)/i],
				[
					MODEL,
					[VENDOR, "Acer"],
					[TYPE, TABLET]
				],
				[/droid.+; (m[1-5] note) bui/i, /\bmz-([-\w]{2,})/i],
				[
					MODEL,
					[VENDOR, "Meizu"],
					[TYPE, MOBILE]
				],
				[/; ((?:power )?armor(?:[\w ]{0,8}))(?: bui|\))/i],
				[
					MODEL,
					[VENDOR, "Ulefone"],
					[TYPE, MOBILE]
				],
				[/; (energy ?\w+)(?: bui|\))/i, /; energizer ([\w ]+)(?: bui|\))/i],
				[
					MODEL,
					[VENDOR, "Energizer"],
					[TYPE, MOBILE]
				],
				[/; cat (b35);/i, /; (b15q?|s22 flip|s48c|s62 pro)(?: bui|\))/i],
				[
					MODEL,
					[VENDOR, "Cat"],
					[TYPE, MOBILE]
				],
				[/((?:new )?andromax[\w- ]+)(?: bui|\))/i],
				[
					MODEL,
					[VENDOR, "Smartfren"],
					[TYPE, MOBILE]
				],
				[/droid.+; (a(?:015|06[35]|142p?))/i],
				[
					MODEL,
					[VENDOR, "Nothing"],
					[TYPE, MOBILE]
				],
				[
					/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron|infinix|tecno|micromax|advan)[-_ ]?([-\w]*)/i,
					/; (imo) ((?!tab)[\w ]+?)(?: bui|\))/i,
					/(hp) ([\w ]+\w)/i,
					/(asus)-?(\w+)/i,
					/(microsoft); (lumia[\w ]+)/i,
					/(lenovo)[-_ ]?([-\w]+)/i,
					/(jolla)/i,
					/(oppo) ?([\w ]+) bui/i
				],
				[
					VENDOR,
					MODEL,
					[TYPE, MOBILE]
				],
				[
					/(imo) (tab \w+)/i,
					/(kobo)\s(ereader|touch)/i,
					/(archos) (gamepad2?)/i,
					/(hp).+(touchpad(?!.+tablet)|tablet)/i,
					/(kindle)\/([\w\.]+)/i,
					/(nook)[\w ]+build\/(\w+)/i,
					/(dell) (strea[kpr\d ]*[\dko])/i,
					/(le[- ]+pan)[- ]+(\w{1,9}) bui/i,
					/(trinity)[- ]*(t\d{3}) bui/i,
					/(gigaset)[- ]+(q\w{1,9}) bui/i,
					/(vodafone) ([\w ]+)(?:\)| bui)/i
				],
				[
					VENDOR,
					MODEL,
					[TYPE, TABLET]
				],
				[/(surface duo)/i],
				[
					MODEL,
					[VENDOR, MICROSOFT],
					[TYPE, TABLET]
				],
				[/droid [\d\.]+; (fp\du?)(?: b|\))/i],
				[
					MODEL,
					[VENDOR, "Fairphone"],
					[TYPE, MOBILE]
				],
				[/(u304aa)/i],
				[
					MODEL,
					[VENDOR, "AT&T"],
					[TYPE, MOBILE]
				],
				[/\bsie-(\w*)/i],
				[
					MODEL,
					[VENDOR, "Siemens"],
					[TYPE, MOBILE]
				],
				[/\b(rct\w+) b/i],
				[
					MODEL,
					[VENDOR, "RCA"],
					[TYPE, TABLET]
				],
				[/\b(venue[\d ]{2,7}) b/i],
				[
					MODEL,
					[VENDOR, "Dell"],
					[TYPE, TABLET]
				],
				[/\b(q(?:mv|ta)\w+) b/i],
				[
					MODEL,
					[VENDOR, "Verizon"],
					[TYPE, TABLET]
				],
				[/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i],
				[
					MODEL,
					[VENDOR, "Barnes & Noble"],
					[TYPE, TABLET]
				],
				[/\b(tm\d{3}\w+) b/i],
				[
					MODEL,
					[VENDOR, "NuVision"],
					[TYPE, TABLET]
				],
				[/\b(k88) b/i],
				[
					MODEL,
					[VENDOR, "ZTE"],
					[TYPE, TABLET]
				],
				[/\b(nx\d{3}j) b/i],
				[
					MODEL,
					[VENDOR, "ZTE"],
					[TYPE, MOBILE]
				],
				[/\b(gen\d{3}) b.+49h/i],
				[
					MODEL,
					[VENDOR, "Swiss"],
					[TYPE, MOBILE]
				],
				[/\b(zur\d{3}) b/i],
				[
					MODEL,
					[VENDOR, "Swiss"],
					[TYPE, TABLET]
				],
				[/\b((zeki)?tb.*\b) b/i],
				[
					MODEL,
					[VENDOR, "Zeki"],
					[TYPE, TABLET]
				],
				[/\b([yr]\d{2}) b/i, /\b(dragon[- ]+touch |dt)(\w{5}) b/i],
				[
					[VENDOR, "Dragon Touch"],
					MODEL,
					[TYPE, TABLET]
				],
				[/\b(ns-?\w{0,9}) b/i],
				[
					MODEL,
					[VENDOR, "Insignia"],
					[TYPE, TABLET]
				],
				[/\b((nxa|next)-?\w{0,9}) b/i],
				[
					MODEL,
					[VENDOR, "NextBook"],
					[TYPE, TABLET]
				],
				[/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i],
				[
					[VENDOR, "Voice"],
					MODEL,
					[TYPE, MOBILE]
				],
				[/\b(lvtel\-)?(v1[12]) b/i],
				[
					[VENDOR, "LvTel"],
					MODEL,
					[TYPE, MOBILE]
				],
				[/\b(ph-1) /i],
				[
					MODEL,
					[VENDOR, "Essential"],
					[TYPE, MOBILE]
				],
				[/\b(v(100md|700na|7011|917g).*\b) b/i],
				[
					MODEL,
					[VENDOR, "Envizen"],
					[TYPE, TABLET]
				],
				[/\b(trio[-\w\. ]+) b/i],
				[
					MODEL,
					[VENDOR, "MachSpeed"],
					[TYPE, TABLET]
				],
				[/\btu_(1491) b/i],
				[
					MODEL,
					[VENDOR, "Rotor"],
					[TYPE, TABLET]
				],
				[/(shield[\w ]+) b/i],
				[
					MODEL,
					[VENDOR, "Nvidia"],
					[TYPE, TABLET]
				],
				[/(sprint) (\w+)/i],
				[
					VENDOR,
					MODEL,
					[TYPE, MOBILE]
				],
				[/(kin\.[onetw]{3})/i],
				[
					[
						MODEL,
						/\./g,
						" "
					],
					[VENDOR, MICROSOFT],
					[TYPE, MOBILE]
				],
				[/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i],
				[
					MODEL,
					[VENDOR, ZEBRA],
					[TYPE, TABLET]
				],
				[/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i],
				[
					MODEL,
					[VENDOR, ZEBRA],
					[TYPE, MOBILE]
				],
				[/smart-tv.+(samsung)/i],
				[VENDOR, [TYPE, SMARTTV]],
				[/hbbtv.+maple;(\d+)/i],
				[
					[
						MODEL,
						/^/,
						"SmartTV"
					],
					[VENDOR, SAMSUNG],
					[TYPE, SMARTTV]
				],
				[/(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i],
				[[VENDOR, LG], [TYPE, SMARTTV]],
				[/(apple) ?tv/i],
				[
					VENDOR,
					[MODEL, APPLE + " TV"],
					[TYPE, SMARTTV]
				],
				[/crkey/i],
				[
					[MODEL, CHROME + "cast"],
					[VENDOR, GOOGLE],
					[TYPE, SMARTTV]
				],
				[/droid.+aft(\w+)( bui|\))/i],
				[
					MODEL,
					[VENDOR, AMAZON],
					[TYPE, SMARTTV]
				],
				[/\(dtv[\);].+(aquos)/i, /(aquos-tv[\w ]+)\)/i],
				[
					MODEL,
					[VENDOR, SHARP],
					[TYPE, SMARTTV]
				],
				[/(bravia[\w ]+)( bui|\))/i],
				[
					MODEL,
					[VENDOR, SONY],
					[TYPE, SMARTTV]
				],
				[/(mitv-\w{5}) bui/i],
				[
					MODEL,
					[VENDOR, XIAOMI],
					[TYPE, SMARTTV]
				],
				[/Hbbtv.*(technisat) (.*);/i],
				[
					VENDOR,
					MODEL,
					[TYPE, SMARTTV]
				],
				[/\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i, /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i],
				[
					[VENDOR, trim],
					[MODEL, trim],
					[TYPE, SMARTTV]
				],
				[/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i],
				[[TYPE, SMARTTV]],
				[/(ouya)/i, /(nintendo) ([wids3utch]+)/i],
				[
					VENDOR,
					MODEL,
					[TYPE, CONSOLE]
				],
				[/droid.+; (shield) bui/i],
				[
					MODEL,
					[VENDOR, "Nvidia"],
					[TYPE, CONSOLE]
				],
				[/(playstation [345portablevi]+)/i],
				[
					MODEL,
					[VENDOR, SONY],
					[TYPE, CONSOLE]
				],
				[/\b(xbox(?: one)?(?!; xbox))[\); ]/i],
				[
					MODEL,
					[VENDOR, MICROSOFT],
					[TYPE, CONSOLE]
				],
				[/\b(sm-[lr]\d\d[05][fnuw]?s?)\b/i],
				[
					MODEL,
					[VENDOR, SAMSUNG],
					[TYPE, WEARABLE]
				],
				[/((pebble))app/i],
				[
					VENDOR,
					MODEL,
					[TYPE, WEARABLE]
				],
				[/(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i],
				[
					MODEL,
					[VENDOR, APPLE],
					[TYPE, WEARABLE]
				],
				[/droid.+; (glass) \d/i],
				[
					MODEL,
					[VENDOR, GOOGLE],
					[TYPE, WEARABLE]
				],
				[/droid.+; (wt63?0{2,3})\)/i],
				[
					MODEL,
					[VENDOR, ZEBRA],
					[TYPE, WEARABLE]
				],
				[/droid.+; (glass) \d/i],
				[
					MODEL,
					[VENDOR, GOOGLE],
					[TYPE, WEARABLE]
				],
				[/(pico) (4|neo3(?: link|pro)?)/i],
				[
					VENDOR,
					MODEL,
					[TYPE, WEARABLE]
				],
				[/; (quest( \d| pro)?)/i],
				[
					MODEL,
					[VENDOR, FACEBOOK],
					[TYPE, WEARABLE]
				],
				[/(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i],
				[VENDOR, [TYPE, EMBEDDED]],
				[/(aeobc)\b/i],
				[
					MODEL,
					[VENDOR, AMAZON],
					[TYPE, EMBEDDED]
				],
				[/droid .+?; ([^;]+?)(?: bui|; wv\)|\) applew).+? mobile safari/i],
				[MODEL, [TYPE, MOBILE]],
				[/droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i],
				[MODEL, [TYPE, TABLET]],
				[/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i],
				[[TYPE, TABLET]],
				[/(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i],
				[[TYPE, MOBILE]],
				[/(android[-\w\. ]{0,9});.+buil/i],
				[MODEL, [VENDOR, "Generic"]]
			],
			engine: [
				[/windows.+ edge\/([\w\.]+)/i],
				[VERSION, [NAME, EDGE + "HTML"]],
				[/(arkweb)\/([\w\.]+)/i],
				[NAME, VERSION],
				[/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i],
				[VERSION, [NAME, "Blink"]],
				[
					/(presto)\/([\w\.]+)/i,
					/(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna|servo)\/([\w\.]+)/i,
					/ekioh(flow)\/([\w\.]+)/i,
					/(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,
					/(icab)[\/ ]([23]\.[\d\.]+)/i,
					/\b(libweb)/i
				],
				[NAME, VERSION],
				[/rv\:([\w\.]{1,9})\b.+(gecko)/i],
				[VERSION, NAME]
			],
			os: [
				[/microsoft (windows) (vista|xp)/i],
				[NAME, VERSION],
				[/(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i],
				[NAME, [
					VERSION,
					strMapper,
					windowsVersionMap
				]],
				[
					/windows nt 6\.2; (arm)/i,
					/windows[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i,
					/(?:win(?=3|9|n)|win 9x )([nt\d\.]+)/i
				],
				[[
					VERSION,
					strMapper,
					windowsVersionMap
				], [NAME, "Windows"]],
				[
					/ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,
					/(?:ios;fbsv\/|iphone.+ios[\/ ])([\d\.]+)/i,
					/cfnetwork\/.+darwin/i
				],
				[[
					VERSION,
					/_/g,
					"."
				], [NAME, "iOS"]],
				[/(mac os x) ?([\w\. ]*)/i, /(macintosh|mac_powerpc\b)(?!.+haiku)/i],
				[[NAME, MAC_OS], [
					VERSION,
					/_/g,
					"."
				]],
				[/droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i],
				[VERSION, NAME],
				[
					/(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish|openharmony)[-\/ ]?([\w\.]*)/i,
					/(blackberry)\w*\/([\w\.]*)/i,
					/(tizen|kaios)[\/ ]([\w\.]+)/i,
					/\((series40);/i
				],
				[NAME, VERSION],
				[/\(bb(10);/i],
				[VERSION, [NAME, BLACKBERRY]],
				[/(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i],
				[VERSION, [NAME, "Symbian"]],
				[/mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i],
				[VERSION, [NAME, FIREFOX + " OS"]],
				[/web0s;.+rt(tv)/i, /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i],
				[VERSION, [NAME, "webOS"]],
				[/watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i],
				[VERSION, [NAME, "watchOS"]],
				[/crkey\/([\d\.]+)/i],
				[VERSION, [NAME, CHROME + "cast"]],
				[/(cros) [\w]+(?:\)| ([\w\.]+)\b)/i],
				[[NAME, CHROMIUM_OS], VERSION],
				[
					/panasonic;(viera)/i,
					/(netrange)mmh/i,
					/(nettv)\/(\d+\.[\w\.]+)/i,
					/(nintendo|playstation) ([wids345portablevuch]+)/i,
					/(xbox); +xbox ([^\);]+)/i,
					/\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,
					/(mint)[\/\(\) ]?(\w*)/i,
					/(mageia|vectorlinux)[; ]/i,
					/([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
					/(hurd|linux) ?([\w\.]*)/i,
					/(gnu) ?([\w\.]*)/i,
					/\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,
					/(haiku) (\w+)/i
				],
				[NAME, VERSION],
				[/(sunos) ?([\w\.\d]*)/i],
				[[NAME, "Solaris"], VERSION],
				[
					/((?:open)?solaris)[-\/ ]?([\w\.]*)/i,
					/(aix) ((\d)(?=\.|\)| )[\w\.])*/i,
					/\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i,
					/(unix) ?([\w\.]*)/i
				],
				[NAME, VERSION]
			]
		};
		var UAParser$1 = function(ua, extensions) {
			if (typeof ua === OBJ_TYPE) {
				extensions = ua;
				ua = undefined$1;
			}
			if (!(this instanceof UAParser$1)) return new UAParser$1(ua, extensions).getResult();
			var _navigator = typeof window$1 !== UNDEF_TYPE && window$1.navigator ? window$1.navigator : undefined$1;
			var _ua = ua || (_navigator && _navigator.userAgent ? _navigator.userAgent : EMPTY);
			var _uach = _navigator && _navigator.userAgentData ? _navigator.userAgentData : undefined$1;
			var _rgxmap = extensions ? extend(regexes, extensions) : regexes;
			var _isSelfNav = _navigator && _navigator.userAgent == _ua;
			this.getBrowser = function() {
				var _browser = {};
				_browser[NAME] = undefined$1;
				_browser[VERSION] = undefined$1;
				rgxMapper.call(_browser, _ua, _rgxmap.browser);
				_browser[MAJOR] = majorize(_browser[VERSION]);
				if (_isSelfNav && _navigator && _navigator.brave && typeof _navigator.brave.isBrave == FUNC_TYPE) _browser[NAME] = "Brave";
				return _browser;
			};
			this.getCPU = function() {
				var _cpu = {};
				_cpu[ARCHITECTURE] = undefined$1;
				rgxMapper.call(_cpu, _ua, _rgxmap.cpu);
				return _cpu;
			};
			this.getDevice = function() {
				var _device = {};
				_device[VENDOR] = undefined$1;
				_device[MODEL] = undefined$1;
				_device[TYPE] = undefined$1;
				rgxMapper.call(_device, _ua, _rgxmap.device);
				if (_isSelfNav && !_device[TYPE] && _uach && _uach.mobile) _device[TYPE] = MOBILE;
				if (_isSelfNav && _device[MODEL] == "Macintosh" && _navigator && typeof _navigator.standalone !== UNDEF_TYPE && _navigator.maxTouchPoints && _navigator.maxTouchPoints > 2) {
					_device[MODEL] = "iPad";
					_device[TYPE] = TABLET;
				}
				return _device;
			};
			this.getEngine = function() {
				var _engine = {};
				_engine[NAME] = undefined$1;
				_engine[VERSION] = undefined$1;
				rgxMapper.call(_engine, _ua, _rgxmap.engine);
				return _engine;
			};
			this.getOS = function() {
				var _os = {};
				_os[NAME] = undefined$1;
				_os[VERSION] = undefined$1;
				rgxMapper.call(_os, _ua, _rgxmap.os);
				if (_isSelfNav && !_os[NAME] && _uach && _uach.platform && _uach.platform != "Unknown") _os[NAME] = _uach.platform.replace(/chrome os/i, CHROMIUM_OS).replace(/macos/i, MAC_OS);
				return _os;
			};
			this.getResult = function() {
				return {
					ua: this.getUA(),
					browser: this.getBrowser(),
					engine: this.getEngine(),
					os: this.getOS(),
					device: this.getDevice(),
					cpu: this.getCPU()
				};
			};
			this.getUA = function() {
				return _ua;
			};
			this.setUA = function(ua$1) {
				_ua = typeof ua$1 === STR_TYPE && ua$1.length > UA_MAX_LENGTH ? trim(ua$1, UA_MAX_LENGTH) : ua$1;
				return this;
			};
			this.setUA(_ua);
			return this;
		};
		UAParser$1.VERSION = LIBVERSION;
		UAParser$1.BROWSER = enumerize([
			NAME,
			VERSION,
			MAJOR
		]);
		UAParser$1.CPU = enumerize([ARCHITECTURE]);
		UAParser$1.DEVICE = enumerize([
			MODEL,
			VENDOR,
			TYPE,
			CONSOLE,
			MOBILE,
			SMARTTV,
			TABLET,
			WEARABLE,
			EMBEDDED
		]);
		UAParser$1.ENGINE = UAParser$1.OS = enumerize([NAME, VERSION]);
		if (typeof exports !== UNDEF_TYPE) {
			if (typeof module !== UNDEF_TYPE && module.exports) exports = module.exports = UAParser$1;
			exports.UAParser = UAParser$1;
		} else if (typeof define === FUNC_TYPE && define.amd) define(function() {
			return UAParser$1;
		});
		else if (typeof window$1 !== UNDEF_TYPE) window$1.UAParser = UAParser$1;
		var $ = typeof window$1 !== UNDEF_TYPE && (window$1.jQuery || window$1.Zepto);
		if ($ && !$.ua) {
			var parser = new UAParser$1();
			$.ua = parser.getResult();
			$.ua.get = function() {
				return parser.getUA();
			};
			$.ua.set = function(ua) {
				parser.setUA(ua);
				var result = parser.getResult();
				for (var prop in result) $.ua[prop] = result[prop];
			};
		}
	})(typeof window === "object" ? window : void 0);
} });

//#endregion
//#region ../../node_modules/.pnpm/deepmerge@4.3.1/node_modules/deepmerge/dist/cjs.js
var require_cjs = __commonJS({ "../../node_modules/.pnpm/deepmerge@4.3.1/node_modules/deepmerge/dist/cjs.js"(exports, module) {
	var isMergeableObject = function isMergeableObject$1(value) {
		return isNonNullObject(value) && !isSpecial(value);
	};
	function isNonNullObject(value) {
		return !!value && typeof value === "object";
	}
	function isSpecial(value) {
		var stringValue = Object.prototype.toString.call(value);
		return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
	}
	var canUseSymbol = typeof Symbol === "function" && Symbol.for;
	var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
	function isReactElement(value) {
		return value.$$typeof === REACT_ELEMENT_TYPE;
	}
	function emptyTarget(val) {
		return Array.isArray(val) ? [] : {};
	}
	function cloneUnlessOtherwiseSpecified(value, options) {
		return options.clone !== false && options.isMergeableObject(value) ? deepmerge$1(emptyTarget(value), value, options) : value;
	}
	function defaultArrayMerge(target, source, options) {
		return target.concat(source).map(function(element) {
			return cloneUnlessOtherwiseSpecified(element, options);
		});
	}
	function getMergeFunction(key, options) {
		if (!options.customMerge) return deepmerge$1;
		var customMerge = options.customMerge(key);
		return typeof customMerge === "function" ? customMerge : deepmerge$1;
	}
	function getEnumerableOwnPropertySymbols(target) {
		return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
			return Object.propertyIsEnumerable.call(target, symbol);
		}) : [];
	}
	function getKeys(target) {
		return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
	}
	function propertyIsOnObject(object, property) {
		try {
			return property in object;
		} catch (_) {
			return false;
		}
	}
	function propertyIsUnsafe(target, key) {
		return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
	}
	function mergeObject(target, source, options) {
		var destination = {};
		if (options.isMergeableObject(target)) getKeys(target).forEach(function(key) {
			destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
		});
		getKeys(source).forEach(function(key) {
			if (propertyIsUnsafe(target, key)) return;
			if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
			else destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
		});
		return destination;
	}
	function deepmerge$1(target, source, options) {
		options = options || {};
		options.arrayMerge = options.arrayMerge || defaultArrayMerge;
		options.isMergeableObject = options.isMergeableObject || isMergeableObject;
		options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
		var sourceIsArray = Array.isArray(source);
		var targetIsArray = Array.isArray(target);
		var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
		if (!sourceAndTargetTypesMatch) return cloneUnlessOtherwiseSpecified(source, options);
		else if (sourceIsArray) return options.arrayMerge(target, source, options);
		else return mergeObject(target, source, options);
	}
	deepmerge$1.all = function deepmergeAll(array, options) {
		if (!Array.isArray(array)) throw new Error("first argument should be an array");
		return array.reduce(function(prev, next) {
			return deepmerge$1(prev, next, options);
		}, {});
	};
	var deepmerge_1 = deepmerge$1;
	module.exports = deepmerge_1;
} });

//#endregion
//#region ../../node_modules/.pnpm/classnames@2.5.1/node_modules/classnames/index.js
var require_classnames = __commonJS({ "../../node_modules/.pnpm/classnames@2.5.1/node_modules/classnames/index.js"(exports, module) {
	/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
	*/
	(function() {
		"use strict";
		var hasOwn = {}.hasOwnProperty;
		function classNames() {
			var classes = "";
			for (var i$2 = 0; i$2 < arguments.length; i$2++) {
				var arg = arguments[i$2];
				if (arg) classes = appendClass(classes, parseValue(arg));
			}
			return classes;
		}
		function parseValue(arg) {
			if (typeof arg === "string" || typeof arg === "number") return arg;
			if (typeof arg !== "object") return "";
			if (Array.isArray(arg)) return classNames.apply(null, arg);
			if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) return arg.toString();
			var classes = "";
			for (var key in arg) if (hasOwn.call(arg, key) && arg[key]) classes = appendClass(classes, key);
			return classes;
		}
		function appendClass(value, newClass) {
			if (!newClass) return value;
			if (value) return value + " " + newClass;
			return value + newClass;
		}
		if (typeof module !== "undefined" && module.exports) {
			classNames.default = classNames;
			module.exports = classNames;
		} else if (typeof define === "function" && typeof define.amd === "object" && define.amd) define("classnames", [], function() {
			return classNames;
		});
		else window.classNames = classNames;
	})();
} });

//#endregion
//#region ../../node_modules/.pnpm/@tonconnect+ui@2.1.0/node_modules/@tonconnect/ui/lib/index.mjs
var import_ua_parser = __toESM(require_ua_parser(), 1);
var import_cjs = __toESM(require_cjs(), 1);
var import_classnames = __toESM(require_classnames(), 1);
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {
	enumerable: true,
	configurable: true,
	writable: true,
	value
}) : obj[key] = value;
var __spreadValues = (a2, b) => {
	for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a2, prop, b[prop]);
	if (__getOwnPropSymbols) {
		for (var prop of __getOwnPropSymbols(b)) if (__propIsEnum.call(b, prop)) __defNormalProp(a2, prop, b[prop]);
	}
	return a2;
};
var __spreadProps = (a2, b) => __defProps(a2, __getOwnPropDescs(b));
var __publicField = (obj, key, value) => {
	__defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
	return value;
};
var __async = (__this, __arguments, generator) => {
	return new Promise((resolve, reject) => {
		var fulfilled = (value) => {
			try {
				step(generator.next(value));
			} catch (e2) {
				reject(e2);
			}
		};
		var rejected = (value) => {
			try {
				step(generator.throw(value));
			} catch (e2) {
				reject(e2);
			}
		};
		var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
		step((generator = generator.apply(__this, __arguments)).next());
	});
};
var _a$6, _b, _c, _d, _e, _f, _g, _h;
const sharedConfig = {};
function setHydrateContext(context) {
	sharedConfig.context = context;
}
const equalFn = (a2, b) => a2 === b;
const $PROXY = Symbol("solid-proxy");
const $TRACK = Symbol("solid-track");
const signalOptions = { equals: equalFn };
let runEffects = runQueue;
const STALE = 1;
const PENDING = 2;
const UNOWNED = {
	owned: null,
	cleanups: null,
	context: null,
	owner: null
};
const NO_INIT = {};
var Owner = null;
let Transition$1 = null;
let Listener = null;
let Updates = null;
let Effects = null;
let ExecCount = 0;
function createRoot(fn, detachedOwner) {
	const listener = Listener, owner = Owner, unowned = fn.length === 0, root = unowned ? UNOWNED : {
		owned: null,
		cleanups: null,
		context: null,
		owner: detachedOwner === void 0 ? owner : detachedOwner
	}, updateFn = unowned ? fn : () => fn(() => untrack(() => cleanNode(root)));
	Owner = root;
	Listener = null;
	try {
		return runUpdates(updateFn, true);
	} finally {
		Listener = listener;
		Owner = owner;
	}
}
function createSignal(value, options) {
	options = options ? Object.assign({}, signalOptions, options) : signalOptions;
	const s2 = {
		value,
		observers: null,
		observerSlots: null,
		comparator: options.equals || void 0
	};
	const setter = (value2) => {
		if (typeof value2 === "function") value2 = value2(s2.value);
		return writeSignal(s2, value2);
	};
	return [readSignal.bind(s2), setter];
}
function createComputed(fn, value, options) {
	const c2 = createComputation(fn, value, true, STALE);
	updateComputation(c2);
}
function createRenderEffect(fn, value, options) {
	const c2 = createComputation(fn, value, false, STALE);
	updateComputation(c2);
}
function createEffect(fn, value, options) {
	runEffects = runUserEffects;
	const c2 = createComputation(fn, value, false, STALE);
	c2.user = true;
	Effects ? Effects.push(c2) : updateComputation(c2);
}
function createMemo(fn, value, options) {
	options = options ? Object.assign({}, signalOptions, options) : signalOptions;
	const c2 = createComputation(fn, value, true, 0);
	c2.observers = null;
	c2.observerSlots = null;
	c2.comparator = options.equals || void 0;
	updateComputation(c2);
	return readSignal.bind(c2);
}
function createResource(pSource, pFetcher, pOptions) {
	let source;
	let fetcher;
	let options;
	if (arguments.length === 2 && typeof pFetcher === "object" || arguments.length === 1) {
		source = true;
		fetcher = pSource;
		options = pFetcher || {};
	} else {
		source = pSource;
		fetcher = pFetcher;
		options = pOptions || {};
	}
	let pr = null, initP = NO_INIT, id = null, scheduled = false, resolved = "initialValue" in options, dynamic = typeof source === "function" && createMemo(source);
	const contexts = /* @__PURE__ */ new Set(), [value, setValue] = (options.storage || createSignal)(options.initialValue), [error, setError] = createSignal(void 0), [track, trigger] = createSignal(void 0, { equals: false }), [state, setState] = createSignal(resolved ? "ready" : "unresolved");
	if (sharedConfig.context) {
		id = `${sharedConfig.context.id}${sharedConfig.context.count++}`;
		let v;
		if (options.ssrLoadFrom === "initial") initP = options.initialValue;
		else if (sharedConfig.load && (v = sharedConfig.load(id))) initP = v[0];
	}
	function loadEnd(p2, v, error2, key) {
		if (pr === p2) {
			pr = null;
			resolved = true;
			if ((p2 === initP || v === initP) && options.onHydrated) queueMicrotask(() => options.onHydrated(key, { value: v }));
			initP = NO_INIT;
			completeLoad(v, error2);
		}
		return v;
	}
	function completeLoad(v, err) {
		runUpdates(() => {
			if (err === void 0) setValue(() => v);
			setState(err !== void 0 ? "errored" : "ready");
			setError(err);
			for (const c2 of contexts.keys()) c2.decrement();
			contexts.clear();
		}, false);
	}
	function read() {
		const c2 = SuspenseContext, v = value(), err = error();
		if (err !== void 0 && !pr) throw err;
		if (Listener && !Listener.user && c2) createComputed(() => {
			track();
			if (pr) {
				if (c2.resolved);
				else if (!contexts.has(c2)) {
					c2.increment();
					contexts.add(c2);
				}
			}
		});
		return v;
	}
	function load(refetching = true) {
		if (refetching !== false && scheduled) return;
		scheduled = false;
		const lookup2 = dynamic ? dynamic() : source;
		if (lookup2 == null || lookup2 === false) {
			loadEnd(pr, untrack(value));
			return;
		}
		const p2 = initP !== NO_INIT ? initP : untrack(() => fetcher(lookup2, {
			value: value(),
			refetching
		}));
		if (typeof p2 !== "object" || !(p2 && "then" in p2)) {
			loadEnd(pr, p2, void 0, lookup2);
			return p2;
		}
		pr = p2;
		scheduled = true;
		queueMicrotask(() => scheduled = false);
		runUpdates(() => {
			setState(resolved ? "refreshing" : "pending");
			trigger();
		}, false);
		return p2.then((v) => loadEnd(p2, v, void 0, lookup2), (e2) => loadEnd(p2, void 0, castError(e2), lookup2));
	}
	Object.defineProperties(read, {
		state: { get: () => state() },
		error: { get: () => error() },
		loading: { get() {
			const s2 = state();
			return s2 === "pending" || s2 === "refreshing";
		} },
		latest: { get() {
			if (!resolved) return read();
			const err = error();
			if (err && !pr) throw err;
			return value();
		} }
	});
	if (dynamic) createComputed(() => load(false));
	else load(false);
	return [read, {
		refetch: load,
		mutate: setValue
	}];
}
function batch(fn) {
	return runUpdates(fn, false);
}
function untrack(fn) {
	if (Listener === null) return fn();
	const listener = Listener;
	Listener = null;
	try {
		return fn();
	} finally {
		Listener = listener;
	}
}
function on(deps, fn, options) {
	const isArray = Array.isArray(deps);
	let prevInput;
	let defer = options && options.defer;
	return (prevValue) => {
		let input;
		if (isArray) {
			input = Array(deps.length);
			for (let i2 = 0; i2 < deps.length; i2++) input[i2] = deps[i2]();
		} else input = deps();
		if (defer) {
			defer = false;
			return void 0;
		}
		const result = untrack(() => fn(input, prevInput, prevValue));
		prevInput = input;
		return result;
	};
}
function onMount(fn) {
	createEffect(() => untrack(fn));
}
function onCleanup(fn) {
	if (Owner === null);
	else if (Owner.cleanups === null) Owner.cleanups = [fn];
	else Owner.cleanups.push(fn);
	return fn;
}
function getListener() {
	return Listener;
}
function getOwner() {
	return Owner;
}
function createContext(defaultValue, options) {
	const id = Symbol("context");
	return {
		id,
		Provider: createProvider(id),
		defaultValue
	};
}
function useContext(context) {
	let ctx;
	return (ctx = lookup$1(Owner, context.id)) !== void 0 ? ctx : context.defaultValue;
}
function children(fn) {
	const children2 = createMemo(fn);
	const memo = createMemo(() => resolveChildren(children2()));
	memo.toArray = () => {
		const c2 = memo();
		return Array.isArray(c2) ? c2 : c2 != null ? [c2] : [];
	};
	return memo;
}
let SuspenseContext;
function readSignal() {
	const runningTransition = Transition$1;
	if (this.sources && (this.state || runningTransition)) if (this.state === STALE || runningTransition) updateComputation(this);
	else {
		const updates = Updates;
		Updates = null;
		runUpdates(() => lookUpstream(this), false);
		Updates = updates;
	}
	if (Listener) {
		const sSlot = this.observers ? this.observers.length : 0;
		if (!Listener.sources) {
			Listener.sources = [this];
			Listener.sourceSlots = [sSlot];
		} else {
			Listener.sources.push(this);
			Listener.sourceSlots.push(sSlot);
		}
		if (!this.observers) {
			this.observers = [Listener];
			this.observerSlots = [Listener.sources.length - 1];
		} else {
			this.observers.push(Listener);
			this.observerSlots.push(Listener.sources.length - 1);
		}
	}
	return this.value;
}
function writeSignal(node, value, isComp) {
	let current = node.value;
	if (!node.comparator || !node.comparator(current, value)) {
		node.value = value;
		if (node.observers && node.observers.length) runUpdates(() => {
			for (let i2 = 0; i2 < node.observers.length; i2 += 1) {
				const o2 = node.observers[i2];
				const TransitionRunning = Transition$1 && Transition$1.running;
				if (TransitionRunning && Transition$1.disposed.has(o2));
				if (TransitionRunning && !o2.tState || !TransitionRunning && !o2.state) {
					if (o2.pure) Updates.push(o2);
					else Effects.push(o2);
					if (o2.observers) markDownstream(o2);
				}
				if (TransitionRunning);
				else o2.state = STALE;
			}
			if (Updates.length > 1e6) {
				Updates = [];
				throw new Error();
			}
		}, false);
	}
	return value;
}
function updateComputation(node) {
	if (!node.fn) return;
	cleanNode(node);
	const owner = Owner, listener = Listener, time = ExecCount;
	Listener = Owner = node;
	runComputation(node, node.value, time);
	Listener = listener;
	Owner = owner;
}
function runComputation(node, value, time) {
	let nextValue;
	try {
		nextValue = node.fn(value);
	} catch (err) {
		if (node.pure) {
			node.state = STALE;
			node.owned && node.owned.forEach(cleanNode);
			node.owned = null;
		}
		handleError(err);
	}
	if (!node.updatedAt || node.updatedAt <= time) {
		if (node.updatedAt != null && "observers" in node) writeSignal(node, nextValue);
		else node.value = nextValue;
		node.updatedAt = time;
	}
}
function createComputation(fn, init, pure, state = STALE, options) {
	const c2 = {
		fn,
		state,
		updatedAt: null,
		owned: null,
		sources: null,
		sourceSlots: null,
		cleanups: null,
		value: init,
		owner: Owner,
		context: null,
		pure
	};
	if (Owner === null);
	else if (Owner !== UNOWNED) if (!Owner.owned) Owner.owned = [c2];
	else Owner.owned.push(c2);
	return c2;
}
function runTop(node) {
	const runningTransition = Transition$1;
	if (node.state === 0 || runningTransition) return;
	if (node.state === PENDING || runningTransition) return lookUpstream(node);
	if (node.suspense && untrack(node.suspense.inFallback)) return node.suspense.effects.push(node);
	const ancestors = [node];
	while ((node = node.owner) && (!node.updatedAt || node.updatedAt < ExecCount)) if (node.state || runningTransition) ancestors.push(node);
	for (let i2 = ancestors.length - 1; i2 >= 0; i2--) {
		node = ancestors[i2];
		if (node.state === STALE || runningTransition) updateComputation(node);
		else if (node.state === PENDING || runningTransition) {
			const updates = Updates;
			Updates = null;
			runUpdates(() => lookUpstream(node, ancestors[0]), false);
			Updates = updates;
		}
	}
}
function runUpdates(fn, init) {
	if (Updates) return fn();
	let wait = false;
	if (!init) Updates = [];
	if (Effects) wait = true;
	else Effects = [];
	ExecCount++;
	try {
		const res = fn();
		completeUpdates(wait);
		return res;
	} catch (err) {
		if (!wait) Effects = null;
		Updates = null;
		handleError(err);
	}
}
function completeUpdates(wait) {
	if (Updates) {
		runQueue(Updates);
		Updates = null;
	}
	if (wait) return;
	const e2 = Effects;
	Effects = null;
	if (e2.length) runUpdates(() => runEffects(e2), false);
}
function runQueue(queue) {
	for (let i2 = 0; i2 < queue.length; i2++) runTop(queue[i2]);
}
function runUserEffects(queue) {
	let i2, userLength = 0;
	for (i2 = 0; i2 < queue.length; i2++) {
		const e2 = queue[i2];
		if (!e2.user) runTop(e2);
		else queue[userLength++] = e2;
	}
	if (sharedConfig.context) setHydrateContext();
	for (i2 = 0; i2 < userLength; i2++) runTop(queue[i2]);
}
function lookUpstream(node, ignore) {
	const runningTransition = Transition$1;
	node.state = 0;
	for (let i2 = 0; i2 < node.sources.length; i2 += 1) {
		const source = node.sources[i2];
		if (source.sources) {
			if (source.state === STALE || runningTransition) {
				if (source !== ignore) runTop(source);
			} else if (source.state === PENDING || runningTransition) lookUpstream(source, ignore);
		}
	}
}
function markDownstream(node) {
	const runningTransition = Transition$1;
	for (let i2 = 0; i2 < node.observers.length; i2 += 1) {
		const o2 = node.observers[i2];
		if (!o2.state || runningTransition) {
			o2.state = PENDING;
			if (o2.pure) Updates.push(o2);
			else Effects.push(o2);
			o2.observers && markDownstream(o2);
		}
	}
}
function cleanNode(node) {
	let i2;
	if (node.sources) while (node.sources.length) {
		const source = node.sources.pop(), index = node.sourceSlots.pop(), obs = source.observers;
		if (obs && obs.length) {
			const n2 = obs.pop(), s2 = source.observerSlots.pop();
			if (index < obs.length) {
				n2.sourceSlots[s2] = index;
				obs[index] = n2;
				source.observerSlots[index] = s2;
			}
		}
	}
	if (node.owned) {
		for (i2 = 0; i2 < node.owned.length; i2++) cleanNode(node.owned[i2]);
		node.owned = null;
	}
	if (node.cleanups) {
		for (i2 = 0; i2 < node.cleanups.length; i2++) node.cleanups[i2]();
		node.cleanups = null;
	}
	node.state = 0;
	node.context = null;
}
function castError(err) {
	if (err instanceof Error || typeof err === "string") return err;
	return /* @__PURE__ */ new Error("Unknown error");
}
function handleError(err) {
	err = castError(err);
	throw err;
}
function lookup$1(owner, key) {
	return owner ? owner.context && owner.context[key] !== void 0 ? owner.context[key] : lookup$1(owner.owner, key) : void 0;
}
function resolveChildren(children2) {
	if (typeof children2 === "function" && !children2.length) return resolveChildren(children2());
	if (Array.isArray(children2)) {
		const results = [];
		for (let i2 = 0; i2 < children2.length; i2++) {
			const result = resolveChildren(children2[i2]);
			Array.isArray(result) ? results.push.apply(results, result) : results.push(result);
		}
		return results;
	}
	return children2;
}
function createProvider(id, options) {
	return function provider(props) {
		let res;
		createRenderEffect(() => res = untrack(() => {
			Owner.context = { [id]: props.value };
			return children(() => props.children);
		}), void 0);
		return res;
	};
}
const FALLBACK = Symbol("fallback");
function dispose(d) {
	for (let i2 = 0; i2 < d.length; i2++) d[i2]();
}
function mapArray(list, mapFn, options = {}) {
	let items = [], mapped = [], disposers = [], len$1 = 0, indexes = mapFn.length > 1 ? [] : null;
	onCleanup(() => dispose(disposers));
	return () => {
		let newItems = list() || [], i2, j;
		newItems[$TRACK];
		return untrack(() => {
			let newLen = newItems.length, newIndices, newIndicesNext, temp, tempdisposers, tempIndexes, start, end, newEnd, item;
			if (newLen === 0) {
				if (len$1 !== 0) {
					dispose(disposers);
					disposers = [];
					items = [];
					mapped = [];
					len$1 = 0;
					indexes && (indexes = []);
				}
				if (options.fallback) {
					items = [FALLBACK];
					mapped[0] = createRoot((disposer) => {
						disposers[0] = disposer;
						return options.fallback();
					});
					len$1 = 1;
				}
			} else if (len$1 === 0) {
				mapped = new Array(newLen);
				for (j = 0; j < newLen; j++) {
					items[j] = newItems[j];
					mapped[j] = createRoot(mapper);
				}
				len$1 = newLen;
			} else {
				temp = new Array(newLen);
				tempdisposers = new Array(newLen);
				indexes && (tempIndexes = new Array(newLen));
				for (start = 0, end = Math.min(len$1, newLen); start < end && items[start] === newItems[start]; start++);
				for (end = len$1 - 1, newEnd = newLen - 1; end >= start && newEnd >= start && items[end] === newItems[newEnd]; end--, newEnd--) {
					temp[newEnd] = mapped[end];
					tempdisposers[newEnd] = disposers[end];
					indexes && (tempIndexes[newEnd] = indexes[end]);
				}
				newIndices = /* @__PURE__ */ new Map();
				newIndicesNext = new Array(newEnd + 1);
				for (j = newEnd; j >= start; j--) {
					item = newItems[j];
					i2 = newIndices.get(item);
					newIndicesNext[j] = i2 === void 0 ? -1 : i2;
					newIndices.set(item, j);
				}
				for (i2 = start; i2 <= end; i2++) {
					item = items[i2];
					j = newIndices.get(item);
					if (j !== void 0 && j !== -1) {
						temp[j] = mapped[i2];
						tempdisposers[j] = disposers[i2];
						indexes && (tempIndexes[j] = indexes[i2]);
						j = newIndicesNext[j];
						newIndices.set(item, j);
					} else disposers[i2]();
				}
				for (j = start; j < newLen; j++) if (j in temp) {
					mapped[j] = temp[j];
					disposers[j] = tempdisposers[j];
					if (indexes) {
						indexes[j] = tempIndexes[j];
						indexes[j](j);
					}
				} else mapped[j] = createRoot(mapper);
				mapped = mapped.slice(0, len$1 = newLen);
				items = newItems.slice(0);
			}
			return mapped;
		});
		function mapper(disposer) {
			disposers[j] = disposer;
			if (indexes) {
				const [s2, set] = createSignal(j);
				indexes[j] = set;
				return mapFn(newItems[j], s2);
			}
			return mapFn(newItems[j]);
		}
	};
}
function createComponent(Comp, props) {
	return untrack(() => Comp(props || {}));
}
function trueFn() {
	return true;
}
const propTraps = {
	get(_, property, receiver) {
		if (property === $PROXY) return receiver;
		return _.get(property);
	},
	has(_, property) {
		if (property === $PROXY) return true;
		return _.has(property);
	},
	set: trueFn,
	deleteProperty: trueFn,
	getOwnPropertyDescriptor(_, property) {
		return {
			configurable: true,
			enumerable: true,
			get() {
				return _.get(property);
			},
			set: trueFn,
			deleteProperty: trueFn
		};
	},
	ownKeys(_) {
		return _.keys();
	}
};
function resolveSource(s2) {
	return !(s2 = typeof s2 === "function" ? s2() : s2) ? {} : s2;
}
function mergeProps(...sources) {
	let proxy = false;
	for (let i2 = 0; i2 < sources.length; i2++) {
		const s2 = sources[i2];
		proxy = proxy || !!s2 && $PROXY in s2;
		sources[i2] = typeof s2 === "function" ? (proxy = true, createMemo(s2)) : s2;
	}
	if (proxy) return new Proxy({
		get(property) {
			for (let i2 = sources.length - 1; i2 >= 0; i2--) {
				const v = resolveSource(sources[i2])[property];
				if (v !== void 0) return v;
			}
		},
		has(property) {
			for (let i2 = sources.length - 1; i2 >= 0; i2--) if (property in resolveSource(sources[i2])) return true;
			return false;
		},
		keys() {
			const keys = [];
			for (let i2 = 0; i2 < sources.length; i2++) keys.push(...Object.keys(resolveSource(sources[i2])));
			return [...new Set(keys)];
		}
	}, propTraps);
	const target = {};
	for (let i2 = sources.length - 1; i2 >= 0; i2--) if (sources[i2]) {
		const descriptors = Object.getOwnPropertyDescriptors(sources[i2]);
		for (const key in descriptors) {
			if (key in target) continue;
			Object.defineProperty(target, key, {
				enumerable: true,
				get() {
					for (let i3 = sources.length - 1; i3 >= 0; i3--) {
						const v = (sources[i3] || {})[key];
						if (v !== void 0) return v;
					}
				}
			});
		}
	}
	return target;
}
function splitProps(props, ...keys) {
	const blocked = new Set(keys.flat());
	if ($PROXY in props) {
		const res = keys.map((k) => {
			return new Proxy({
				get(property) {
					return k.includes(property) ? props[property] : void 0;
				},
				has(property) {
					return k.includes(property) && property in props;
				},
				keys() {
					return k.filter((property) => property in props);
				}
			}, propTraps);
		});
		res.push(new Proxy({
			get(property) {
				return blocked.has(property) ? void 0 : props[property];
			},
			has(property) {
				return blocked.has(property) ? false : property in props;
			},
			keys() {
				return Object.keys(props).filter((k) => !blocked.has(k));
			}
		}, propTraps));
		return res;
	}
	const descriptors = Object.getOwnPropertyDescriptors(props);
	keys.push(Object.keys(descriptors).filter((k) => !blocked.has(k)));
	return keys.map((k) => {
		const clone = {};
		for (let i2 = 0; i2 < k.length; i2++) {
			const key = k[i2];
			if (!(key in props)) continue;
			Object.defineProperty(clone, key, descriptors[key] ? descriptors[key] : {
				get() {
					return props[key];
				},
				set() {
					return true;
				},
				enumerable: true
			});
		}
		return clone;
	});
}
function For(props) {
	const fallback = "fallback" in props && { fallback: () => props.fallback };
	return createMemo(mapArray(() => props.each, props.children, fallback || void 0));
}
function Show(props) {
	let strictEqual = false;
	const keyed = props.keyed;
	const condition = createMemo(() => props.when, void 0, { equals: (a2, b) => strictEqual ? a2 === b : !a2 === !b });
	return createMemo(() => {
		const c2 = condition();
		if (c2) {
			const child = props.children;
			const fn = typeof child === "function" && child.length > 0;
			strictEqual = keyed || fn;
			return fn ? untrack(() => child(c2)) : child;
		}
		return props.fallback;
	}, void 0, void 0);
}
function Switch(props) {
	let strictEqual = false;
	let keyed = false;
	const equals = (a2, b) => a2[0] === b[0] && (strictEqual ? a2[1] === b[1] : !a2[1] === !b[1]) && a2[2] === b[2];
	const conditions = children(() => props.children), evalConditions = createMemo(() => {
		let conds = conditions();
		if (!Array.isArray(conds)) conds = [conds];
		for (let i2 = 0; i2 < conds.length; i2++) {
			const c2 = conds[i2].when;
			if (c2) {
				keyed = !!conds[i2].keyed;
				return [
					i2,
					c2,
					conds[i2]
				];
			}
		}
		return [-1];
	}, void 0, { equals });
	return createMemo(() => {
		const [index, when, cond] = evalConditions();
		if (index < 0) return props.fallback;
		const c2 = cond.children;
		const fn = typeof c2 === "function" && c2.length > 0;
		strictEqual = keyed || fn;
		return fn ? untrack(() => c2(when)) : c2;
	}, void 0, void 0);
}
function Match(props) {
	return props;
}
const booleans = [
	"allowfullscreen",
	"async",
	"autofocus",
	"autoplay",
	"checked",
	"controls",
	"default",
	"disabled",
	"formnovalidate",
	"hidden",
	"indeterminate",
	"ismap",
	"loop",
	"multiple",
	"muted",
	"nomodule",
	"novalidate",
	"open",
	"playsinline",
	"readonly",
	"required",
	"reversed",
	"seamless",
	"selected"
];
const Properties = /* @__PURE__ */ new Set([
	"className",
	"value",
	"readOnly",
	"formNoValidate",
	"isMap",
	"noModule",
	"playsInline",
	...booleans
]);
const ChildProperties = /* @__PURE__ */ new Set([
	"innerHTML",
	"textContent",
	"innerText",
	"children"
]);
const Aliases = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(null), {
	className: "class",
	htmlFor: "for"
});
const PropAliases = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(null), {
	class: "className",
	formnovalidate: "formNoValidate",
	ismap: "isMap",
	nomodule: "noModule",
	playsinline: "playsInline",
	readonly: "readOnly"
});
const DelegatedEvents = /* @__PURE__ */ new Set([
	"beforeinput",
	"click",
	"dblclick",
	"contextmenu",
	"focusin",
	"focusout",
	"input",
	"keydown",
	"keyup",
	"mousedown",
	"mousemove",
	"mouseout",
	"mouseover",
	"mouseup",
	"pointerdown",
	"pointermove",
	"pointerout",
	"pointerover",
	"pointerup",
	"touchend",
	"touchmove",
	"touchstart"
]);
const SVGElements = /* @__PURE__ */ new Set([
	"altGlyph",
	"altGlyphDef",
	"altGlyphItem",
	"animate",
	"animateColor",
	"animateMotion",
	"animateTransform",
	"circle",
	"clipPath",
	"color-profile",
	"cursor",
	"defs",
	"desc",
	"ellipse",
	"feBlend",
	"feColorMatrix",
	"feComponentTransfer",
	"feComposite",
	"feConvolveMatrix",
	"feDiffuseLighting",
	"feDisplacementMap",
	"feDistantLight",
	"feFlood",
	"feFuncA",
	"feFuncB",
	"feFuncG",
	"feFuncR",
	"feGaussianBlur",
	"feImage",
	"feMerge",
	"feMergeNode",
	"feMorphology",
	"feOffset",
	"fePointLight",
	"feSpecularLighting",
	"feSpotLight",
	"feTile",
	"feTurbulence",
	"filter",
	"font",
	"font-face",
	"font-face-format",
	"font-face-name",
	"font-face-src",
	"font-face-uri",
	"foreignObject",
	"g",
	"glyph",
	"glyphRef",
	"hkern",
	"image",
	"line",
	"linearGradient",
	"marker",
	"mask",
	"metadata",
	"missing-glyph",
	"mpath",
	"path",
	"pattern",
	"polygon",
	"polyline",
	"radialGradient",
	"rect",
	"set",
	"stop",
	"svg",
	"switch",
	"symbol",
	"text",
	"textPath",
	"tref",
	"tspan",
	"use",
	"view",
	"vkern"
]);
const SVGNamespace = {
	xlink: "http://www.w3.org/1999/xlink",
	xml: "http://www.w3.org/XML/1998/namespace"
};
function reconcileArrays(parentNode, a2, b) {
	let bLength = b.length, aEnd = a2.length, bEnd = bLength, aStart = 0, bStart = 0, after = a2[aEnd - 1].nextSibling, map = null;
	while (aStart < aEnd || bStart < bEnd) {
		if (a2[aStart] === b[bStart]) {
			aStart++;
			bStart++;
			continue;
		}
		while (a2[aEnd - 1] === b[bEnd - 1]) {
			aEnd--;
			bEnd--;
		}
		if (aEnd === aStart) {
			const node = bEnd < bLength ? bStart ? b[bStart - 1].nextSibling : b[bEnd - bStart] : after;
			while (bStart < bEnd) parentNode.insertBefore(b[bStart++], node);
		} else if (bEnd === bStart) while (aStart < aEnd) {
			if (!map || !map.has(a2[aStart])) a2[aStart].remove();
			aStart++;
		}
		else if (a2[aStart] === b[bEnd - 1] && b[bStart] === a2[aEnd - 1]) {
			const node = a2[--aEnd].nextSibling;
			parentNode.insertBefore(b[bStart++], a2[aStart++].nextSibling);
			parentNode.insertBefore(b[--bEnd], node);
			a2[aEnd] = b[bEnd];
		} else {
			if (!map) {
				map = /* @__PURE__ */ new Map();
				let i2 = bStart;
				while (i2 < bEnd) map.set(b[i2], i2++);
			}
			const index = map.get(a2[aStart]);
			if (index != null) if (bStart < index && index < bEnd) {
				let i2 = aStart, sequence = 1, t2;
				while (++i2 < aEnd && i2 < bEnd) {
					if ((t2 = map.get(a2[i2])) == null || t2 !== index + sequence) break;
					sequence++;
				}
				if (sequence > index - bStart) {
					const node = a2[aStart];
					while (bStart < index) parentNode.insertBefore(b[bStart++], node);
				} else parentNode.replaceChild(b[bStart++], a2[aStart++]);
			} else aStart++;
			else a2[aStart++].remove();
		}
	}
}
const $$EVENTS = "_$DX_DELEGATE";
function render(code$1, element, init, options = {}) {
	let disposer;
	createRoot((dispose2) => {
		disposer = dispose2;
		element === document ? code$1() : insert(element, code$1(), element.firstChild ? null : void 0, init);
	}, options.owner);
	return () => {
		disposer();
		element.textContent = "";
	};
}
function template$1(html, check, isSVG) {
	if (typeof window === "undefined") return null;
	const t2 = document.createElement("template");
	t2.innerHTML = html;
	let node = t2.content.firstChild;
	if (isSVG) node = node.firstChild;
	return node;
}
function delegateEvents(eventNames, document2 = window.document) {
	const e2 = document2[$$EVENTS] || (document2[$$EVENTS] = /* @__PURE__ */ new Set());
	for (let i2 = 0, l2 = eventNames.length; i2 < l2; i2++) {
		const name = eventNames[i2];
		if (!e2.has(name)) {
			e2.add(name);
			document2.addEventListener(name, eventHandler);
		}
	}
}
function setAttribute(node, name, value) {
	if (value == null) node.removeAttribute(name);
	else node.setAttribute(name, value);
}
function setAttributeNS(node, namespace, name, value) {
	if (value == null) node.removeAttributeNS(namespace, name);
	else node.setAttributeNS(namespace, name, value);
}
function className(node, value) {
	if (value == null) node.removeAttribute("class");
	else node.className = value;
}
function addEventListener(node, name, handler, delegate) {
	if (delegate) if (Array.isArray(handler)) {
		node[`$$${name}`] = handler[0];
		node[`$$${name}Data`] = handler[1];
	} else node[`$$${name}`] = handler;
	else if (Array.isArray(handler)) {
		const handlerFn = handler[0];
		node.addEventListener(name, handler[0] = (e2) => handlerFn.call(node, handler[1], e2));
	} else node.addEventListener(name, handler);
}
function classList(node, value, prev = {}) {
	const classKeys = Object.keys(value || {}), prevKeys = Object.keys(prev);
	let i2, len$1;
	for (i2 = 0, len$1 = prevKeys.length; i2 < len$1; i2++) {
		const key = prevKeys[i2];
		if (!key || key === "undefined" || value[key]) continue;
		toggleClassKey(node, key, false);
		delete prev[key];
	}
	for (i2 = 0, len$1 = classKeys.length; i2 < len$1; i2++) {
		const key = classKeys[i2], classValue = !!value[key];
		if (!key || key === "undefined" || prev[key] === classValue || !classValue) continue;
		toggleClassKey(node, key, true);
		prev[key] = classValue;
	}
	return prev;
}
function style(node, value, prev) {
	if (!value) return prev ? setAttribute(node, "style") : value;
	const nodeStyle = node.style;
	if (typeof value === "string") return nodeStyle.cssText = value;
	typeof prev === "string" && (nodeStyle.cssText = prev = void 0);
	prev || (prev = {});
	value || (value = {});
	let v, s2;
	for (s2 in prev) {
		value[s2] ?? nodeStyle.removeProperty(s2);
		delete prev[s2];
	}
	for (s2 in value) {
		v = value[s2];
		if (v !== prev[s2]) {
			nodeStyle.setProperty(s2, v);
			prev[s2] = v;
		}
	}
	return prev;
}
function spread(node, props = {}, isSVG, skipChildren) {
	const prevProps = {};
	if (!skipChildren) createRenderEffect(() => prevProps.children = insertExpression(node, props.children, prevProps.children));
	createRenderEffect(() => props.ref && props.ref(node));
	createRenderEffect(() => assign(node, props, isSVG, true, prevProps, true));
	return prevProps;
}
function use(fn, element, arg) {
	return untrack(() => fn(element, arg));
}
function insert(parent, accessor, marker, initial) {
	if (marker !== void 0 && !initial) initial = [];
	if (typeof accessor !== "function") return insertExpression(parent, accessor, initial, marker);
	createRenderEffect((current) => insertExpression(parent, accessor(), current, marker), initial);
}
function assign(node, props, isSVG, skipChildren, prevProps = {}, skipRef = false) {
	props || (props = {});
	for (const prop in prevProps) if (!(prop in props)) {
		if (prop === "children") continue;
		prevProps[prop] = assignProp(node, prop, null, prevProps[prop], isSVG, skipRef);
	}
	for (const prop in props) {
		if (prop === "children") {
			if (!skipChildren) insertExpression(node, props.children);
			continue;
		}
		const value = props[prop];
		prevProps[prop] = assignProp(node, prop, value, prevProps[prop], isSVG, skipRef);
	}
}
function getNextElement(template2) {
	let node, key;
	if (!sharedConfig.context || !(node = sharedConfig.registry.get(key = getHydrationKey()))) return template2.cloneNode(true);
	if (sharedConfig.completed) sharedConfig.completed.add(node);
	sharedConfig.registry.delete(key);
	return node;
}
function toPropertyName(name) {
	return name.toLowerCase().replace(/-([a-z])/g, (_, w) => w.toUpperCase());
}
function toggleClassKey(node, key, value) {
	const classNames = key.trim().split(/\s+/);
	for (let i2 = 0, nameLen = classNames.length; i2 < nameLen; i2++) node.classList.toggle(classNames[i2], value);
}
function assignProp(node, prop, value, prev, isSVG, skipRef) {
	let isCE, isProp, isChildProp;
	if (prop === "style") return style(node, value, prev);
	if (prop === "classList") return classList(node, value, prev);
	if (value === prev) return prev;
	if (prop === "ref") {
		if (!skipRef) value(node);
	} else if (prop.slice(0, 3) === "on:") {
		const e2 = prop.slice(3);
		prev && node.removeEventListener(e2, prev);
		value && node.addEventListener(e2, value);
	} else if (prop.slice(0, 10) === "oncapture:") {
		const e2 = prop.slice(10);
		prev && node.removeEventListener(e2, prev, true);
		value && node.addEventListener(e2, value, true);
	} else if (prop.slice(0, 2) === "on") {
		const name = prop.slice(2).toLowerCase();
		const delegate = DelegatedEvents.has(name);
		if (!delegate && prev) {
			const h2 = Array.isArray(prev) ? prev[0] : prev;
			node.removeEventListener(name, h2);
		}
		if (delegate || value) {
			addEventListener(node, name, value, delegate);
			delegate && delegateEvents([name]);
		}
	} else if ((isChildProp = ChildProperties.has(prop)) || !isSVG && (PropAliases[prop] || (isProp = Properties.has(prop))) || (isCE = node.nodeName.includes("-"))) if (prop === "class" || prop === "className") className(node, value);
	else if (isCE && !isProp && !isChildProp) node[toPropertyName(prop)] = value;
	else node[PropAliases[prop] || prop] = value;
	else {
		const ns = isSVG && prop.indexOf(":") > -1 && SVGNamespace[prop.split(":")[0]];
		if (ns) setAttributeNS(node, ns, prop, value);
		else setAttribute(node, Aliases[prop] || prop, value);
	}
	return value;
}
function eventHandler(e2) {
	const key = `$$${e2.type}`;
	let node = e2.composedPath && e2.composedPath()[0] || e2.target;
	if (e2.target !== node) Object.defineProperty(e2, "target", {
		configurable: true,
		value: node
	});
	Object.defineProperty(e2, "currentTarget", {
		configurable: true,
		get() {
			return node || document;
		}
	});
	if (sharedConfig.registry && !sharedConfig.done) {
		sharedConfig.done = true;
		document.querySelectorAll("[id^=pl-]").forEach((elem) => {
			while (elem && elem.nodeType !== 8 && elem.nodeValue !== "pl-" + e2) {
				let x = elem.nextSibling;
				elem.remove();
				elem = x;
			}
			elem && elem.remove();
		});
	}
	while (node) {
		const handler = node[key];
		if (handler && !node.disabled) {
			const data = node[`${key}Data`];
			data !== void 0 ? handler.call(node, data, e2) : handler.call(node, e2);
			if (e2.cancelBubble) return;
		}
		node = node._$host || node.parentNode || node.host;
	}
}
function insertExpression(parent, value, current, marker, unwrapArray) {
	if (sharedConfig.context && !current) current = [...parent.childNodes];
	while (typeof current === "function") current = current();
	if (value === current) return current;
	const t2 = typeof value, multi = marker !== void 0;
	parent = multi && current[0] && current[0].parentNode || parent;
	if (t2 === "string" || t2 === "number") {
		if (sharedConfig.context) return current;
		if (t2 === "number") value = value.toString();
		if (multi) {
			let node = current[0];
			if (node && node.nodeType === 3) node.data = value;
			else node = document.createTextNode(value);
			current = cleanChildren(parent, current, marker, node);
		} else if (current !== "" && typeof current === "string") current = parent.firstChild.data = value;
		else current = parent.textContent = value;
	} else if (value == null || t2 === "boolean") {
		if (sharedConfig.context) return current;
		current = cleanChildren(parent, current, marker);
	} else if (t2 === "function") {
		createRenderEffect(() => {
			let v = value();
			while (typeof v === "function") v = v();
			current = insertExpression(parent, v, current, marker);
		});
		return () => current;
	} else if (Array.isArray(value)) {
		const array = [];
		const currentArray = current && Array.isArray(current);
		if (normalizeIncomingArray(array, value, current, unwrapArray)) {
			createRenderEffect(() => current = insertExpression(parent, array, current, marker, true));
			return () => current;
		}
		if (sharedConfig.context) {
			if (!array.length) return current;
			for (let i2 = 0; i2 < array.length; i2++) if (array[i2].parentNode) return current = array;
		}
		if (array.length === 0) {
			current = cleanChildren(parent, current, marker);
			if (multi) return current;
		} else if (currentArray) if (current.length === 0) appendNodes(parent, array, marker);
		else reconcileArrays(parent, current, array);
		else {
			current && cleanChildren(parent);
			appendNodes(parent, array);
		}
		current = array;
	} else if (value instanceof Node) {
		if (sharedConfig.context && value.parentNode) return current = multi ? [value] : value;
		if (Array.isArray(current)) {
			if (multi) return current = cleanChildren(parent, current, marker, value);
			cleanChildren(parent, current, null, value);
		} else if (current == null || current === "" || !parent.firstChild) parent.appendChild(value);
		else parent.replaceChild(value, parent.firstChild);
		current = value;
	}
	return current;
}
function normalizeIncomingArray(normalized, array, current, unwrap2) {
	let dynamic = false;
	for (let i2 = 0, len$1 = array.length; i2 < len$1; i2++) {
		let item = array[i2], prev = current && current[i2];
		if (item instanceof Node) normalized.push(item);
		else if (item == null || item === true || item === false);
		else if (Array.isArray(item)) dynamic = normalizeIncomingArray(normalized, item, prev) || dynamic;
		else if (typeof item === "function") if (unwrap2) {
			while (typeof item === "function") item = item();
			dynamic = normalizeIncomingArray(normalized, Array.isArray(item) ? item : [item], Array.isArray(prev) ? prev : [prev]) || dynamic;
		} else {
			normalized.push(item);
			dynamic = true;
		}
		else {
			const value = String(item);
			if (prev && prev.nodeType === 3 && prev.data === value) normalized.push(prev);
			else normalized.push(document.createTextNode(value));
		}
	}
	return dynamic;
}
function appendNodes(parent, array, marker = null) {
	for (let i2 = 0, len$1 = array.length; i2 < len$1; i2++) parent.insertBefore(array[i2], marker);
}
function cleanChildren(parent, current, marker, replacement) {
	if (marker === void 0) return parent.textContent = "";
	const node = replacement || document.createTextNode("");
	if (current.length) {
		let inserted = false;
		for (let i2 = current.length - 1; i2 >= 0; i2--) {
			const el = current[i2];
			if (node !== el) {
				const isParent = el.parentNode === parent;
				if (!inserted && !i2) isParent ? parent.replaceChild(node, el) : parent.insertBefore(node, marker);
				else isParent && el.remove();
			} else inserted = true;
		}
	} else parent.insertBefore(node, marker);
	return [node];
}
function getHydrationKey() {
	const hydrate = sharedConfig.context;
	return `${hydrate.id}${hydrate.count++}`;
}
const SVG_NAMESPACE = "http://www.w3.org/2000/svg";
function createElement(tagName, isSVG = false) {
	return isSVG ? document.createElementNS(SVG_NAMESPACE, tagName) : document.createElement(tagName);
}
function Portal(props) {
	const { useShadow } = props, marker = document.createTextNode(""), mount = props.mount || document.body;
	function renderPortal() {
		if (sharedConfig.context) {
			const [s2, set] = createSignal(false);
			queueMicrotask(() => set(true));
			return () => s2() && props.children;
		} else return () => props.children;
	}
	if (mount instanceof HTMLHeadElement) {
		const [clean, setClean] = createSignal(false);
		const cleanup = () => setClean(true);
		createRoot((dispose2) => insert(mount, () => !clean() ? renderPortal()() : dispose2(), null));
		onCleanup(() => {
			if (sharedConfig.context) queueMicrotask(cleanup);
			else cleanup();
		});
	} else {
		const container = createElement(props.isSVG ? "g" : "div", props.isSVG), renderRoot = useShadow && container.attachShadow ? container.attachShadow({ mode: "open" }) : container;
		Object.defineProperty(container, "_$host", {
			get() {
				return marker.parentNode;
			},
			configurable: true
		});
		insert(renderRoot, renderPortal());
		mount.appendChild(container);
		props.ref && props.ref(container);
		onCleanup(() => mount.removeChild(container));
	}
	return marker;
}
function Dynamic(props) {
	const [p2, others] = splitProps(props, ["component"]);
	const cached = createMemo(() => p2.component);
	return createMemo(() => {
		const component = cached();
		switch (typeof component) {
			case "function": return untrack(() => component(others));
			case "string":
				const isSvg = SVGElements.has(component);
				const el = sharedConfig.context ? getNextElement() : createElement(component, isSvg);
				spread(el, others, isSvg);
				return el;
		}
	});
}
var THEME = /* @__PURE__ */ ((THEME2) => {
	THEME2["DARK"] = "DARK";
	THEME2["LIGHT"] = "LIGHT";
	return THEME2;
})(THEME || {});
let e = { data: "" }, t = (t2) => "object" == typeof window ? ((t2 ? t2.querySelector("#_goober") : window._goober) || Object.assign((t2 || document.head).appendChild(document.createElement("style")), {
	innerHTML: " ",
	id: "_goober"
})).firstChild : t2 || e, l = /(?:([\u0080-\uFFFF\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\s*)/g, a = /\/\*[^]*?\*\/|  +/g, n = /\n+/g, o = (e2, t2) => {
	let r = "", l2 = "", a2 = "";
	for (let n2 in e2) {
		let c2 = e2[n2];
		"@" == n2[0] ? "i" == n2[1] ? r = n2 + " " + c2 + ";" : l2 += "f" == n2[1] ? o(c2, n2) : n2 + "{" + o(c2, "k" == n2[1] ? "" : t2) + "}" : "object" == typeof c2 ? l2 += o(c2, t2 ? t2.replace(/([^,])+/g, (e3) => n2.replace(/(^:.*)|([^,])+/g, (t3) => /&/.test(t3) ? t3.replace(/&/g, e3) : e3 ? e3 + " " + t3 : t3)) : n2) : null != c2 && (n2 = /^--/.test(n2) ? n2 : n2.replace(/[A-Z]/g, "-$&").toLowerCase(), a2 += o.p ? o.p(n2, c2) : n2 + ":" + c2 + ";");
	}
	return r + (t2 && a2 ? t2 + "{" + a2 + "}" : a2) + l2;
}, c = {}, s = (e2) => {
	if ("object" == typeof e2) {
		let t2 = "";
		for (let r in e2) t2 += r + s(e2[r]);
		return t2;
	}
	return e2;
}, i$1 = (e2, t2, r, i2, p2) => {
	let u2 = s(e2), d = c[u2] || (c[u2] = ((e3) => {
		let t3 = 0, r2 = 11;
		for (; t3 < e3.length;) r2 = 101 * r2 + e3.charCodeAt(t3++) >>> 0;
		return "go" + r2;
	})(u2));
	if (!c[d]) {
		let t3 = u2 !== e2 ? e2 : ((e3) => {
			let t4, r2, o2 = [{}];
			for (; t4 = l.exec(e3.replace(a, ""));) t4[4] ? o2.shift() : t4[3] ? (r2 = t4[3].replace(n, " ").trim(), o2.unshift(o2[0][r2] = o2[0][r2] || {})) : o2[0][t4[1]] = t4[2].replace(n, " ").trim();
			return o2[0];
		})(e2);
		c[d] = o(p2 ? { ["@keyframes " + d]: t3 } : t3, r ? "" : "." + d);
	}
	let f = r && c.g ? c.g : null;
	return r && (c.g = c[d]), ((e3, t3, r2, l2) => {
		l2 ? t3.data = t3.data.replace(l2, e3) : -1 === t3.data.indexOf(e3) && (t3.data = r2 ? e3 + t3.data : t3.data + e3);
	})(c[d], t2, i2, f), d;
}, p = (e2, t2, r) => e2.reduce((e3, l2, a2) => {
	let n2 = t2[a2];
	if (n2 && n2.call) {
		let e4 = n2(r), t3 = e4 && e4.props && e4.props.className || /^go/.test(e4) && e4;
		n2 = t3 ? "." + t3 : e4 && "object" == typeof e4 ? e4.props ? "" : o(e4, "") : false === e4 ? "" : e4;
	}
	return e3 + l2 + (null == n2 ? "" : n2);
}, "");
function u(e2) {
	let r = this || {}, l2 = e2.call ? e2(r.p) : e2;
	return i$1(l2.unshift ? l2.raw ? p(l2, [].slice.call(arguments, 1), r.p) : l2.reduce((e3, t2) => Object.assign(e3, t2 && t2.call ? t2(r.p) : t2), {}) : l2, t(r.target), r.g, r.o, r.k);
}
u.bind({ g: 1 });
let h = u.bind({ k: 1 });
const ThemeContext = createContext();
function ThemeProvider(props) {
	return createComponent(ThemeContext.Provider, {
		value: props.theme,
		get children() {
			return props.children;
		}
	});
}
function useTheme() {
	return useContext(ThemeContext);
}
function makeStyled(tag) {
	let _ctx = this || {};
	return (...args) => {
		const Styled = (props) => {
			const theme = useContext(ThemeContext);
			const withTheme = mergeProps(props, { theme });
			const clone = mergeProps(withTheme, { get class() {
				const pClass = withTheme.class, append = "class" in withTheme && /^go[0-9]+/.test(pClass);
				let className2 = u.apply({
					target: _ctx.target,
					o: append,
					p: withTheme,
					g: _ctx.g
				}, args);
				return [pClass, className2].filter(Boolean).join(" ");
			} });
			const [local, newProps] = splitProps(clone, ["as", "theme"]);
			const htmlProps = newProps;
			const createTag = local.as || tag;
			let el;
			if (typeof createTag === "function") el = createTag(htmlProps);
			else if (_ctx.g == 1) {
				el = document.createElement(createTag);
				spread(el, htmlProps);
			} else el = Dynamic(mergeProps({ component: createTag }, htmlProps));
			return el;
		};
		Styled.class = (props) => {
			return untrack(() => {
				return u.apply({
					target: _ctx.target,
					p: props,
					g: _ctx.g
				}, args);
			});
		};
		return Styled;
	};
}
const styled = new Proxy(makeStyled, { get(target, tag) {
	return target(tag);
} });
function createGlobalStyles() {
	const fn = makeStyled.call({ g: 1 }, "div").apply(null, arguments);
	return function GlobalStyles2(props) {
		fn(props);
		return null;
	};
}
const globalStylesTag = "tc-root";
const disableScrollClass = "tc-disable-scroll";
const usingMouseClass = "tc-using-mouse";
const GlobalStyles = () => {
	document.body.addEventListener("mousedown", () => document.body.classList.add(usingMouseClass));
	document.body.addEventListener("keydown", (event) => {
		if (event.key === "Tab") document.body.classList.remove(usingMouseClass);
	});
	const Styles = createGlobalStyles`
    ${globalStylesTag} * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        
        font-family: -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', Arial, Tahoma, Verdana, sans-serif;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;        
        -webkit-tap-highlight-color: transparent;
    }
    
    ${globalStylesTag} img {
      -webkit-user-select: none;
      -webkit-touch-callout: none;
    }   
 
    ${globalStylesTag} *:focus {
        outline: #08f auto 2px;
    }
    
    ${globalStylesTag} li {
        list-style: none;
    }
    
    ${globalStylesTag} button {
        outline: none;
    }
    
    body.${disableScrollClass} {
        position: fixed; 
        overflow-y: scroll;
        right: 0;
        left: 0;
    }
    
    body.${usingMouseClass} ${globalStylesTag} *:focus {
        outline: none;
    }
`;
	return createComponent(Styles, {});
};
function hexToRgb(hex) {
	if (hex[0] === "#") hex = hex.slice(1);
	const bigint = parseInt(hex, 16);
	const r = bigint >> 16 & 255;
	const g = bigint >> 8 & 255;
	const b = bigint & 255;
	return [
		r,
		g,
		b
	].join(",");
}
function rgba(color, opacity) {
	if (color[0] === "#") color = hexToRgb(color);
	return `rgba(${color}, ${opacity})`;
}
function toPx(value) {
	return value.toString() + "px";
}
const _InMemoryStorage = class {
	constructor() {
		__publicField(this, "storage", {});
	}
	static getInstance() {
		if (!_InMemoryStorage.instance) _InMemoryStorage.instance = new _InMemoryStorage();
		return _InMemoryStorage.instance;
	}
	get length() {
		return Object.keys(this.storage).length;
	}
	clear() {
		this.storage = {};
	}
	getItem(key) {
		var _a2;
		return (_a2 = this.storage[key]) != null ? _a2 : null;
	}
	key(index) {
		var _a2;
		const keys = Object.keys(this.storage);
		if (index < 0 || index >= keys.length) return null;
		return (_a2 = keys[index]) != null ? _a2 : null;
	}
	removeItem(key) {
		delete this.storage[key];
	}
	setItem(key, value) {
		this.storage[key] = value;
	}
};
let InMemoryStorage = _InMemoryStorage;
__publicField(InMemoryStorage, "instance");
var TonConnectUIError = class TonConnectUIError extends TonConnectError {
	constructor(...args) {
		super(...args);
		Object.setPrototypeOf(this, TonConnectUIError.prototype);
	}
};
function logDebug(...args) {
	try {
		console.debug("[TON_CONNECT_UI]", ...args);
	} catch (e2) {}
}
function logError(...args) {
	try {
		console.error("[TON_CONNECT_UI]", ...args);
	} catch (e2) {}
}
function logWarning(...args) {
	try {
		console.warn("[TON_CONNECT_UI]", ...args);
	} catch (e2) {}
}
function openLink(href, target = "_self") {
	logDebug("openLink", href, target);
	window.open(href, target, "noopener noreferrer");
}
function openLinkBlank(href) {
	openLink(href, "_blank");
}
function openDeeplinkWithFallback(href, fallback) {
	const doFallback = () => {
		if (isBrowser("safari") || isOS("android") && isBrowser("firefox")) return;
		fallback();
	};
	const fallbackTimeout = setTimeout(() => doFallback(), 200);
	window.addEventListener("blur", () => clearTimeout(fallbackTimeout), { once: true });
	openLink(href, "_self");
}
function getSystemTheme() {
	if (window.matchMedia && window.matchMedia("(prefers-color-scheme: light)").matches) return THEME.LIGHT;
	return THEME.DARK;
}
function subscribeToThemeChange(callback) {
	const handler = (event) => callback(event.matches ? THEME.DARK : THEME.LIGHT);
	window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", handler);
	return () => window.matchMedia("(prefers-color-scheme: dark)").removeEventListener("change", handler);
}
function disableScroll() {
	if (document.documentElement.scrollHeight === document.documentElement.clientHeight) return;
	document.body.style.top = toPx(-document.documentElement.scrollTop);
	document.body.classList.add(disableScrollClass);
}
function enableScroll() {
	document.body.classList.remove(disableScrollClass);
	document.documentElement.scrollTo({ top: -parseFloat(getComputedStyle(document.body).top) });
	document.body.style.top = "auto";
}
function fixMobileSafariActiveTransition() {
	if (!document.body.hasAttribute("ontouchstart")) document.body.setAttribute("ontouchstart", "");
}
function defineStylesRoot() {
	customElements.define(globalStylesTag, class TcRootElement extends HTMLElement {});
}
function createMacrotask(callback) {
	return __async(this, null, function* () {
		yield new Promise((resolve) => requestAnimationFrame(resolve));
		callback();
	});
}
function createMacrotaskAsync(callback) {
	return __async(this, null, function* () {
		yield new Promise((resolve) => requestAnimationFrame(resolve));
		return callback();
	});
}
function preloadImages(images) {
	if (document.readyState !== "complete") window.addEventListener("load", () => createMacrotask(() => preloadImages(images)), { once: true });
	else images.forEach((img) => {
		const node = new window.Image();
		node.src = img;
	});
}
function getWindow$1() {
	if (typeof window !== "undefined") return window;
	return void 0;
}
function tryGetLocalStorage() {
	if (isLocalStorageAvailable()) return localStorage;
	if (isNodeJs()) throw new TonConnectUIError("`localStorage` is unavailable, but it is required for TonConnect. For more details, see https://github.com/ton-connect/sdk/tree/main/packages/sdk#init-connector");
	return InMemoryStorage.getInstance();
}
function isLocalStorageAvailable() {
	try {
		return typeof localStorage !== "undefined";
	} catch (e2) {
		return false;
	}
}
function isNodeJs() {
	return typeof process !== "undefined" && process.versions != null && process.versions.node != null;
}
function getUserAgent() {
	var _a2, _b2, _c2;
	const results = new import_ua_parser.default().getResult();
	const osName = (_a2 = results.os.name) == null ? void 0 : _a2.toLowerCase();
	const deviceModel = (_b2 = results.device.model) == null ? void 0 : _b2.toLowerCase();
	let os;
	switch (true) {
		case deviceModel === "ipad":
			os = "ipad";
			break;
		case osName === "ios":
			os = "ios";
			break;
		case osName === "android":
			os = "android";
			break;
		case osName === "mac os":
			os = "macos";
			break;
		case osName === "linux":
			os = "linux";
			break;
		case osName == null ? void 0 : osName.includes("windows"):
			os = "windows";
			break;
	}
	const browserName = (_c2 = results.browser.name) == null ? void 0 : _c2.toLowerCase();
	let browser;
	switch (true) {
		case browserName === "chrome":
			browser = "chrome";
			break;
		case browserName === "firefox":
			browser = "firefox";
			break;
		case browserName == null ? void 0 : browserName.includes("safari"):
			browser = "safari";
			break;
		case browserName == null ? void 0 : browserName.includes("opera"):
			browser = "opera";
			break;
	}
	return {
		os,
		browser
	};
}
function isOS(...os) {
	return os.includes(getUserAgent().os);
}
function isBrowser(...browser) {
	return browser.includes(getUserAgent().browser);
}
function toDeeplink(universalLink, deeplink) {
	const url = new URL(universalLink);
	return deeplink + url.search;
}
var WalletInfoStorage = class {
	constructor() {
		__publicField(this, "localStorage");
		__publicField(this, "storageKey", "ton-connect-ui_wallet-info");
		this.localStorage = tryGetLocalStorage();
	}
	setWalletInfo(walletInfo) {
		this.localStorage.setItem(this.storageKey, JSON.stringify(walletInfo));
	}
	getWalletInfo() {
		const walletInfoString = this.localStorage.getItem(this.storageKey);
		if (!walletInfoString) return null;
		return JSON.parse(walletInfoString);
	}
	removeWalletInfo() {
		this.localStorage.removeItem(this.storageKey);
	}
};
var PreferredWalletStorage = class {
	constructor() {
		__publicField(this, "localStorage");
		__publicField(this, "storageKey", "ton-connect-ui_preferred-wallet");
		this.localStorage = tryGetLocalStorage();
	}
	setPreferredWalletAppName(name) {
		this.localStorage.setItem(this.storageKey, name);
	}
	getPreferredWalletAppName() {
		return this.localStorage.getItem(this.storageKey) || void 0;
	}
};
var LastSelectedWalletInfoStorage = class {
	constructor() {
		__publicField(this, "localStorage");
		__publicField(this, "storageKey", "ton-connect-ui_last-selected-wallet-info");
		this.localStorage = tryGetLocalStorage();
	}
	setLastSelectedWalletInfo(walletInfo) {
		this.localStorage.setItem(this.storageKey, JSON.stringify(walletInfo));
	}
	getLastSelectedWalletInfo() {
		const walletInfoString = this.localStorage.getItem(this.storageKey);
		if (!walletInfoString) return null;
		return JSON.parse(walletInfoString);
	}
	removeLastSelectedWalletInfo() {
		this.localStorage.removeItem(this.storageKey);
	}
};
const [walletsModalState, setWalletsModalState] = createSignal({
	status: "closed",
	closeReason: null
});
const getWalletsModalIsOpened = createMemo(() => walletsModalState().status === "opened");
const [singleWalletModalState, setSingleWalletModalState] = createSignal({
	status: "closed",
	closeReason: null
});
const getSingleWalletModalIsOpened = createMemo(() => singleWalletModalState().status === "opened");
const getSingleWalletModalWalletInfo = createMemo(() => {
	const state = singleWalletModalState();
	if (state.status === "opened") return state.walletInfo;
	return null;
});
let lastSelectedWalletInfoStorage = typeof window !== "undefined" ? new LastSelectedWalletInfoStorage() : void 0;
const [lastSelectedWalletInfo, _setLastSelectedWalletInfo] = createSignal((lastSelectedWalletInfoStorage == null ? void 0 : lastSelectedWalletInfoStorage.getLastSelectedWalletInfo()) || null);
const setLastSelectedWalletInfo = (walletInfo) => {
	if (!lastSelectedWalletInfoStorage) lastSelectedWalletInfoStorage = new LastSelectedWalletInfoStorage();
	if (walletInfo) lastSelectedWalletInfoStorage.setLastSelectedWalletInfo(walletInfo);
	else lastSelectedWalletInfoStorage.removeLastSelectedWalletInfo();
	_setLastSelectedWalletInfo(walletInfo);
};
const [action, setAction] = createSignal(null);
const common$1 = {
	close: "Close",
	openWallet: "Open wallet",
	copyLink: "Copy Link",
	linkCopied: "Link Copied",
	copied: "Copied",
	yourWallet: "Your Wallet",
	retry: "Retry",
	get: "GET",
	mobile: "Mobile",
	browserExtension: "Browser Extension",
	desktop: "Desktop"
};
const button$1 = {
	connectWallet: "Connect Wallet",
	dropdown: {
		copy: "Copy address",
		copied: "Address copied!",
		disconnect: "Disconnect"
	}
};
const notifications$1 = {
	confirm: { header: "Open {{ name }} to\xA0confirm the\xA0transaction." },
	transactionSent: {
		header: "Transaction sent",
		text: "Your transaction\xA0will be\xA0processed in\xA0a\xA0few seconds."
	},
	transactionCanceled: {
		header: "Transaction canceled",
		text: "There will be no changes to\xA0your account."
	}
};
const walletItem$1 = {
	walletOn: "Wallet in",
	recent: "Recent",
	installed: "Installed",
	popular: "Popular"
};
const walletModal$1 = {
	loading: "Loading wallets",
	wallets: "Wallets",
	mobileUniversalModal: {
		connectYourWallet: "Connect your TON\xA0wallet",
		openWalletOnTelegramOrSelect: "Use Wallet in Telegram or choose other application",
		openWalletOnTelegram: "Connect Wallet in Telegram",
		chooseOtherApplication: "Choose other application",
		openLink: "Open Link",
		scan: "Scan with your mobile\xA0wallet"
	},
	desktopUniversalModal: {
		connectYourWallet: "Connect your TON wallet",
		scan: "Scan with your mobile wallet",
		availableWallets: "Available wallets"
	},
	mobileConnectionModal: {
		showQR: "Show QR Code",
		scanQR: "Scan the\xA0QR code below with your phone’s\xA0or\xA0{{ name }}’s camera",
		missingFeatures: "Please update {{ name }}, your version does not support required features for this dApp",
		notSupportedWallet: "{{ name }} doesn’t support the requested action. Please connect another wallet that supports it",
		continueIn: "Continue in {{ name }}…",
		updateWallet: "Update {{ name }}",
		chooseAnotherWallet: "Choose Another Wallet",
		connectionDeclined: "Connection declined"
	},
	desktopConnectionModal: {
		scanQR: "Scan the\xA0QR code below with your phone’s\xA0or\xA0{{ name }}’s camera",
		continueInExtension: "Continue in\xA0{{ name }} browser extension…",
		dontHaveExtension: "Seems you don't have installed {{ name }}\xA0browser\xA0extension",
		missingFeatures: "Please update {{ name }}, your version does not support required features for this dApp",
		notSupportedWallet: "{{ name }} doesn’t support the requested action. Please connect another wallet that supports it",
		getWallet: "Get {{ name }}",
		updateWallet: "Update {{ name }}",
		chooseAnotherWallet: "Choose Another Wallet",
		continueOnDesktop: "Continue in\xA0{{ name }} on desktop…",
		openWalletOnTelegram: "Connect Wallet in Telegram on desktop",
		connectionDeclined: "Connection declined"
	},
	infoModal: {
		whatIsAWallet: "What is a wallet",
		secureDigitalAssets: "Secure digital assets storage",
		walletProtects: "A wallet protects and manages your digital assets\xA0including TON, tokens and collectables.",
		controlIdentity: "Control your Web3 identity",
		manageIdentity: "Manage your digital identity and access decentralized applications with ease. Maintain control over your data and engage securely in\xA0the\xA0blockchain ecosystem.",
		effortlessCryptoTransactions: "Effortless crypto transactions",
		easilySend: "Easily send, receive, monitor your cryptocurrencies.\xA0Streamline your operations with\xA0decentralized applications.",
		getAWallet: "Get a Wallet"
	},
	allWallets: {
		walletsBelowNotSupported: "The wallets below don’t support all features of\xA0the connected service. You can use your recovery phrase in one of the supported wallets above.",
		walletNotSupportService: "{{ name }} doesn’t support connected service"
	}
};
const actionModal$1 = {
	confirmTransaction: {
		header: "Confirm the\xA0transaction in\xA0{{ name }}",
		text: "It will only take a\xA0moment."
	},
	transactionSent: "$notifications.transactionSent",
	transactionCanceled: "$notifications.transactionCanceled"
};
const en = {
	common: common$1,
	button: button$1,
	notifications: notifications$1,
	walletItem: walletItem$1,
	walletModal: walletModal$1,
	actionModal: actionModal$1
};
const common = {
	close: "Закрыть",
	openWallet: "Открыть кошелёк",
	copyLink: "Скопировать",
	linkCopied: "Ссылка скопирована",
	copied: "Скопировано",
	yourWallet: "Ваш кошелёк",
	retry: "Повторить",
	get: "Скачать",
	mobile: "Мобильный",
	browserExtension: "Расширение",
	desktop: "Десктоп"
};
const button = {
	connectWallet: "Подключить кошелёк",
	dropdown: {
		copy: "Скопировать адрес",
		copied: "Адрес скопирован!",
		disconnect: "Отключить кошелёк"
	}
};
const notifications = {
	confirm: { header: "Откройте {{ name }}, чтобы\xA0подтвердить транзакцию." },
	transactionSent: {
		header: "Транзакция отправлена",
		text: "Ваша транзакция\xA0будет обработана через\xA0несколько секунд."
	},
	transactionCanceled: {
		header: "Транзакция отменена",
		text: "Состояние вашего счёта не\xA0изменится."
	}
};
const walletItem = {
	walletOn: "Wallet в",
	recent: "Недавний",
	installed: "Установлен",
	popular: "Популярен"
};
const walletModal = {
	loading: "Кошельки загружаются",
	wallets: "Кошельки",
	mobileUniversalModal: {
		connectYourWallet: "Подключите TON\xA0кошелёк",
		openWalletOnTelegramOrSelect: "Подключите Wallet в\xA0Telegram или\xA0выберете другое приложение",
		openWalletOnTelegram: "Открыть Wallet в Telegram",
		chooseOtherApplication: "Выберите другое приложение",
		openLink: "Открыть",
		scan: "Отсканируйте камерой вашего\xA0телефона"
	},
	desktopUniversalModal: {
		connectYourWallet: "Подключите TON кошелёк",
		scan: "Отсканируйте QR-код камерой вашего\xA0телефона",
		availableWallets: "Доступные кошельки"
	},
	mobileConnectionModal: {
		showQR: "Показать QR-код",
		scanQR: "Отсканируйте QR-код ниже камерой в\xA0приложении {{ name }}, или\xA0камерой телефона",
		missingFeatures: "Обновите {{ name }}, ваша версия не поддерживает необходимые функции для этого dApp",
		notSupportedWallet: "{{ name }} не поддерживает запрошенное действие. Пожалуйста, подключите другой кошелёк, который поддерживает это",
		continueIn: "Продолжите в {{ name }}…",
		updateWallet: "Обновить {{ name }}",
		chooseAnotherWallet: "Выбрать другой кошелёк",
		connectionDeclined: "Подключение отклонено"
	},
	desktopConnectionModal: {
		scanQR: "Отсканируйте QR-код ниже камерой в\xA0приложении {{ name }}, или\xA0камерой телефона",
		continueInExtension: "Откройте браузерное расширение {{ name }}",
		dontHaveExtension: "Похоже, у вас не\xA0установлено браузерное\xA0расширение\xA0{{ name }}",
		missingFeatures: "Обновите {{ name }}, ваша версия не поддерживает необходимые функции для этого dApp",
		notSupportedWallet: "{{ name }} не поддерживает запрошенное действие. Пожалуйста, подключите другой кошелёк, который поддерживает это",
		getWallet: "Скачать {{ name }}",
		updateWallet: "Обновить {{ name }}",
		chooseAnotherWallet: "Выбрать другой кошелёк",
		continueOnDesktop: "Откройте {{ name }} на\xA0компьютере…",
		openWalletOnTelegram: "Открыть Wallet в\xA0Telegram",
		connectionDeclined: "Подключение отклонено"
	},
	infoModal: {
		whatIsAWallet: "Что такое кошелёк?",
		secureDigitalAssets: "Надежное хранилище цифровых активов",
		walletProtects: "Кошелёк защищает ваши цифровые активы, включая TON, токены и\xA0предметы коллекционирования, и\xA0управляет ими.",
		controlIdentity: "Контроль своей личности Web3",
		manageIdentity: "Управляйте своей цифровой идентификацией и\xA0с\xA0легкостью получайте доступ к\xA0децентрализованным приложениям. Сохраняйте контроль над\xA0своими данными и\xA0безопасно участвуйте в\xA0экосистеме\xA0блокчейна.",
		effortlessCryptoTransactions: "Простые криптотранзакции",
		easilySend: "Легко отправляйте, получайте и\xA0отслеживайте свои криптовалюты. Оптимизируйте свои операции с\xA0помощью децентрализованных приложений.",
		getAWallet: "Скачать кошелёк"
	},
	allWallets: {
		walletsBelowNotSupported: "Кошельки ниже не поддерживают все функции подключённого сервиса. Вы можете использовать свою фразу восстановления в одном из поддерживаемых выше кошельков.",
		walletNotSupportService: "{{ name }} не поддерживает подключённый сервис"
	}
};
const actionModal = {
	confirmTransaction: {
		header: "Подтвердите действие в\xA0{{ name }}",
		text: "Это займет пару секунд."
	},
	transactionSent: "$notifications.transactionSent",
	transactionCanceled: "$notifications.transactionCanceled"
};
const ru = {
	common,
	button,
	notifications,
	walletItem,
	walletModal,
	actionModal
};
const i18nDictionary = {
	en: parseDictionary(en),
	ru: parseDictionary(ru)
};
function parseDictionary(dictionary) {
	const refSymbol = "$";
	const iterate = (subDictionary) => {
		Object.entries(subDictionary).forEach(([key, value]) => {
			if (typeof value === "object" && value) return iterate(value);
			if (typeof value === "string") {
				if (value[0] === refSymbol) {
					const path = value.slice(1).split(".");
					let obj = dictionary;
					path.forEach((item) => {
						if (item in obj) obj = obj[item];
						else throw new Error(`Cannot parse translations: there is no property ${item} in translation`);
					});
					subDictionary[key] = obj;
				}
				if (value.slice(0, 2) === `\\${refSymbol}`) subDictionary[key] = value.slice(1);
			}
		});
	};
	iterate(dictionary);
	return dictionary;
}
const ConnectorContext = createContext();
const $RAW = Symbol("store-raw"), $NODE = Symbol("store-node"), $NAME = Symbol("store-name");
function wrap$1(value, name) {
	let p2 = value[$PROXY];
	if (!p2) {
		Object.defineProperty(value, $PROXY, { value: p2 = new Proxy(value, proxyTraps$1) });
		if (!Array.isArray(value)) {
			const keys = Object.keys(value), desc = Object.getOwnPropertyDescriptors(value);
			for (let i2 = 0, l2 = keys.length; i2 < l2; i2++) {
				const prop = keys[i2];
				if (desc[prop].get) Object.defineProperty(value, prop, {
					enumerable: desc[prop].enumerable,
					get: desc[prop].get.bind(p2)
				});
			}
		}
	}
	return p2;
}
function isWrappable(obj) {
	let proto;
	return obj != null && typeof obj === "object" && (obj[$PROXY] || !(proto = Object.getPrototypeOf(obj)) || proto === Object.prototype || Array.isArray(obj));
}
function unwrap(item, set = /* @__PURE__ */ new Set()) {
	let result, unwrapped, v, prop;
	if (result = item != null && item[$RAW]) return result;
	if (!isWrappable(item) || set.has(item)) return item;
	if (Array.isArray(item)) {
		if (Object.isFrozen(item)) item = item.slice(0);
		else set.add(item);
		for (let i2 = 0, l2 = item.length; i2 < l2; i2++) {
			v = item[i2];
			if ((unwrapped = unwrap(v, set)) !== v) item[i2] = unwrapped;
		}
	} else {
		if (Object.isFrozen(item)) item = Object.assign({}, item);
		else set.add(item);
		const keys = Object.keys(item), desc = Object.getOwnPropertyDescriptors(item);
		for (let i2 = 0, l2 = keys.length; i2 < l2; i2++) {
			prop = keys[i2];
			if (desc[prop].get) continue;
			v = item[prop];
			if ((unwrapped = unwrap(v, set)) !== v) item[prop] = unwrapped;
		}
	}
	return item;
}
function getDataNodes(target) {
	let nodes = target[$NODE];
	if (!nodes) Object.defineProperty(target, $NODE, { value: nodes = {} });
	return nodes;
}
function getDataNode(nodes, property, value) {
	return nodes[property] || (nodes[property] = createDataNode(value));
}
function proxyDescriptor$1(target, property) {
	const desc = Reflect.getOwnPropertyDescriptor(target, property);
	if (!desc || desc.get || !desc.configurable || property === $PROXY || property === $NODE || property === $NAME) return desc;
	delete desc.value;
	delete desc.writable;
	desc.get = () => target[$PROXY][property];
	return desc;
}
function trackSelf(target) {
	if (getListener()) {
		const nodes = getDataNodes(target);
		(nodes._ || (nodes._ = createDataNode()))();
	}
}
function ownKeys(target) {
	trackSelf(target);
	return Reflect.ownKeys(target);
}
function createDataNode(value) {
	const [s2, set] = createSignal(value, {
		equals: false,
		internal: true
	});
	s2.$ = set;
	return s2;
}
const proxyTraps$1 = {
	get(target, property, receiver) {
		if (property === $RAW) return target;
		if (property === $PROXY) return receiver;
		if (property === $TRACK) {
			trackSelf(target);
			return receiver;
		}
		const nodes = getDataNodes(target);
		const tracked = nodes.hasOwnProperty(property);
		let value = tracked ? nodes[property]() : target[property];
		if (property === $NODE || property === "__proto__") return value;
		if (!tracked) {
			const desc = Object.getOwnPropertyDescriptor(target, property);
			if (getListener() && (typeof value !== "function" || target.hasOwnProperty(property)) && !(desc && desc.get)) value = getDataNode(nodes, property, value)();
		}
		return isWrappable(value) ? wrap$1(value) : value;
	},
	has(target, property) {
		if (property === $RAW || property === $PROXY || property === $TRACK || property === $NODE || property === "__proto__") return true;
		this.get(target, property, target);
		return property in target;
	},
	set() {
		return true;
	},
	deleteProperty() {
		return true;
	},
	ownKeys,
	getOwnPropertyDescriptor: proxyDescriptor$1
};
function setProperty(state, property, value, deleting = false) {
	if (!deleting && state[property] === value) return;
	const prev = state[property], len$1 = state.length;
	if (value === void 0) delete state[property];
	else state[property] = value;
	let nodes = getDataNodes(state), node;
	if (node = getDataNode(nodes, property, prev)) node.$(() => value);
	if (Array.isArray(state) && state.length !== len$1) (node = getDataNode(nodes, "length", len$1)) && node.$(state.length);
	(node = nodes._) && node.$();
}
function mergeStoreNode(state, value) {
	const keys = Object.keys(value);
	for (let i2 = 0; i2 < keys.length; i2 += 1) {
		const key = keys[i2];
		setProperty(state, key, value[key]);
	}
}
function updateArray(current, next) {
	if (typeof next === "function") next = next(current);
	next = unwrap(next);
	if (Array.isArray(next)) {
		if (current === next) return;
		let i2 = 0, len$1 = next.length;
		for (; i2 < len$1; i2++) {
			const value = next[i2];
			if (current[i2] !== value) setProperty(current, i2, value);
		}
		setProperty(current, "length", len$1);
	} else mergeStoreNode(current, next);
}
function updatePath(current, path, traversed = []) {
	let part, prev = current;
	if (path.length > 1) {
		part = path.shift();
		const partType = typeof part, isArray = Array.isArray(current);
		if (Array.isArray(part)) {
			for (let i2 = 0; i2 < part.length; i2++) updatePath(current, [part[i2]].concat(path), traversed);
			return;
		} else if (isArray && partType === "function") {
			for (let i2 = 0; i2 < current.length; i2++) if (part(current[i2], i2)) updatePath(current, [i2].concat(path), traversed);
			return;
		} else if (isArray && partType === "object") {
			const { from: from$1 = 0, to = current.length - 1, by = 1 } = part;
			for (let i2 = from$1; i2 <= to; i2 += by) updatePath(current, [i2].concat(path), traversed);
			return;
		} else if (path.length > 1) {
			updatePath(current[part], path, [part].concat(traversed));
			return;
		}
		prev = current[part];
		traversed = [part].concat(traversed);
	}
	let value = path[0];
	if (typeof value === "function") {
		value = value(prev, traversed);
		if (value === prev) return;
	}
	if (part === void 0 && value == void 0) return;
	value = unwrap(value);
	if (part === void 0 || isWrappable(prev) && isWrappable(value) && !Array.isArray(value)) mergeStoreNode(prev, value);
	else setProperty(current, part, value);
}
function createStore(...[store, options]) {
	const unwrappedStore = unwrap(store || {});
	const isArray = Array.isArray(unwrappedStore);
	const wrappedStore = wrap$1(unwrappedStore);
	function setStore(...args) {
		batch(() => {
			isArray && args.length === 1 ? updateArray(unwrappedStore, args[0]) : updatePath(unwrappedStore, args);
		});
	}
	return [wrappedStore, setStore];
}
const defaultLightColorsSet = {
	constant: {
		black: "#000000",
		white: "#FFFFFF"
	},
	connectButton: {
		background: "#0098EA",
		foreground: "#FFFFFF"
	},
	accent: "#0098EA",
	telegramButton: "#0098EA",
	icon: {
		primary: "#0F0F0F",
		secondary: "#7A8999",
		tertiary: "#C1CAD2",
		success: "#29CC6A",
		error: "#F5A73B"
	},
	background: {
		primary: "#FFFFFF",
		secondary: "#F1F3F5",
		segment: "#FFFFFF",
		tint: "#F1F3F5",
		qr: "#F1F3F5"
	},
	text: {
		primary: "#0F0F0F",
		secondary: "#6A7785"
	}
};
const defaultDarkColorsSet = {
	constant: {
		black: "#000000",
		white: "#FFFFFF"
	},
	connectButton: {
		background: "#0098EA",
		foreground: "#FFFFFF"
	},
	accent: "#E5E5EA",
	telegramButton: "#31A6F5",
	icon: {
		primary: "#E5E5EA",
		secondary: "#909099",
		tertiary: "#434347",
		success: "#29CC6A",
		error: "#F5A73B"
	},
	background: {
		primary: "#121214",
		secondary: "#18181A",
		segment: "#262629",
		tint: "#222224",
		qr: "#FFFFFF"
	},
	text: {
		primary: "#E5E5EA",
		secondary: "#7D7D85"
	}
};
/*!
* is-plain-object <https://github.com/jonschlinkert/is-plain-object>
*
* Copyright (c) 2014-2017, Jon Schlinkert.
* Released under the MIT License.
*/
function isObject(o2) {
	return Object.prototype.toString.call(o2) === "[object Object]";
}
function isPlainObject(o2) {
	var ctor, prot;
	if (isObject(o2) === false) return false;
	ctor = o2.constructor;
	if (ctor === void 0) return true;
	prot = ctor.prototype;
	if (isObject(prot) === false) return false;
	if (prot.hasOwnProperty("isPrototypeOf") === false) return false;
	return true;
}
function mergeOptions(options, defaultOptions) {
	if (!options) return defaultOptions;
	const overwriteMerge = (_, sourceArray, __) => sourceArray;
	return (0, import_cjs.default)(defaultOptions, options, {
		arrayMerge: overwriteMerge,
		isMergeableObject: isPlainObject
	});
}
const [themeState, setThemeState] = createStore({
	theme: THEME.LIGHT,
	colors: defaultLightColorsSet,
	borderRadius: "m"
});
const themeColorsMappingDefault = {
	[THEME.LIGHT]: defaultLightColorsSet,
	[THEME.DARK]: defaultDarkColorsSet
};
const themeCustomColors = {
	[THEME.LIGHT]: void 0,
	[THEME.DARK]: void 0
};
function setTheme(theme, colorsSet) {
	if (colorsSet) {
		themeCustomColors[THEME.DARK] = mergeOptions(colorsSet[THEME.DARK], themeCustomColors[THEME.DARK]);
		themeCustomColors[THEME.LIGHT] = mergeOptions(colorsSet[THEME.LIGHT], themeCustomColors[THEME.LIGHT]);
	}
	setThemeState({
		theme,
		colors: mergeOptions(themeCustomColors[theme], themeColorsMappingDefault[theme])
	});
}
function setBorderRadius(borderRadius) {
	setThemeState({ borderRadius });
}
function setColors(colorsSet) {
	themeCustomColors[THEME.DARK] = mergeOptions(colorsSet[THEME.DARK], themeCustomColors[THEME.DARK]);
	themeCustomColors[THEME.LIGHT] = mergeOptions(colorsSet[THEME.LIGHT], themeCustomColors[THEME.LIGHT]);
	setThemeState((state) => ({ colors: mergeOptions(themeCustomColors[state.theme], themeColorsMappingDefault[state.theme]) }));
}
const ImagePlaceholder = styled.div`
    background-color: ${(props) => props.theme.colors.background.secondary};
`;
const Image = (props) => {
	let imgRef;
	const [image, setImage] = createSignal(null);
	createEffect(() => {
		const img = new window.Image();
		img.src = props.src;
		img.alt = props.alt || "";
		img.setAttribute("draggable", "false");
		if (props.class) img.classList.add(props.class);
		if (img.complete) return setImage(img);
		img.addEventListener("load", () => setImage(img));
		return () => img.removeEventListener("load", () => setImage(img));
	});
	return [createComponent(Show, {
		get when() {
			return image();
		},
		get children() {
			return image();
		}
	}), createComponent(Show, {
		get when() {
			return !image();
		},
		get children() {
			return createComponent(ImagePlaceholder, {
				get ["class"]() {
					return props.class;
				},
				ref(r$) {
					const _ref$ = imgRef;
					typeof _ref$ === "function" ? _ref$(r$) : imgRef = r$;
				}
			});
		}
	})];
};
let initParams = {};
try {
	let locationHash = location.hash.toString();
	initParams = urlParseHashParams(locationHash);
} catch (e2) {}
let tmaPlatform = "unknown";
if (initParams == null ? void 0 : initParams.tgWebAppPlatform) tmaPlatform = (_a$6 = initParams.tgWebAppPlatform) != null ? _a$6 : "unknown";
if (tmaPlatform === "unknown") {
	const window2 = getWindow$1();
	tmaPlatform = (_d = (_c = (_b = window2 == null ? void 0 : window2.Telegram) == null ? void 0 : _b.WebApp) == null ? void 0 : _c.platform) != null ? _d : "unknown";
}
let webAppVersion = "6.0";
if (initParams == null ? void 0 : initParams.tgWebAppVersion) webAppVersion = initParams.tgWebAppVersion;
if (!webAppVersion) {
	const window2 = getWindow$1();
	webAppVersion = (_g = (_f = (_e = window2 == null ? void 0 : window2.Telegram) == null ? void 0 : _e.WebApp) == null ? void 0 : _f.version) != null ? _g : "6.0";
}
function isTmaPlatform(...platforms) {
	return platforms.includes(tmaPlatform);
}
function isInTMA() {
	var _a2;
	return tmaPlatform !== "unknown" || !!((_a2 = getWindow$1()) == null ? void 0 : _a2.TelegramWebviewProxy);
}
function isInTelegramBrowser() {
	var _a2;
	const isTelegramWebview = !!((_a2 = getWindow$1()) == null ? void 0 : _a2.TelegramWebview);
	return (isInTMA() || isTelegramWebview) && tmaPlatform === "unknown";
}
function sendExpand() {
	postEvent("web_app_expand", {});
}
function sendOpenTelegramLink(link, fallback) {
	const url = new URL(link);
	if (url.protocol !== "http:" && url.protocol !== "https:") {
		if (fallback) return fallback();
		throw new TonConnectUIError(`Url protocol is not supported: ${url}`);
	}
	if (url.hostname !== "t.me") {
		if (fallback) return fallback();
		throw new TonConnectUIError(`Url host is not supported: ${url}`);
	}
	const pathFull = url.pathname + url.search;
	if (isIframe() || versionAtLeast("6.1")) postEvent("web_app_open_tg_link", { path_full: pathFull });
	else openLinkBlank("https://t.me" + pathFull);
}
function isIframe() {
	try {
		const window2 = getWindow$1();
		if (!window2) return false;
		return window2.parent != null && window2 !== window2.parent;
	} catch (e2) {
		return false;
	}
}
function postEvent(eventType, eventData) {
	try {
		const window2 = getWindow$1();
		if (!window2) throw new TonConnectUIError(`Can't post event to parent window: window is not defined`);
		if (window2.TelegramWebviewProxy !== void 0) {
			logDebug("postEvent", eventType, eventData);
			window2.TelegramWebviewProxy.postEvent(eventType, JSON.stringify(eventData));
		} else if (window2.external && "notify" in window2.external) {
			logDebug("postEvent", eventType, eventData);
			window2.external.notify(JSON.stringify({
				eventType,
				eventData
			}));
		} else if (isIframe()) {
			const trustedTarget = "*";
			const message = JSON.stringify({
				eventType,
				eventData
			});
			logDebug("postEvent", eventType, eventData);
			window2.parent.postMessage(message, trustedTarget);
		} else throw new TonConnectUIError(`Can't post event to TMA`);
	} catch (e2) {
		logError(`Can't post event to parent window: ${e2}`);
	}
}
function urlParseHashParams(locationHash) {
	locationHash = locationHash.replace(/^#/, "");
	let params = {};
	if (!locationHash.length) return params;
	if (locationHash.indexOf("=") < 0 && locationHash.indexOf("?") < 0) {
		params._path = urlSafeDecode(locationHash);
		return params;
	}
	let qIndex = locationHash.indexOf("?");
	if (qIndex >= 0) {
		let pathParam = locationHash.substr(0, qIndex);
		params._path = urlSafeDecode(pathParam);
		locationHash = locationHash.substr(qIndex + 1);
	}
	let query_params = urlParseQueryString(locationHash);
	for (let k in query_params) params[k] = query_params[k];
	return params;
}
function urlSafeDecode(urlencoded) {
	try {
		urlencoded = urlencoded.replace(/\+/g, "%20");
		return decodeURIComponent(urlencoded);
	} catch (e2) {
		return urlencoded;
	}
}
function urlParseQueryString(queryString) {
	let params = {};
	if (!queryString.length) return params;
	let queryStringParams = queryString.split("&");
	let i2, param, paramName, paramValue;
	for (i2 = 0; i2 < queryStringParams.length; i2++) {
		param = queryStringParams[i2].split("=");
		paramName = urlSafeDecode(param[0]);
		paramValue = param[1] == null ? null : urlSafeDecode(param[1]);
		params[paramName] = paramValue;
	}
	return params;
}
function versionCompare(v1, v2) {
	if (typeof v1 !== "string") v1 = "";
	if (typeof v2 !== "string") v2 = "";
	let v1List = v1.replace(/^\s+|\s+$/g, "").split(".");
	let v2List = v2.replace(/^\s+|\s+$/g, "").split(".");
	let a2, i2, p1, p2;
	a2 = Math.max(v1List.length, v2List.length);
	for (i2 = 0; i2 < a2; i2++) {
		p1 = parseInt(v1List[i2]) || 0;
		p2 = parseInt(v2List[i2]) || 0;
		if (p1 === p2) continue;
		if (p1 > p2) return 1;
		return -1;
	}
	return 0;
}
function versionAtLeast(ver) {
	return versionCompare(webAppVersion, ver) >= 0;
}
const maxWidth = {
	mobile: 440,
	tablet: 1020
};
function isDevice(device) {
	const window2 = getWindow$1();
	if (!window2) return device === "desktop";
	if (isTmaPlatform("weba")) return true;
	const width = window2.innerWidth;
	switch (device) {
		case "desktop": return width > maxWidth.tablet;
		case "tablet": return width > maxWidth.mobile;
		default:
		case "mobile": return width <= maxWidth.mobile || isOS("ios", "android", "ipad");
	}
}
function media(device) {
	switch (device) {
		case "mobile": return `@media (max-width: ${maxWidth.mobile}px)`;
		case "tablet": return `@media (max-width: ${maxWidth.tablet}px) (min-width: ${maxWidth.mobile}px)`;
		default:
		case "desktop": return `@media (min-width: ${maxWidth.tablet}px)`;
	}
}
const mediaTouch = "@media (hover: none)";
const mediaNotTouch = "@media not all and (hover: none)";
const borders$5 = {
	m: "100vh",
	s: "8px",
	none: "0"
};
const scaleValues = {
	s: .02,
	m: .04
};
const ButtonStyled$1 = styled.button`
    display: ${(props) => props.leftIcon || props.rightIcon ? "flex" : "inline-block"};
    gap: ${(props) => props.leftIcon || props.rightIcon ? "6px" : "unset"};
    align-items: ${(props) => props.leftIcon || props.rightIcon ? "center" : "unset"};
    justify-content: ${(props) => props.leftIcon || props.rightIcon ? "space-between" : "unset"};
    background-color: ${(props) => props.appearance === "flat" ? "transparent" : props.appearance === "secondary" ? props.theme.colors.background.tint : rgba(props.theme.colors.accent, .12)};
    color: ${(props) => props.appearance === "secondary" ? props.theme.colors.text.primary : props.theme.colors.accent};

    padding: ${(props) => props.appearance === "flat" ? "0" : "9px 16px"};
    padding-left: ${(props) => props.leftIcon && props.appearance !== "flat" ? "12px" : "16px"};
    padding-right: ${(props) => props.rightIcon && props.appearance !== "flat" ? "12px" : "16px"};
    border: none;
    border-radius: ${(props) => borders$5[props.theme.borderRadius]};
    cursor: ${(props) => props.disabled ? "not-allowed" : "pointer"};

    font-size: 14px;
    font-weight: 510;
    line-height: 18px;

    transition: transform 0.125s ease-in-out;

    ${mediaNotTouch} {
        &:hover {
            transform: ${(props) => props.disabled ? "unset" : `scale(${1 + scaleValues[props.scale]})`};
        }
    }

    &:active {
        transform: ${(props) => props.disabled ? "unset" : `scale(${1 - scaleValues[props.scale]})`};
    }

    ${mediaTouch} {
        &:active {
            transform: ${(props) => props.disabled ? "unset" : `scale(${1 - scaleValues[props.scale] * 2})`};
        }
    }
`;
function useDataAttributes(props) {
	const keys = untrack(() => Object.keys(props).filter((key) => key.startsWith("data-")));
	const [dataAttrs] = splitProps(props, keys);
	return dataAttrs;
}
const Button = (props) => {
	const dataAttrs = useDataAttributes(props);
	return createComponent(ButtonStyled$1, mergeProps({
		get appearance() {
			return props.appearance || "primary";
		},
		get ["class"]() {
			return props.class;
		},
		onClick: (e2) => {
			var _a2;
			return (_a2 = props.onClick) == null ? void 0 : _a2.call(props, e2);
		},
		onMouseEnter: (e2) => {
			var _a2;
			return (_a2 = props.onMouseEnter) == null ? void 0 : _a2.call(props, e2);
		},
		onMouseLeave: (e2) => {
			var _a2;
			return (_a2 = props.onMouseLeave) == null ? void 0 : _a2.call(props, e2);
		},
		ref(r$) {
			const _ref$ = props.ref;
			typeof _ref$ === "function" ? _ref$(r$) : props.ref = r$;
		},
		get disabled() {
			return props.disabled;
		},
		get scale() {
			return props.scale || "m";
		},
		get leftIcon() {
			return !!props.leftIcon;
		},
		get rightIcon() {
			return !!props.rightIcon;
		},
		"data-tc-button": "true"
	}, dataAttrs, { get children() {
		return [
			createMemo(() => props.leftIcon),
			createMemo(() => props.children),
			createMemo(() => props.rightIcon)
		];
	} }));
};
function nextFrame(fn) {
	requestAnimationFrame(() => {
		requestAnimationFrame(fn);
	});
}
const Transition = (props) => {
	let el;
	let first = true;
	const [s1, set1] = createSignal();
	const [s2, set2] = createSignal();
	const resolved = children(() => props.children);
	const { onBeforeEnter, onEnter, onAfterEnter, onBeforeExit, onExit, onAfterExit } = props;
	const classnames = createMemo(() => {
		const name = props.name || "s";
		return {
			enterActiveClass: props.enterActiveClass || name + "-enter-active",
			enterClass: props.enterClass || name + "-enter",
			enterToClass: props.enterToClass || name + "-enter-to",
			exitActiveClass: props.exitActiveClass || name + "-exit-active",
			exitClass: props.exitClass || name + "-exit",
			exitToClass: props.exitToClass || name + "-exit-to"
		};
	});
	function enterTransition(el2, prev) {
		if (!first || props.appear) {
			let endTransition = function(e2) {
				if (el2 && (!e2 || e2.target === el2)) {
					el2.removeEventListener("transitionend", endTransition);
					el2.removeEventListener("animationend", endTransition);
					el2.classList.remove(...enterActiveClasses);
					el2.classList.remove(...enterToClasses);
					batch(() => {
						s1() !== el2 && set1(el2);
						s2() === el2 && set2(void 0);
					});
					onAfterEnter && onAfterEnter(el2);
					if (props.mode === "inout") exitTransition(el2, prev);
				}
			};
			const enterClasses = classnames().enterClass.split(" ");
			const enterActiveClasses = classnames().enterActiveClass.split(" ");
			const enterToClasses = classnames().enterToClass.split(" ");
			onBeforeEnter && onBeforeEnter(el2);
			el2.classList.add(...enterClasses);
			el2.classList.add(...enterActiveClasses);
			nextFrame(() => {
				el2.classList.remove(...enterClasses);
				el2.classList.add(...enterToClasses);
				onEnter && onEnter(el2, () => endTransition());
				if (!onEnter || onEnter.length < 2) {
					el2.addEventListener("transitionend", endTransition);
					el2.addEventListener("animationend", endTransition);
				}
			});
		}
		prev && !props.mode ? set2(el2) : set1(el2);
	}
	function exitTransition(el2, prev) {
		const exitClasses = classnames().exitClass.split(" ");
		const exitActiveClasses = classnames().exitActiveClass.split(" ");
		const exitToClasses = classnames().exitToClass.split(" ");
		if (!prev.parentNode) return endTransition();
		onBeforeExit && onBeforeExit(prev);
		prev.classList.add(...exitClasses);
		prev.classList.add(...exitActiveClasses);
		nextFrame(() => {
			prev.classList.remove(...exitClasses);
			prev.classList.add(...exitToClasses);
		});
		onExit && onExit(prev, () => endTransition());
		if (!onExit || onExit.length < 2) {
			prev.addEventListener("transitionend", endTransition);
			prev.addEventListener("animationend", endTransition);
		}
		function endTransition(e2) {
			if (!e2 || e2.target === prev) {
				prev.removeEventListener("transitionend", endTransition);
				prev.removeEventListener("animationend", endTransition);
				prev.classList.remove(...exitActiveClasses);
				prev.classList.remove(...exitToClasses);
				s1() === prev && set1(void 0);
				onAfterExit && onAfterExit(prev);
				if (props.mode === "outin") enterTransition(el2, prev);
			}
		}
	}
	createComputed((prev) => {
		el = resolved();
		while (typeof el === "function") el = el();
		return untrack(() => {
			if (el && el !== prev) {
				if (props.mode !== "outin") enterTransition(el, prev);
				else if (first) set1(el);
			}
			if (prev && prev !== el && props.mode !== "inout") exitTransition(el, prev);
			first = false;
			return el;
		});
	});
	return [s1, s2];
};
function getRect(element) {
	const { top, bottom, left, right, width, height } = element.getBoundingClientRect();
	const parentRect = element.parentNode.getBoundingClientRect();
	return {
		top: top - parentRect.top,
		bottom,
		left: left - parentRect.left,
		right,
		width,
		height
	};
}
const TransitionGroup = (props) => {
	const resolved = children(() => props.children);
	const classnames = createMemo(() => {
		const name = props.name || "s";
		return {
			enterActiveClass: props.enterActiveClass || name + "-enter-active",
			enterClass: props.enterClass || name + "-enter",
			enterToClass: props.enterToClass || name + "-enter-to",
			exitActiveClass: props.exitActiveClass || name + "-exit-active",
			exitClass: props.exitClass || name + "-exit",
			exitToClass: props.exitToClass || name + "-exit-to",
			moveClass: props.moveClass || name + "-move"
		};
	});
	const { onBeforeEnter, onEnter, onAfterEnter, onBeforeExit, onExit, onAfterExit } = props;
	const [combined, setCombined] = createSignal();
	let p2 = [];
	let first = true;
	createComputed(() => {
		const c2 = resolved();
		const comb = [...c2];
		const next = new Set(c2);
		const prev = new Set(p2);
		const enterClasses = classnames().enterClass.split(" ");
		const enterActiveClasses = classnames().enterActiveClass.split(" ");
		const enterToClasses = classnames().enterToClass.split(" ");
		const exitClasses = classnames().exitClass.split(" ");
		const exitActiveClasses = classnames().exitActiveClass.split(" ");
		const exitToClasses = classnames().exitToClass.split(" ");
		for (let i2 = 0; i2 < c2.length; i2++) {
			const el = c2[i2];
			if (!first && !prev.has(el)) {
				let endTransition = function(e2) {
					if (el && (!e2 || e2.target === el)) {
						el.removeEventListener("transitionend", endTransition);
						el.removeEventListener("animationend", endTransition);
						el.classList.remove(...enterActiveClasses);
						el.classList.remove(...enterToClasses);
						onAfterEnter && onAfterEnter(el);
					}
				};
				onBeforeEnter && onBeforeEnter(el);
				el.classList.add(...enterClasses);
				el.classList.add(...enterActiveClasses);
				nextFrame(() => {
					el.classList.remove(...enterClasses);
					el.classList.add(...enterToClasses);
					onEnter && onEnter(el, () => endTransition());
					if (!onEnter || onEnter.length < 2) {
						el.addEventListener("transitionend", endTransition);
						el.addEventListener("animationend", endTransition);
					}
				});
			}
		}
		for (let i2 = 0; i2 < p2.length; i2++) {
			const old = p2[i2];
			if (!next.has(old) && old.parentNode) {
				let endTransition = function(e2) {
					if (!e2 || e2.target === old) {
						old.removeEventListener("transitionend", endTransition);
						old.removeEventListener("animationend", endTransition);
						old.classList.remove(...exitActiveClasses);
						old.classList.remove(...exitToClasses);
						onAfterExit && onAfterExit(old);
						p2 = p2.filter((i3) => i3 !== old);
						setCombined(p2);
					}
				};
				comb.splice(i2, 0, old);
				onBeforeExit && onBeforeExit(old);
				old.classList.add(...exitClasses);
				old.classList.add(...exitActiveClasses);
				nextFrame(() => {
					old.classList.remove(...exitClasses);
					old.classList.add(...exitToClasses);
				});
				onExit && onExit(old, () => endTransition());
				if (!onExit || onExit.length < 2) {
					old.addEventListener("transitionend", endTransition);
					old.addEventListener("animationend", endTransition);
				}
			}
		}
		p2 = comb;
		setCombined(comb);
	});
	createEffect((nodes) => {
		const c2 = combined();
		c2.forEach((child) => {
			let n2;
			if (!(n2 = nodes.get(child))) nodes.set(child, n2 = {
				pos: getRect(child),
				new: !first
			});
			else if (n2.new) {
				n2.new = false;
				n2.newPos = getRect(child);
			}
			if (n2.new) child.addEventListener("transitionend", () => {
				n2.new = false;
				child.parentNode && (n2.newPos = getRect(child));
			}, { once: true });
			n2.newPos && (n2.pos = n2.newPos);
			n2.newPos = getRect(child);
		});
		if (first) {
			first = false;
			return nodes;
		}
		c2.forEach((child) => {
			const c3 = nodes.get(child);
			const oldPos = c3.pos;
			const newPos = c3.newPos;
			const dx = oldPos.left - newPos.left;
			const dy = oldPos.top - newPos.top;
			if (dx || dy) {
				c3.moved = true;
				const s2 = child.style;
				s2.transform = `translate(${dx}px,${dy}px)`;
				s2.transitionDuration = "0s";
			}
		});
		document.body.offsetHeight;
		c2.forEach((child) => {
			const c3 = nodes.get(child);
			if (c3.moved) {
				let endTransition = function(e2) {
					if (e2 && e2.target !== child || !child.parentNode) return;
					if (!e2 || /transform$/.test(e2.propertyName)) {
						child.removeEventListener("transitionend", endTransition);
						child.classList.remove(...moveClasses);
					}
				};
				c3.moved = false;
				const s2 = child.style;
				const moveClasses = classnames().moveClass.split(" ");
				child.classList.add(...moveClasses);
				s2.transform = s2.transitionDuration = "";
				child.addEventListener("transitionend", endTransition);
			}
		});
		return nodes;
	}, /* @__PURE__ */ new Map());
	return combined;
};
function clickOutside$1(el, accessor) {
	const onClick = (e2) => {
		var _a2;
		return !el.contains(e2.target) && ((_a2 = accessor()) == null ? void 0 : _a2());
	};
	document.body.addEventListener("click", onClick);
	onCleanup(() => document.body.removeEventListener("click", onClick));
}
function escPressed(_, accessor) {
	const onKeyPress = (e2) => {
		var _a2, _b2;
		if (e2.key === "Escape") {
			(_a2 = document.activeElement) == null || _a2.blur();
			(_b2 = accessor()) == null || _b2();
		}
	};
	document.body.addEventListener("keydown", onKeyPress);
	onCleanup(() => document.body.removeEventListener("keydown", onKeyPress));
}
function androidBackHandler$1(_, config) {
	const { isEnabled, onClose } = config();
	if (!isEnabled) return;
	const userOSIsAndroid = getUserAgent().os === "android";
	if (!userOSIsAndroid) return;
	window.history.pushState(ROUTE_STATE, "");
	const popstateHandler = (event) => {
		event.preventDefault();
		onClose();
	};
	window.addEventListener("popstate", popstateHandler, { once: true });
	onCleanup(() => {
		window.removeEventListener("popstate", popstateHandler);
		createMacrotask(() => {
			var _a2;
			if (((_a2 = window.history.state) == null ? void 0 : _a2[ROUTE_STATE_KEY]) === true) window.history.back();
		});
	});
}
const ROUTE_STATE_KEY = "androidBackHandler";
const ROUTE_STATE = { [ROUTE_STATE_KEY]: true };
const _tmpl$$v = /* @__PURE__ */ template$1(`<svg><path fill-rule="evenodd" clip-rule="evenodd" d="M10.2122 14.3407C10.5384 14.0854 10.5959 13.614 10.3406 13.2878L6.20237 8.00003L10.3406 2.71227C10.5959 2.38607 10.5384 1.91469 10.2122 1.6594C9.88604 1.40412 9.41465 1.46161 9.15937 1.7878L4.65937 7.5378C4.44688 7.80932 4.44688 8.19074 4.65937 8.46226L9.15937 14.2123C9.41465 14.5385 9.88604 14.5959 10.2122 14.3407Z"></path></svg>`, 4, true);
const rotationDegrees = {
	left: 0,
	top: 90,
	right: 180,
	bottom: 270
};
const ArrowIcon = (props) => {
	const theme = useTheme();
	const fill = () => props.fill || theme.colors.icon.secondary;
	const direction = () => props.direction || "left";
	const Svg = styled("svg")`
        transform: rotate(${(props2) => rotationDegrees[props2.svgDirection]}deg);
        transition: transform 0.1s ease-in-out;
    `;
	return createComponent(Svg, {
		xmlns: "http://www.w3.org/2000/svg",
		width: "16",
		height: "16",
		viewBox: "0 0 16 16",
		fill: "none",
		get svgDirection() {
			return direction();
		},
		get children() {
			const _el$ = _tmpl$$v.cloneNode(true);
			createRenderEffect(() => setAttribute(_el$, "fill", fill()));
			return _el$;
		}
	});
};
const _tmpl$$u = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M2.71966 2.71968C3.01255 2.42678 3.48743 2.42677 3.78032 2.71966L8.00002 6.93925L12.2197 2.71967C12.5126 2.42677 12.9874 2.42678 13.2803 2.71967C13.5732 3.01257 13.5732 3.48744 13.2803 3.78033L9.06068 7.99991L13.2803 12.2197C13.5732 12.5126 13.5732 12.9874 13.2803 13.2803C12.9874 13.5732 12.5126 13.5732 12.2197 13.2803L8.00002 9.06057L3.78033 13.2803C3.48744 13.5732 3.01257 13.5732 2.71967 13.2803C2.42678 12.9874 2.42677 12.5126 2.71967 12.2197L6.93936 7.99991L2.71968 3.78034C2.42678 3.48745 2.42677 3.01257 2.71966 2.71968Z"></path></svg>`);
const CloseIcon = (props) => {
	const theme = useTheme();
	const fill = () => props.fill || theme.colors.icon.secondary;
	return (() => {
		const _el$ = _tmpl$$u.cloneNode(true), _el$2 = _el$.firstChild;
		createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
		return _el$;
	})();
};
const IconButtonStyled = styled.button`
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background-color: ${(props) => props.theme.colors.background.tint};
    border: none;
    cursor: pointer;

    transition: transform 0.125s ease-in-out;

    ${mediaNotTouch} {
        &:hover {
            transform: scale(1.04);
        }
    }

    &:active {
        transform: scale(0.96);
    }

    ${mediaTouch} {
        &:active {
            transform: scale(0.92);
        }
    }
`;
const IconButton = (props) => {
	const dataAttrs = useDataAttributes(props);
	const icon = () => props.icon || "close";
	return createComponent(IconButtonStyled, mergeProps({
		get ["class"]() {
			return props.class;
		},
		onClick: () => props.onClick(),
		"data-tc-icon-button": "true"
	}, dataAttrs, { get children() {
		return [createComponent(Show, {
			get when() {
				return !!props.children;
			},
			get children() {
				return props.children;
			}
		}), createComponent(Show, {
			get when() {
				return !props.children;
			},
			get children() {
				return createComponent(Switch, { get children() {
					return [
						createComponent(Match, {
							get when() {
								return icon() === "close";
							},
							get children() {
								return createComponent(CloseIcon, { get fill() {
									return props.fill;
								} });
							}
						}),
						createComponent(Match, {
							get when() {
								return icon() === "arrow";
							},
							get children() {
								return createComponent(ArrowIcon, { get fill() {
									return props.fill;
								} });
							}
						}),
						createComponent(Match, {
							get when() {
								return icon() === "question";
							},
							get children() {
								return createComponent(QuestionIcon, { get fill() {
									return props.fill;
								} });
							}
						}),
						createComponent(Match, {
							get when() {
								return typeof icon() !== "string";
							},
							get children() {
								return icon();
							}
						})
					];
				} });
			}
		})];
	} }));
};
const borders$4 = {
	m: "24px",
	s: "16px",
	none: "0"
};
const ModalBackgroundStyled = styled.div`
    display: flex;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.4);
    padding: 20px 0;
    overflow-y: auto;

    ${media("mobile")} {
        padding-bottom: 0;
    }
`;
const ModalWrapperClass = u`
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08), 0 16px 64px rgba(0, 0, 0, 0.16);
    width: fit-content;
    margin: auto;

    ${media("mobile")} {
        width: 100%;
        height: fit-content;
        margin: auto 0 0 0;
    }
`;
const ModalBodyStyled = styled.div`
    position: relative;
    min-height: 100px;
    width: 416px;
    padding: 44px 56px 24px;

    box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.04);

    background-color: ${(props) => props.theme.colors.background.primary};
    border-radius: ${(props) => borders$4[props.theme.borderRadius]};

    ${media("mobile")} {
        width: 100%;
    }
`;
const CloseButtonStyled = styled(IconButton)`
    position: absolute;
    right: 16px;
    top: 16px;
`;
const ModalFooterStyled = styled.div`
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16px 16px 16px 18px;
    border-radius: 0 0 ${(props) => borders$4[props.theme.borderRadius]}
        ${(props) => borders$4[props.theme.borderRadius]};
`;
const QuestionButtonStyled = styled(IconButton)`
    background-color: ${(props) => rgba(props.theme.colors.icon.secondary, .12)};
`;
var AnimationTimelineNoop = class {
	constructor() {
		__publicField(this, "currentTime", 0);
	}
};
const _AnimationNoop = class {
	constructor() {
		__publicField(this, "currentTime", 0);
		__publicField(this, "playbackRate", 1);
		__publicField(this, "startTime", null);
		__publicField(this, "timeline", new AnimationTimelineNoop());
		__publicField(this, "finished", Promise.resolve(this));
		__publicField(this, "effect", null);
		__publicField(this, "id", "");
		__publicField(this, "pending", false);
		__publicField(this, "playState", "finished");
		__publicField(this, "replaceState", "active");
		__publicField(this, "ready", Promise.resolve(this));
		__publicField(this, "oncancel", null);
		__publicField(this, "onfinish", null);
		__publicField(this, "onremove", null);
	}
	static create() {
		if (!_AnimationNoop._instance) {
			logWarning("Animation is not supported in this environment: please consider using the `web-animations-js` polyfill to provide a fallback implementation of the Web Animations API.");
			_AnimationNoop._instance = new _AnimationNoop();
		}
		return _AnimationNoop._instance;
	}
	cancel() {}
	finish() {}
	pause() {}
	play() {}
	reverse() {}
	addEventListener(_type, _listener, _options) {}
	dispatchEvent(_event) {
		return false;
	}
	removeEventListener(_type, _callback, _options) {}
	updatePlaybackRate(_playbackRate) {}
	commitStyles() {}
	persist() {}
};
let AnimationNoop = _AnimationNoop;
__publicField(AnimationNoop, "_instance", null);
function animate(element, keyframes, options) {
	if ("animate" in element) return element.animate(keyframes, options);
	return AnimationNoop.create();
}
const _tmpl$$t = /* @__PURE__ */ template$1(`<div></div>`);
const clickOutside = clickOutside$1;
const keyPressed = escPressed;
const androidBackHandler = androidBackHandler$1;
const Modal = (props) => {
	const theme = useTheme();
	const dataAttrs = useDataAttributes(props);
	createEffect(() => {
		if (props.opened) disableScroll();
		else enableScroll();
	});
	return createComponent(Transition, {
		onBeforeEnter: (el) => {
			const duration = isDevice("mobile") ? 200 : 100;
			animate(el, [{ opacity: 0 }, { opacity: 1 }], { duration });
			if (isDevice("mobile")) animate(el.firstElementChild, [{ transform: "translateY(390px)" }, { transform: "translateY(0)" }], { duration });
		},
		onExit: (el, done) => {
			const duration = isDevice("mobile") ? 200 : 100;
			const backgroundAnimation = animate(el, [{ opacity: 1 }, { opacity: 0 }], { duration });
			if (isDevice("mobile")) {
				const contentAnimation = animate(el.firstElementChild, [{ transform: "translateY(0)" }, { transform: "translateY(390px)" }], { duration });
				Promise.all([backgroundAnimation.finished, contentAnimation.finished]).then(done);
			} else backgroundAnimation.finished.then(done);
		},
		get children() {
			return createComponent(Show, {
				get when() {
					return props.opened;
				},
				get children() {
					return createComponent(ModalBackgroundStyled, mergeProps({ "data-tc-modal": "true" }, dataAttrs, { get children() {
						const _el$ = _tmpl$$t.cloneNode(true);
						use(androidBackHandler, _el$, () => ({
							isEnabled: props.enableAndroidBackHandler,
							onClose: () => props.onClose()
						}));
						use(keyPressed, _el$, () => () => props.onClose());
						use(clickOutside, _el$, () => () => props.onClose());
						insert(_el$, createComponent(ModalBodyStyled, {
							get ["class"]() {
								return props.class;
							},
							get children() {
								return [createComponent(CloseButtonStyled, {
									icon: "close",
									onClick: () => props.onClose()
								}), createMemo(() => props.children)];
							}
						}), null);
						insert(_el$, createComponent(Show, {
							get when() {
								return props.onClickQuestion;
							},
							get children() {
								return createComponent(ModalFooterStyled, { get children() {
									return [createComponent(TonConnectBrand, {}), createComponent(QuestionButtonStyled, {
										get onClick() {
											return props.onClickQuestion;
										},
										icon: "question"
									})];
								} });
							}
						}), null);
						createRenderEffect(() => className(_el$, (0, import_classnames.default)(ModalWrapperClass, u`
                                border-radius: ${borders$4[theme.borderRadius]};
                                background-color: ${theme.colors.background.tint};

                                ${media("mobile")} {
                                    border-radius: ${borders$4[theme.borderRadius]}
                                        ${borders$4[theme.borderRadius]} 0 0;
                                }
                            `)));
						return _el$;
					} }));
				}
			});
		}
	});
};
const wrapperBorderRadius = {
	m: "22px",
	s: "12px",
	none: "0"
};
const sliderBorderRadius = {
	m: "18px",
	s: "8px",
	none: "0"
};
const TabBarStyled = styled.div`
    display: grid;
    grid-template: 1fr / 1fr 1fr;
    width: fit-content;
    justify-items: center;
    gap: 4px;

    position: relative;
    padding: 4px;
    border-radius: ${(props) => wrapperBorderRadius[props.theme.borderRadius]};

    background-color: ${(props) => props.theme.colors.background.secondary};
`;
const SliderStyled = styled.div`
    position: absolute;
    top: 4px;
    left: 4px;

    height: calc(100% - 8px);
    width: calc(50% - 4px);

    border-radius: ${(props) => sliderBorderRadius[props.theme.borderRadius]};
    background-color: ${(props) => props.theme.colors.background.segment};

    transform: ${(props) => props.right ? "translateX(100%)" : "translateX(0)"};

    transition: transform 0.13s ease-in-out;
`;
const InputStyled = styled.input`
    display: none;
`;
const LabelStyled = styled.label`
    padding: 9px 12px;
    z-index: 1;

    cursor: ${(props) => props.isActive ? "default" : "pointer"};

    transition: transform 0.13s ease-in-out;

    &:hover {
        transform: ${(props) => props.isActive ? "none" : "scale(1.025)"};
    }

    > * {
        ${(props) => !props.isActive ? `color: ${props.theme.colors.text.secondary};` : ""}
    }
`;
const TabBar = (props) => {
	const groupName = "tabBar" + Math.floor(Math.random() * 1e4);
	return createComponent(TabBarStyled, {
		get ["class"]() {
			return props.class;
		},
		"data-tc-tab-bar": "true",
		get children() {
			return [
				createComponent(SliderStyled, { get right() {
					return props.selectedTabIndex === 1;
				} }),
				createComponent(LabelStyled, {
					get isActive() {
						return props.selectedTabIndex === 0;
					},
					get children() {
						return [createComponent(InputStyled, {
							type: "radio",
							name: groupName,
							get checked() {
								return props.selectedTabIndex === 0;
							},
							onInput: () => {
								var _a2;
								return (_a2 = props.onSelectedTabIndexChange) == null ? void 0 : _a2.call(props, 0);
							}
						}), createMemo(() => props.tab1)];
					}
				}),
				createComponent(LabelStyled, {
					get isActive() {
						return props.selectedTabIndex === 1;
					},
					get children() {
						return [createComponent(InputStyled, {
							type: "radio",
							get checked() {
								return props.selectedTabIndex === 1;
							},
							name: groupName,
							onInput: () => {
								var _a2;
								return (_a2 = props.onSelectedTabIndexChange) == null ? void 0 : _a2.call(props, 1);
							}
						}), createMemo(() => props.tab2)];
					}
				})
			];
		}
	});
};
const backgroundBorders = {
	m: "16px",
	s: "12px",
	none: "0"
};
const imageBorders = {
	m: "12px",
	s: "8px",
	none: "0"
};
const qrNormalSize = 256;
const imgSizeDefault = 60;
const picSizeDefault = 48;
const qrPaddingTop = 24;
const CopyIconButton = styled.div`
    width: 52px;
    height: 52px;
    background: transparent;
    position: absolute;
    right: 0;
    bottom: 0;

    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.125s ease-in-out;
`;
const QrCodeBackground = styled.button`
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    background-color: ${(props) => props.theme.colors.background.qr};
    border-radius: ${(props) => backgroundBorders[props.theme.borderRadius]};
    padding: ${toPx(qrPaddingTop)} 0;
    height: ${toPx(qrNormalSize + qrPaddingTop * 2)};
    width: 100%;

    overflow: hidden;
    cursor: pointer;
    border: none;

    ${mediaNotTouch} {
        &:hover {
            ${CopyIconButton.class} {
                transform: scale(1.04);
            }
        }
    }

    &:active {
        ${CopyIconButton.class} {
            transform: scale(0.96);
        }
    }

    ${mediaTouch} {
        &:active {
            ${CopyIconButton.class} {
                transform: scale(0.92);
            }
        }
    }
`;
const QrCodeWrapper$2 = styled.div`
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 0 auto;

    > div:first-child {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    rect {
        fill: transparent;
    }

    path {
        fill: ${(props) => props.theme.colors.constant.black};
    }
`;
const ImageBackground = styled.div`
    position: absolute;
    width: ${toPx(imgSizeDefault)};
    height: ${toPx(imgSizeDefault)};
    background: ${(props) => props.theme.colors.background.qr};

    display: flex;
    align-items: center;
    justify-content: center;
`;
const ImageStyled$3 = styled(Image)`
    width: ${(props) => toPx(props.size)};
    height: ${(props) => toPx(props.size)};
    border-radius: ${(props) => imageBorders[props.theme.borderRadius]};
    background-color: ${(props) => props.theme.colors.background.qr};
`;
const CopiedBoxStyled = styled.div`
    position: absolute;
    bottom: 14px;
    left: 50%;
    transform: translate(-50%, 0);

    display: flex;
    gap: 6px;
    align-items: center;
    border-radius: 18px;
    min-width: 126px;
    padding: 9px 16px 9px 10px;

    filter: drop-shadow(0px 2px 8px rgba(0, 0, 0, 0.08));
    background-color: ${(props) => props.theme.colors.background.segment};
`;
var qrcode$1 = { exports: {} };
(function(module$1, exports$1) {
	var qrcode2 = function() {
		var qrcode3 = function(typeNumber, errorCorrectionLevel) {
			var PAD0 = 236;
			var PAD1 = 17;
			var _typeNumber = typeNumber;
			var _errorCorrectionLevel = QRErrorCorrectionLevel[errorCorrectionLevel];
			var _modules = null;
			var _moduleCount = 0;
			var _dataCache = null;
			var _dataList = [];
			var _this = {};
			var makeImpl = function(test, maskPattern) {
				_moduleCount = _typeNumber * 4 + 17;
				_modules = function(moduleCount) {
					var modules = new Array(moduleCount);
					for (var row = 0; row < moduleCount; row += 1) {
						modules[row] = new Array(moduleCount);
						for (var col = 0; col < moduleCount; col += 1) modules[row][col] = null;
					}
					return modules;
				}(_moduleCount);
				setupPositionProbePattern(0, 0);
				setupPositionProbePattern(_moduleCount - 7, 0);
				setupPositionProbePattern(0, _moduleCount - 7);
				setupPositionAdjustPattern();
				setupTimingPattern();
				setupTypeInfo(test, maskPattern);
				if (_typeNumber >= 7) setupTypeNumber(test);
				if (_dataCache == null) _dataCache = createData(_typeNumber, _errorCorrectionLevel, _dataList);
				mapData(_dataCache, maskPattern);
			};
			var setupPositionProbePattern = function(row, col) {
				for (var r = -1; r <= 7; r += 1) {
					if (row + r <= -1 || _moduleCount <= row + r) continue;
					for (var c2 = -1; c2 <= 7; c2 += 1) {
						if (col + c2 <= -1 || _moduleCount <= col + c2) continue;
						if (0 <= r && r <= 6 && (c2 == 0 || c2 == 6) || 0 <= c2 && c2 <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c2 && c2 <= 4) _modules[row + r][col + c2] = true;
						else _modules[row + r][col + c2] = false;
					}
				}
			};
			var getBestMaskPattern = function() {
				var minLostPoint = 0;
				var pattern = 0;
				for (var i2 = 0; i2 < 8; i2 += 1) {
					makeImpl(true, i2);
					var lostPoint = QRUtil.getLostPoint(_this);
					if (i2 == 0 || minLostPoint > lostPoint) {
						minLostPoint = lostPoint;
						pattern = i2;
					}
				}
				return pattern;
			};
			var setupTimingPattern = function() {
				for (var r = 8; r < _moduleCount - 8; r += 1) {
					if (_modules[r][6] != null) continue;
					_modules[r][6] = r % 2 == 0;
				}
				for (var c2 = 8; c2 < _moduleCount - 8; c2 += 1) {
					if (_modules[6][c2] != null) continue;
					_modules[6][c2] = c2 % 2 == 0;
				}
			};
			var setupPositionAdjustPattern = function() {
				var pos = QRUtil.getPatternPosition(_typeNumber);
				for (var i2 = 0; i2 < pos.length; i2 += 1) for (var j = 0; j < pos.length; j += 1) {
					var row = pos[i2];
					var col = pos[j];
					if (_modules[row][col] != null) continue;
					for (var r = -2; r <= 2; r += 1) for (var c2 = -2; c2 <= 2; c2 += 1) if (r == -2 || r == 2 || c2 == -2 || c2 == 2 || r == 0 && c2 == 0) _modules[row + r][col + c2] = true;
					else _modules[row + r][col + c2] = false;
				}
			};
			var setupTypeNumber = function(test) {
				var bits = QRUtil.getBCHTypeNumber(_typeNumber);
				for (var i2 = 0; i2 < 18; i2 += 1) {
					var mod = !test && (bits >> i2 & 1) == 1;
					_modules[Math.floor(i2 / 3)][i2 % 3 + _moduleCount - 8 - 3] = mod;
				}
				for (var i2 = 0; i2 < 18; i2 += 1) {
					var mod = !test && (bits >> i2 & 1) == 1;
					_modules[i2 % 3 + _moduleCount - 8 - 3][Math.floor(i2 / 3)] = mod;
				}
			};
			var setupTypeInfo = function(test, maskPattern) {
				var data = _errorCorrectionLevel << 3 | maskPattern;
				var bits = QRUtil.getBCHTypeInfo(data);
				for (var i2 = 0; i2 < 15; i2 += 1) {
					var mod = !test && (bits >> i2 & 1) == 1;
					if (i2 < 6) _modules[i2][8] = mod;
					else if (i2 < 8) _modules[i2 + 1][8] = mod;
					else _modules[_moduleCount - 15 + i2][8] = mod;
				}
				for (var i2 = 0; i2 < 15; i2 += 1) {
					var mod = !test && (bits >> i2 & 1) == 1;
					if (i2 < 8) _modules[8][_moduleCount - i2 - 1] = mod;
					else if (i2 < 9) _modules[8][15 - i2 - 1 + 1] = mod;
					else _modules[8][15 - i2 - 1] = mod;
				}
				_modules[_moduleCount - 8][8] = !test;
			};
			var mapData = function(data, maskPattern) {
				var inc = -1;
				var row = _moduleCount - 1;
				var bitIndex = 7;
				var byteIndex = 0;
				var maskFunc = QRUtil.getMaskFunction(maskPattern);
				for (var col = _moduleCount - 1; col > 0; col -= 2) {
					if (col == 6) col -= 1;
					while (true) {
						for (var c2 = 0; c2 < 2; c2 += 1) if (_modules[row][col - c2] == null) {
							var dark = false;
							if (byteIndex < data.length) dark = (data[byteIndex] >>> bitIndex & 1) == 1;
							var mask = maskFunc(row, col - c2);
							if (mask) dark = !dark;
							_modules[row][col - c2] = dark;
							bitIndex -= 1;
							if (bitIndex == -1) {
								byteIndex += 1;
								bitIndex = 7;
							}
						}
						row += inc;
						if (row < 0 || _moduleCount <= row) {
							row -= inc;
							inc = -inc;
							break;
						}
					}
				}
			};
			var createBytes = function(buffer, rsBlocks) {
				var offset = 0;
				var maxDcCount = 0;
				var maxEcCount = 0;
				var dcdata = new Array(rsBlocks.length);
				var ecdata = new Array(rsBlocks.length);
				for (var r = 0; r < rsBlocks.length; r += 1) {
					var dcCount = rsBlocks[r].dataCount;
					var ecCount = rsBlocks[r].totalCount - dcCount;
					maxDcCount = Math.max(maxDcCount, dcCount);
					maxEcCount = Math.max(maxEcCount, ecCount);
					dcdata[r] = new Array(dcCount);
					for (var i2 = 0; i2 < dcdata[r].length; i2 += 1) dcdata[r][i2] = 255 & buffer.getBuffer()[i2 + offset];
					offset += dcCount;
					var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);
					var rawPoly = qrPolynomial(dcdata[r], rsPoly.getLength() - 1);
					var modPoly = rawPoly.mod(rsPoly);
					ecdata[r] = new Array(rsPoly.getLength() - 1);
					for (var i2 = 0; i2 < ecdata[r].length; i2 += 1) {
						var modIndex = i2 + modPoly.getLength() - ecdata[r].length;
						ecdata[r][i2] = modIndex >= 0 ? modPoly.getAt(modIndex) : 0;
					}
				}
				var totalCodeCount = 0;
				for (var i2 = 0; i2 < rsBlocks.length; i2 += 1) totalCodeCount += rsBlocks[i2].totalCount;
				var data = new Array(totalCodeCount);
				var index = 0;
				for (var i2 = 0; i2 < maxDcCount; i2 += 1) for (var r = 0; r < rsBlocks.length; r += 1) if (i2 < dcdata[r].length) {
					data[index] = dcdata[r][i2];
					index += 1;
				}
				for (var i2 = 0; i2 < maxEcCount; i2 += 1) for (var r = 0; r < rsBlocks.length; r += 1) if (i2 < ecdata[r].length) {
					data[index] = ecdata[r][i2];
					index += 1;
				}
				return data;
			};
			var createData = function(typeNumber2, errorCorrectionLevel2, dataList) {
				var rsBlocks = QRRSBlock.getRSBlocks(typeNumber2, errorCorrectionLevel2);
				var buffer = qrBitBuffer();
				for (var i2 = 0; i2 < dataList.length; i2 += 1) {
					var data = dataList[i2];
					buffer.put(data.getMode(), 4);
					buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber2));
					data.write(buffer);
				}
				var totalDataCount = 0;
				for (var i2 = 0; i2 < rsBlocks.length; i2 += 1) totalDataCount += rsBlocks[i2].dataCount;
				if (buffer.getLengthInBits() > totalDataCount * 8) throw "code length overflow. (" + buffer.getLengthInBits() + ">" + totalDataCount * 8 + ")";
				if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) buffer.put(0, 4);
				while (buffer.getLengthInBits() % 8 != 0) buffer.putBit(false);
				while (true) {
					if (buffer.getLengthInBits() >= totalDataCount * 8) break;
					buffer.put(PAD0, 8);
					if (buffer.getLengthInBits() >= totalDataCount * 8) break;
					buffer.put(PAD1, 8);
				}
				return createBytes(buffer, rsBlocks);
			};
			_this.addData = function(data, mode) {
				mode = mode || "Byte";
				var newData = null;
				switch (mode) {
					case "Numeric":
						newData = qrNumber(data);
						break;
					case "Alphanumeric":
						newData = qrAlphaNum(data);
						break;
					case "Byte":
						newData = qr8BitByte(data);
						break;
					case "Kanji":
						newData = qrKanji(data);
						break;
					default: throw "mode:" + mode;
				}
				_dataList.push(newData);
				_dataCache = null;
			};
			_this.isDark = function(row, col) {
				if (row < 0 || _moduleCount <= row || col < 0 || _moduleCount <= col) throw row + "," + col;
				return _modules[row][col];
			};
			_this.getModuleCount = function() {
				return _moduleCount;
			};
			_this.make = function() {
				if (_typeNumber < 1) {
					var typeNumber2 = 1;
					for (; typeNumber2 < 40; typeNumber2++) {
						var rsBlocks = QRRSBlock.getRSBlocks(typeNumber2, _errorCorrectionLevel);
						var buffer = qrBitBuffer();
						for (var i2 = 0; i2 < _dataList.length; i2++) {
							var data = _dataList[i2];
							buffer.put(data.getMode(), 4);
							buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber2));
							data.write(buffer);
						}
						var totalDataCount = 0;
						for (var i2 = 0; i2 < rsBlocks.length; i2++) totalDataCount += rsBlocks[i2].dataCount;
						if (buffer.getLengthInBits() <= totalDataCount * 8) break;
					}
					_typeNumber = typeNumber2;
				}
				makeImpl(false, getBestMaskPattern());
			};
			_this.createTableTag = function(cellSize, margin) {
				cellSize = cellSize || 2;
				margin = typeof margin == "undefined" ? cellSize * 4 : margin;
				var qrHtml = "";
				qrHtml += "<table style=\"";
				qrHtml += " border-width: 0px; border-style: none;";
				qrHtml += " border-collapse: collapse;";
				qrHtml += " padding: 0px; margin: " + margin + "px;";
				qrHtml += "\">";
				qrHtml += "<tbody>";
				for (var r = 0; r < _this.getModuleCount(); r += 1) {
					qrHtml += "<tr>";
					for (var c2 = 0; c2 < _this.getModuleCount(); c2 += 1) {
						qrHtml += "<td style=\"";
						qrHtml += " border-width: 0px; border-style: none;";
						qrHtml += " border-collapse: collapse;";
						qrHtml += " padding: 0px; margin: 0px;";
						qrHtml += " width: " + cellSize + "px;";
						qrHtml += " height: " + cellSize + "px;";
						qrHtml += " background-color: ";
						qrHtml += _this.isDark(r, c2) ? "#000000" : "#ffffff";
						qrHtml += ";";
						qrHtml += "\"/>";
					}
					qrHtml += "</tr>";
				}
				qrHtml += "</tbody>";
				qrHtml += "</table>";
				return qrHtml;
			};
			_this.createSvgTag = function(cellSize, margin, alt, title) {
				var opts = {};
				if (typeof arguments[0] == "object") {
					opts = arguments[0];
					cellSize = opts.cellSize;
					margin = opts.margin;
					alt = opts.alt;
					title = opts.title;
				}
				cellSize = cellSize || 2;
				margin = typeof margin == "undefined" ? cellSize * 4 : margin;
				alt = typeof alt === "string" ? { text: alt } : alt || {};
				alt.text = alt.text || null;
				alt.id = alt.text ? alt.id || "qrcode-description" : null;
				title = typeof title === "string" ? { text: title } : title || {};
				title.text = title.text || null;
				title.id = title.text ? title.id || "qrcode-title" : null;
				var size = _this.getModuleCount() * cellSize + margin * 2;
				var c2, mc, r, mr, qrSvg = "", rect;
				rect = "l" + cellSize + ",0 0," + cellSize + " -" + cellSize + ",0 0,-" + cellSize + "z ";
				qrSvg += "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"";
				qrSvg += !opts.scalable ? " width=\"" + size + "px\" height=\"" + size + "px\"" : "";
				qrSvg += " viewBox=\"0 0 " + size + " " + size + "\" ";
				qrSvg += " preserveAspectRatio=\"xMinYMin meet\"";
				qrSvg += title.text || alt.text ? " role=\"img\" aria-labelledby=\"" + escapeXml([title.id, alt.id].join(" ").trim()) + "\"" : "";
				qrSvg += ">";
				qrSvg += title.text ? "<title id=\"" + escapeXml(title.id) + "\">" + escapeXml(title.text) + "</title>" : "";
				qrSvg += alt.text ? "<description id=\"" + escapeXml(alt.id) + "\">" + escapeXml(alt.text) + "</description>" : "";
				qrSvg += "<rect width=\"100%\" height=\"100%\" fill=\"white\" cx=\"0\" cy=\"0\"/>";
				qrSvg += "<path d=\"";
				for (r = 0; r < _this.getModuleCount(); r += 1) {
					mr = r * cellSize + margin;
					for (c2 = 0; c2 < _this.getModuleCount(); c2 += 1) if (_this.isDark(r, c2)) {
						mc = c2 * cellSize + margin;
						qrSvg += "M" + mc + "," + mr + rect;
					}
				}
				qrSvg += "\" stroke=\"transparent\" fill=\"black\"/>";
				qrSvg += "</svg>";
				return qrSvg;
			};
			_this.createDataURL = function(cellSize, margin) {
				cellSize = cellSize || 2;
				margin = typeof margin == "undefined" ? cellSize * 4 : margin;
				var size = _this.getModuleCount() * cellSize + margin * 2;
				var min2 = margin;
				var max2 = size - margin;
				return createDataURL(size, size, function(x, y) {
					if (min2 <= x && x < max2 && min2 <= y && y < max2) {
						var c2 = Math.floor((x - min2) / cellSize);
						var r = Math.floor((y - min2) / cellSize);
						return _this.isDark(r, c2) ? 0 : 1;
					} else return 1;
				});
			};
			_this.createImgTag = function(cellSize, margin, alt) {
				cellSize = cellSize || 2;
				margin = typeof margin == "undefined" ? cellSize * 4 : margin;
				var size = _this.getModuleCount() * cellSize + margin * 2;
				var img = "";
				img += "<img";
				img += " src=\"";
				img += _this.createDataURL(cellSize, margin);
				img += "\"";
				img += " width=\"";
				img += size;
				img += "\"";
				img += " height=\"";
				img += size;
				img += "\"";
				if (alt) {
					img += " alt=\"";
					img += escapeXml(alt);
					img += "\"";
				}
				img += "/>";
				return img;
			};
			var escapeXml = function(s2) {
				var escaped = "";
				for (var i2 = 0; i2 < s2.length; i2 += 1) {
					var c2 = s2.charAt(i2);
					switch (c2) {
						case "<":
							escaped += "&lt;";
							break;
						case ">":
							escaped += "&gt;";
							break;
						case "&":
							escaped += "&amp;";
							break;
						case "\"":
							escaped += "&quot;";
							break;
						default:
							escaped += c2;
							break;
					}
				}
				return escaped;
			};
			var _createHalfASCII = function(margin) {
				var cellSize = 1;
				margin = typeof margin == "undefined" ? cellSize * 2 : margin;
				var size = _this.getModuleCount() * cellSize + margin * 2;
				var min2 = margin;
				var max2 = size - margin;
				var y, x, r1, r2, p2;
				var blocks = {
					"██": "█",
					"█ ": "▀",
					" █": "▄",
					"  ": " "
				};
				var blocksLastLineNoMargin = {
					"██": "▀",
					"█ ": "▀",
					" █": " ",
					"  ": " "
				};
				var ascii = "";
				for (y = 0; y < size; y += 2) {
					r1 = Math.floor((y - min2) / cellSize);
					r2 = Math.floor((y + 1 - min2) / cellSize);
					for (x = 0; x < size; x += 1) {
						p2 = "█";
						if (min2 <= x && x < max2 && min2 <= y && y < max2 && _this.isDark(r1, Math.floor((x - min2) / cellSize))) p2 = " ";
						if (min2 <= x && x < max2 && min2 <= y + 1 && y + 1 < max2 && _this.isDark(r2, Math.floor((x - min2) / cellSize))) p2 += " ";
						else p2 += "█";
						ascii += margin < 1 && y + 1 >= max2 ? blocksLastLineNoMargin[p2] : blocks[p2];
					}
					ascii += "\n";
				}
				if (size % 2 && margin > 0) return ascii.substring(0, ascii.length - size - 1) + Array(size + 1).join("▀");
				return ascii.substring(0, ascii.length - 1);
			};
			_this.createASCII = function(cellSize, margin) {
				cellSize = cellSize || 1;
				if (cellSize < 2) return _createHalfASCII(margin);
				cellSize -= 1;
				margin = typeof margin == "undefined" ? cellSize * 2 : margin;
				var size = _this.getModuleCount() * cellSize + margin * 2;
				var min2 = margin;
				var max2 = size - margin;
				var y, x, r, p2;
				var white = Array(cellSize + 1).join("██");
				var black = Array(cellSize + 1).join("  ");
				var ascii = "";
				var line = "";
				for (y = 0; y < size; y += 1) {
					r = Math.floor((y - min2) / cellSize);
					line = "";
					for (x = 0; x < size; x += 1) {
						p2 = 1;
						if (min2 <= x && x < max2 && min2 <= y && y < max2 && _this.isDark(r, Math.floor((x - min2) / cellSize))) p2 = 0;
						line += p2 ? white : black;
					}
					for (r = 0; r < cellSize; r += 1) ascii += line + "\n";
				}
				return ascii.substring(0, ascii.length - 1);
			};
			_this.renderTo2dContext = function(context, cellSize) {
				cellSize = cellSize || 2;
				var length = _this.getModuleCount();
				for (var row = 0; row < length; row++) for (var col = 0; col < length; col++) {
					context.fillStyle = _this.isDark(row, col) ? "black" : "white";
					context.fillRect(row * cellSize, col * cellSize, cellSize, cellSize);
				}
			};
			return _this;
		};
		qrcode3.stringToBytesFuncs = { "default": function(s2) {
			var bytes = [];
			for (var i2 = 0; i2 < s2.length; i2 += 1) {
				var c2 = s2.charCodeAt(i2);
				bytes.push(c2 & 255);
			}
			return bytes;
		} };
		qrcode3.stringToBytes = qrcode3.stringToBytesFuncs["default"];
		qrcode3.createStringToBytes = function(unicodeData, numChars) {
			var unicodeMap = function() {
				var bin = base64DecodeInputStream(unicodeData);
				var read = function() {
					var b = bin.read();
					if (b == -1) throw "eof";
					return b;
				};
				var count = 0;
				var unicodeMap2 = {};
				while (true) {
					var b0 = bin.read();
					if (b0 == -1) break;
					var b1 = read();
					var b2 = read();
					var b3 = read();
					var k = String.fromCharCode(b0 << 8 | b1);
					var v = b2 << 8 | b3;
					unicodeMap2[k] = v;
					count += 1;
				}
				if (count != numChars) throw count + " != " + numChars;
				return unicodeMap2;
			}();
			var unknownChar = "?".charCodeAt(0);
			return function(s2) {
				var bytes = [];
				for (var i2 = 0; i2 < s2.length; i2 += 1) {
					var c2 = s2.charCodeAt(i2);
					if (c2 < 128) bytes.push(c2);
					else {
						var b = unicodeMap[s2.charAt(i2)];
						if (typeof b == "number") if ((b & 255) == b) bytes.push(b);
						else {
							bytes.push(b >>> 8);
							bytes.push(b & 255);
						}
						else bytes.push(unknownChar);
					}
				}
				return bytes;
			};
		};
		var QRMode = {
			MODE_NUMBER: 1,
			MODE_ALPHA_NUM: 2,
			MODE_8BIT_BYTE: 4,
			MODE_KANJI: 8
		};
		var QRErrorCorrectionLevel = {
			L: 1,
			M: 0,
			Q: 3,
			H: 2
		};
		var QRMaskPattern = {
			PATTERN000: 0,
			PATTERN001: 1,
			PATTERN010: 2,
			PATTERN011: 3,
			PATTERN100: 4,
			PATTERN101: 5,
			PATTERN110: 6,
			PATTERN111: 7
		};
		var QRUtil = function() {
			var PATTERN_POSITION_TABLE = [
				[],
				[6, 18],
				[6, 22],
				[6, 26],
				[6, 30],
				[6, 34],
				[
					6,
					22,
					38
				],
				[
					6,
					24,
					42
				],
				[
					6,
					26,
					46
				],
				[
					6,
					28,
					50
				],
				[
					6,
					30,
					54
				],
				[
					6,
					32,
					58
				],
				[
					6,
					34,
					62
				],
				[
					6,
					26,
					46,
					66
				],
				[
					6,
					26,
					48,
					70
				],
				[
					6,
					26,
					50,
					74
				],
				[
					6,
					30,
					54,
					78
				],
				[
					6,
					30,
					56,
					82
				],
				[
					6,
					30,
					58,
					86
				],
				[
					6,
					34,
					62,
					90
				],
				[
					6,
					28,
					50,
					72,
					94
				],
				[
					6,
					26,
					50,
					74,
					98
				],
				[
					6,
					30,
					54,
					78,
					102
				],
				[
					6,
					28,
					54,
					80,
					106
				],
				[
					6,
					32,
					58,
					84,
					110
				],
				[
					6,
					30,
					58,
					86,
					114
				],
				[
					6,
					34,
					62,
					90,
					118
				],
				[
					6,
					26,
					50,
					74,
					98,
					122
				],
				[
					6,
					30,
					54,
					78,
					102,
					126
				],
				[
					6,
					26,
					52,
					78,
					104,
					130
				],
				[
					6,
					30,
					56,
					82,
					108,
					134
				],
				[
					6,
					34,
					60,
					86,
					112,
					138
				],
				[
					6,
					30,
					58,
					86,
					114,
					142
				],
				[
					6,
					34,
					62,
					90,
					118,
					146
				],
				[
					6,
					30,
					54,
					78,
					102,
					126,
					150
				],
				[
					6,
					24,
					50,
					76,
					102,
					128,
					154
				],
				[
					6,
					28,
					54,
					80,
					106,
					132,
					158
				],
				[
					6,
					32,
					58,
					84,
					110,
					136,
					162
				],
				[
					6,
					26,
					54,
					82,
					110,
					138,
					166
				],
				[
					6,
					30,
					58,
					86,
					114,
					142,
					170
				]
			];
			var G15 = 1335;
			var G18 = 7973;
			var G15_MASK = 21522;
			var _this = {};
			var getBCHDigit = function(data) {
				var digit = 0;
				while (data != 0) {
					digit += 1;
					data >>>= 1;
				}
				return digit;
			};
			_this.getBCHTypeInfo = function(data) {
				var d = data << 10;
				while (getBCHDigit(d) - getBCHDigit(G15) >= 0) d ^= G15 << getBCHDigit(d) - getBCHDigit(G15);
				return (data << 10 | d) ^ G15_MASK;
			};
			_this.getBCHTypeNumber = function(data) {
				var d = data << 12;
				while (getBCHDigit(d) - getBCHDigit(G18) >= 0) d ^= G18 << getBCHDigit(d) - getBCHDigit(G18);
				return data << 12 | d;
			};
			_this.getPatternPosition = function(typeNumber) {
				return PATTERN_POSITION_TABLE[typeNumber - 1];
			};
			_this.getMaskFunction = function(maskPattern) {
				switch (maskPattern) {
					case QRMaskPattern.PATTERN000: return function(i2, j) {
						return (i2 + j) % 2 == 0;
					};
					case QRMaskPattern.PATTERN001: return function(i2, j) {
						return i2 % 2 == 0;
					};
					case QRMaskPattern.PATTERN010: return function(i2, j) {
						return j % 3 == 0;
					};
					case QRMaskPattern.PATTERN011: return function(i2, j) {
						return (i2 + j) % 3 == 0;
					};
					case QRMaskPattern.PATTERN100: return function(i2, j) {
						return (Math.floor(i2 / 2) + Math.floor(j / 3)) % 2 == 0;
					};
					case QRMaskPattern.PATTERN101: return function(i2, j) {
						return i2 * j % 2 + i2 * j % 3 == 0;
					};
					case QRMaskPattern.PATTERN110: return function(i2, j) {
						return (i2 * j % 2 + i2 * j % 3) % 2 == 0;
					};
					case QRMaskPattern.PATTERN111: return function(i2, j) {
						return (i2 * j % 3 + (i2 + j) % 2) % 2 == 0;
					};
					default: throw "bad maskPattern:" + maskPattern;
				}
			};
			_this.getErrorCorrectPolynomial = function(errorCorrectLength) {
				var a2 = qrPolynomial([1], 0);
				for (var i2 = 0; i2 < errorCorrectLength; i2 += 1) a2 = a2.multiply(qrPolynomial([1, QRMath.gexp(i2)], 0));
				return a2;
			};
			_this.getLengthInBits = function(mode, type) {
				if (1 <= type && type < 10) switch (mode) {
					case QRMode.MODE_NUMBER: return 10;
					case QRMode.MODE_ALPHA_NUM: return 9;
					case QRMode.MODE_8BIT_BYTE: return 8;
					case QRMode.MODE_KANJI: return 8;
					default: throw "mode:" + mode;
				}
				else if (type < 27) switch (mode) {
					case QRMode.MODE_NUMBER: return 12;
					case QRMode.MODE_ALPHA_NUM: return 11;
					case QRMode.MODE_8BIT_BYTE: return 16;
					case QRMode.MODE_KANJI: return 10;
					default: throw "mode:" + mode;
				}
				else if (type < 41) switch (mode) {
					case QRMode.MODE_NUMBER: return 14;
					case QRMode.MODE_ALPHA_NUM: return 13;
					case QRMode.MODE_8BIT_BYTE: return 16;
					case QRMode.MODE_KANJI: return 12;
					default: throw "mode:" + mode;
				}
				else throw "type:" + type;
			};
			_this.getLostPoint = function(qrcode4) {
				var moduleCount = qrcode4.getModuleCount();
				var lostPoint = 0;
				for (var row = 0; row < moduleCount; row += 1) for (var col = 0; col < moduleCount; col += 1) {
					var sameCount = 0;
					var dark = qrcode4.isDark(row, col);
					for (var r = -1; r <= 1; r += 1) {
						if (row + r < 0 || moduleCount <= row + r) continue;
						for (var c2 = -1; c2 <= 1; c2 += 1) {
							if (col + c2 < 0 || moduleCount <= col + c2) continue;
							if (r == 0 && c2 == 0) continue;
							if (dark == qrcode4.isDark(row + r, col + c2)) sameCount += 1;
						}
					}
					if (sameCount > 5) lostPoint += 3 + sameCount - 5;
				}
				for (var row = 0; row < moduleCount - 1; row += 1) for (var col = 0; col < moduleCount - 1; col += 1) {
					var count = 0;
					if (qrcode4.isDark(row, col)) count += 1;
					if (qrcode4.isDark(row + 1, col)) count += 1;
					if (qrcode4.isDark(row, col + 1)) count += 1;
					if (qrcode4.isDark(row + 1, col + 1)) count += 1;
					if (count == 0 || count == 4) lostPoint += 3;
				}
				for (var row = 0; row < moduleCount; row += 1) for (var col = 0; col < moduleCount - 6; col += 1) if (qrcode4.isDark(row, col) && !qrcode4.isDark(row, col + 1) && qrcode4.isDark(row, col + 2) && qrcode4.isDark(row, col + 3) && qrcode4.isDark(row, col + 4) && !qrcode4.isDark(row, col + 5) && qrcode4.isDark(row, col + 6)) lostPoint += 40;
				for (var col = 0; col < moduleCount; col += 1) for (var row = 0; row < moduleCount - 6; row += 1) if (qrcode4.isDark(row, col) && !qrcode4.isDark(row + 1, col) && qrcode4.isDark(row + 2, col) && qrcode4.isDark(row + 3, col) && qrcode4.isDark(row + 4, col) && !qrcode4.isDark(row + 5, col) && qrcode4.isDark(row + 6, col)) lostPoint += 40;
				var darkCount = 0;
				for (var col = 0; col < moduleCount; col += 1) for (var row = 0; row < moduleCount; row += 1) if (qrcode4.isDark(row, col)) darkCount += 1;
				var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;
				lostPoint += ratio * 10;
				return lostPoint;
			};
			return _this;
		}();
		var QRMath = function() {
			var EXP_TABLE = new Array(256);
			var LOG_TABLE = new Array(256);
			for (var i2 = 0; i2 < 8; i2 += 1) EXP_TABLE[i2] = 1 << i2;
			for (var i2 = 8; i2 < 256; i2 += 1) EXP_TABLE[i2] = EXP_TABLE[i2 - 4] ^ EXP_TABLE[i2 - 5] ^ EXP_TABLE[i2 - 6] ^ EXP_TABLE[i2 - 8];
			for (var i2 = 0; i2 < 255; i2 += 1) LOG_TABLE[EXP_TABLE[i2]] = i2;
			var _this = {};
			_this.glog = function(n2) {
				if (n2 < 1) throw "glog(" + n2 + ")";
				return LOG_TABLE[n2];
			};
			_this.gexp = function(n2) {
				while (n2 < 0) n2 += 255;
				while (n2 >= 256) n2 -= 255;
				return EXP_TABLE[n2];
			};
			return _this;
		}();
		function qrPolynomial(num, shift) {
			if (typeof num.length == "undefined") throw num.length + "/" + shift;
			var _num = function() {
				var offset = 0;
				while (offset < num.length && num[offset] == 0) offset += 1;
				var _num2 = new Array(num.length - offset + shift);
				for (var i2 = 0; i2 < num.length - offset; i2 += 1) _num2[i2] = num[i2 + offset];
				return _num2;
			}();
			var _this = {};
			_this.getAt = function(index) {
				return _num[index];
			};
			_this.getLength = function() {
				return _num.length;
			};
			_this.multiply = function(e2) {
				var num2 = new Array(_this.getLength() + e2.getLength() - 1);
				for (var i2 = 0; i2 < _this.getLength(); i2 += 1) for (var j = 0; j < e2.getLength(); j += 1) num2[i2 + j] ^= QRMath.gexp(QRMath.glog(_this.getAt(i2)) + QRMath.glog(e2.getAt(j)));
				return qrPolynomial(num2, 0);
			};
			_this.mod = function(e2) {
				if (_this.getLength() - e2.getLength() < 0) return _this;
				var ratio = QRMath.glog(_this.getAt(0)) - QRMath.glog(e2.getAt(0));
				var num2 = new Array(_this.getLength());
				for (var i2 = 0; i2 < _this.getLength(); i2 += 1) num2[i2] = _this.getAt(i2);
				for (var i2 = 0; i2 < e2.getLength(); i2 += 1) num2[i2] ^= QRMath.gexp(QRMath.glog(e2.getAt(i2)) + ratio);
				return qrPolynomial(num2, 0).mod(e2);
			};
			return _this;
		}
		var QRRSBlock = function() {
			var RS_BLOCK_TABLE = [
				[
					1,
					26,
					19
				],
				[
					1,
					26,
					16
				],
				[
					1,
					26,
					13
				],
				[
					1,
					26,
					9
				],
				[
					1,
					44,
					34
				],
				[
					1,
					44,
					28
				],
				[
					1,
					44,
					22
				],
				[
					1,
					44,
					16
				],
				[
					1,
					70,
					55
				],
				[
					1,
					70,
					44
				],
				[
					2,
					35,
					17
				],
				[
					2,
					35,
					13
				],
				[
					1,
					100,
					80
				],
				[
					2,
					50,
					32
				],
				[
					2,
					50,
					24
				],
				[
					4,
					25,
					9
				],
				[
					1,
					134,
					108
				],
				[
					2,
					67,
					43
				],
				[
					2,
					33,
					15,
					2,
					34,
					16
				],
				[
					2,
					33,
					11,
					2,
					34,
					12
				],
				[
					2,
					86,
					68
				],
				[
					4,
					43,
					27
				],
				[
					4,
					43,
					19
				],
				[
					4,
					43,
					15
				],
				[
					2,
					98,
					78
				],
				[
					4,
					49,
					31
				],
				[
					2,
					32,
					14,
					4,
					33,
					15
				],
				[
					4,
					39,
					13,
					1,
					40,
					14
				],
				[
					2,
					121,
					97
				],
				[
					2,
					60,
					38,
					2,
					61,
					39
				],
				[
					4,
					40,
					18,
					2,
					41,
					19
				],
				[
					4,
					40,
					14,
					2,
					41,
					15
				],
				[
					2,
					146,
					116
				],
				[
					3,
					58,
					36,
					2,
					59,
					37
				],
				[
					4,
					36,
					16,
					4,
					37,
					17
				],
				[
					4,
					36,
					12,
					4,
					37,
					13
				],
				[
					2,
					86,
					68,
					2,
					87,
					69
				],
				[
					4,
					69,
					43,
					1,
					70,
					44
				],
				[
					6,
					43,
					19,
					2,
					44,
					20
				],
				[
					6,
					43,
					15,
					2,
					44,
					16
				],
				[
					4,
					101,
					81
				],
				[
					1,
					80,
					50,
					4,
					81,
					51
				],
				[
					4,
					50,
					22,
					4,
					51,
					23
				],
				[
					3,
					36,
					12,
					8,
					37,
					13
				],
				[
					2,
					116,
					92,
					2,
					117,
					93
				],
				[
					6,
					58,
					36,
					2,
					59,
					37
				],
				[
					4,
					46,
					20,
					6,
					47,
					21
				],
				[
					7,
					42,
					14,
					4,
					43,
					15
				],
				[
					4,
					133,
					107
				],
				[
					8,
					59,
					37,
					1,
					60,
					38
				],
				[
					8,
					44,
					20,
					4,
					45,
					21
				],
				[
					12,
					33,
					11,
					4,
					34,
					12
				],
				[
					3,
					145,
					115,
					1,
					146,
					116
				],
				[
					4,
					64,
					40,
					5,
					65,
					41
				],
				[
					11,
					36,
					16,
					5,
					37,
					17
				],
				[
					11,
					36,
					12,
					5,
					37,
					13
				],
				[
					5,
					109,
					87,
					1,
					110,
					88
				],
				[
					5,
					65,
					41,
					5,
					66,
					42
				],
				[
					5,
					54,
					24,
					7,
					55,
					25
				],
				[
					11,
					36,
					12,
					7,
					37,
					13
				],
				[
					5,
					122,
					98,
					1,
					123,
					99
				],
				[
					7,
					73,
					45,
					3,
					74,
					46
				],
				[
					15,
					43,
					19,
					2,
					44,
					20
				],
				[
					3,
					45,
					15,
					13,
					46,
					16
				],
				[
					1,
					135,
					107,
					5,
					136,
					108
				],
				[
					10,
					74,
					46,
					1,
					75,
					47
				],
				[
					1,
					50,
					22,
					15,
					51,
					23
				],
				[
					2,
					42,
					14,
					17,
					43,
					15
				],
				[
					5,
					150,
					120,
					1,
					151,
					121
				],
				[
					9,
					69,
					43,
					4,
					70,
					44
				],
				[
					17,
					50,
					22,
					1,
					51,
					23
				],
				[
					2,
					42,
					14,
					19,
					43,
					15
				],
				[
					3,
					141,
					113,
					4,
					142,
					114
				],
				[
					3,
					70,
					44,
					11,
					71,
					45
				],
				[
					17,
					47,
					21,
					4,
					48,
					22
				],
				[
					9,
					39,
					13,
					16,
					40,
					14
				],
				[
					3,
					135,
					107,
					5,
					136,
					108
				],
				[
					3,
					67,
					41,
					13,
					68,
					42
				],
				[
					15,
					54,
					24,
					5,
					55,
					25
				],
				[
					15,
					43,
					15,
					10,
					44,
					16
				],
				[
					4,
					144,
					116,
					4,
					145,
					117
				],
				[
					17,
					68,
					42
				],
				[
					17,
					50,
					22,
					6,
					51,
					23
				],
				[
					19,
					46,
					16,
					6,
					47,
					17
				],
				[
					2,
					139,
					111,
					7,
					140,
					112
				],
				[
					17,
					74,
					46
				],
				[
					7,
					54,
					24,
					16,
					55,
					25
				],
				[
					34,
					37,
					13
				],
				[
					4,
					151,
					121,
					5,
					152,
					122
				],
				[
					4,
					75,
					47,
					14,
					76,
					48
				],
				[
					11,
					54,
					24,
					14,
					55,
					25
				],
				[
					16,
					45,
					15,
					14,
					46,
					16
				],
				[
					6,
					147,
					117,
					4,
					148,
					118
				],
				[
					6,
					73,
					45,
					14,
					74,
					46
				],
				[
					11,
					54,
					24,
					16,
					55,
					25
				],
				[
					30,
					46,
					16,
					2,
					47,
					17
				],
				[
					8,
					132,
					106,
					4,
					133,
					107
				],
				[
					8,
					75,
					47,
					13,
					76,
					48
				],
				[
					7,
					54,
					24,
					22,
					55,
					25
				],
				[
					22,
					45,
					15,
					13,
					46,
					16
				],
				[
					10,
					142,
					114,
					2,
					143,
					115
				],
				[
					19,
					74,
					46,
					4,
					75,
					47
				],
				[
					28,
					50,
					22,
					6,
					51,
					23
				],
				[
					33,
					46,
					16,
					4,
					47,
					17
				],
				[
					8,
					152,
					122,
					4,
					153,
					123
				],
				[
					22,
					73,
					45,
					3,
					74,
					46
				],
				[
					8,
					53,
					23,
					26,
					54,
					24
				],
				[
					12,
					45,
					15,
					28,
					46,
					16
				],
				[
					3,
					147,
					117,
					10,
					148,
					118
				],
				[
					3,
					73,
					45,
					23,
					74,
					46
				],
				[
					4,
					54,
					24,
					31,
					55,
					25
				],
				[
					11,
					45,
					15,
					31,
					46,
					16
				],
				[
					7,
					146,
					116,
					7,
					147,
					117
				],
				[
					21,
					73,
					45,
					7,
					74,
					46
				],
				[
					1,
					53,
					23,
					37,
					54,
					24
				],
				[
					19,
					45,
					15,
					26,
					46,
					16
				],
				[
					5,
					145,
					115,
					10,
					146,
					116
				],
				[
					19,
					75,
					47,
					10,
					76,
					48
				],
				[
					15,
					54,
					24,
					25,
					55,
					25
				],
				[
					23,
					45,
					15,
					25,
					46,
					16
				],
				[
					13,
					145,
					115,
					3,
					146,
					116
				],
				[
					2,
					74,
					46,
					29,
					75,
					47
				],
				[
					42,
					54,
					24,
					1,
					55,
					25
				],
				[
					23,
					45,
					15,
					28,
					46,
					16
				],
				[
					17,
					145,
					115
				],
				[
					10,
					74,
					46,
					23,
					75,
					47
				],
				[
					10,
					54,
					24,
					35,
					55,
					25
				],
				[
					19,
					45,
					15,
					35,
					46,
					16
				],
				[
					17,
					145,
					115,
					1,
					146,
					116
				],
				[
					14,
					74,
					46,
					21,
					75,
					47
				],
				[
					29,
					54,
					24,
					19,
					55,
					25
				],
				[
					11,
					45,
					15,
					46,
					46,
					16
				],
				[
					13,
					145,
					115,
					6,
					146,
					116
				],
				[
					14,
					74,
					46,
					23,
					75,
					47
				],
				[
					44,
					54,
					24,
					7,
					55,
					25
				],
				[
					59,
					46,
					16,
					1,
					47,
					17
				],
				[
					12,
					151,
					121,
					7,
					152,
					122
				],
				[
					12,
					75,
					47,
					26,
					76,
					48
				],
				[
					39,
					54,
					24,
					14,
					55,
					25
				],
				[
					22,
					45,
					15,
					41,
					46,
					16
				],
				[
					6,
					151,
					121,
					14,
					152,
					122
				],
				[
					6,
					75,
					47,
					34,
					76,
					48
				],
				[
					46,
					54,
					24,
					10,
					55,
					25
				],
				[
					2,
					45,
					15,
					64,
					46,
					16
				],
				[
					17,
					152,
					122,
					4,
					153,
					123
				],
				[
					29,
					74,
					46,
					14,
					75,
					47
				],
				[
					49,
					54,
					24,
					10,
					55,
					25
				],
				[
					24,
					45,
					15,
					46,
					46,
					16
				],
				[
					4,
					152,
					122,
					18,
					153,
					123
				],
				[
					13,
					74,
					46,
					32,
					75,
					47
				],
				[
					48,
					54,
					24,
					14,
					55,
					25
				],
				[
					42,
					45,
					15,
					32,
					46,
					16
				],
				[
					20,
					147,
					117,
					4,
					148,
					118
				],
				[
					40,
					75,
					47,
					7,
					76,
					48
				],
				[
					43,
					54,
					24,
					22,
					55,
					25
				],
				[
					10,
					45,
					15,
					67,
					46,
					16
				],
				[
					19,
					148,
					118,
					6,
					149,
					119
				],
				[
					18,
					75,
					47,
					31,
					76,
					48
				],
				[
					34,
					54,
					24,
					34,
					55,
					25
				],
				[
					20,
					45,
					15,
					61,
					46,
					16
				]
			];
			var qrRSBlock = function(totalCount, dataCount) {
				var _this2 = {};
				_this2.totalCount = totalCount;
				_this2.dataCount = dataCount;
				return _this2;
			};
			var _this = {};
			var getRsBlockTable = function(typeNumber, errorCorrectionLevel) {
				switch (errorCorrectionLevel) {
					case QRErrorCorrectionLevel.L: return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];
					case QRErrorCorrectionLevel.M: return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];
					case QRErrorCorrectionLevel.Q: return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];
					case QRErrorCorrectionLevel.H: return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];
					default: return void 0;
				}
			};
			_this.getRSBlocks = function(typeNumber, errorCorrectionLevel) {
				var rsBlock = getRsBlockTable(typeNumber, errorCorrectionLevel);
				if (typeof rsBlock == "undefined") throw "bad rs block @ typeNumber:" + typeNumber + "/errorCorrectionLevel:" + errorCorrectionLevel;
				var length = rsBlock.length / 3;
				var list = [];
				for (var i2 = 0; i2 < length; i2 += 1) {
					var count = rsBlock[i2 * 3 + 0];
					var totalCount = rsBlock[i2 * 3 + 1];
					var dataCount = rsBlock[i2 * 3 + 2];
					for (var j = 0; j < count; j += 1) list.push(qrRSBlock(totalCount, dataCount));
				}
				return list;
			};
			return _this;
		}();
		var qrBitBuffer = function() {
			var _buffer = [];
			var _length = 0;
			var _this = {};
			_this.getBuffer = function() {
				return _buffer;
			};
			_this.getAt = function(index) {
				var bufIndex = Math.floor(index / 8);
				return (_buffer[bufIndex] >>> 7 - index % 8 & 1) == 1;
			};
			_this.put = function(num, length) {
				for (var i2 = 0; i2 < length; i2 += 1) _this.putBit((num >>> length - i2 - 1 & 1) == 1);
			};
			_this.getLengthInBits = function() {
				return _length;
			};
			_this.putBit = function(bit) {
				var bufIndex = Math.floor(_length / 8);
				if (_buffer.length <= bufIndex) _buffer.push(0);
				if (bit) _buffer[bufIndex] |= 128 >>> _length % 8;
				_length += 1;
			};
			return _this;
		};
		var qrNumber = function(data) {
			var _mode = QRMode.MODE_NUMBER;
			var _data = data;
			var _this = {};
			_this.getMode = function() {
				return _mode;
			};
			_this.getLength = function(buffer) {
				return _data.length;
			};
			_this.write = function(buffer) {
				var data2 = _data;
				var i2 = 0;
				while (i2 + 2 < data2.length) {
					buffer.put(strToNum(data2.substring(i2, i2 + 3)), 10);
					i2 += 3;
				}
				if (i2 < data2.length) {
					if (data2.length - i2 == 1) buffer.put(strToNum(data2.substring(i2, i2 + 1)), 4);
					else if (data2.length - i2 == 2) buffer.put(strToNum(data2.substring(i2, i2 + 2)), 7);
				}
			};
			var strToNum = function(s2) {
				var num = 0;
				for (var i2 = 0; i2 < s2.length; i2 += 1) num = num * 10 + chatToNum(s2.charAt(i2));
				return num;
			};
			var chatToNum = function(c2) {
				if ("0" <= c2 && c2 <= "9") return c2.charCodeAt(0) - "0".charCodeAt(0);
				throw "illegal char :" + c2;
			};
			return _this;
		};
		var qrAlphaNum = function(data) {
			var _mode = QRMode.MODE_ALPHA_NUM;
			var _data = data;
			var _this = {};
			_this.getMode = function() {
				return _mode;
			};
			_this.getLength = function(buffer) {
				return _data.length;
			};
			_this.write = function(buffer) {
				var s2 = _data;
				var i2 = 0;
				while (i2 + 1 < s2.length) {
					buffer.put(getCode(s2.charAt(i2)) * 45 + getCode(s2.charAt(i2 + 1)), 11);
					i2 += 2;
				}
				if (i2 < s2.length) buffer.put(getCode(s2.charAt(i2)), 6);
			};
			var getCode = function(c2) {
				if ("0" <= c2 && c2 <= "9") return c2.charCodeAt(0) - "0".charCodeAt(0);
				else if ("A" <= c2 && c2 <= "Z") return c2.charCodeAt(0) - "A".charCodeAt(0) + 10;
				else switch (c2) {
					case " ": return 36;
					case "$": return 37;
					case "%": return 38;
					case "*": return 39;
					case "+": return 40;
					case "-": return 41;
					case ".": return 42;
					case "/": return 43;
					case ":": return 44;
					default: throw "illegal char :" + c2;
				}
			};
			return _this;
		};
		var qr8BitByte = function(data) {
			var _mode = QRMode.MODE_8BIT_BYTE;
			var _bytes = qrcode3.stringToBytes(data);
			var _this = {};
			_this.getMode = function() {
				return _mode;
			};
			_this.getLength = function(buffer) {
				return _bytes.length;
			};
			_this.write = function(buffer) {
				for (var i2 = 0; i2 < _bytes.length; i2 += 1) buffer.put(_bytes[i2], 8);
			};
			return _this;
		};
		var qrKanji = function(data) {
			var _mode = QRMode.MODE_KANJI;
			var stringToBytes = qrcode3.stringToBytesFuncs["SJIS"];
			if (!stringToBytes) throw "sjis not supported.";
			(function(c2, code$1) {
				var test = stringToBytes(c2);
				if (test.length != 2 || (test[0] << 8 | test[1]) != code$1) throw "sjis not supported.";
			})("友", 38726);
			var _bytes = stringToBytes(data);
			var _this = {};
			_this.getMode = function() {
				return _mode;
			};
			_this.getLength = function(buffer) {
				return ~~(_bytes.length / 2);
			};
			_this.write = function(buffer) {
				var data2 = _bytes;
				var i2 = 0;
				while (i2 + 1 < data2.length) {
					var c2 = (255 & data2[i2]) << 8 | 255 & data2[i2 + 1];
					if (33088 <= c2 && c2 <= 40956) c2 -= 33088;
					else if (57408 <= c2 && c2 <= 60351) c2 -= 49472;
					else throw "illegal char at " + (i2 + 1) + "/" + c2;
					c2 = (c2 >>> 8 & 255) * 192 + (c2 & 255);
					buffer.put(c2, 13);
					i2 += 2;
				}
				if (i2 < data2.length) throw "illegal char at " + (i2 + 1);
			};
			return _this;
		};
		var byteArrayOutputStream = function() {
			var _bytes = [];
			var _this = {};
			_this.writeByte = function(b) {
				_bytes.push(b & 255);
			};
			_this.writeShort = function(i2) {
				_this.writeByte(i2);
				_this.writeByte(i2 >>> 8);
			};
			_this.writeBytes = function(b, off, len$1) {
				off = off || 0;
				len$1 = len$1 || b.length;
				for (var i2 = 0; i2 < len$1; i2 += 1) _this.writeByte(b[i2 + off]);
			};
			_this.writeString = function(s2) {
				for (var i2 = 0; i2 < s2.length; i2 += 1) _this.writeByte(s2.charCodeAt(i2));
			};
			_this.toByteArray = function() {
				return _bytes;
			};
			_this.toString = function() {
				var s2 = "";
				s2 += "[";
				for (var i2 = 0; i2 < _bytes.length; i2 += 1) {
					if (i2 > 0) s2 += ",";
					s2 += _bytes[i2];
				}
				s2 += "]";
				return s2;
			};
			return _this;
		};
		var base64EncodeOutputStream = function() {
			var _buffer = 0;
			var _buflen = 0;
			var _length = 0;
			var _base64 = "";
			var _this = {};
			var writeEncoded = function(b) {
				_base64 += String.fromCharCode(encode$1(b & 63));
			};
			var encode$1 = function(n2) {
				if (n2 < 0);
				else if (n2 < 26) return 65 + n2;
				else if (n2 < 52) return 97 + (n2 - 26);
				else if (n2 < 62) return 48 + (n2 - 52);
				else if (n2 == 62) return 43;
				else if (n2 == 63) return 47;
				throw "n:" + n2;
			};
			_this.writeByte = function(n2) {
				_buffer = _buffer << 8 | n2 & 255;
				_buflen += 8;
				_length += 1;
				while (_buflen >= 6) {
					writeEncoded(_buffer >>> _buflen - 6);
					_buflen -= 6;
				}
			};
			_this.flush = function() {
				if (_buflen > 0) {
					writeEncoded(_buffer << 6 - _buflen);
					_buffer = 0;
					_buflen = 0;
				}
				if (_length % 3 != 0) {
					var padlen = 3 - _length % 3;
					for (var i2 = 0; i2 < padlen; i2 += 1) _base64 += "=";
				}
			};
			_this.toString = function() {
				return _base64;
			};
			return _this;
		};
		var base64DecodeInputStream = function(str) {
			var _str = str;
			var _pos = 0;
			var _buffer = 0;
			var _buflen = 0;
			var _this = {};
			_this.read = function() {
				while (_buflen < 8) {
					if (_pos >= _str.length) {
						if (_buflen == 0) return -1;
						throw "unexpected end of file./" + _buflen;
					}
					var c2 = _str.charAt(_pos);
					_pos += 1;
					if (c2 == "=") {
						_buflen = 0;
						return -1;
					} else if (c2.match(/^\s$/)) continue;
					_buffer = _buffer << 6 | decode$1(c2.charCodeAt(0));
					_buflen += 6;
				}
				var n2 = _buffer >>> _buflen - 8 & 255;
				_buflen -= 8;
				return n2;
			};
			var decode$1 = function(c2) {
				if (65 <= c2 && c2 <= 90) return c2 - 65;
				else if (97 <= c2 && c2 <= 122) return c2 - 97 + 26;
				else if (48 <= c2 && c2 <= 57) return c2 - 48 + 52;
				else if (c2 == 43) return 62;
				else if (c2 == 47) return 63;
				else throw "c:" + c2;
			};
			return _this;
		};
		var gifImage = function(width, height) {
			var _width = width;
			var _height = height;
			var _data = new Array(width * height);
			var _this = {};
			_this.setPixel = function(x, y, pixel) {
				_data[y * _width + x] = pixel;
			};
			_this.write = function(out) {
				out.writeString("GIF87a");
				out.writeShort(_width);
				out.writeShort(_height);
				out.writeByte(128);
				out.writeByte(0);
				out.writeByte(0);
				out.writeByte(0);
				out.writeByte(0);
				out.writeByte(0);
				out.writeByte(255);
				out.writeByte(255);
				out.writeByte(255);
				out.writeString(",");
				out.writeShort(0);
				out.writeShort(0);
				out.writeShort(_width);
				out.writeShort(_height);
				out.writeByte(0);
				var lzwMinCodeSize = 2;
				var raster = getLZWRaster(lzwMinCodeSize);
				out.writeByte(lzwMinCodeSize);
				var offset = 0;
				while (raster.length - offset > 255) {
					out.writeByte(255);
					out.writeBytes(raster, offset, 255);
					offset += 255;
				}
				out.writeByte(raster.length - offset);
				out.writeBytes(raster, offset, raster.length - offset);
				out.writeByte(0);
				out.writeString(";");
			};
			var bitOutputStream = function(out) {
				var _out = out;
				var _bitLength = 0;
				var _bitBuffer = 0;
				var _this2 = {};
				_this2.write = function(data, length) {
					if (data >>> length != 0) throw "length over";
					while (_bitLength + length >= 8) {
						_out.writeByte(255 & (data << _bitLength | _bitBuffer));
						length -= 8 - _bitLength;
						data >>>= 8 - _bitLength;
						_bitBuffer = 0;
						_bitLength = 0;
					}
					_bitBuffer = data << _bitLength | _bitBuffer;
					_bitLength = _bitLength + length;
				};
				_this2.flush = function() {
					if (_bitLength > 0) _out.writeByte(_bitBuffer);
				};
				return _this2;
			};
			var getLZWRaster = function(lzwMinCodeSize) {
				var clearCode = 1 << lzwMinCodeSize;
				var endCode = (1 << lzwMinCodeSize) + 1;
				var bitLength = lzwMinCodeSize + 1;
				var table = lzwTable();
				for (var i2 = 0; i2 < clearCode; i2 += 1) table.add(String.fromCharCode(i2));
				table.add(String.fromCharCode(clearCode));
				table.add(String.fromCharCode(endCode));
				var byteOut = byteArrayOutputStream();
				var bitOut = bitOutputStream(byteOut);
				bitOut.write(clearCode, bitLength);
				var dataIndex = 0;
				var s2 = String.fromCharCode(_data[dataIndex]);
				dataIndex += 1;
				while (dataIndex < _data.length) {
					var c2 = String.fromCharCode(_data[dataIndex]);
					dataIndex += 1;
					if (table.contains(s2 + c2)) s2 = s2 + c2;
					else {
						bitOut.write(table.indexOf(s2), bitLength);
						if (table.size() < 4095) {
							if (table.size() == 1 << bitLength) bitLength += 1;
							table.add(s2 + c2);
						}
						s2 = c2;
					}
				}
				bitOut.write(table.indexOf(s2), bitLength);
				bitOut.write(endCode, bitLength);
				bitOut.flush();
				return byteOut.toByteArray();
			};
			var lzwTable = function() {
				var _map = {};
				var _size = 0;
				var _this2 = {};
				_this2.add = function(key) {
					if (_this2.contains(key)) throw "dup key:" + key;
					_map[key] = _size;
					_size += 1;
				};
				_this2.size = function() {
					return _size;
				};
				_this2.indexOf = function(key) {
					return _map[key];
				};
				_this2.contains = function(key) {
					return typeof _map[key] != "undefined";
				};
				return _this2;
			};
			return _this;
		};
		var createDataURL = function(width, height, getPixel) {
			var gif = gifImage(width, height);
			for (var y = 0; y < height; y += 1) for (var x = 0; x < width; x += 1) gif.setPixel(x, y, getPixel(x, y));
			var b = byteArrayOutputStream();
			gif.write(b);
			var base64$1 = base64EncodeOutputStream();
			var bytes = b.toByteArray();
			for (var i2 = 0; i2 < bytes.length; i2 += 1) base64$1.writeByte(bytes[i2]);
			base64$1.flush();
			return "data:image/gif;base64," + base64$1;
		};
		return qrcode3;
	}();
	(function() {
		qrcode2.stringToBytesFuncs["UTF-8"] = function(s2) {
			function toUTF8Array(str) {
				var utf8 = [];
				for (var i2 = 0; i2 < str.length; i2++) {
					var charcode = str.charCodeAt(i2);
					if (charcode < 128) utf8.push(charcode);
					else if (charcode < 2048) utf8.push(192 | charcode >> 6, 128 | charcode & 63);
					else if (charcode < 55296 || charcode >= 57344) utf8.push(224 | charcode >> 12, 128 | charcode >> 6 & 63, 128 | charcode & 63);
					else {
						i2++;
						charcode = 65536 + ((charcode & 1023) << 10 | str.charCodeAt(i2) & 1023);
						utf8.push(240 | charcode >> 18, 128 | charcode >> 12 & 63, 128 | charcode >> 6 & 63, 128 | charcode & 63);
					}
				}
				return utf8;
			}
			return toUTF8Array(s2);
		};
	})();
	(function(factory) {
		module$1.exports = factory();
	})(function() {
		return qrcode2;
	});
})(qrcode$1);
const qrcode = qrcode$1.exports;
function copyToClipboard(text) {
	return __async(this, null, function* () {
		try {
			if (!(navigator == null ? void 0 : navigator.clipboard)) throw new TonConnectUIError("Clipboard API not available");
			return yield navigator.clipboard.writeText(text);
		} catch (e2) {}
		fallbackCopyTextToClipboard(text);
	});
}
function fallbackCopyTextToClipboard(text) {
	const textArea = document.createElement("textarea");
	textArea.value = text;
	textArea.style.top = "0";
	textArea.style.left = "0";
	textArea.style.position = "fixed";
	document.body.appendChild(textArea);
	textArea.focus();
	textArea.select();
	try {
		document.execCommand("copy");
	} finally {
		document.body.removeChild(textArea);
	}
}
const _tmpl$$s = /* @__PURE__ */ template$1(`<div></div>`);
const QRCode = (props) => {
	let qrCodeCanvasRef;
	let qrCodeWrapperRef;
	let imageRef;
	const [copyButtonOpened, setCopyButtonOpened] = createSignal(false);
	const [picSize, setPicSize] = createSignal(picSizeDefault);
	createEffect(() => {
		const errorCorrectionLevel = "L";
		const cellSize = 4;
		const qr = qrcode(0, errorCorrectionLevel);
		qr.addData(props.sourceUrl);
		qr.make();
		qrCodeCanvasRef.innerHTML = qr.createSvgTag(cellSize, 0);
		const qrSize = qrCodeCanvasRef.firstElementChild.clientWidth;
		const scale = Math.round(qrNormalSize / qrSize * 1e5) / 1e5;
		if (imageRef) {
			const imgSize = Math.ceil(imgSizeDefault / (scale * cellSize)) * cellSize;
			const imgOffset = toPx(Math.ceil((qrSize - imgSize) / (2 * cellSize)) * cellSize);
			imageRef.style.top = imgOffset;
			imageRef.style.left = imgOffset;
			imageRef.style.height = toPx(imgSize);
			imageRef.style.width = toPx(imgSize);
			setPicSize(Math.round(picSizeDefault / scale));
		}
		qrCodeWrapperRef.style.transform = `scale(${scale})`;
	});
	let timeoutId = null;
	const onCopyClick = () => {
		setCopyButtonOpened(true);
		copyToClipboard(props.sourceUrl);
		if (timeoutId != null) clearTimeout(timeoutId);
		timeoutId = setTimeout(() => setCopyButtonOpened(false), 1500);
	};
	return createComponent(QrCodeBackground, {
		get ["class"]() {
			return props.class;
		},
		onClick: onCopyClick,
		get children() {
			return [
				createComponent(QrCodeWrapper$2, {
					ref(r$) {
						const _ref$ = qrCodeWrapperRef;
						typeof _ref$ === "function" ? _ref$(r$) : qrCodeWrapperRef = r$;
					},
					get children() {
						return [(() => {
							const _el$ = _tmpl$$s.cloneNode(true);
							const _ref$2 = qrCodeCanvasRef;
							typeof _ref$2 === "function" ? use(_ref$2, _el$) : qrCodeCanvasRef = _el$;
							return _el$;
						})(), createComponent(Show, {
							get when() {
								return props.imageUrl;
							},
							get children() {
								return createComponent(ImageBackground, {
									ref(r$) {
										const _ref$3 = imageRef;
										typeof _ref$3 === "function" ? _ref$3(r$) : imageRef = r$;
									},
									get children() {
										return createComponent(ImageStyled$3, {
											get src() {
												return props.imageUrl;
											},
											alt: "",
											get size() {
												return picSize();
											}
										});
									}
								});
							}
						})];
					}
				}),
				createComponent(Transition, {
					onBeforeEnter: (el) => {
						animate(el, [{
							opacity: 0,
							transform: "translate(-50%, 44px)"
						}, {
							opacity: 1,
							transform: "translate(-50%, 0)"
						}], {
							duration: 150,
							easing: "ease-out"
						});
					},
					onExit: (el, done) => {
						animate(el, [{
							opacity: 1,
							transform: "translate(-50%, 0)"
						}, {
							opacity: 0,
							transform: "translate(-50%, 44px)"
						}], {
							duration: 150,
							easing: "ease-out"
						}).finished.then(() => {
							done();
						});
					},
					get children() {
						return createComponent(Show, {
							get when() {
								return copyButtonOpened() && !props.disableCopy;
							},
							get children() {
								return createComponent(CopiedBoxStyled, { get children() {
									return [createComponent(SuccessIcon, { size: "xs" }), createComponent(Text, {
										translationKey: "common.linkCopied",
										children: "Link Copied"
									})];
								} });
							}
						});
					}
				}),
				createComponent(Show, {
					get when() {
						return !props.disableCopy;
					},
					get children() {
						return createComponent(CopyIconButton, { get children() {
							return createComponent(CopyLightIcon, {});
						} });
					}
				})
			];
		}
	});
};
var deepReadObject = (obj, path, defaultValue) => {
	const value = path.trim().split(".").reduce((a2, b) => a2 ? a2[b] : void 0, obj);
	return value !== void 0 ? value : defaultValue;
};
var template = (str, params, reg = /{{(.*?)}}/g) => str.replace(reg, (_, key) => deepReadObject(params, key, ""));
var createI18nContext = (init = {}, lang = navigator.language in init ? navigator.language : Object.keys(init)[0]) => {
	const [locale, setLocale] = createSignal(lang);
	const [dict, setDict] = createStore(init);
	const translate = (key, params, defaultValue) => {
		const val = deepReadObject(dict[locale()], key, defaultValue || "");
		if (typeof val === "function") return val(params);
		if (typeof val === "string") return template(val, params || {});
		return val;
	};
	const actions = {
		add(lang2, table) {
			setDict(lang2, (t2) => Object.assign(t2 || {}, table));
		},
		locale: (lang2) => lang2 ? setLocale(lang2) : locale(),
		dict: (lang2) => deepReadObject(dict, lang2)
	};
	return [translate, actions];
};
var I18nContext = createContext({});
var useI18n = () => useContext(I18nContext);
const TextStyled$3 = styled.div`
    font-style: normal;
    font-weight: ${(props) => props.fontWeight};
    font-size: ${(props) => props.fontSize};
    line-height: ${(props) => props.lineHeight};

    color: ${(props) => props.color};
`;
const Text = (inputs) => {
	const theme = useTheme();
	const [t2] = useI18n();
	let textRef;
	const color = () => inputs.color || theme.colors.text.primary;
	const props = mergeProps({
		fontSize: "14px",
		fontWeight: "510",
		lineHeight: "130%"
	}, inputs);
	createEffect(() => {
		if (!textRef) return;
		if (props.cursor === "unset") return;
		if (getComputedStyle(textRef).cursor !== "pointer") textRef.style.cursor = "default";
	});
	return createComponent(TextStyled$3, {
		get fontSize() {
			return props.fontSize;
		},
		get fontWeight() {
			return props.fontWeight;
		},
		get lineHeight() {
			return props.lineHeight;
		},
		get color() {
			return color();
		},
		get ["class"]() {
			return props.class;
		},
		ref(r$) {
			const _ref$ = textRef;
			typeof _ref$ === "function" ? _ref$(r$) : textRef = r$;
		},
		"data-tc-text": "true",
		get children() {
			var _a2;
			return createMemo(() => !!props.translationKey)() ? t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString()) : props.children;
		}
	});
};
const ImageContainer = styled.div`
    position: relative;

    &::after {
        content: '';
        display: block;
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        border: 0.5px solid rgba(0, 0, 0, 0.08);
        border-radius: inherit;
    }
`;
const ImageStyled$2 = styled(Image)`
    width: 100%;
    height: 100%;
    border-radius: inherit;
`;
const WalletImage = (props) => {
	return createComponent(ImageContainer, {
		get ["class"]() {
			return props.class;
		},
		get children() {
			return [createComponent(ImageStyled$2, { get src() {
				return props.src;
			} }), createMemo(() => props.badge)];
		}
	});
};
const borders$3 = {
	m: "16px",
	s: "12px",
	none: "0"
};
const badgeBorders = {
	m: "6px",
	s: "6px",
	none: "0"
};
const WalletUlContainer = styled.ul`
    display: flex;
    gap: 0;
    width: 100%;
    overflow-x: auto;
    padding: 8px 12px 16px 12px;
    margin: 0;
    list-style: none;
    flex-wrap: nowrap;

    &&::-webkit-scrollbar {
        display: none;
    }
    -ms-overflow-style: none;
    scrollbar-width: none;

    > li {
        display: flex;
        flex: 1;
        min-width: 78px;
        height: fit-content;
    }

    > li > button {
        width: 100%;
    }
`;
const WalletItemStyled = styled.button`
    position: relative;
    cursor: pointer;
    border: none;
    background-color: unset;
    padding: 8px 4px;
    width: 100%;
    min-width: 78px;
    display: flex;
    flex-direction: column;
    align-items: center;

    transition: transform 0.125s ease-in-out;

    ${mediaNotTouch} {
        &:hover {
            transform: scale(1.04);
        }
    }

    &:active {
        transform: scale(0.96);
    }

    ${mediaTouch} {
        &:active {
            transform: scale(0.92);
        }
    }
`;
const ImageStyled$1 = styled(WalletImage)`
    width: 60px;
    height: 60px;
    border-radius: ${(props) => borders$3[props.theme.borderRadius]};
    margin-bottom: 8px;
    position: relative;
`;
const BadgeStyled = styled(Image)`
    position: absolute;
    right: -6px;
    bottom: -6px;
    width: 24px;
    height: 24px;
    border-radius: ${(props) => badgeBorders[props.theme.borderRadius]};
    box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.08);
`;
const StyledText = styled(Text)`
    max-width: 90px;
    font-weight: 510;
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;

    ${media("mobile")} {
        max-width: 80px;
    }
`;
const StyledSecondLine = styled(Text)`
    font-weight: ${(props) => props.colorPrimary ? "510" : "400"};
    max-width: 90px;
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
    color: ${(props) => props.colorPrimary ? props.theme.colors.text.primary : props.theme.colors.text.secondary};

    ${media("mobile")} {
        max-width: 80px;
    }
`;
const _tmpl$$r = /* @__PURE__ */ template$1(`<div></div>`);
const WalletItem = (props) => {
	let ctxRef = null;
	const adjustLetterSpacing = () => {
		const name = ctxRef == null ? void 0 : ctxRef.querySelector("div");
		if (name && name.scrollWidth > name.clientWidth) {
			let spacing = 0;
			const minSpacing = -.4;
			const step = .05;
			while (name.scrollWidth > name.clientWidth && spacing >= minSpacing) {
				spacing -= step;
				name.style.letterSpacing = `${spacing}px`;
			}
			if (spacing !== 0) {
				spacing -= step;
				name.style.letterSpacing = `${spacing}px`;
			}
		}
	};
	onMount(() => adjustLetterSpacing());
	createEffect(() => {
		adjustLetterSpacing();
	});
	return createComponent(WalletItemStyled, {
		get ["class"]() {
			return props.class;
		},
		onClick: () => props.onClick(),
		"data-tc-wallet-item": "true",
		get children() {
			return [
				createMemo(() => createMemo(() => typeof props.icon === "string")() ? createComponent(ImageStyled$1, {
					get src() {
						return props.icon;
					},
					get badge() {
						return createMemo(() => !!props.badgeUrl)() && createComponent(BadgeStyled, { get src() {
							return props.badgeUrl;
						} });
					}
				}) : props.icon),
				(() => {
					const _el$ = _tmpl$$r.cloneNode(true);
					use((el) => ctxRef = el, _el$);
					insert(_el$, createComponent(StyledText, { get children() {
						return props.name;
					} }));
					return _el$;
				})(),
				createMemo(() => createMemo(() => !!props.secondLine)() && createComponent(StyledSecondLine, {
					get colorPrimary() {
						var _a2;
						return (_a2 = props.secondLineColorPrimary) != null ? _a2 : true;
					},
					get children() {
						return props.secondLine;
					}
				}))
			];
		}
	});
};
const H1Styled$9 = styled.h1`
    font-style: normal;
    font-weight: 590;
    font-size: 20px;
    line-height: 28px;

    text-align: center;

    color: ${(props) => props.theme.colors.text.primary};

    margin-top: 0;
    margin-bottom: 0;

    cursor: default;
`;
const H1 = (props) => {
	const [t2] = useI18n();
	return createComponent(H1Styled$9, {
		get ["class"]() {
			return props.class;
		},
		"data-tc-h1": "true",
		get children() {
			var _a2;
			return createMemo(() => !!props.translationKey)() ? t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString()) : props.children;
		}
	});
};
const H2Styled$5 = styled.h2`
    font-style: normal;
    font-weight: 400;
    font-size: 16px;
    line-height: 22px;

    text-align: center;

    color: ${(props) => props.theme.colors.text.secondary};

    margin-top: 0;
    margin-bottom: 32px;

    cursor: default;
`;
const H2 = (props) => {
	const [t2] = useI18n();
	return createComponent(H2Styled$5, {
		get ["class"]() {
			return props.class;
		},
		"data-tc-h2": "true",
		get children() {
			var _a2;
			return createMemo(() => !!props.translationKey)() ? t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString()) : props.children;
		}
	});
};
const H3Styled$1 = styled.h3`
    font-style: normal;
    font-weight: 510;
    font-size: 16px;
    line-height: 20px;

    color: ${(props) => props.theme.colors.text.primary};

    margin-top: 0;
    margin-bottom: 0;

    cursor: default;
`;
const H3 = (props) => {
	const [t2] = useI18n();
	return createComponent(H3Styled$1, {
		"data-tc-h3": "true",
		get ["class"]() {
			return props.class;
		},
		get children() {
			var _a2;
			return createMemo(() => !!props.translationKey)() ? t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString()) : props.children;
		}
	});
};
const _tmpl$$q = /* @__PURE__ */ template$1(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M14.1839 17.7069C13.6405 18.6507 13.3688 19.1226 13.0591 19.348C12.4278 19.8074 11.5723 19.8074 10.941 19.348C10.6312 19.1226 10.3595 18.6507 9.81613 17.7069L5.52066 10.2464C4.76864 8.94024 4.39263 8.28717 4.33762 7.75894C4.2255 6.68236 4.81894 5.65591 5.80788 5.21589C6.29309 5 7.04667 5 8.55383 5H15.4462C16.9534 5 17.7069 5 18.1922 5.21589C19.1811 5.65591 19.7745 6.68236 19.6624 7.75894C19.6074 8.28717 19.2314 8.94024 18.4794 10.2464L14.1839 17.7069ZM11.1 16.3412L6.56139 8.48002C6.31995 8.06185 6.19924 7.85276 6.18146 7.68365C6.14523 7.33896 6.33507 7.01015 6.65169 6.86919C6.80703 6.80002 7.04847 6.80002 7.53133 6.80002H7.53134L11.1 6.80002V16.3412ZM12.9 16.3412L17.4387 8.48002C17.6801 8.06185 17.8008 7.85276 17.8186 7.68365C17.8548 7.33896 17.665 7.01015 17.3484 6.86919C17.193 6.80002 16.9516 6.80002 16.4687 6.80002L12.9 6.80002V16.3412Z"></path></svg>`);
const TonIcon = (props) => {
	const theme = useTheme();
	const fill = () => props.fill || theme.colors.icon.primary;
	return (() => {
		const _el$ = _tmpl$$q.cloneNode(true), _el$2 = _el$.firstChild;
		createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
		return _el$;
	})();
};
const _tmpl$$p = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none"><g clip-path="url(#clip0_3783_2045)"><circle cx="8" cy="8.00098" r="8"></circle><path d="M4.75 8.50098L7 10.751L11.75 6.00098" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path></g><defs><clipPath id="clip0_3783_2045"><rect width="16" height="16" fill="white" transform="translate(0 0.000976562)"></rect></clipPath></defs></svg>`), _tmpl$2$4 = /* @__PURE__ */ template$1(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="12" cy="12" r="11"></circle><path d="M17.1364 9.6364C17.4879 9.28493 17.4879 8.71508 17.1364 8.36361C16.7849 8.01214 16.2151 8.01214 15.8636 8.36361L10 14.2272L8.1364 12.3636C7.78493 12.0121 7.21508 12.0121 6.86361 12.3636C6.51214 12.7151 6.51214 13.2849 6.86361 13.6364L9.36361 16.1364C9.71508 16.4879 10.2849 16.4879 10.6364 16.1364L17.1364 9.6364Z"></path></svg>`), _tmpl$3$2 = /* @__PURE__ */ template$1(`<svg width="72" height="72" viewBox="0 0 72 72" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="36" cy="36" r="33"></circle><path d="M50.9142 28.4142C51.6953 27.6332 51.6953 26.3668 50.9142 25.5858C50.1332 24.8047 48.8668 24.8047 48.0858 25.5858L30 43.6716L23.9142 37.5858C23.1332 36.8047 21.8668 36.8047 21.0858 37.5858C20.3047 38.3668 20.3047 39.6332 21.0858 40.4142L28.5858 47.9142C29.3668 48.6953 30.6332 48.6953 31.4142 47.9142L50.9142 28.4142Z"></path></svg>`);
const SuccessIcon = (props) => {
	const theme = useTheme();
	const size = () => props.size || "s";
	const fill = () => props.fill || theme.colors.icon.success;
	return createMemo((() => {
		const _c$ = createMemo(() => size() === "xs");
		return () => _c$() ? (() => {
			const _el$ = _tmpl$$p.cloneNode(true), _el$2 = _el$.firstChild, _el$3 = _el$2.firstChild, _el$4 = _el$3.nextSibling;
			createRenderEffect((_p$) => {
				const _v$ = props.class, _v$2 = fill(), _v$3 = theme.colors.constant.white;
				_v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
				_v$2 !== _p$._v$2 && setAttribute(_el$3, "fill", _p$._v$2 = _v$2);
				_v$3 !== _p$._v$3 && setAttribute(_el$4, "stroke", _p$._v$3 = _v$3);
				return _p$;
			}, {
				_v$: void 0,
				_v$2: void 0,
				_v$3: void 0
			});
			return _el$;
		})() : (() => {
			const _c$2 = createMemo(() => size() === "s");
			return () => _c$2() ? (() => {
				const _el$5 = _tmpl$2$4.cloneNode(true), _el$6 = _el$5.firstChild, _el$7 = _el$6.nextSibling;
				createRenderEffect((_p$) => {
					const _v$4 = props.class, _v$5 = fill(), _v$6 = theme.colors.constant.white;
					_v$4 !== _p$._v$4 && setAttribute(_el$5, "class", _p$._v$4 = _v$4);
					_v$5 !== _p$._v$5 && setAttribute(_el$6, "fill", _p$._v$5 = _v$5);
					_v$6 !== _p$._v$6 && setAttribute(_el$7, "fill", _p$._v$6 = _v$6);
					return _p$;
				}, {
					_v$4: void 0,
					_v$5: void 0,
					_v$6: void 0
				});
				return _el$5;
			})() : (() => {
				const _el$8 = _tmpl$3$2.cloneNode(true), _el$9 = _el$8.firstChild, _el$10 = _el$9.nextSibling;
				createRenderEffect((_p$) => {
					const _v$7 = props.class, _v$8 = fill(), _v$9 = theme.colors.constant.white;
					_v$7 !== _p$._v$7 && setAttribute(_el$8, "class", _p$._v$7 = _v$7);
					_v$8 !== _p$._v$8 && setAttribute(_el$9, "fill", _p$._v$8 = _v$8);
					_v$9 !== _p$._v$9 && setAttribute(_el$10, "fill", _p$._v$9 = _v$9);
					return _p$;
				}, {
					_v$7: void 0,
					_v$8: void 0,
					_v$9: void 0
				});
				return _el$8;
			})();
		})();
	})());
};
const _tmpl$$o = /* @__PURE__ */ template$1(`<svg width="72" height="72" viewBox="0 0 72 72" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="36" cy="36" r="33"></circle><path d="M24.0858 26.9142C23.3047 26.1332 23.3047 24.8668 24.0858 24.0858C24.8668 23.3047 26.1332 23.3047 26.9142 24.0858L36 33.1716L45.0858 24.0858C45.8668 23.3047 47.1332 23.3047 47.9142 24.0858C48.6953 24.8668 48.6953 26.1332 47.9142 26.9142L38.8284 36L47.9142 45.0858C48.6953 45.8668 48.6953 47.1332 47.9142 47.9142C47.1332 48.6953 45.8668 48.6953 45.0858 47.9142L36 38.8284L26.9142 47.9142C26.1332 48.6953 24.8668 48.6953 24.0858 47.9142C23.3047 47.1332 23.3047 45.8668 24.0858 45.0858L33.1716 36L24.0858 26.9142Z"></path></svg>`), _tmpl$2$3 = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48" fill="none"><circle cx="24" cy="24.001" r="22"></circle><path d="M24 24.001L31.5 16.501M24 24.001L16.5 16.501M24 24.001L16.5 31.501M24 24.001L31.5 31.501" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"></path></svg>`), _tmpl$3$1 = /* @__PURE__ */ template$1(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="12" cy="12" r="11"></circle><path d="M7.86361 9.1364C7.51214 8.78493 7.51214 8.21508 7.86361 7.86361C8.21508 7.51214 8.78493 7.51214 9.1364 7.86361L12 10.7272L14.8636 7.86361C15.2151 7.51214 15.7849 7.51214 16.1364 7.86361C16.4879 8.21508 16.4879 8.78493 16.1364 9.1364L13.2728 12L16.1364 14.8636C16.4879 15.2151 16.4879 15.7849 16.1364 16.1364C15.7849 16.4879 15.2151 16.4879 14.8636 16.1364L12 13.2728L9.1364 16.1364C8.78493 16.4879 8.21508 16.4879 7.86361 16.1364C7.51214 15.7849 7.51214 15.2151 7.86361 14.8636L10.7272 12L7.86361 9.1364Z"></path></svg>`);
const ErrorIcon = (props) => {
	const theme = useTheme();
	const size = () => props.size || "m";
	const fill = () => props.fill || theme.colors.icon.error;
	return createMemo((() => {
		const _c$ = createMemo(() => size() === "m");
		return () => _c$() ? (() => {
			const _el$ = _tmpl$$o.cloneNode(true), _el$2 = _el$.firstChild, _el$3 = _el$2.nextSibling;
			createRenderEffect((_p$) => {
				const _v$ = props.class, _v$2 = fill(), _v$3 = theme.colors.constant.white;
				_v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
				_v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
				_v$3 !== _p$._v$3 && setAttribute(_el$3, "fill", _p$._v$3 = _v$3);
				return _p$;
			}, {
				_v$: void 0,
				_v$2: void 0,
				_v$3: void 0
			});
			return _el$;
		})() : (() => {
			const _c$2 = createMemo(() => size() === "s");
			return () => _c$2() ? (() => {
				const _el$4 = _tmpl$2$3.cloneNode(true), _el$5 = _el$4.firstChild, _el$6 = _el$5.nextSibling;
				createRenderEffect((_p$) => {
					const _v$4 = props.class, _v$5 = fill(), _v$6 = theme.colors.constant.white;
					_v$4 !== _p$._v$4 && setAttribute(_el$4, "class", _p$._v$4 = _v$4);
					_v$5 !== _p$._v$5 && setAttribute(_el$5, "fill", _p$._v$5 = _v$5);
					_v$6 !== _p$._v$6 && setAttribute(_el$6, "stroke", _p$._v$6 = _v$6);
					return _p$;
				}, {
					_v$4: void 0,
					_v$5: void 0,
					_v$6: void 0
				});
				return _el$4;
			})() : (() => {
				const _el$7 = _tmpl$3$1.cloneNode(true), _el$8 = _el$7.firstChild, _el$9 = _el$8.nextSibling;
				createRenderEffect((_p$) => {
					const _v$7 = props.class, _v$8 = fill(), _v$9 = theme.colors.constant.white;
					_v$7 !== _p$._v$7 && setAttribute(_el$7, "class", _p$._v$7 = _v$7);
					_v$8 !== _p$._v$8 && setAttribute(_el$8, "fill", _p$._v$8 = _v$8);
					_v$9 !== _p$._v$9 && setAttribute(_el$9, "fill", _p$._v$9 = _v$9);
					return _p$;
				}, {
					_v$7: void 0,
					_v$8: void 0,
					_v$9: void 0
				});
				return _el$7;
			})();
		})();
	})());
};
const _tmpl$$n = /* @__PURE__ */ template$1(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M15.55 5.85123C18.9459 7.81184 20.1094 12.1541 18.1488 15.55C16.1882 18.9459 11.8459 20.1094 8.44998 18.1488C8.01952 17.9003 7.46909 18.0478 7.22056 18.4782C6.97203 18.9087 7.11952 19.4591 7.54998 19.7076C11.8068 22.1653 17.2499 20.7068 19.7076 16.45C22.1653 12.1932 20.7068 6.75005 16.45 4.29239C12.1932 1.83472 6.75003 3.29321 4.29236 7.55001C4.04383 7.98047 4.19132 8.53091 4.62178 8.77943C5.05224 9.02796 5.60268 8.88048 5.8512 8.45001C7.81181 5.05413 12.1541 3.89062 15.55 5.85123Z"></path></svg>`), _tmpl$2$2 = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewBox="0 0 44 44" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M22 2.99951C11.5066 2.99951 3 11.5061 3 21.9995C3 32.4929 11.5066 40.9995 22 40.9995C22.8284 40.9995 23.5 41.6711 23.5 42.4995C23.5 43.3279 22.8284 43.9995 22 43.9995C9.84974 43.9995 0 34.1498 0 21.9995C0 9.84925 9.84974 -0.000488281 22 -0.000488281C34.1503 -0.000488281 44 9.84925 44 21.9995C44 22.8279 43.3284 23.4995 42.5 23.4995C41.6716 23.4995 41 22.8279 41 21.9995C41 11.5061 32.4934 2.99951 22 2.99951Z"></path></svg>`), _tmpl$3 = /* @__PURE__ */ template$1(`<svg width="72" height="72" viewBox="0 0 72 72" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M24 56.7846C35.479 63.412 50.1572 59.479 56.7846 47.9999C63.412 36.5209 59.479 21.8427 48 15.2153C36.521 8.58791 21.8428 12.5209 15.2154 23.9999" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"></path></svg>`);
const LoaderIcon = (props) => {
	const theme = useTheme();
	const size = () => props.size || "xs";
	const fill = () => props.fill || theme.colors.icon.tertiary;
	const rotateAnimation = h`
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
    `;
	const svgClass = u`
        animation: ${rotateAnimation} 1s linear infinite;
    `;
	return createMemo((() => {
		const _c$ = createMemo(() => size() === "xs");
		return () => _c$() ? (() => {
			const _el$ = _tmpl$$n.cloneNode(true), _el$2 = _el$.firstChild;
			createRenderEffect((_p$) => {
				const _v$ = (0, import_classnames.default)(svgClass, props.class), _v$2 = fill();
				_v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
				_v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
				return _p$;
			}, {
				_v$: void 0,
				_v$2: void 0
			});
			return _el$;
		})() : (() => {
			const _c$2 = createMemo(() => size() === "s");
			return () => _c$2() ? (() => {
				const _el$3 = _tmpl$2$2.cloneNode(true), _el$4 = _el$3.firstChild;
				createRenderEffect((_p$) => {
					const _v$3 = (0, import_classnames.default)(svgClass, props.class), _v$4 = fill();
					_v$3 !== _p$._v$3 && setAttribute(_el$3, "class", _p$._v$3 = _v$3);
					_v$4 !== _p$._v$4 && setAttribute(_el$4, "fill", _p$._v$4 = _v$4);
					return _p$;
				}, {
					_v$3: void 0,
					_v$4: void 0
				});
				return _el$3;
			})() : (() => {
				const _el$5 = _tmpl$3.cloneNode(true), _el$6 = _el$5.firstChild;
				createRenderEffect((_p$) => {
					const _v$5 = (0, import_classnames.default)(svgClass, props.class), _v$6 = fill();
					_v$5 !== _p$._v$5 && setAttribute(_el$5, "class", _p$._v$5 = _v$5);
					_v$6 !== _p$._v$6 && setAttribute(_el$6, "stroke", _p$._v$6 = _v$6);
					return _p$;
				}, {
					_v$5: void 0,
					_v$6: void 0
				});
				return _el$5;
			})();
		})();
	})());
};
const _tmpl$$m = /* @__PURE__ */ template$1(`<svg width="158" height="28" viewBox="0 0 158 28" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M28 14.001C28 21.733 21.732 28.001 14 28.001C6.26801 28.001 0 21.733 0 14.001C0 6.26899 6.26801 0.000976562 14 0.000976562C21.732 0.000976562 28 6.26899 28 14.001ZM9.21931 8.00098H18.7801H18.7813C20.538 8.00098 21.6522 9.89966 20.7691 11.4302L14.8672 21.6576C14.4822 22.3254 13.5172 22.3254 13.1322 21.6576L7.23158 11.4302C6.34721 9.89726 7.4614 8.00098 9.21931 8.00098ZM13.1262 18.5882V9.74806H9.21811C8.78976 9.74806 8.53708 10.2029 8.74163 10.5578L11.8423 16.1035L13.1262 18.5882ZM16.1559 16.1047L19.2554 10.5566C19.4599 10.2017 19.2073 9.74685 18.7789 9.74685H14.8709V18.5906L16.1559 16.1047Z" fill="#0098EA"></path><path d="M18.7802 8.00098H9.21936C7.46145 8.00098 6.34727 9.89726 7.23164 11.4302L13.1322 21.6576C13.5173 22.3254 14.4823 22.3254 14.8673 21.6576L20.7691 11.4302C21.6523 9.89966 20.5381 8.00098 18.7814 8.00098H18.7802ZM13.1274 18.5906L11.8424 16.1035L8.74168 10.5578C8.53714 10.2029 8.78981 9.74806 9.21816 9.74806H13.1262V18.5918L13.1274 18.5906ZM19.2555 10.5566L16.156 16.1047L14.8709 18.5906V9.74685H18.779C19.2073 9.74685 19.46 10.2017 19.2555 10.5566Z" fill="white"></path><path fill-rule="evenodd" clip-rule="evenodd" d="M51.7483 22.1967C55.7182 22.1967 58.9609 18.954 58.9609 14.9841C58.9609 11.0142 55.7182 7.77148 51.7483 7.77148C47.7588 7.77148 44.5357 11.0142 44.5357 14.9841C44.5357 18.954 47.7588 22.1967 51.7483 22.1967ZM51.7483 19.1702C49.4686 19.1702 47.6802 17.2442 47.6802 14.9841C47.6802 12.724 49.4686 10.798 51.7483 10.798C54.0084 10.798 55.7968 12.724 55.7968 14.9841C55.7968 17.2442 54.0084 19.1702 51.7483 19.1702ZM37.0698 21.9609H40.2142V10.9946H44.2843V8.00732H33V10.9946H37.0698V21.9609ZM69.9379 8.00732H73.0823V21.9609H70.3899L63.59 13.3333V21.9609H60.4652V8.00732H63.1576L69.9379 16.6153V8.00732ZM79.2259 14.9887C79.2259 10.9202 82.351 7.77539 86.4982 7.77539C89.8592 7.77539 92.5519 9.95709 93.2202 12.6891H90.7437C90.154 11.0971 88.4637 9.9964 86.4982 9.9964C83.5893 9.9964 81.5452 12.1781 81.5452 14.9887C81.5452 17.7994 83.5893 19.9811 86.4982 19.9811C88.4637 19.9811 90.154 18.8804 90.7437 17.2884H93.2202C92.5519 20.0204 89.8592 22.2021 86.4982 22.2021C82.351 22.2021 79.2259 19.0573 79.2259 14.9887ZM104.584 17.0525C104.584 19.9025 102.343 22.1628 99.4342 22.1628C96.5253 22.1628 94.2846 19.9025 94.2846 17.0525C94.2846 14.2025 96.5253 11.9422 99.4342 11.9422C102.343 11.9422 104.584 14.2025 104.584 17.0525ZM96.4663 17.0525C96.4663 18.8018 97.6849 20.158 99.4342 20.158C101.164 20.158 102.382 18.8018 102.382 17.0525C102.382 15.3032 101.164 13.947 99.4342 13.947C97.6849 13.947 96.4663 15.3032 96.4663 17.0525ZM108.626 12.1388H106.463V21.9662H108.626V17.1311C108.626 15.0281 109.726 13.9077 111.161 13.9077C112.419 13.9077 113.205 14.8512 113.205 16.4039V21.9662H115.367V16.0501C115.367 13.5539 113.893 11.9422 111.613 11.9422C110.335 11.9422 109.215 12.4926 108.626 13.4753V12.1388ZM117.839 12.1388H120.001V13.4753C120.59 12.4926 121.711 11.9422 122.988 11.9422C125.268 11.9422 126.742 13.5539 126.742 16.0501V21.9662H124.58V16.4039C124.58 14.8512 123.794 13.9077 122.536 13.9077C121.101 13.9077 120.001 15.0281 120.001 17.1311V21.9662H117.839V12.1388ZM133.558 22.1628C136.054 22.1628 137.823 20.728 138.373 18.8804H136.113C135.661 19.8238 134.717 20.2563 133.636 20.2563C131.887 20.2563 130.747 19.077 130.668 17.5832H138.491C138.688 14.2419 136.585 11.9422 133.577 11.9422C130.551 11.9422 128.526 14.1436 128.526 17.0525C128.526 20.0007 130.629 22.1628 133.558 22.1628ZM130.747 16.0501C131.042 14.5367 132.162 13.7505 133.518 13.7505C134.717 13.7505 135.838 14.4581 136.172 16.0501H130.747ZM149.851 18.3694C149.32 20.5511 147.453 22.1628 144.859 22.1628C141.871 22.1628 139.709 19.8828 139.709 17.0525C139.709 14.2222 141.871 11.9422 144.859 11.9422C147.453 11.9422 149.32 13.5539 149.851 15.7356H147.571C147.178 14.6743 146.215 13.9077 144.859 13.9077C143.109 13.9077 141.91 15.2246 141.91 17.0525C141.91 18.8804 143.109 20.1973 144.859 20.1973C146.215 20.1973 147.178 19.4307 147.571 18.3694H149.851ZM155.75 22.0645C156.418 22.0645 156.929 21.9859 157.362 21.8483V19.9221C157.047 20.0401 156.615 20.1187 156.202 20.1187C155.082 20.1187 154.551 19.6666 154.551 18.448V14.065H157.362V12.1388H154.551V9.40675H152.389V12.1388H150.345V14.065H152.389V18.8018C152.389 21.0228 153.863 22.0645 155.75 22.0645Z"></path></svg>`);
const TonConnectBrand = () => {
	const theme = useTheme();
	const fill = () => theme.theme === THEME.DARK ? theme.colors.constant.white : theme.colors.constant.black;
	return (() => {
		const _el$ = _tmpl$$m.cloneNode(true), _el$2 = _el$.firstChild, _el$3 = _el$2.nextSibling, _el$4 = _el$3.nextSibling;
		createRenderEffect(() => setAttribute(_el$4, "fill", fill()));
		return _el$;
	})();
};
const _tmpl$$l = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M5.56608 4.42584C5.82527 3.32158 6.8176 2.5 8.00001 2.5C9.38072 2.5 10.5 3.61929 10.5 5C10.5 5.63026 10.3391 6.0386 10.1264 6.34455C9.90018 6.66993 9.58561 6.92478 9.18864 7.20877C9.12579 7.25372 9.05873 7.30025 8.9887 7.34883C8.27392 7.84472 7.25001 8.55507 7.25001 10V10.25C7.25001 10.6642 7.5858 11 8.00001 11C8.41422 11 8.75001 10.6642 8.75001 10.25V10C8.75001 9.36502 9.10777 9.1096 9.94554 8.51149L10.0614 8.42873C10.4769 8.13147 10.9748 7.75194 11.358 7.20076C11.7547 6.63015 12 5.91973 12 5C12 2.79086 10.2091 1 8.00001 1C6.10564 1 4.5205 2.31615 4.10577 4.08308C4.01112 4.48634 4.26129 4.88997 4.66454 4.98462C5.0678 5.07927 5.47143 4.8291 5.56608 4.42584ZM8.00001 15C8.60752 15 9.10001 14.5075 9.10001 13.9C9.10001 13.2925 8.60752 12.8 8.00001 12.8C7.39249 12.8 6.90001 13.2925 6.90001 13.9C6.90001 14.5075 7.39249 15 8.00001 15Z"></path></svg>`);
const QuestionIcon = (props) => {
	const theme = useTheme();
	const fill = () => props.fill || theme.colors.icon.secondary;
	return (() => {
		const _el$ = _tmpl$$l.cloneNode(true), _el$2 = _el$.firstChild;
		createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
		return _el$;
	})();
};
const _tmpl$$k = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M9.98156 8.75C9.84854 11.4328 9.01206 13.5 8 13.5C6.98794 13.5 6.15146 11.4328 6.01844 8.75H9.98156ZM11.4832 8.75C11.4217 10.1155 11.1929 11.3869 10.8239 12.4017C10.7734 12.5405 10.7188 12.6789 10.6595 12.8154C12.1454 11.993 13.2103 10.5029 13.4493 8.75H11.4832ZM13.4493 7.25H11.4832C11.4217 5.88453 11.1929 4.61314 10.8239 3.5983C10.7734 3.4595 10.7188 3.32111 10.6595 3.18459C12.1454 4.00697 13.2103 5.49709 13.4493 7.25ZM9.98156 7.25H6.01844C6.15144 4.56764 6.98769 2.50062 7.99955 2.5H8C9.01206 2.5 9.84854 4.56724 9.98156 7.25ZM4.51678 7.25C4.57826 5.88453 4.80706 4.61314 5.1761 3.5983C5.22657 3.4595 5.28124 3.32111 5.3405 3.18459C3.85463 4.00697 2.78972 5.49709 2.55071 7.25H4.51678ZM2.55071 8.75C2.78972 10.5029 3.85463 11.993 5.3405 12.8154C5.28124 12.6789 5.22657 12.5405 5.1761 12.4017C4.80706 11.3869 4.57826 10.1155 4.51678 8.75H2.55071ZM15 8C15 11.866 11.866 15 8 15C4.13401 15 1 11.866 1 8C1 4.13401 4.13401 1 8 1C11.866 1 15 4.13401 15 8Z"></path></svg>`);
const BrowserIcon = (props) => {
	const theme = useTheme();
	const fill = () => props.fill || theme.colors.icon.primary;
	return (() => {
		const _el$ = _tmpl$$k.cloneNode(true), _el$2 = _el$.firstChild;
		createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
		return _el$;
	})();
};
const _tmpl$$j = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M2.5 4.8C2.5 3.11984 2.5 2.27976 2.82698 1.63803C3.1146 1.07354 3.57354 0.614601 4.13803 0.32698C4.77976 0 5.61984 0 7.3 0H8.7C10.3802 0 11.2202 0 11.862 0.32698C12.4265 0.614601 12.8854 1.07354 13.173 1.63803C13.5 2.27976 13.5 3.11984 13.5 4.8V11.2C13.5 12.8802 13.5 13.7202 13.173 14.362C12.8854 14.9265 12.4265 15.3854 11.862 15.673C11.2202 16 10.3802 16 8.7 16H7.3C5.61984 16 4.77976 16 4.13803 15.673C3.57354 15.3854 3.1146 14.9265 2.82698 14.362C2.5 13.7202 2.5 12.8802 2.5 11.2V4.8ZM4 3.9C4 3.05992 4 2.63988 4.16349 2.31901C4.3073 2.03677 4.53677 1.8073 4.81901 1.66349C5.13988 1.5 5.55992 1.5 6.4 1.5H9.6C10.4401 1.5 10.8601 1.5 11.181 1.66349C11.4632 1.8073 11.6927 2.03677 11.8365 2.31901C12 2.63988 12 3.05992 12 3.9V12.1C12 12.9401 12 13.3601 11.8365 13.681C11.6927 13.9632 11.4632 14.1927 11.181 14.3365C10.8601 14.5 10.4401 14.5 9.6 14.5H6.4C5.55992 14.5 5.13988 14.5 4.81901 14.3365C4.53677 14.1927 4.3073 13.9632 4.16349 13.681C4 13.3601 4 12.9401 4 12.1V3.9ZM7 2.5C6.58579 2.5 6.25 2.83579 6.25 3.25C6.25 3.66421 6.58579 4 7 4H9C9.41421 4 9.75 3.66421 9.75 3.25C9.75 2.83579 9.41421 2.5 9 2.5H7Z"></path></svg>`);
const MobileIcon = (props) => {
	const theme = useTheme();
	const fill = () => props.fill || theme.colors.icon.primary;
	return (() => {
		const _el$ = _tmpl$$j.cloneNode(true), _el$2 = _el$.firstChild;
		createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
		return _el$;
	})();
};
const _tmpl$$i = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 6.8C1.5 5.11984 1.5 4.27976 1.82698 3.63803C2.1146 3.07354 2.57354 2.6146 3.13803 2.32698C3.77976 2 4.61984 2 6.3 2H9.7C11.3802 2 12.2202 2 12.862 2.32698C13.4265 2.6146 13.8854 3.07354 14.173 3.63803C14.5 4.27976 14.5 5.11984 14.5 6.8V11.5H15.25C15.6642 11.5 16 11.8358 16 12.25C16 12.6642 15.6642 13 15.25 13H0.75C0.335786 13 0 12.6642 0 12.25C0 11.8358 0.335786 11.5 0.75 11.5H1.5V6.8ZM3 11.5H13V5.9C13 5.05992 13 4.63988 12.8365 4.31901C12.6927 4.03677 12.4632 3.8073 12.181 3.66349C11.8601 3.5 11.4401 3.5 10.6 3.5H5.4C4.55992 3.5 4.13988 3.5 3.81901 3.66349C3.53677 3.8073 3.3073 4.03677 3.16349 4.31901C3 4.63988 3 5.05992 3 5.9V11.5Z"></path></svg>`);
const DesktopIcon = (props) => {
	const theme = useTheme();
	const fill = () => props.fill || theme.colors.icon.primary;
	return (() => {
		const _el$ = _tmpl$$i.cloneNode(true), _el$2 = _el$.firstChild;
		createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
		return _el$;
	})();
};
const _tmpl$$h = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="17" height="16" viewBox="0 0 17 16" fill="none"><g clip-path="url(#clip0_3676_1603)"><path fill-rule="evenodd" clip-rule="evenodd" d="M15.5 1.25049C15.5 0.836275 15.1642 0.500488 14.75 0.500488C14.3358 0.500488 14 0.836275 14 1.25049V3.67012C12.7187 2.04487 10.7318 1.00049 8.5 1.00049C4.63401 1.00049 1.5 4.1345 1.5 8.00049C1.5 11.8665 4.63401 15.0005 8.5 15.0005C11.6844 15.0005 14.3703 12.8748 15.2199 9.96661C15.3361 9.56902 15.1079 9.15254 14.7103 9.03638C14.3127 8.92023 13.8962 9.14838 13.7801 9.54597C13.1123 11.8319 11 13.5005 8.5 13.5005C5.46243 13.5005 3 11.0381 3 8.00049C3 4.96292 5.46243 2.50049 8.5 2.50049C10.321 2.50049 11.9363 3.3855 12.9377 4.75049H10.5C10.0858 4.75049 9.75 5.08627 9.75 5.50049C9.75 5.9147 10.0858 6.25049 10.5 6.25049H14.75C15.1642 6.25049 15.5 5.9147 15.5 5.50049V1.25049Z"></path></g><defs><clipPath id="clip0_3676_1603"><rect width="16" height="16" fill="white" transform="translate(0.5 0.000488281)"></rect></clipPath></defs></svg>`);
const RetryIcon = (props) => {
	const theme = useTheme();
	const fill = () => props.fill || theme.colors.accent;
	return (() => {
		const _el$ = _tmpl$$h.cloneNode(true), _el$2 = _el$.firstChild, _el$3 = _el$2.firstChild;
		createRenderEffect(() => setAttribute(_el$3, "fill", fill()));
		return _el$;
	})();
};
const _tmpl$$g = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M13 4.06119V6.75053C13 7.16474 13.3358 7.50053 13.75 7.50053C14.1642 7.50053 14.5 7.16474 14.5 6.75053V2.75053L14.5 2.72807C14.5001 2.63191 14.5003 2.49627 14.4842 2.37627C14.4638 2.22503 14.4063 1.99261 14.2071 1.79342C14.0079 1.59423 13.7755 1.5367 13.6243 1.51637C13.5043 1.50023 13.3686 1.50039 13.2725 1.50051L13.25 1.50053H9.25C8.83579 1.50053 8.5 1.83631 8.5 2.25053C8.5 2.66474 8.83579 3.00053 9.25 3.00053H11.9393L7.21967 7.7202C6.92678 8.01309 6.92678 8.48796 7.21967 8.78086C7.51256 9.07375 7.98744 9.07375 8.28033 8.78086L13 4.06119ZM5.85 1.50053H5.81903H5.81899C5.21528 1.50052 4.71702 1.50051 4.31113 1.53367C3.88956 1.56812 3.50203 1.64204 3.13803 1.82751C2.57354 2.11513 2.1146 2.57407 1.82698 3.13856C1.64151 3.50256 1.56759 3.89009 1.53315 4.31166C1.49998 4.71755 1.49999 5.21581 1.5 5.81953V5.81955V5.85053V10.1505V10.1815V10.1815C1.49999 10.7852 1.49998 11.2835 1.53315 11.6894C1.56759 12.111 1.64151 12.4985 1.82698 12.8625C2.1146 13.427 2.57354 13.8859 3.13803 14.1735C3.50203 14.359 3.88956 14.4329 4.31113 14.4674C4.71702 14.5005 5.21527 14.5005 5.81897 14.5005H5.81901H5.85H10.15H10.181H10.181C10.7847 14.5005 11.283 14.5005 11.6889 14.4674C12.1104 14.4329 12.498 14.359 12.862 14.1735C13.4265 13.8859 13.8854 13.427 14.173 12.8625C14.3585 12.4985 14.4324 12.111 14.4669 11.6894C14.5 11.2835 14.5 10.7853 14.5 10.1816V10.1815V10.1505V9.75053C14.5 9.33631 14.1642 9.00053 13.75 9.00053C13.3358 9.00053 13 9.33631 13 9.75053V10.1505C13 10.793 12.9994 11.2297 12.9718 11.5672C12.945 11.8961 12.8963 12.0642 12.8365 12.1815C12.6927 12.4638 12.4632 12.6932 12.181 12.837C12.0637 12.8968 11.8955 12.9455 11.5667 12.9724C11.2292 12.9999 10.7924 13.0005 10.15 13.0005H5.85C5.20757 13.0005 4.77085 12.9999 4.43328 12.9724C4.10447 12.9455 3.93632 12.8968 3.81902 12.837C3.53677 12.6932 3.3073 12.4638 3.16349 12.1815C3.10372 12.0642 3.05503 11.8961 3.02816 11.5672C3.00058 11.2297 3 10.793 3 10.1505V5.85053C3 5.20809 3.00058 4.77137 3.02816 4.43381C3.05503 4.10499 3.10372 3.93684 3.16349 3.81954C3.3073 3.5373 3.53677 3.30783 3.81902 3.16402C3.93632 3.10425 4.10447 3.05556 4.43328 3.02869C4.77085 3.00111 5.20757 3.00053 5.85 3.00053H6.25C6.66422 3.00053 7 2.66474 7 2.25053C7 1.83631 6.66422 1.50053 6.25 1.50053H5.85Z"></path></svg>`);
const LinkIcon = (props) => {
	const theme = useTheme();
	const fill = () => props.fill || theme.colors.accent;
	return (() => {
		const _el$ = _tmpl$$g.cloneNode(true), _el$2 = _el$.firstChild;
		createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
		return _el$;
	})();
};
const _tmpl$$f = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="17" height="16" viewBox="0 0 17 16" fill="none"><g clip-path="url(#clip0_3676_1274)"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.82698 2.63901C1.5 3.28074 1.5 4.12082 1.5 5.80098V8.80098V9.00098V10.201C1.5 11.8811 1.5 12.7212 1.82698 13.3629C2.1146 13.9274 2.57354 14.3864 3.13803 14.674C3.77976 15.001 4.61984 15.001 6.3 15.001H11.7C13.3802 15.001 14.2202 15.001 14.862 14.674C15.4265 14.3864 15.8854 13.9274 16.173 13.3629C16.5 12.7212 16.5 11.8811 16.5 10.201V8.80098C16.5 7.12082 16.5 6.28074 16.173 5.63901C15.8854 5.07452 15.4265 4.61558 14.862 4.32796C14.743 4.26733 14.6172 4.21795 14.4805 4.17772C14.4501 3.49449 14.3722 3.02994 14.173 2.63901C13.8854 2.07452 13.4265 1.61558 12.862 1.32796C12.2202 1.00098 11.3802 1.00098 9.7 1.00098H6.3C4.61984 1.00098 3.77976 1.00098 3.13803 1.32796C2.57354 1.61558 2.1146 2.07452 1.82698 2.63901ZM12.9861 4.00942C12.9684 3.7108 12.9281 3.49982 12.8365 3.31999C12.6927 3.03775 12.4632 2.80828 12.181 2.66447C11.8601 2.50098 11.4401 2.50098 10.6 2.50098H5.4C4.55992 2.50098 4.13988 2.50098 3.81901 2.66447C3.53677 2.80828 3.3073 3.03775 3.16349 3.31999C3.03615 3.56991 3.00799 3.88 3.00177 4.40188C3.04646 4.37612 3.09189 4.35146 3.13803 4.32796C3.77976 4.00098 4.61984 4.00098 6.3 4.00098H11.7C12.1966 4.00098 12.6197 4.00098 12.9861 4.00942ZM3 7.90098V8.10098C3 8.47468 3 8.76527 3.01439 9.00098H3V11.101C3 11.9411 3 12.3611 3.16349 12.682C3.3073 12.9642 3.53677 13.1937 3.81901 13.3375C4.13988 13.501 4.55992 13.501 5.4 13.501H12.6C13.4401 13.501 13.8601 13.501 14.181 13.3375C14.4632 13.1937 14.6927 12.9642 14.8365 12.682C15 12.3611 15 11.9411 15 11.101V7.90098C15 7.0609 15 6.64086 14.8365 6.31999C14.6927 6.03775 14.4632 5.80828 14.181 5.66447C13.8601 5.50098 13.4401 5.50098 12.6 5.50098H5.4C4.55992 5.50098 4.13988 5.50098 3.81901 5.66447C3.53677 5.80828 3.3073 6.03775 3.16349 6.31999C3 6.64086 3 7.0609 3 7.90098ZM10.5 9.75098C10.5 9.33676 10.8358 9.00098 11.25 9.00098H12.75C13.1642 9.00098 13.5 9.33676 13.5 9.75098C13.5 10.1652 13.1642 10.501 12.75 10.501H11.25C10.8358 10.501 10.5 10.1652 10.5 9.75098Z"></path></g><defs><clipPath id="clip0_3676_1274"><rect width="16" height="16" fill="white" transform="translate(0.5 0.000976562)"></rect></clipPath></defs></svg>`);
const WalletIcon = (props) => {
	const theme = useTheme();
	const fill = () => props.fill || theme.colors.accent;
	return (() => {
		const _el$ = _tmpl$$f.cloneNode(true), _el$2 = _el$.firstChild, _el$3 = _el$2.firstChild;
		createRenderEffect(() => setAttribute(_el$3, "fill", fill()));
		return _el$;
	})();
};
const _tmpl$$e = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M39.6319 16.8719C38.3212 16.2041 36.7002 16.0478 34 16.0112V11C34 5.47715 29.5228 1 24 1C18.4772 1 14 5.47715 14 11V16.0112C11.2998 16.0478 9.6788 16.2041 8.36808 16.8719C6.86278 17.6389 5.63893 18.8628 4.87195 20.3681C4 22.0794 4 24.3196 4 28.8V32.2C4 36.6804 4 38.9206 4.87195 40.6319C5.63893 42.1372 6.86278 43.3611 8.36808 44.1281C10.0794 45 12.3196 45 16.8 45H31.2C35.6804 45 37.9206 45 39.6319 44.1281C41.1372 43.3611 42.3611 42.1372 43.1281 40.6319C44 38.9206 44 36.6804 44 32.2V28.8C44 24.3196 44 22.0794 43.1281 20.3681C42.3611 18.8628 41.1372 17.6389 39.6319 16.8719ZM31 11V16H17V11C17 7.13401 20.134 4 24 4C27.866 4 31 7.13401 31 11ZM7.54497 21.73C7 22.7996 7 24.1997 7 27V34C7 36.8003 7 38.2004 7.54497 39.27C8.02433 40.2108 8.78924 40.9757 9.73005 41.455C10.7996 42 12.1997 42 15 42H33C35.8003 42 37.2004 42 38.27 41.455C39.2108 40.9757 39.9757 40.2108 40.455 39.27C41 38.2004 41 36.8003 41 34V27C41 24.1997 41 22.7996 40.455 21.73C39.9757 20.7892 39.2108 20.0243 38.27 19.545C37.2004 19 35.8003 19 33 19H15C12.1997 19 10.7996 19 9.73005 19.545C8.78924 20.0243 8.02433 20.7892 7.54497 21.73ZM24 24C23.1716 24 22.5 24.6716 22.5 25.5V29.5C22.5 30.3284 23.1716 31 24 31C24.8284 31 25.5 30.3284 25.5 29.5V25.5C25.5 24.6716 24.8284 24 24 24Z"></path></svg>`);
const SecurityIcon = (props) => {
	const theme = useTheme();
	const fill = () => props.fill || theme.colors.icon.secondary;
	return (() => {
		const _el$ = _tmpl$$e.cloneNode(true), _el$2 = _el$.firstChild;
		createRenderEffect((_p$) => {
			const _v$ = props.class, _v$2 = fill();
			_v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
			_v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
			return _p$;
		}, {
			_v$: void 0,
			_v$2: void 0
		});
		return _el$;
	})();
};
const _tmpl$$d = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M37.485 37.3849C40.894 33.9506 43 29.2212 43 24C43 13.5066 34.4934 5 24 5C13.5066 5 5 13.5066 5 24C5 29.2213 7.1061 33.9507 10.5151 37.385C13.3583 32.9438 18.3354 30 24.0001 30C29.6647 30 34.6418 32.9437 37.485 37.3849ZM35.1809 39.3635C32.9143 35.5532 28.7554 33 24.0001 33C19.2448 33 15.0858 35.5533 12.8193 39.3636C15.9564 41.6506 19.8206 43 24 43C28.1795 43 32.0437 41.6505 35.1809 39.3635ZM24 46C36.1503 46 46 36.1503 46 24C46 11.8497 36.1503 2 24 2C11.8497 2 2 11.8497 2 24C2 36.1503 11.8497 46 24 46ZM24 24C26.7614 24 29 21.7614 29 19C29 16.2386 26.7614 14 24 14C21.2386 14 19 16.2386 19 19C19 21.7614 21.2386 24 24 24ZM24 27C28.4183 27 32 23.4183 32 19C32 14.5817 28.4183 11 24 11C19.5817 11 16 14.5817 16 19C16 23.4183 19.5817 27 24 27Z"></path></svg>`);
const PersonalityIcon = (props) => {
	const theme = useTheme();
	const fill = () => props.fill || theme.colors.icon.secondary;
	return (() => {
		const _el$ = _tmpl$$d.cloneNode(true), _el$2 = _el$.firstChild;
		createRenderEffect((_p$) => {
			const _v$ = props.class, _v$2 = fill();
			_v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
			_v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
			return _p$;
		}, {
			_v$: void 0,
			_v$2: void 0
		});
		return _el$;
	})();
};
const _tmpl$$c = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M34.5607 4.43934C33.9749 3.85355 33.0251 3.85355 32.4393 4.43934C31.8536 5.02513 31.8536 5.97487 32.4393 6.56066L37.8787 12H10.5C9.67157 12 9 12.6716 9 13.5C9 14.3284 9.67157 15 10.5 15H37.8787L32.4393 20.4393C31.8536 21.0251 31.8536 21.9749 32.4393 22.5607C33.0251 23.1464 33.9749 23.1464 34.5607 22.5607L42.5607 14.5607C43.1464 13.9749 43.1464 13.0251 42.5607 12.4393L34.5607 4.43934ZM13.4393 25.4393C14.0251 24.8536 14.9749 24.8536 15.5607 25.4393C16.1464 26.0251 16.1464 26.9749 15.5607 27.5607L10.1213 33H37.5C38.3284 33 39 33.6716 39 34.5C39 35.3284 38.3284 36 37.5 36H10.1213L15.5607 41.4393C16.1464 42.0251 16.1464 42.9749 15.5607 43.5607C14.9749 44.1464 14.0251 44.1464 13.4393 43.5607L5.43934 35.5607C4.85355 34.9749 4.85355 34.0251 5.43934 33.4393L13.4393 25.4393Z"></path></svg>`);
const SwapIcon = (props) => {
	const theme = useTheme();
	const fill = () => props.fill || theme.colors.icon.secondary;
	return (() => {
		const _el$ = _tmpl$$c.cloneNode(true), _el$2 = _el$.firstChild;
		createRenderEffect((_p$) => {
			const _v$ = props.class, _v$2 = fill();
			_v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
			_v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
			return _p$;
		}, {
			_v$: void 0,
			_v$2: void 0
		});
		return _el$;
	})();
};
const _tmpl$$b = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 28 28" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.75 12.002C1.75 9.20169 1.75 7.80156 2.29497 6.732C2.77433 5.79119 3.53924 5.02629 4.48005 4.54692C5.54961 4.00195 6.94974 4.00195 9.75 4.00195H17.25C20.0503 4.00195 21.4504 4.00195 22.52 4.54692C23.4608 5.02629 24.2257 5.79119 24.705 6.732C24.8256 6.96861 24.9195 7.2214 24.9926 7.50195H21.5C19.6377 7.50195 18.7065 7.50195 17.9609 7.77334C16.711 8.22828 15.7263 9.21291 15.2714 10.4629C15 11.2085 15 12.1396 15 14.002C15 15.8643 15 16.7954 15.2714 17.541C15.7263 18.791 16.711 19.7756 17.9609 20.2306C18.7065 20.502 19.6377 20.502 21.5 20.502H24.9926C24.9195 20.7825 24.8256 21.0353 24.705 21.2719C24.2257 22.2127 23.4608 22.9776 22.52 23.457C21.4504 24.002 20.0503 24.002 17.25 24.002H9.75C6.94974 24.002 5.54961 24.002 4.48005 23.457C3.53924 22.9776 2.77433 22.2127 2.29497 21.2719C1.75 20.2023 1.75 18.8022 1.75 16.002V12.002ZM16.4999 13.802C16.4999 12.1218 16.4999 11.2817 16.8269 10.64C17.1145 10.0755 17.5735 9.61656 18.138 9.32894C18.7797 9.00196 19.6198 9.00196 21.2999 9.00196H23.1999C24.8801 9.00196 25.7202 9.00196 26.3619 9.32894C26.9264 9.61656 27.3853 10.0755 27.673 10.64C27.9999 11.2817 27.9999 12.1218 27.9999 13.802V14.202C27.9999 15.8821 27.9999 16.7222 27.673 17.3639C27.3853 17.9284 26.9264 18.3874 26.3619 18.675C25.7202 19.002 24.8801 19.002 23.1999 19.002H21.2999C19.6198 19.002 18.7797 19.002 18.138 18.675C17.5735 18.3874 17.1145 17.9284 16.8269 17.3639C16.4999 16.7222 16.4999 15.8821 16.4999 14.202V13.802ZM22.4999 14.002C22.4999 14.9685 21.7164 15.752 20.7499 15.752C19.7834 15.752 18.9999 14.9685 18.9999 14.002C18.9999 13.0355 19.7834 12.252 20.7499 12.252C21.7164 12.252 22.4999 13.0355 22.4999 14.002Z"></path></svg>`);
const AtWalletIcon = (props) => {
	const theme = useTheme();
	const fill = () => props.fill || theme.colors.constant.white;
	return (() => {
		const _el$ = _tmpl$$b.cloneNode(true), _el$2 = _el$.firstChild;
		createRenderEffect((_p$) => {
			const _v$ = props.class, _v$2 = fill();
			_v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
			_v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
			return _p$;
		}, {
			_v$: void 0,
			_v$2: void 0
		});
		return _el$;
	})();
};
const _tmpl$$a = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 28 28"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.0001 10.0001C10.0016 8.02333 10.0267 6.98719 10.436 6.18404C10.8195 5.43139 11.4314 4.81947 12.184 4.43597C13.0397 4 14.1598 4 16.4 4H17.6C19.8402 4 20.9603 4 21.816 4.43597C22.5686 4.81947 23.1805 5.43139 23.564 6.18404C24 7.03969 24 8.15979 24 10.4V11.6C24 13.8402 24 14.9603 23.564 15.816C23.1805 16.5686 22.5686 17.1805 21.816 17.564C21.0128 17.9733 19.9767 17.9984 17.9999 17.9999C17.9984 19.9767 17.9733 21.0128 17.564 21.816C17.1805 22.5686 16.5686 23.1805 15.816 23.564C14.9603 24 13.8402 24 11.6 24H10.4C8.15979 24 7.03969 24 6.18404 23.564C5.43139 23.1805 4.81947 22.5686 4.43597 21.816C4 20.9603 4 19.8402 4 17.6V16.4C4 14.1598 4 13.0397 4.43597 12.184C4.81947 11.4314 5.43139 10.8195 6.18404 10.436C6.98719 10.0267 8.02333 10.0016 10.0001 10.0001ZM10 11.5H9.5C8.09987 11.5 7.3998 11.5 6.86502 11.7725C6.39462 12.0122 6.01217 12.3946 5.77248 12.865C5.5 13.3998 5.5 14.0999 5.5 15.5V18.5C5.5 19.9001 5.5 20.6002 5.77248 21.135C6.01217 21.6054 6.39462 21.9878 6.86502 22.2275C7.3998 22.5 8.09987 22.5 9.5 22.5H12.5C13.9001 22.5 14.6002 22.5 15.135 22.2275C15.6054 21.9878 15.9878 21.6054 16.2275 21.135C16.5 20.6002 16.5 19.9001 16.5 18.5V18H16.4C14.1598 18 13.0397 18 12.184 17.564C11.4314 17.1805 10.8195 16.5686 10.436 15.816C10 14.9603 10 13.8402 10 11.6V11.5ZM11.5 9.5C11.5 8.09987 11.5 7.3998 11.7725 6.86502C12.0122 6.39462 12.3946 6.01217 12.865 5.77248C13.3998 5.5 14.0999 5.5 15.5 5.5H18.5C19.9001 5.5 20.6002 5.5 21.135 5.77248C21.6054 6.01217 21.9878 6.39462 22.2275 6.86502C22.5 7.3998 22.5 8.09987 22.5 9.5V12.5C22.5 13.9001 22.5 14.6002 22.2275 15.135C21.9878 15.6054 21.6054 15.9878 21.135 16.2275C20.6002 16.5 19.9001 16.5 18.5 16.5H15.5C14.0999 16.5 13.3998 16.5 12.865 16.2275C12.3946 15.9878 12.0122 15.6054 11.7725 15.135C11.5 14.6002 11.5 13.9001 11.5 12.5V9.5Z"></path></svg>`);
const CopyLightIcon = (props) => {
	const theme = useTheme();
	const fill = () => props.fill || theme.colors.icon.secondary;
	return (() => {
		const _el$ = _tmpl$$a.cloneNode(true), _el$2 = _el$.firstChild;
		createRenderEffect((_p$) => {
			const _v$ = fill(), _v$2 = fill();
			_v$ !== _p$._v$ && setAttribute(_el$, "fill", _p$._v$ = _v$);
			_v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
			return _p$;
		}, {
			_v$: void 0,
			_v$2: void 0
		});
		return _el$;
	})();
};
const _tmpl$$9 = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="17" viewBox="0 0 16 17" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M1 4.12695C1 3.07754 1 2.55284 1.19202 2.14684C1.38986 1.72856 1.7266 1.39181 2.14489 1.19397C2.55088 1.00195 3.07559 1.00195 4.125 1.00195C5.17441 1.00195 5.69912 1.00195 6.10511 1.19397C6.5234 1.39181 6.86014 1.72856 7.05798 2.14684C7.25 2.55284 7.25 3.07754 7.25 4.12695C7.25 5.17636 7.25 5.70107 7.05798 6.10706C6.86014 6.52535 6.5234 6.8621 6.10511 7.05993C5.69912 7.25195 5.17441 7.25195 4.125 7.25195C3.07559 7.25195 2.55088 7.25195 2.14489 7.05993C1.7266 6.8621 1.38986 6.52535 1.19202 6.10706C1 5.70107 1 5.17636 1 4.12695ZM2.5 3.30195C2.5 3.02193 2.5 2.88191 2.5545 2.77496C2.60243 2.68088 2.67892 2.60439 2.773 2.55645C2.87996 2.50195 3.01997 2.50195 3.3 2.50195H4.95C5.23003 2.50195 5.37004 2.50195 5.477 2.55645C5.57108 2.60439 5.64757 2.68088 5.6955 2.77496C5.75 2.88191 5.75 3.02193 5.75 3.30195V4.95195C5.75 5.23198 5.75 5.37199 5.6955 5.47895C5.64757 5.57303 5.57108 5.64952 5.477 5.69746C5.37004 5.75195 5.23003 5.75195 4.95 5.75195H3.3C3.01997 5.75195 2.87996 5.75195 2.773 5.69746C2.67892 5.64952 2.60243 5.57303 2.5545 5.47895C2.5 5.37199 2.5 5.23198 2.5 4.95195V3.30195ZM1 11.877C1 10.8275 1 10.3028 1.19202 9.89684C1.38986 9.47856 1.7266 9.14181 2.14489 8.94397C2.55088 8.75195 3.07559 8.75195 4.125 8.75195C5.17441 8.75195 5.69912 8.75195 6.10511 8.94397C6.5234 9.14181 6.86014 9.47856 7.05798 9.89684C7.25 10.3028 7.25 10.8275 7.25 11.877C7.25 12.9264 7.25 13.4511 7.05798 13.8571C6.86014 14.2753 6.5234 14.6121 6.10511 14.8099C5.69912 15.002 5.17441 15.002 4.125 15.002C3.07559 15.002 2.55088 15.002 2.14489 14.8099C1.7266 14.6121 1.38986 14.2753 1.19202 13.8571C1 13.4511 1 12.9264 1 11.877ZM2.5 11.052C2.5 10.7719 2.5 10.6319 2.5545 10.525C2.60243 10.4309 2.67892 10.3544 2.773 10.3064C2.87996 10.252 3.01997 10.252 3.3 10.252H4.95C5.23003 10.252 5.37004 10.252 5.477 10.3064C5.57108 10.3544 5.64757 10.4309 5.6955 10.525C5.75 10.6319 5.75 10.7719 5.75 11.052V12.702C5.75 12.982 5.75 13.122 5.6955 13.2289C5.64757 13.323 5.57108 13.3995 5.477 13.4475C5.37004 13.502 5.23003 13.502 4.95 13.502H3.3C3.01997 13.502 2.87996 13.502 2.773 13.4475C2.67892 13.3995 2.60243 13.323 2.5545 13.2289C2.5 13.122 2.5 12.982 2.5 12.702V11.052ZM8.94202 2.14684C8.75 2.55284 8.75 3.07754 8.75 4.12695C8.75 5.17636 8.75 5.70107 8.94202 6.10706C9.13986 6.52535 9.4766 6.8621 9.89489 7.05993C10.3009 7.25195 10.8256 7.25195 11.875 7.25195C12.9244 7.25195 13.4491 7.25195 13.8551 7.05993C14.2734 6.8621 14.6101 6.52535 14.808 6.10706C15 5.70107 15 5.17636 15 4.12695C15 3.07754 15 2.55284 14.808 2.14684C14.6101 1.72856 14.2734 1.39181 13.8551 1.19397C13.4491 1.00195 12.9244 1.00195 11.875 1.00195C10.8256 1.00195 10.3009 1.00195 9.89489 1.19397C9.4766 1.39181 9.13986 1.72856 8.94202 2.14684ZM10.3045 2.77496C10.25 2.88191 10.25 3.02193 10.25 3.30195V4.95195C10.25 5.23198 10.25 5.37199 10.3045 5.47895C10.3524 5.57303 10.4289 5.64952 10.523 5.69746C10.63 5.75195 10.77 5.75195 11.05 5.75195H12.7C12.98 5.75195 13.12 5.75195 13.227 5.69746C13.3211 5.64952 13.3976 5.57303 13.4455 5.47895C13.5 5.37199 13.5 5.23198 13.5 4.95195V3.30195C13.5 3.02193 13.5 2.88191 13.4455 2.77496C13.3976 2.68088 13.3211 2.60439 13.227 2.55645C13.12 2.50195 12.98 2.50195 12.7 2.50195H11.05C10.77 2.50195 10.63 2.50195 10.523 2.55645C10.4289 2.60439 10.3524 2.68088 10.3045 2.77496ZM8.80727 9.13518C8.75 9.26242 8.75 9.4256 8.75 9.75195C8.75 10.0783 8.75 10.2415 8.80727 10.3687C8.87245 10.5136 8.9884 10.6295 9.13323 10.6947C9.26047 10.752 9.42365 10.752 9.75 10.752C10.0764 10.752 10.2395 10.752 10.3668 10.6947C10.5116 10.6295 10.6276 10.5136 10.6927 10.3687C10.75 10.2415 10.75 10.0783 10.75 9.75195C10.75 9.4256 10.75 9.26242 10.6927 9.13518C10.6276 8.99035 10.5116 8.8744 10.3668 8.80922C10.2395 8.75195 10.0764 8.75195 9.75 8.75195C9.42365 8.75195 9.26047 8.75195 9.13323 8.80922C8.9884 8.8744 8.87245 8.99035 8.80727 9.13518ZM10.87 11.8771C10.87 11.546 10.87 11.3805 10.9289 11.2517C10.9938 11.1098 11.1077 10.9959 11.2497 10.931C11.3784 10.8721 11.5439 10.8721 11.875 10.8721C12.2061 10.8721 12.3716 10.8721 12.5003 10.931C12.6423 10.9959 12.7562 11.1098 12.8211 11.2517C12.88 11.3805 12.88 11.546 12.88 11.8771C12.88 12.2081 12.88 12.3737 12.8211 12.5024C12.7562 12.6444 12.6423 12.7583 12.5003 12.8232C12.3716 12.8821 12.2061 12.8821 11.875 12.8821C11.5439 12.8821 11.3784 12.8821 11.2497 12.8232C11.1077 12.7583 10.9938 12.6444 10.9289 12.5024C10.87 12.3737 10.87 12.2081 10.87 11.8771ZM8.80727 13.3852C8.75 13.5124 8.75 13.6756 8.75 14.002C8.75 14.3283 8.75 14.4915 8.80727 14.6187C8.87245 14.7636 8.9884 14.8795 9.13323 14.9447C9.26047 15.002 9.42365 15.002 9.75 15.002C10.0764 15.002 10.2395 15.002 10.3668 14.9447C10.5116 14.8795 10.6276 14.7636 10.6927 14.6187C10.75 14.4915 10.75 14.3283 10.75 14.002C10.75 13.6756 10.75 13.5124 10.6927 13.3852C10.6276 13.2404 10.5116 13.1244 10.3668 13.0592C10.2395 13.002 10.0764 13.002 9.75 13.002C9.42365 13.002 9.26047 13.002 9.13323 13.0592C8.9884 13.1244 8.87245 13.2404 8.80727 13.3852ZM13 9.75195C13 9.4256 13 9.26242 13.0573 9.13518C13.1224 8.99035 13.2384 8.8744 13.3832 8.80922C13.5105 8.75195 13.6736 8.75195 14 8.75195C14.3264 8.75195 14.4895 8.75195 14.6168 8.80922C14.7616 8.8744 14.8776 8.99035 14.9427 9.13518C15 9.26242 15 9.4256 15 9.75195C15 10.0783 15 10.2415 14.9427 10.3687C14.8776 10.5136 14.7616 10.6295 14.6168 10.6947C14.4895 10.752 14.3264 10.752 14 10.752C13.6736 10.752 13.5105 10.752 13.3832 10.6947C13.2384 10.6295 13.1224 10.5136 13.0573 10.3687C13 10.2415 13 10.0783 13 9.75195ZM13.0573 13.3852C13 13.5124 13 13.6756 13 14.002C13 14.3283 13 14.4915 13.0573 14.6187C13.1224 14.7636 13.2384 14.8795 13.3832 14.9447C13.5105 15.002 13.6736 15.002 14 15.002C14.3264 15.002 14.4895 15.002 14.6168 14.9447C14.7616 14.8795 14.8776 14.7636 14.9427 14.6187C15 14.4915 15 14.3283 15 14.002C15 13.6756 15 13.5124 14.9427 13.3852C14.8776 13.2404 14.7616 13.1244 14.6168 13.0592C14.4895 13.002 14.3264 13.002 14 13.002C13.6736 13.002 13.5105 13.002 13.3832 13.0592C13.2384 13.1244 13.1224 13.2404 13.0573 13.3852Z"></path></svg>`);
const QRIcon = (props) => {
	const theme = useTheme();
	const fill = () => props.fill || theme.colors.icon.secondary;
	return (() => {
		const _el$ = _tmpl$$9.cloneNode(true), _el$2 = _el$.firstChild;
		createRenderEffect(() => setAttribute(_el$2, "fill", fill()));
		return _el$;
	})();
};
const containerBorders = {
	m: "16px",
	s: "12px",
	none: "0"
};
const walletBorders = {
	m: "6px",
	s: "6px",
	none: "0"
};
const FourWalletsCard = styled.div`
    width: 60px;
    height: 60px;
    padding: 8px;
    margin-bottom: 8px;
    border-radius: ${(props) => containerBorders[props.theme.borderRadius]};
    background-color: ${(props) => props.theme.colors.background.tint};
    display: grid;
    grid-template: 1fr 1fr / 1fr 1fr;
    gap: 4px;
`;
const FourWalletsImage = styled(WalletImage)`
    width: 20px;
    height: 20px;
    border-radius: ${(props) => walletBorders[props.theme.borderRadius]};
`;
const FourWalletsItem = (props) => {
	return createComponent(WalletItem, {
		get name() {
			return props.labelLine1;
		},
		get secondLine() {
			return props.labelLine2;
		},
		get icon() {
			return createComponent(FourWalletsCard, { get children() {
				return createComponent(For, {
					each: [
						0,
						1,
						2,
						3
					],
					children: (index) => createComponent(FourWalletsImage, { get src() {
						return props.images[index];
					} })
				});
			} });
		},
		onClick: () => props.onClick()
	});
};
const AT_WALLET_APP_NAME = "telegram-wallet";
const IMG = {
	TON: "https://raw.githubusercontent.com/ton-connect/sdk/main/assets/ton-icon-48.png",
	TG: "https://raw.githubusercontent.com/ton-connect/sdk/main/assets/tg.png"
};
const WalletLabeledItem = (props) => {
	const [t2] = useI18n();
	const walletsSecondLine = () => {
		if (props.wallet.appName === AT_WALLET_APP_NAME) return void 0;
		if ("isPreferred" in props.wallet && props.wallet.isPreferred) return t2("walletItem.recent", {}, "Recent");
		if (isWalletInfoCurrentlyInjected(props.wallet)) return t2("walletItem.installed", {}, "Installed");
		if (props.wallet.name === "Tonkeeper") return t2("walletItem.popular", {}, "Popular");
		return void 0;
	};
	return createMemo((() => {
		const _c$ = createMemo(() => props.wallet.appName === AT_WALLET_APP_NAME);
		return () => _c$() ? createComponent(WalletItem, {
			get icon() {
				return props.wallet.imageUrl;
			},
			get name() {
				return t2("walletItem.walletOn", {}, "Wallet in");
			},
			secondLine: "Telegram",
			get badgeUrl() {
				return IMG.TG;
			},
			onClick: () => props.onClick(),
			get ["class"]() {
				return props.class;
			}
		}) : createComponent(WalletItem, {
			get icon() {
				return props.wallet.imageUrl;
			},
			get name() {
				return props.wallet.name;
			},
			get secondLine() {
				return walletsSecondLine();
			},
			secondLineColorPrimary: false,
			onClick: () => props.onClick(),
			get ["class"]() {
				return props.class;
			}
		});
	})());
};
const ScrollContainerStyled = styled.div`
    width: 100%;
    overflow-y: auto;
    max-height: ${(props) => props.maxHeight};

    scrollbar-width: none;
    &&::-webkit-scrollbar {
        display: none;
    }

    &&::-webkit-scrollbar-track {
        background: transparent;
    }

    &&::-webkit-scrollbar-thumb {
        display: none;
    }
`;
const ScrollDivider = styled.div`
    height: 1px;
    margin: 0 -24px;
    width: calc(100% + 48px);
    opacity: 0.08;
    background: ${(props) => props.isShown ? props.theme.colors.icon.secondary : "transparent"};
    transition: background 0.15s ease-in-out;

    ${media("mobile")} {
        width: 100%;
        margin: 0;
    }
`;
const [windowHeight, setWindowHeight] = createSignal(((_h = getWindow$1()) == null ? void 0 : _h.innerHeight) || 0);
if (getWindow$1()) window.addEventListener("resize", () => setWindowHeight(window.innerHeight));
const [isMobile, setIsMobile] = createSignal(isDevice("mobile"));
const updateIsMobile = () => setIsMobile(isDevice("mobile"));
if (getWindow$1()) {
	window.addEventListener("resize", () => updateIsMobile());
	window.addEventListener("load", () => updateIsMobile(), { once: true });
}
const ScrollContainer = (props) => {
	const [scrolled, setScrolled] = createSignal(false);
	const onScroll = (e2) => {
		setScrolled(e2.target.scrollTop > 0);
	};
	const offset = () => isMobile() ? 150 : 200;
	const maxHeight = () => props.maxHeight !== void 0 ? `${props.maxHeight}px` : `${windowHeight() - offset()}px`;
	return [createComponent(ScrollDivider, { get isShown() {
		return scrolled();
	} }), createComponent(ScrollContainerStyled, {
		get maxHeight() {
			return maxHeight();
		},
		onScroll,
		get ["class"]() {
			return props.class;
		},
		get children() {
			return props.children;
		}
	})];
};
const AStyled = styled.a`
    display: block;
    text-decoration: unset;
`;
const Link = (props) => {
	const attributes = () => props.blank ? { rel: "noreferrer noopener" } : {};
	return createComponent(AStyled, mergeProps({
		get href() {
			return props.href;
		},
		get target() {
			return props.blank ? "_blank" : "_self";
		},
		get ["class"]() {
			return props.class;
		}
	}, attributes, { get children() {
		return props.children;
	} }));
};
const TonConnectUiContext = createContext();
const _tmpl$$8 = /* @__PURE__ */ template$1(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M7.76228 2.09998H10.2378C11.0458 2.09997 11.7067 2.09996 12.2438 2.14384C12.7997 2.18926 13.3017 2.28614 13.7706 2.52505C14.5045 2.89896 15.1011 3.49558 15.475 4.22941C15.7139 4.6983 15.8108 5.20038 15.8562 5.75629C15.9001 6.29337 15.9001 6.95422 15.9001 7.76227V8.1H16.2377C17.0457 8.09999 17.7066 8.09998 18.2437 8.14386C18.7996 8.18928 19.3017 8.28616 19.7705 8.52507C20.5044 8.89898 21.101 9.4956 21.4749 10.2294C21.7138 10.6983 21.8107 11.2004 21.8561 11.7563C21.9 12.2934 21.9 12.9542 21.9 13.7623V16.2377C21.9 17.0458 21.9 17.7066 21.8561 18.2437C21.8107 18.7996 21.7138 19.3017 21.4749 19.7706C21.101 20.5044 20.5044 21.101 19.7705 21.4749C19.3017 21.7138 18.7996 21.8107 18.2437 21.8561C17.7066 21.9 17.0458 21.9 16.2378 21.9H13.7623C12.9543 21.9 12.2934 21.9 11.7563 21.8561C11.2004 21.8107 10.6983 21.7138 10.2294 21.4749C9.49561 21.101 8.89898 20.5044 8.52508 19.7706C8.28616 19.3017 8.18928 18.7996 8.14386 18.2437C8.09998 17.7066 8.09999 17.0458 8.1 16.2377V15.9H7.76227C6.95426 15.9 6.29335 15.9 5.75629 15.8561C5.20038 15.8107 4.6983 15.7138 4.22941 15.4749C3.49558 15.101 2.89896 14.5044 2.52505 13.7705C2.28614 13.3017 2.18926 12.7996 2.14384 12.2437C2.09996 11.7066 2.09997 11.0458 2.09998 10.2377V7.76228C2.09997 6.95424 2.09996 6.29336 2.14384 5.75629C2.18926 5.20038 2.28614 4.6983 2.52505 4.22941C2.89896 3.49558 3.49558 2.89896 4.22941 2.52505C4.6983 2.28614 5.20038 2.18926 5.75629 2.14384C6.29336 2.09996 6.95425 2.09997 7.76228 2.09998ZM8.1 14.1V13.7623C8.09999 12.9542 8.09998 12.2934 8.14386 11.7563C8.18928 11.2004 8.28616 10.6983 8.52508 10.2294C8.89898 9.4956 9.49561 8.89898 10.2294 8.52507C10.6983 8.28616 11.2004 8.18928 11.7563 8.14386C12.2934 8.09998 12.9542 8.09999 13.7623 8.1H14.1001V7.79998C14.1001 6.94505 14.0994 6.35798 14.0622 5.90287C14.0259 5.45827 13.9593 5.21944 13.8712 5.0466C13.6699 4.65146 13.3486 4.3302 12.9535 4.12886C12.7806 4.04079 12.5418 3.97419 12.0972 3.93786C11.6421 3.90068 11.055 3.89998 10.2001 3.89998H7.79998C6.94505 3.89998 6.35798 3.90068 5.90287 3.93786C5.45827 3.97419 5.21944 4.04079 5.0466 4.12886C4.65146 4.3302 4.3302 4.65146 4.12886 5.0466C4.04079 5.21944 3.97419 5.45827 3.93786 5.90287C3.90068 6.35798 3.89998 6.94505 3.89998 7.79998V10.2C3.89998 11.0549 3.90068 11.642 3.93786 12.0971C3.97419 12.5417 4.04079 12.7805 4.12886 12.9534C4.3302 13.3485 4.65146 13.6698 5.0466 13.8711C5.21944 13.9592 5.45827 14.0258 5.90287 14.0621C6.35798 14.0993 6.94505 14.1 7.79998 14.1H8.1ZM11.0466 10.1289C11.2195 10.0408 11.4583 9.97421 11.9029 9.93788C12.358 9.9007 12.9451 9.9 13.8 9.9H16.2C17.0549 9.9 17.642 9.9007 18.0971 9.93788C18.5417 9.97421 18.7805 10.0408 18.9534 10.1289C19.3485 10.3302 19.6698 10.6515 19.8711 11.0466C19.9592 11.2195 20.0258 11.4583 20.0621 11.9029C20.0993 12.358 20.1 12.9451 20.1 13.8V16.2C20.1 17.0549 20.0993 17.642 20.0621 18.0971C20.0258 18.5417 19.9592 18.7805 19.8711 18.9534C19.6698 19.3485 19.3485 19.6698 18.9534 19.8711C18.7805 19.9592 18.5417 20.0258 18.0971 20.0621C17.642 20.0993 17.0549 20.1 16.2 20.1H13.8C12.9451 20.1 12.358 20.0993 11.9029 20.0621C11.4583 20.0258 11.2195 19.9592 11.0466 19.8711C10.6515 19.6698 10.3302 19.3485 10.1289 18.9534C10.0408 18.7805 9.97421 18.5417 9.93788 18.0971C9.9007 17.642 9.9 17.0549 9.9 16.2V13.8C9.9 12.9451 9.9007 12.358 9.93788 11.9029C9.97421 11.4583 10.0408 11.2195 10.1289 11.0466C10.3302 10.6515 10.6515 10.3302 11.0466 10.1289Z"></path></svg>`);
const CopyIcon = (props) => {
	const theme = useTheme();
	const fill = () => props.fill || theme.colors.icon.primary;
	return (() => {
		const _el$ = _tmpl$$8.cloneNode(true), _el$2 = _el$.firstChild;
		createRenderEffect((_p$) => {
			const _v$ = props.class, _v$2 = fill();
			_v$ !== _p$._v$ && setAttribute(_el$, "class", _p$._v$ = _v$);
			_v$2 !== _p$._v$2 && setAttribute(_el$2, "fill", _p$._v$2 = _v$2);
			return _p$;
		}, {
			_v$: void 0,
			_v$2: void 0
		});
		return _el$;
	})();
};
const _tmpl$$7 = /* @__PURE__ */ template$1(`<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M8.7624 3.10001C7.95435 3.1 7.29349 3.09999 6.75642 3.14387C6.2005 3.18929 5.69842 3.28617 5.22954 3.52508C4.4957 3.89899 3.89908 4.49561 3.52517 5.22944C3.28626 5.69833 3.18938 6.20041 3.14396 6.75632C3.10008 7.2934 3.10009 7.95424 3.1001 8.76229V15.2377C3.10009 16.0458 3.10008 16.7066 3.14396 17.2437C3.18938 17.7996 3.28626 18.3017 3.52517 18.7706C3.89908 19.5044 4.4957 20.101 5.22954 20.4749C5.69842 20.7138 6.2005 20.8107 6.75642 20.8561C7.29349 20.9 7.95434 20.9 8.76239 20.9H12.0001C12.4972 20.9 12.9001 20.4971 12.9001 20C12.9001 19.503 12.4972 19.1 12.0001 19.1H8.8001C7.94517 19.1 7.3581 19.0993 6.90299 19.0621C6.45839 19.0258 6.21956 18.9592 6.04672 18.8711C5.65158 18.6698 5.33032 18.3485 5.12898 17.9534C5.04092 17.7805 4.97431 17.5417 4.93798 17.0971C4.9008 16.642 4.9001 16.0549 4.9001 15.2V8.80001C4.9001 7.94508 4.9008 7.35801 4.93798 6.9029C4.97431 6.4583 5.04092 6.21947 5.12898 6.04663C5.33032 5.65149 5.65158 5.33023 6.04672 5.12889C6.21956 5.04082 6.45839 4.97422 6.90299 4.93789C7.3581 4.90071 7.94517 4.90001 8.8001 4.90001H12.0001C12.4972 4.90001 12.9001 4.49706 12.9001 4.00001C12.9001 3.50295 12.4972 3.10001 12.0001 3.10001H8.7624Z"></path><path d="M17.6364 7.3636C17.2849 7.01212 16.7151 7.01212 16.3636 7.3636C16.0121 7.71507 16.0121 8.28492 16.3636 8.63639L18.8272 11.1H9.00001C8.50295 11.1 8.10001 11.5029 8.10001 12C8.10001 12.497 8.50295 12.9 9.00001 12.9H18.8272L16.3636 15.3636C16.0121 15.7151 16.0121 16.2849 16.3636 16.6364C16.7151 16.9879 17.2849 16.9879 17.6364 16.6364L21.6364 12.6364C21.9879 12.2849 21.9879 11.7151 21.6364 11.3636L17.6364 7.3636Z"></path></svg>`);
const DisconnectIcon = (props) => {
	const theme = useTheme();
	const fill = () => props.fill || theme.colors.icon.primary;
	return (() => {
		const _el$ = _tmpl$$7.cloneNode(true), _el$2 = _el$.firstChild, _el$3 = _el$2.nextSibling;
		createRenderEffect((_p$) => {
			const _v$ = fill(), _v$2 = fill();
			_v$ !== _p$._v$ && setAttribute(_el$2, "fill", _p$._v$ = _v$);
			_v$2 !== _p$._v$2 && setAttribute(_el$3, "fill", _p$._v$2 = _v$2);
			return _p$;
		}, {
			_v$: void 0,
			_v$2: void 0
		});
		return _el$;
	})();
};
const hoverBorders$1 = {
	m: "8px",
	s: "4px",
	none: "0"
};
const dropdownBorders = {
	m: "16px",
	s: "8px",
	none: "0"
};
const AccountButtonDropdownStyled = styled.div`
    width: 256px;
    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.16);
    border-radius: ${(props) => dropdownBorders[props.theme.borderRadius]};

    background-color: ${(props) => props.theme.colors.background.primary}
           
    color: ${(props) => props.theme.colors.text.primary}
`;
const UlStyled = styled.ul`
    background-color: ${(props) => props.theme.colors.background.primary};
    padding: 8px;
`;
const MenuButtonStyled = styled.button`
    display: flex;
    align-items: center;
    gap: 8px;
    height: 40px;
    padding-left: 8px;
    width: 100%;

    background-color: ${(props) => props.theme.colors.background.primary};
    border: none;
    border-radius: ${(props) => hoverBorders$1[props.theme.borderRadius]};
    cursor: pointer;

    transition: background-color, transform 0.1s ease-in-out;

    &:hover {
        background-color: ${(props) => props.theme.colors.background.secondary};
    }

    &:active {
        transform: scale(0.96);
    }
`;
const _tmpl$$6 = /* @__PURE__ */ template$1(`<li></li>`);
const MenuItemText = (props) => createComponent(Text, {
	get translationKey() {
		return props.translationKey;
	},
	fontSize: "15px",
	fontWeight: "590",
	get children() {
		return props.children;
	}
});
const AccountButtonDropdown = (props) => {
	const tonConnectUi = useContext(TonConnectUiContext);
	const [isCopiedShown, setIsCopiedShown] = createSignal(false);
	const onCopy = () => __async(void 0, null, function* () {
		const userFriendlyAddress = toUserFriendlyAddress(tonConnectUi.account.address, tonConnectUi.account.chain === CHAIN.TESTNET);
		yield copyToClipboard(userFriendlyAddress);
		setIsCopiedShown(true);
		setTimeout(() => setIsCopiedShown(false), 1e3);
	});
	const onDisconnect = () => {
		tonConnectUi.disconnect();
		props.onClose();
	};
	return createComponent(AccountButtonDropdownStyled, {
		ref(r$) {
			const _ref$ = props.ref;
			typeof _ref$ === "function" ? _ref$(r$) : props.ref = r$;
		},
		get ["class"]() {
			return props.class;
		},
		"data-tc-dropdown": "true",
		get children() {
			return createComponent(UlStyled, { get children() {
				return [(() => {
					const _el$ = _tmpl$$6.cloneNode(true);
					insert(_el$, createComponent(MenuButtonStyled, {
						onClick: () => onCopy(),
						get children() {
							return [
								createComponent(CopyIcon, {}),
								createComponent(Show, {
									get when() {
										return !isCopiedShown();
									},
									get children() {
										return createComponent(MenuItemText, {
											translationKey: "button.dropdown.copy",
											children: "Copy address"
										});
									}
								}),
								createComponent(Show, {
									get when() {
										return isCopiedShown();
									},
									get children() {
										return createComponent(MenuItemText, {
											translationKey: "button.dropdown.copied",
											children: "Address copied!"
										});
									}
								})
							];
						}
					}));
					return _el$;
				})(), (() => {
					const _el$2 = _tmpl$$6.cloneNode(true);
					insert(_el$2, createComponent(MenuButtonStyled, {
						onClick: () => onDisconnect(),
						get children() {
							return [createComponent(DisconnectIcon, {}), createComponent(MenuItemText, {
								translationKey: "button.dropdown.disconnect",
								children: "Disconnect"
							})];
						}
					}));
					return _el$2;
				})()];
			} });
		}
	});
};
const borders$2 = {
	m: "16px",
	s: "8px",
	none: "0"
};
const NotificationStyled = styled.div`
    width: 256px;
    padding: 12px 16px;
    display: flex;
    gap: 9px;

    background-color: ${(props) => props.theme.colors.background.primary};
    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.16);
    border-radius: ${(props) => borders$2[props.theme.borderRadius]};
`;
const NotificationContentStyled = styled.div`
    width: 192px;

    > h3 {
        font-size: 15px;
    }
`;
const TextStyled$2 = styled(Text)`
    margin-top: 4px;
    color: ${(props) => props.theme.colors.text.secondary};
`;
const Notification = (props) => {
	const dataAttrs = useDataAttributes(props);
	return createComponent(NotificationStyled, mergeProps({
		get ["class"]() {
			return props.class;
		},
		"data-tc-notification": "true"
	}, dataAttrs, { get children() {
		return [createComponent(NotificationContentStyled, { get children() {
			return [createComponent(H3, {
				get translationKey() {
					return props.header.translationKey;
				},
				get translationValues() {
					return props.header.translationValues;
				},
				get children() {
					return props.children;
				}
			}), createComponent(Show, {
				get when() {
					return props.text;
				},
				get children() {
					return createComponent(TextStyled$2, {
						get translationKey() {
							return props.text.translationKey;
						},
						get translationValues() {
							return props.text.translationValues;
						}
					});
				}
			})];
		} }), createMemo(() => props.icon)];
	} }));
};
const LoaderIconStyled$2 = styled(LoaderIcon)`
    align-self: center;
`;
const ConfirmOperationNotification = (props) => {
	const tonConnectUI = useContext(TonConnectUiContext);
	const [t2] = useI18n();
	const name = () => tonConnectUI.wallet && "name" in tonConnectUI.wallet ? tonConnectUI.wallet.name : t2("common.yourWallet", {}, "Your wallet");
	return createComponent(Notification, {
		get header() {
			return {
				translationKey: "notifications.confirm.header",
				translationValues: { name: name() }
			};
		},
		get ["class"]() {
			return props.class;
		},
		get icon() {
			return createComponent(LoaderIconStyled$2, {});
		},
		"data-tc-notification-confirm": "true",
		children: "Confirm operation in your wallet"
	});
};
const ErrorIconStyled$2 = styled(ErrorIcon)`
    margin-top: 2px;
`;
const ErrorTransactionNotification = (props) => {
	return createComponent(Notification, {
		header: { translationKey: "notifications.transactionCanceled.header" },
		text: { translationKey: "notifications.transactionCanceled.text" },
		get icon() {
			return createComponent(ErrorIconStyled$2, { size: "xs" });
		},
		get ["class"]() {
			return props.class;
		},
		"data-tc-notification-tx-cancelled": "true",
		children: "Transaction cancelled"
	});
};
const SuccessIconStyled = styled(SuccessIcon)`
    margin-top: 2px;
`;
const SuccessTransactionNotification = (props) => {
	return createComponent(Notification, {
		header: { translationKey: "notifications.transactionSent.header" },
		text: { translationKey: "notifications.transactionSent.text" },
		get icon() {
			return createComponent(SuccessIconStyled, {});
		},
		get ["class"]() {
			return props.class;
		},
		"data-tc-notification-tx-sent": "true",
		children: "Transaction sent"
	});
};
const NotificationClass = u`
    transform: translateY(-8px);
    margin-bottom: 12px;
`;
const defaultConfig = { timeout: 4500 };
const [latestAction, setLatestAction] = createSignal(null);
function useOpenedNotifications(config) {
	const { timeout: timeout$1 } = __spreadValues(__spreadValues({}, defaultConfig), config);
	const [openedNotifications, setOpenedNotifications] = createSignal([]);
	const [timeoutIds, setTimeoutIds] = createSignal([]);
	createEffect(on(action, (action2) => {
		var _a2;
		if (!action2 || !action2.showNotification) return;
		if (latestAction() === action2) return;
		if (((_a2 = latestAction()) == null ? void 0 : _a2.name) === "confirm-transaction" && action2.name === "confirm-transaction") return;
		setLatestAction(action2);
		setOpenedNotifications((openedNotifications2) => openedNotifications2.filter((n2) => n2.action !== "confirm-transaction"));
		const notification = { action: action2.name };
		setOpenedNotifications((openedNotifications2) => [...openedNotifications2, notification]);
		const timeoutId = setTimeout(() => {
			setOpenedNotifications((openedNotifications2) => openedNotifications2.filter((n2) => n2 !== notification));
			setTimeoutIds((timeoutIds2) => timeoutIds2.filter((id) => id !== timeoutId));
		}, timeout$1);
		setTimeoutIds((timeoutIds2) => [...timeoutIds2, timeoutId]);
	}));
	onCleanup(() => {
		timeoutIds().forEach((id) => clearTimeout(id));
	});
	return openedNotifications;
}
const _tmpl$$5 = /* @__PURE__ */ template$1(`<div data-tc-list-notifications="true"></div>`);
const Notifications = (props) => {
	const openedNotifications = useOpenedNotifications();
	return (() => {
		const _el$ = _tmpl$$5.cloneNode(true);
		insert(_el$, createComponent(TransitionGroup, {
			onBeforeEnter: (el) => {
				animate(el, [{
					opacity: 0,
					transform: "translateY(0)"
				}, {
					opacity: 1,
					transform: "translateY(-8px)"
				}], { duration: 200 });
			},
			onExit: (el, done) => {
				const a2 = animate(el, [{
					opacity: 1,
					transform: "translateY(-8px)"
				}, {
					opacity: 0,
					transform: "translateY(-30px)"
				}], { duration: 200 });
				a2.finished.then(done);
			},
			get children() {
				return createComponent(For, {
					get each() {
						return openedNotifications();
					},
					children: (openedNotification) => createComponent(Switch, { get children() {
						return [
							createComponent(Match, {
								get when() {
									return openedNotification.action === "transaction-sent";
								},
								get children() {
									return createComponent(SuccessTransactionNotification, { "class": NotificationClass });
								}
							}),
							createComponent(Match, {
								get when() {
									return openedNotification.action === "transaction-canceled";
								},
								get children() {
									return createComponent(ErrorTransactionNotification, { "class": NotificationClass });
								}
							}),
							createComponent(Match, {
								get when() {
									return openedNotification.action === "confirm-transaction";
								},
								get children() {
									return createComponent(ConfirmOperationNotification, { "class": NotificationClass });
								}
							})
						];
					} })
				});
			}
		}));
		createRenderEffect(() => className(_el$, props.class));
		return _el$;
	})();
};
const AccountButtonStyled = styled(Button)`
    background-color: ${(props) => props.theme.colors.connectButton.background};
    color: ${(props) => props.theme.colors.connectButton.foreground};
    box-shadow: ${(props) => `0 4px 24px ${rgba(props.theme.colors.constant.black, .16)}`};
    padding: 8px 16px 8px 12px;

    display: flex;
    align-items: center;
    gap: 4px;
    height: 40px;
`;
const DropdownButtonStyled = styled(AccountButtonStyled)`
    padding: 12px 16px;
    min-width: 148px;
    justify-content: center;
    background-color: ${(props) => props.theme.colors.background.primary};
`;
const LoaderButtonStyled$1 = styled(Button)`
    min-width: 148px;
    height: 40px;

    background-color: ${(props) => props.theme.colors.background.primary};
    color: ${(props) => props.theme.colors.connectButton.foreground};
    box-shadow: ${(props) => `0 4px 24px ${rgba(props.theme.colors.constant.black, .16)}`};

    display: flex;
    align-items: center;
    justify-content: center;
`;
const LoaderIconStyled$1 = styled(LoaderIcon)`
    height: 18px;
    width: 18px;
`;
const DropdownContainerStyled = styled.div`
    width: fit-content;
    display: flex;
    flex-direction: column;
    align-items: flex-end;
`;
const DropdownStyled = styled(AccountButtonDropdown)`
    box-sizing: border-box;
    overflow: hidden;
    margin-top: 12px;
`;
const NotificationsStyled = styled(Notifications)`
    > div:first-child {
        margin-top: 20px;
    }
`;
function getSide(placement) {
	return placement.split("-")[0];
}
function getAlignment(placement) {
	return placement.split("-")[1];
}
function getMainAxisFromPlacement(placement) {
	return ["top", "bottom"].includes(getSide(placement)) ? "x" : "y";
}
function getLengthFromAxis(axis) {
	return axis === "y" ? "height" : "width";
}
function computeCoordsFromPlacement(_ref, placement, rtl) {
	let { reference, floating } = _ref;
	const commonX = reference.x + reference.width / 2 - floating.width / 2;
	const commonY = reference.y + reference.height / 2 - floating.height / 2;
	const mainAxis = getMainAxisFromPlacement(placement);
	const length = getLengthFromAxis(mainAxis);
	const commonAlign = reference[length] / 2 - floating[length] / 2;
	const side = getSide(placement);
	const isVertical = mainAxis === "x";
	let coords;
	switch (side) {
		case "top":
			coords = {
				x: commonX,
				y: reference.y - floating.height
			};
			break;
		case "bottom":
			coords = {
				x: commonX,
				y: reference.y + reference.height
			};
			break;
		case "right":
			coords = {
				x: reference.x + reference.width,
				y: commonY
			};
			break;
		case "left":
			coords = {
				x: reference.x - floating.width,
				y: commonY
			};
			break;
		default: coords = {
			x: reference.x,
			y: reference.y
		};
	}
	switch (getAlignment(placement)) {
		case "start":
			coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
			break;
		case "end":
			coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
			break;
	}
	return coords;
}
const computePosition$1 = (reference, floating, config) => __async(void 0, null, function* () {
	const { placement = "bottom", strategy = "absolute", middleware = [], platform: platform2 } = config;
	const validMiddleware = middleware.filter(Boolean);
	const rtl = yield platform2.isRTL == null ? void 0 : platform2.isRTL(floating);
	if ({}.NODE_ENV !== "production") {
		if (platform2 == null) console.error([
			"Floating UI: `platform` property was not passed to config. If you",
			"want to use Floating UI on the web, install @floating-ui/dom",
			"instead of the /core package. Otherwise, you can create your own",
			"`platform`: https://floating-ui.com/docs/platform"
		].join(" "));
		if (validMiddleware.filter((_ref) => {
			let { name } = _ref;
			return name === "autoPlacement" || name === "flip";
		}).length > 1) throw new Error([
			"Floating UI: duplicate `flip` and/or `autoPlacement` middleware",
			"detected. This will lead to an infinite loop. Ensure only one of",
			"either has been passed to the `middleware` array."
		].join(" "));
		if (!reference || !floating) console.error([
			"Floating UI: The reference and/or floating element was not defined",
			"when `computePosition()` was called. Ensure that both elements have",
			"been created and can be measured."
		].join(" "));
	}
	let rects = yield platform2.getElementRects({
		reference,
		floating,
		strategy
	});
	let { x, y } = computeCoordsFromPlacement(rects, placement, rtl);
	let statefulPlacement = placement;
	let middlewareData = {};
	let resetCount = 0;
	for (let i2 = 0; i2 < validMiddleware.length; i2++) {
		const { name, fn } = validMiddleware[i2];
		const { x: nextX, y: nextY, data, reset } = yield fn({
			x,
			y,
			initialPlacement: placement,
			placement: statefulPlacement,
			strategy,
			middlewareData,
			rects,
			platform: platform2,
			elements: {
				reference,
				floating
			}
		});
		x = nextX != null ? nextX : x;
		y = nextY != null ? nextY : y;
		middlewareData = __spreadProps(__spreadValues({}, middlewareData), { [name]: __spreadValues(__spreadValues({}, middlewareData[name]), data) });
		if ({}.NODE_ENV !== "production") {
			if (resetCount > 50) console.warn([
				"Floating UI: The middleware lifecycle appears to be running in an",
				"infinite loop. This is usually caused by a `reset` continually",
				"being returned without a break condition."
			].join(" "));
		}
		if (reset && resetCount <= 50) {
			resetCount++;
			if (typeof reset === "object") {
				if (reset.placement) statefulPlacement = reset.placement;
				if (reset.rects) rects = reset.rects === true ? yield platform2.getElementRects({
					reference,
					floating,
					strategy
				}) : reset.rects;
				({x, y} = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
			}
			i2 = -1;
			continue;
		}
	}
	return {
		x,
		y,
		placement: statefulPlacement,
		strategy,
		middlewareData
	};
});
function rectToClientRect(rect) {
	return __spreadProps(__spreadValues({}, rect), {
		top: rect.y,
		left: rect.x,
		right: rect.x + rect.width,
		bottom: rect.y + rect.height
	});
}
function getWindow(node) {
	var _node$ownerDocument;
	return ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getComputedStyle$1(element) {
	return getWindow(element).getComputedStyle(element);
}
function getNodeName(node) {
	return isNode(node) ? (node.nodeName || "").toLowerCase() : "";
}
let uaString;
function getUAString() {
	if (uaString) return uaString;
	const uaData = navigator.userAgentData;
	if (uaData && Array.isArray(uaData.brands)) {
		uaString = uaData.brands.map((item) => item.brand + "/" + item.version).join(" ");
		return uaString;
	}
	return navigator.userAgent;
}
function isHTMLElement(value) {
	return value instanceof getWindow(value).HTMLElement;
}
function isElement(value) {
	return value instanceof getWindow(value).Element;
}
function isNode(value) {
	return value instanceof getWindow(value).Node;
}
function isShadowRoot(node) {
	if (typeof ShadowRoot === "undefined") return false;
	const OwnElement = getWindow(node).ShadowRoot;
	return node instanceof OwnElement || node instanceof ShadowRoot;
}
function isOverflowElement(element) {
	const { overflow, overflowX, overflowY, display } = getComputedStyle$1(element);
	return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
	return [
		"table",
		"td",
		"th"
	].includes(getNodeName(element));
}
function isContainingBlock(element) {
	const isFirefox = /firefox/i.test(getUAString());
	const css = getComputedStyle$1(element);
	const backdropFilter = css.backdropFilter || css.WebkitBackdropFilter;
	return css.transform !== "none" || css.perspective !== "none" || (backdropFilter ? backdropFilter !== "none" : false) || isFirefox && css.willChange === "filter" || isFirefox && (css.filter ? css.filter !== "none" : false) || ["transform", "perspective"].some((value) => css.willChange.includes(value)) || [
		"paint",
		"layout",
		"strict",
		"content"
	].some((value) => {
		const contain = css.contain;
		return contain != null ? contain.includes(value) : false;
	});
}
function isLayoutViewport() {
	return !/^((?!chrome|android).)*safari/i.test(getUAString());
}
function isLastTraversableNode(node) {
	return [
		"html",
		"body",
		"#document"
	].includes(getNodeName(node));
}
const min = Math.min;
const max = Math.max;
const round = Math.round;
const FALLBACK_SCALE = {
	x: 1,
	y: 1
};
function getScale(element) {
	const domElement = !isElement(element) && element.contextElement ? element.contextElement : isElement(element) ? element : null;
	if (!domElement) return FALLBACK_SCALE;
	const rect = domElement.getBoundingClientRect();
	const css = getComputedStyle$1(domElement);
	if (css.boxSizing !== "border-box") {
		if (!isHTMLElement(domElement)) return FALLBACK_SCALE;
		return {
			x: domElement.offsetWidth > 0 ? round(rect.width) / domElement.offsetWidth || 1 : 1,
			y: domElement.offsetHeight > 0 ? round(rect.height) / domElement.offsetHeight || 1 : 1
		};
	}
	let x = rect.width / parseFloat(css.width);
	let y = rect.height / parseFloat(css.height);
	if (!x || !Number.isFinite(x)) x = 1;
	if (!y || !Number.isFinite(y)) y = 1;
	return {
		x,
		y
	};
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
	var _win$visualViewport$o, _win$visualViewport, _win$visualViewport$o2, _win$visualViewport2;
	if (includeScale === void 0) includeScale = false;
	if (isFixedStrategy === void 0) isFixedStrategy = false;
	const clientRect = element.getBoundingClientRect();
	let scale = FALLBACK_SCALE;
	if (includeScale) if (offsetParent) {
		if (isElement(offsetParent)) scale = getScale(offsetParent);
	} else scale = getScale(element);
	const win = isElement(element) ? getWindow(element) : window;
	const addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
	const x = (clientRect.left + (addVisualOffsets ? (_win$visualViewport$o = (_win$visualViewport = win.visualViewport) == null ? void 0 : _win$visualViewport.offsetLeft) != null ? _win$visualViewport$o : 0 : 0)) / scale.x;
	const y = (clientRect.top + (addVisualOffsets ? (_win$visualViewport$o2 = (_win$visualViewport2 = win.visualViewport) == null ? void 0 : _win$visualViewport2.offsetTop) != null ? _win$visualViewport$o2 : 0 : 0)) / scale.y;
	const width = clientRect.width / scale.x;
	const height = clientRect.height / scale.y;
	return {
		width,
		height,
		top: y,
		right: x + width,
		bottom: y + height,
		left: x,
		x,
		y
	};
}
function getDocumentElement(node) {
	return ((isNode(node) ? node.ownerDocument : node.document) || window.document).documentElement;
}
function getNodeScroll(element) {
	if (isElement(element)) return {
		scrollLeft: element.scrollLeft,
		scrollTop: element.scrollTop
	};
	return {
		scrollLeft: element.pageXOffset,
		scrollTop: element.pageYOffset
	};
}
function getWindowScrollBarX(element) {
	return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
	const isOffsetParentAnElement = isHTMLElement(offsetParent);
	const documentElement = getDocumentElement(offsetParent);
	const rect = getBoundingClientRect(element, true, strategy === "fixed", offsetParent);
	let scroll = {
		scrollLeft: 0,
		scrollTop: 0
	};
	const offsets = {
		x: 0,
		y: 0
	};
	if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
		if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) scroll = getNodeScroll(offsetParent);
		if (isHTMLElement(offsetParent)) {
			const offsetRect = getBoundingClientRect(offsetParent, true);
			offsets.x = offsetRect.x + offsetParent.clientLeft;
			offsets.y = offsetRect.y + offsetParent.clientTop;
		} else if (documentElement) offsets.x = getWindowScrollBarX(documentElement);
	}
	return {
		x: rect.left + scroll.scrollLeft - offsets.x,
		y: rect.top + scroll.scrollTop - offsets.y,
		width: rect.width,
		height: rect.height
	};
}
function getParentNode(node) {
	if (getNodeName(node) === "html") return node;
	const result = node.assignedSlot || node.parentNode || (isShadowRoot(node) ? node.host : null) || getDocumentElement(node);
	return isShadowRoot(result) ? result.host : result;
}
function getTrueOffsetParent(element) {
	if (!isHTMLElement(element) || getComputedStyle$1(element).position === "fixed") return null;
	return element.offsetParent;
}
function getContainingBlock(element) {
	let currentNode = getParentNode(element);
	while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) if (isContainingBlock(currentNode)) return currentNode;
	else currentNode = getParentNode(currentNode);
	return null;
}
function getOffsetParent(element) {
	const window2 = getWindow(element);
	let offsetParent = getTrueOffsetParent(element);
	while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === "static") offsetParent = getTrueOffsetParent(offsetParent);
	if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle$1(offsetParent).position === "static" && !isContainingBlock(offsetParent))) return window2;
	return offsetParent || getContainingBlock(element) || window2;
}
function getDimensions(element) {
	if (isHTMLElement(element)) return {
		width: element.offsetWidth,
		height: element.offsetHeight
	};
	const rect = getBoundingClientRect(element);
	return {
		width: rect.width,
		height: rect.height
	};
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
	let { rect, offsetParent, strategy } = _ref;
	const isOffsetParentAnElement = isHTMLElement(offsetParent);
	const documentElement = getDocumentElement(offsetParent);
	if (offsetParent === documentElement) return rect;
	let scroll = {
		scrollLeft: 0,
		scrollTop: 0
	};
	let scale = {
		x: 1,
		y: 1
	};
	const offsets = {
		x: 0,
		y: 0
	};
	if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
		if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) scroll = getNodeScroll(offsetParent);
		if (isHTMLElement(offsetParent)) {
			const offsetRect = getBoundingClientRect(offsetParent);
			scale = getScale(offsetParent);
			offsets.x = offsetRect.x + offsetParent.clientLeft;
			offsets.y = offsetRect.y + offsetParent.clientTop;
		}
	}
	return {
		width: rect.width * scale.x,
		height: rect.height * scale.y,
		x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
		y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
	};
}
function getViewportRect(element, strategy) {
	const win = getWindow(element);
	const html = getDocumentElement(element);
	const visualViewport = win.visualViewport;
	let width = html.clientWidth;
	let height = html.clientHeight;
	let x = 0;
	let y = 0;
	if (visualViewport) {
		width = visualViewport.width;
		height = visualViewport.height;
		const layoutViewport = isLayoutViewport();
		if (layoutViewport || !layoutViewport && strategy === "fixed") {
			x = visualViewport.offsetLeft;
			y = visualViewport.offsetTop;
		}
	}
	return {
		width,
		height,
		x,
		y
	};
}
function getDocumentRect(element) {
	var _element$ownerDocumen;
	const html = getDocumentElement(element);
	const scroll = getNodeScroll(element);
	const body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
	const width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
	const height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
	let x = -scroll.scrollLeft + getWindowScrollBarX(element);
	const y = -scroll.scrollTop;
	if (getComputedStyle$1(body || html).direction === "rtl") x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
	return {
		width,
		height,
		x,
		y
	};
}
function getNearestOverflowAncestor(node) {
	const parentNode = getParentNode(node);
	if (isLastTraversableNode(parentNode)) return node.ownerDocument.body;
	if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) return parentNode;
	return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list) {
	var _node$ownerDocument;
	if (list === void 0) list = [];
	const scrollableAncestor = getNearestOverflowAncestor(node);
	const isBody = scrollableAncestor === ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.body);
	const win = getWindow(scrollableAncestor);
	if (isBody) return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []);
	return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor));
}
function getInnerBoundingClientRect(element, strategy) {
	const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
	const top = clientRect.top + element.clientTop;
	const left = clientRect.left + element.clientLeft;
	const scale = isHTMLElement(element) ? getScale(element) : {
		x: 1,
		y: 1
	};
	const width = element.clientWidth * scale.x;
	const height = element.clientHeight * scale.y;
	const x = left * scale.x;
	const y = top * scale.y;
	return {
		top: y,
		left: x,
		right: x + width,
		bottom: y + height,
		x,
		y,
		width,
		height
	};
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
	if (clippingAncestor === "viewport") return rectToClientRect(getViewportRect(element, strategy));
	if (isElement(clippingAncestor)) return getInnerBoundingClientRect(clippingAncestor, strategy);
	return rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingElementAncestors(element, cache) {
	const cachedResult = cache.get(element);
	if (cachedResult) return cachedResult;
	let result = getOverflowAncestors(element).filter((el) => isElement(el) && getNodeName(el) !== "body");
	let currentContainingBlockComputedStyle = null;
	const elementIsFixed = getComputedStyle$1(element).position === "fixed";
	let currentNode = elementIsFixed ? getParentNode(element) : element;
	while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
		const computedStyle = getComputedStyle$1(currentNode);
		const containingBlock = isContainingBlock(currentNode);
		const shouldDropCurrentNode = elementIsFixed ? !containingBlock && !currentContainingBlockComputedStyle : !containingBlock && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position);
		if (shouldDropCurrentNode) result = result.filter((ancestor) => ancestor !== currentNode);
		else currentContainingBlockComputedStyle = computedStyle;
		currentNode = getParentNode(currentNode);
	}
	cache.set(element, result);
	return result;
}
function getClippingRect(_ref) {
	let { element, boundary, rootBoundary, strategy } = _ref;
	const elementClippingAncestors = boundary === "clippingAncestors" ? getClippingElementAncestors(element, this._c) : [].concat(boundary);
	const clippingAncestors = [...elementClippingAncestors, rootBoundary];
	const firstClippingAncestor = clippingAncestors[0];
	const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
		const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
		accRect.top = max(rect.top, accRect.top);
		accRect.right = min(rect.right, accRect.right);
		accRect.bottom = min(rect.bottom, accRect.bottom);
		accRect.left = max(rect.left, accRect.left);
		return accRect;
	}, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
	return {
		width: clippingRect.right - clippingRect.left,
		height: clippingRect.bottom - clippingRect.top,
		x: clippingRect.left,
		y: clippingRect.top
	};
}
const platform = {
	getClippingRect,
	convertOffsetParentRelativeRectToViewportRelativeRect,
	isElement,
	getDimensions,
	getOffsetParent,
	getDocumentElement,
	getScale,
	getElementRects(_ref) {
		return __async(this, null, function* () {
			let { reference, floating, strategy } = _ref;
			const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
			const getDimensionsFn = this.getDimensions;
			return {
				reference: getRectRelativeToOffsetParent(reference, yield getOffsetParentFn(floating), strategy),
				floating: __spreadValues({
					x: 0,
					y: 0
				}, yield getDimensionsFn(floating))
			};
		});
	},
	getClientRects: (element) => Array.from(element.getClientRects()),
	isRTL: (element) => getComputedStyle$1(element).direction === "rtl"
};
function autoUpdate(reference, floating, update, options) {
	if (options === void 0) options = {};
	const { ancestorScroll: _ancestorScroll = true, ancestorResize = true, elementResize = true, animationFrame = false } = options;
	const ancestorScroll = _ancestorScroll && !animationFrame;
	const ancestors = ancestorScroll || ancestorResize ? [...isElement(reference) ? getOverflowAncestors(reference) : reference.contextElement ? getOverflowAncestors(reference.contextElement) : [], ...getOverflowAncestors(floating)] : [];
	ancestors.forEach((ancestor) => {
		ancestorScroll && ancestor.addEventListener("scroll", update, { passive: true });
		ancestorResize && ancestor.addEventListener("resize", update);
	});
	let observer = null;
	if (elementResize) {
		let initialUpdate = true;
		observer = new ResizeObserver(() => {
			if (!initialUpdate) update();
			initialUpdate = false;
		});
		isElement(reference) && !animationFrame && observer.observe(reference);
		if (!isElement(reference) && reference.contextElement && !animationFrame) observer.observe(reference.contextElement);
		observer.observe(floating);
	}
	let frameId;
	let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
	if (animationFrame) frameLoop();
	function frameLoop() {
		const nextRefRect = getBoundingClientRect(reference);
		if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) update();
		prevRefRect = nextRefRect;
		frameId = requestAnimationFrame(frameLoop);
	}
	update();
	return () => {
		var _observer;
		ancestors.forEach((ancestor) => {
			ancestorScroll && ancestor.removeEventListener("scroll", update);
			ancestorResize && ancestor.removeEventListener("resize", update);
		});
		(_observer = observer) == null || _observer.disconnect();
		observer = null;
		if (animationFrame) cancelAnimationFrame(frameId);
	};
}
const computePosition = (reference, floating, options) => {
	const cache = /* @__PURE__ */ new Map();
	const mergedOptions = __spreadValues({ platform }, options);
	const platformWithCache = __spreadProps(__spreadValues({}, mergedOptions.platform), { _c: cache });
	return computePosition$1(reference, floating, __spreadProps(__spreadValues({}, mergedOptions), { platform: platformWithCache }));
};
function P(l2, u2, e2) {
	let c2 = () => {
		var t2;
		return (t2 = e2 == null ? void 0 : e2.placement) != null ? t2 : "bottom";
	}, d = () => {
		var t2;
		return (t2 = e2 == null ? void 0 : e2.strategy) != null ? t2 : "absolute";
	}, [n2, o2] = createSignal({
		x: null,
		y: null,
		placement: c2(),
		strategy: d(),
		middlewareData: {}
	}), [x, F] = createSignal();
	createEffect(() => {
		let t2 = x();
		if (t2) throw t2.value;
	});
	let s2 = createMemo(() => (l2(), u2(), {}));
	function i2() {
		let t2 = l2(), r = u2();
		if (t2 && r) {
			let a2 = s2();
			computePosition(t2, r, {
				middleware: e2 == null ? void 0 : e2.middleware,
				placement: c2(),
				strategy: d()
			}).then((m) => {
				a2 === s2() && o2(m);
			}, (m) => {
				F(m);
			});
		}
	}
	return createEffect(() => {
		let t2 = l2(), r = u2();
		if (e2?.middleware, c2(), d(), t2 && r) if (e2 != null && e2.whileElementsMounted) {
			let a2 = e2.whileElementsMounted(t2, r, i2);
			a2 && onCleanup(a2);
		} else i2();
	}), {
		get x() {
			return n2().x;
		},
		get y() {
			return n2().y;
		},
		get placement() {
			return n2().placement;
		},
		get strategy() {
			return n2().strategy;
		},
		get middlewareData() {
			return n2().middlewareData;
		},
		update: i2
	};
}
const _tmpl$$4 = /* @__PURE__ */ template$1(`<tc-root data-tc-dropdown-container="true"></tc-root>`);
const AccountButton = () => {
	const theme = useTheme();
	const connector = useContext(ConnectorContext);
	const tonConnectUI = useContext(TonConnectUiContext);
	const [isOpened, setIsOpened] = createSignal(false);
	const [account, setAccount] = createSignal(connector.account);
	const [restoringProcess, setRestoringProcess] = createSignal(!connector.account);
	let dropDownRef;
	const [floating, setFloating] = createSignal();
	const [anchor, setAnchor] = createSignal();
	const position = P(anchor, floating, {
		whileElementsMounted: autoUpdate,
		placement: "bottom-end"
	});
	const normalizedAddress = () => {
		const acc = account();
		if (acc) {
			const userFriendlyAddress = toUserFriendlyAddress(acc.address, acc.chain === CHAIN.TESTNET);
			return userFriendlyAddress.slice(0, 4) + "…" + userFriendlyAddress.slice(-4);
		}
		return "";
	};
	tonConnectUI.connectionRestored.then(() => setRestoringProcess(false));
	const unsubscribe = connector.onStatusChange((wallet) => {
		if (!wallet) {
			setIsOpened(false);
			setAccount(null);
			setRestoringProcess(false);
			return;
		}
		setAccount(wallet.account);
		setRestoringProcess(false);
	});
	const onClick = (e2) => {
		if (!account() || !isOpened()) return;
		const clickToButton = anchor().contains(e2.target);
		const clickToDropdown = dropDownRef.contains(e2.target);
		if (!clickToButton && !clickToDropdown) setIsOpened(false);
	};
	onMount(() => {
		document.body.addEventListener("click", onClick);
	});
	onCleanup(() => {
		document.body.removeEventListener("click", onClick);
		unsubscribe();
	});
	return createComponent(Dynamic, {
		component: globalStylesTag,
		get children() {
			return [createComponent(Show, {
				get when() {
					return restoringProcess();
				},
				get children() {
					return createComponent(LoaderButtonStyled$1, {
						disabled: true,
						"data-tc-connect-button-loading": "true",
						get children() {
							return createComponent(LoaderIconStyled$1, {});
						}
					});
				}
			}), createComponent(Show, {
				get when() {
					return !restoringProcess();
				},
				get children() {
					return [createComponent(Show, {
						get when() {
							return !account();
						},
						get children() {
							return createComponent(AccountButtonStyled, {
								onClick: () => tonConnectUI.openModal(),
								"data-tc-connect-button": "true",
								scale: "s",
								get children() {
									return [createComponent(TonIcon, { get fill() {
										return theme.colors.connectButton.foreground;
									} }), createComponent(Text, {
										translationKey: "button.connectWallet",
										fontSize: "15px",
										lineHeight: "18px",
										fontWeight: "590",
										get color() {
											return theme.colors.connectButton.foreground;
										},
										children: "Connect wallet"
									})];
								}
							});
						}
					}), createComponent(Show, {
						get when() {
							return account();
						},
						get children() {
							return createComponent(DropdownContainerStyled, { get children() {
								return [createComponent(DropdownButtonStyled, {
									onClick: () => setIsOpened((v) => !v),
									ref: setAnchor,
									"data-tc-dropdown-button": "true",
									scale: "s",
									get children() {
										return [createComponent(Text, {
											fontSize: "15px",
											fontWeight: "590",
											lineHeight: "18px",
											get children() {
												return normalizedAddress();
											}
										}), createComponent(ArrowIcon, { direction: "bottom" })];
									}
								}), createComponent(Portal, { get children() {
									const _el$ = untrack(() => document.importNode(_tmpl$$4, true));
									use(setFloating, _el$);
									_el$.style.setProperty("z-index", "999");
									_el$._$owner = getOwner();
									insert(_el$, createComponent(Transition, {
										onBeforeEnter: (el) => {
											animate(el, [{
												opacity: 0,
												transform: "translateY(-8px)"
											}, {
												opacity: 1,
												transform: "translateY(0)"
											}], { duration: 150 });
										},
										onExit: (el, done) => {
											const a2 = animate(el, [{
												opacity: 1,
												transform: "translateY(0)"
											}, {
												opacity: 0,
												transform: "translateY(-8px)"
											}], { duration: 150 });
											a2.finished.then(done);
										},
										get children() {
											return createComponent(Show, {
												get when() {
													return isOpened();
												},
												get children() {
													return createComponent(DropdownStyled, {
														get hidden() {
															return !isOpened();
														},
														onClose: () => setIsOpened(false),
														ref(r$) {
															const _ref$ = dropDownRef;
															typeof _ref$ === "function" ? _ref$(r$) : dropDownRef = r$;
														}
													});
												}
											});
										}
									}), null);
									insert(_el$, createComponent(NotificationsStyled, {}), null);
									createRenderEffect((_p$) => {
										var _a2, _b2;
										const _v$ = position.strategy, _v$2 = `${(_a2 = position.y) != null ? _a2 : 0}px`, _v$3 = `${(_b2 = position.x) != null ? _b2 : 0}px`;
										_v$ !== _p$._v$ && _el$.style.setProperty("position", _p$._v$ = _v$);
										_v$2 !== _p$._v$2 && _el$.style.setProperty("top", _p$._v$2 = _v$2);
										_v$3 !== _p$._v$3 && _el$.style.setProperty("left", _p$._v$3 = _v$3);
										return _p$;
									}, {
										_v$: void 0,
										_v$2: void 0,
										_v$3: void 0
									});
									return _el$;
								} })];
							} });
						}
					})];
				}
			})];
		}
	});
};
const StyledModal = styled(Modal)`
    padding-left: 24px;
    padding-right: 24px;
    padding-top: 18px;
    padding-bottom: 0;

    ${media("mobile")} {
        padding-left: 0;
        padding-right: 0;
    }
`;
const H1Styled$8 = styled(H1)`
    margin-top: 12px;

    ${media("mobile")} {
        padding: 0 10px;
    }
`;
const LoaderContainerStyled = styled.div`
    margin: 30px 0;
    width: 100%;
    display: flex;
    justify-content: center;

    ${media("mobile")} {
        height: 160px;
        align-items: center;
    }
`;
styled(Text)`
    min-width: 84px;
    text-align: center;
    font-weight: 590;
`;
styled(TabBar)`
    margin: 0 auto 22px;
`;
const [appState, setAppState] = createStore({
	buttonRootId: null,
	language: "en",
	returnStrategy: "back",
	twaReturnUrl: void 0,
	walletsListConfiguration: {},
	enableAndroidBackHandler: true
});
function uniq(array) {
	return [...new Set(array)];
}
function mergeConcat(idKey, array1, array2) {
	return array1.map((item1) => {
		const item2 = array2.find((elem) => elem[idKey] === item1[idKey]);
		array2 = array2.filter((elem) => elem[idKey] !== item1[idKey]);
		return item2 === void 0 ? item1 : item2;
	}).concat(array2);
}
function uiWalletToWalletInfo(uiWallet) {
	if ("jsBridgeKey" in uiWallet) return __spreadProps(__spreadValues({}, uiWallet), {
		injected: TonConnect.isWalletInjected(uiWallet.jsBridgeKey),
		embedded: TonConnect.isInsideWalletBrowser(uiWallet.jsBridgeKey)
	});
	return uiWallet;
}
function applyWalletsListConfiguration(walletsList, configuration) {
	var _a2;
	if (!configuration) return walletsList;
	if ((_a2 = configuration.includeWallets) == null ? void 0 : _a2.length) walletsList = mergeConcat("name", walletsList, configuration.includeWallets.map(uiWalletToWalletInfo));
	return walletsList;
}
function supportsDesktop(walletInfo) {
	return walletInfo.platforms.some((w) => [
		"macos",
		"linux",
		"windows"
	].includes(w));
}
function supportsMobile(walletInfo) {
	return walletInfo.platforms.some((w) => ["ios", "android"].includes(w));
}
function supportsExtension(walletInfo) {
	return walletInfo.platforms.some((w) => [
		"chrome",
		"firefox",
		"safari"
	].includes(w));
}
function eqWalletName(wallet1, name) {
	if (!name) return false;
	return wallet1.name.toLowerCase() === name.toLowerCase() || wallet1.appName.toLowerCase() === name.toLowerCase();
}
const DesktopSelectWalletModalStyled = styled.div`
    display: flex;
    flex-direction: column;
    align-items: center;
`;
const H1Styled$7 = styled(H1)`
    margin-bottom: 18px;
`;
styled.div`
    height: 1px;
    margin: 0 -24px;
    width: calc(100% + 48px);
    opacity: 0.12;
    background: ${(props) => props.isShown ? props.theme.colors.icon.secondary : "transparent"};
    transition: background 0.15s ease-in-out;

    ${media("mobile")} {
        width: 100%;
    }
`;
const WalletsUl = styled.ul`
    display: grid;
    grid-template-columns: repeat(auto-fit, 92px);
    grid-template-rows: auto;
    align-content: flex-start;
    row-gap: 8px;
    width: 100%;
    padding: 0 0 16px;
    align-self: flex-start;
    max-width: 400px;
    margin: 0 auto;
    list-style: none;

    > li {
        display: block;
        height: fit-content;
    }

    ${media("mobile")} {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 0;
        padding: 8px 12px 16px;
        max-width: none;

        > li {
            min-width: 78px;
            display: flex;
        }

        > li > * {
            width: 100%;
        }
    }
`;
styled(Button)`
    display: block;
    margin: 0 auto 1px;
    font-size: 15px;
`;
const StyledIconButton$3 = styled(IconButton)`
    position: absolute;
    top: 16px;
    left: 16px;
`;
const WalletLabeledItemStyled = styled(WalletLabeledItem)`
    opacity: ${(props) => props.withOpacity ? "0.4" : "1"};
`;
const WalletsNotSupportedNotifier = styled.div`
    display: grid;
    grid-template-columns: auto 28px;
    gap: 16px;
    padding: 16px;
    margin-bottom: 16px;
    border-radius: 16px;
    color: ${(props) => props.theme.colors.text.secondary};
    background: ${(props) => props.theme.colors.background.tint};

    ${media("mobile")} {
        margin-left: 16px;
        margin-right: 16px;
    }
`;
const WalletsNotSupportedNotifierText = styled(H2)`
    color: ${(props) => props.theme.colors.text.secondary};
    text-align: left;
    margin: 0;
`;
const ErrorBoxStyled = styled.div`
    position: absolute;
    bottom: 14px;
    left: 50%;
    transform: translate(-50%, 0);

    text-wrap: nowrap;
    display: flex;
    gap: 6px;
    align-items: center;
    border-radius: 18px;
    min-width: 126px;
    padding: 9px 16px 9px 10px;

    filter: drop-shadow(0px 2px 8px rgba(0, 0, 0, 0.08));
    background-color: ${(props) => props.theme.colors.background.segment};
`;
const _tmpl$$3 = /* @__PURE__ */ template$1(`<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg"><g clip-path="url(#clip0_5122_10355)"><circle cx="8" cy="8" r="8"></circle><circle cx="8" cy="11" r="1"></circle><path d="M7.04994 4.99875C7.02277 4.45542 7.45598 4 8 4C8.54402 4 8.97723 4.45541 8.95006 4.99875L8.78745 8.25094C8.76647 8.67055 8.42014 9 8 9C7.57986 9 7.23353 8.67055 7.21255 8.25094L7.04994 4.99875Z"></path></g><defs><clipPath id="clip0_5122_10355"><rect width="16" height="16"></rect></clipPath></defs></svg>`), _tmpl$2$1 = /* @__PURE__ */ template$1(`<svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 28 28" fill="none"><circle cx="14" cy="14" r="12"></circle><circle cx="14" cy="18.9" r="1.4"></circle><path d="M12.6658 8.89845C12.63 8.13698 13.2377 7.5 14 7.5C14.7623 7.5 15.37 8.13698 15.3342 8.89845L15.047 15.0013C15.0207 15.5604 14.5597 16.0002 14 16.0002C13.4403 16.0002 12.9793 15.5604 12.953 15.0013L12.6658 8.89845Z"></path></svg>`);
const ExclamationIcon = (props) => {
	const theme = useTheme();
	const size = () => props.size;
	const fill = () => props.fill || theme.colors.icon.error;
	return createMemo((() => {
		const _c$ = createMemo(() => size() === "16");
		return () => _c$() ? (() => {
			const _el$ = _tmpl$$3.cloneNode(true), _el$2 = _el$.firstChild, _el$3 = _el$2.firstChild, _el$4 = _el$3.nextSibling, _el$5 = _el$4.nextSibling, _el$6 = _el$2.nextSibling, _el$7 = _el$6.firstChild, _el$8 = _el$7.firstChild;
			createRenderEffect((_p$) => {
				const _v$ = fill(), _v$2 = theme.colors.constant.white, _v$3 = theme.colors.constant.white, _v$4 = theme.colors.constant.white;
				_v$ !== _p$._v$ && setAttribute(_el$3, "fill", _p$._v$ = _v$);
				_v$2 !== _p$._v$2 && setAttribute(_el$4, "fill", _p$._v$2 = _v$2);
				_v$3 !== _p$._v$3 && setAttribute(_el$5, "fill", _p$._v$3 = _v$3);
				_v$4 !== _p$._v$4 && setAttribute(_el$8, "fill", _p$._v$4 = _v$4);
				return _p$;
			}, {
				_v$: void 0,
				_v$2: void 0,
				_v$3: void 0,
				_v$4: void 0
			});
			return _el$;
		})() : (() => {
			const _c$2 = createMemo(() => size() === "28");
			return () => _c$2() ? (() => {
				const _el$9 = _tmpl$2$1.cloneNode(true), _el$10 = _el$9.firstChild, _el$11 = _el$10.nextSibling, _el$12 = _el$11.nextSibling;
				createRenderEffect((_p$) => {
					const _v$5 = props.class, _v$6 = fill(), _v$7 = theme.colors.constant.white, _v$8 = theme.colors.constant.white;
					_v$5 !== _p$._v$5 && setAttribute(_el$9, "class", _p$._v$5 = _v$5);
					_v$6 !== _p$._v$6 && setAttribute(_el$10, "fill", _p$._v$6 = _v$6);
					_v$7 !== _p$._v$7 && setAttribute(_el$11, "fill", _p$._v$7 = _v$7);
					_v$8 !== _p$._v$8 && setAttribute(_el$12, "fill", _p$._v$8 = _v$8);
					return _p$;
				}, {
					_v$5: void 0,
					_v$6: void 0,
					_v$7: void 0,
					_v$8: void 0
				});
				return _el$9;
			})() : null;
		})();
	})());
};
const _tmpl$$2 = /* @__PURE__ */ template$1(`<li></li>`);
const AllWalletsListModal = (props) => {
	const maxHeight = () => isMobile() ? void 0 : 510;
	const [errorSupportOpened, setErrorSupportOpened] = createSignal(null);
	let timeoutId = null;
	const onErrorClick = (wallet) => {
		setErrorSupportOpened(wallet);
		if (timeoutId != null) clearTimeout(timeoutId);
		timeoutId = setTimeout(() => setErrorSupportOpened(null), 1500);
	};
	const handleSelectWallet = (wallet) => {
		if (!wallet.isSupportRequiredFeatures) {
			onErrorClick(wallet);
			return;
		}
		props.onSelect(wallet);
	};
	const walletsList = () => isMobile() ? props.walletsList.filter(supportsMobile) : props.walletsList;
	const supportedWallets = () => walletsList().filter((wallet) => wallet.isSupportRequiredFeatures);
	const unsupportedWallets = () => walletsList().filter((wallet) => !wallet.isSupportRequiredFeatures);
	return createComponent(DesktopSelectWalletModalStyled, {
		"data-tc-wallets-modal-list": "true",
		get children() {
			return [
				createComponent(StyledIconButton$3, {
					icon: "arrow",
					onClick: () => props.onBack()
				}),
				createComponent(H1Styled$7, {
					translationKey: "walletModal.wallets",
					children: "Wallets"
				}),
				createComponent(ScrollContainer, {
					get maxHeight() {
						return maxHeight();
					},
					get children() {
						return [createComponent(WalletsUl, { get children() {
							return createComponent(For, {
								get each() {
									return supportedWallets();
								},
								children: (wallet) => (() => {
									const _el$ = _tmpl$$2.cloneNode(true);
									insert(_el$, createComponent(WalletLabeledItemStyled, {
										wallet,
										onClick: () => props.onSelect(wallet)
									}));
									return _el$;
								})()
							});
						} }), createComponent(Show, {
							get when() {
								return unsupportedWallets().length > 0;
							},
							get children() {
								return [
									createComponent(WalletsNotSupportedNotifier, { get children() {
										return [createComponent(WalletsNotSupportedNotifierText, {
											translationKey: "walletModal.allWallets.walletsBelowNotSupported",
											children: "The wallets below don’t support all features of the connected service. You can use your recovery phrase in one of the supported wallets above."
										}), createComponent(ExclamationIcon, { size: "28" })];
									} }),
									createComponent(WalletsUl, { get children() {
										return createComponent(For, {
											get each() {
												return unsupportedWallets();
											},
											children: (wallet) => (() => {
												const _el$2 = _tmpl$$2.cloneNode(true);
												insert(_el$2, createComponent(WalletLabeledItemStyled, {
													wallet,
													onClick: () => handleSelectWallet(wallet),
													withOpacity: true
												}));
												return _el$2;
											})()
										});
									} }),
									createComponent(Transition, {
										onBeforeEnter: (el) => {
											animate(el, [{
												opacity: 0,
												transform: "translate(-50%, 44px)"
											}, {
												opacity: 1,
												transform: "translate(-50%, 0)"
											}], {
												duration: 150,
												easing: "ease-out"
											});
										},
										onExit: (el, done) => {
											animate(el, [{
												opacity: 1,
												transform: "translate(-50%, 0)"
											}, {
												opacity: 0,
												transform: "translate(-50%, 44px)"
											}], {
												duration: 150,
												easing: "ease-out"
											}).finished.then(() => {
												done();
											});
										},
										get children() {
											return createComponent(Show, {
												get when() {
													return errorSupportOpened();
												},
												get children() {
													return createComponent(ErrorBoxStyled, { get children() {
														return [createComponent(ErrorIcon, { size: "xs" }), createComponent(Text, {
															translationKey: "walletModal.allWallets.walletNotSupportService",
															get translationValues() {
																return { name: errorSupportOpened().name };
															},
															get children() {
																return [createMemo(() => errorSupportOpened().name), " doesn’t support connected service"];
															}
														})];
													} });
												}
											});
										}
									})
								];
							}
						})];
					}
				})
			];
		}
	});
};
const tgButtonBorders = {
	m: "16px",
	s: "12px",
	none: "0"
};
const tgIconBorders = {
	m: "6px",
	s: "6px",
	none: "0"
};
const DesktopConnectionModalStyled = styled.div`
    display: flex;
    flex-direction: column;
`;
const BodyStyled$1 = styled.div`
    flex: 1;
    margin-top: ${(props) => props.qr ? "0" : "18px"};
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 232px;
`;
const QRCodeStyled$1 = styled(QRCode)`
    margin-bottom: 24px;
`;
const H1Styled$6 = styled(H1)`
    max-width: 288px;
    margin: 0 auto 2px;
`;
const H2Styled$4 = styled(H2)`
    max-width: 288px;
    text-align: center;
    margin: 0 auto 20px;
`;
const StyledIconButton$2 = styled(IconButton)`
    position: absolute;
    top: 16px;
    left: 16px;
`;
const ButtonsContainerStyled$1 = styled.div`
    display: flex;
    justify-content: center;
    gap: 8px;
    padding-bottom: 16px;
`;
const BottomButtonsContainerStyled = styled(ButtonsContainerStyled$1)`
    padding-bottom: 0;
`;
const FooterButton$1 = styled(Button)`
    margin-bottom: 24px;
`;
const LoaderStyled$1 = styled(LoaderIcon)`
    margin-bottom: 18px;
    margin-top: 2px;
`;
const ErrorIconStyled$1 = styled(ErrorIcon)`
    margin-bottom: 16px;
`;
const BodyTextStyled$1 = styled(H2)`
    color: ${(props) => props.theme.colors.text.secondary};
    text-align: center;
    margin-bottom: 20px;
`;
const TgButtonStyled = styled(Button)`
    margin-top: -8px;
    margin-bottom: 24px;
    width: 100%;
    padding: 12px 12px 12px 20px;
    border-radius: ${(props) => tgButtonBorders[props.theme.borderRadius]};
    font-size: 16px;
    line-height: 20px;
`;
const TgImageStyled = styled(Image)`
    width: 32px;
    height: 32px;
    border-radius: ${(props) => tgIconBorders[props.theme.borderRadius]};
`;
const Translation = (props) => {
	const [t2] = useI18n();
	return createMemo(() => {
		var _a2;
		return t2(props.translationKey, props.translationValues, (_a2 = props.children) == null ? void 0 : _a2.toString());
	});
};
function addReturnStrategy(url, strategy) {
	let returnStrategy;
	if (typeof strategy === "string") returnStrategy = strategy;
	else returnStrategy = isInTMA() ? strategy.twaReturnUrl || strategy.returnStrategy : "none";
	const newUrl = addQueryParameter(url, "ret", returnStrategy);
	if (!isTelegramUrl(url)) return newUrl;
	const lastParam = newUrl.slice(newUrl.lastIndexOf("&") + 1);
	return newUrl.slice(0, newUrl.lastIndexOf("&")) + "-" + encodeTelegramUrlParameters(lastParam);
}
function redirectToTelegram(universalLink, options) {
	options = __spreadValues({}, options);
	const directLink = convertToTGDirectLink(universalLink);
	const directLinkUrl = new URL(directLink);
	if (!directLinkUrl.searchParams.has("startapp")) directLinkUrl.searchParams.append("startapp", "tonconnect");
	if (isInTelegramBrowser()) {
		options.returnStrategy = "back";
		const linkWitStrategy = addReturnStrategy(directLinkUrl.toString(), options.returnStrategy);
		openLinkBlank(linkWitStrategy);
	} else if (isInTMA()) if (isTmaPlatform("ios", "android", "macos", "tdesktop", "web")) {
		options.returnStrategy = "back";
		const linkWitStrategy = addReturnStrategy(directLinkUrl.toString(), options.returnStrategy);
		sendOpenTelegramLink(linkWitStrategy);
	} else if (isTmaPlatform("weba")) sendOpenTelegramLink(addReturnStrategy(directLinkUrl.toString(), options));
	else openLinkBlank(addReturnStrategy(directLinkUrl.toString(), options));
	else if (isOS("ios")) {
		if (options.returnStrategy === "back") if (isBrowser("safari")) options.returnStrategy = "back";
		else if (isBrowser("chrome")) options.returnStrategy = "googlechrome://";
		else if (isBrowser("firefox")) options.returnStrategy = "firefox://";
		else if (isBrowser("opera")) options.returnStrategy = "opera-http://";
		else options.returnStrategy = location.href;
		const isChrome = isBrowser("chrome");
		const isFirefox = isBrowser("firefox");
		const useDeepLink = (isChrome || isFirefox) && !options.forceRedirect;
		if (useDeepLink) {
			const linkWithStrategy = addReturnStrategy(directLinkUrl.toString(), options.returnStrategy);
			const deepLink = convertToTGDeepLink(linkWithStrategy);
			openDeeplinkWithFallback(deepLink, () => openLinkBlank(linkWithStrategy));
		} else {
			const linkWithStrategy = addReturnStrategy(directLinkUrl.toString(), options.returnStrategy);
			openLinkBlank(linkWithStrategy);
		}
	} else if (isOS("android")) {
		options.returnStrategy = "back";
		const isChrome = isBrowser("chrome");
		const isFirefox = isBrowser("firefox");
		const useDeepLink = (isChrome || isFirefox) && !options.forceRedirect;
		if (useDeepLink) {
			const linkWithStrategy = addReturnStrategy(directLinkUrl.toString(), options.returnStrategy);
			const deepLink = convertToTGDeepLink(linkWithStrategy);
			openDeeplinkWithFallback(deepLink, () => openLinkBlank(linkWithStrategy));
		} else {
			const linkWithStrategy = addReturnStrategy(directLinkUrl.toString(), options.returnStrategy);
			openLinkBlank(linkWithStrategy);
		}
	} else if (isOS("ipad")) {
		if (options.returnStrategy === "back") if (isBrowser("safari")) options.returnStrategy = "back";
		else if (isBrowser("chrome")) options.returnStrategy = "googlechrome://";
		else if (isBrowser("firefox")) options.returnStrategy = "firefox://";
		else if (isBrowser("opera")) options.returnStrategy = "opera-http://";
		else options.returnStrategy = location.href;
		const isChrome = isBrowser("chrome");
		const isFirefox = isBrowser("firefox");
		const useDeepLink = (isChrome || isFirefox) && !options.forceRedirect;
		const linkWithStrategy = addReturnStrategy(directLinkUrl.toString(), options.returnStrategy);
		if (useDeepLink) {
			const deepLink = convertToTGDeepLink(linkWithStrategy);
			openDeeplinkWithFallback(deepLink, () => openLinkBlank(linkWithStrategy));
		} else openLinkBlank(linkWithStrategy);
	} else if (isOS("macos", "windows", "linux")) {
		options.returnStrategy = "back";
		options.twaReturnUrl = void 0;
		const linkWithStrategy = addReturnStrategy(directLinkUrl.toString(), options.returnStrategy);
		if (options.forceRedirect) openLinkBlank(linkWithStrategy);
		else {
			const deepLink = convertToTGDeepLink(linkWithStrategy);
			openDeeplinkWithFallback(deepLink, () => openLinkBlank(linkWithStrategy));
		}
	} else openLinkBlank(addReturnStrategy(directLinkUrl.toString(), options));
}
function redirectToWallet(universalLink, deepLink, options, setOpenMethod) {
	options = __spreadValues({}, options);
	if (isInTelegramBrowser()) if (isOS("ios", "android")) {
		if (options.returnStrategy === "back") options.returnStrategy = "tg://resolve";
		setOpenMethod("universal-link");
		openLink(addReturnStrategy(universalLink, options.returnStrategy), "_self");
	} else {
		setOpenMethod("universal-link");
		const linkWitStrategy = addReturnStrategy(universalLink, options.returnStrategy);
		openLinkBlank(linkWitStrategy);
	}
	else if (isInTMA()) if (isTmaPlatform("ios", "android")) {
		if (options.returnStrategy === "back") options.returnStrategy = "tg://resolve";
		setOpenMethod("universal-link");
		const linkWitStrategy = addReturnStrategy(universalLink, options.returnStrategy);
		sendOpenTelegramLink(linkWitStrategy, () => {
			setOpenMethod("universal-link");
			openLinkBlank(linkWitStrategy);
		});
	} else if (isTmaPlatform("macos", "tdesktop")) {
		if (options.returnStrategy === "back") options.returnStrategy = "tg://resolve";
		const linkWitStrategy = addReturnStrategy(universalLink, options.returnStrategy);
		const useDeepLink = !!deepLink && !options.forceRedirect;
		if (useDeepLink) {
			setOpenMethod("custom-deeplink");
			openDeeplinkWithFallback(toDeeplink(linkWitStrategy, deepLink), () => {
				setOpenMethod("universal-link");
				openLinkBlank(linkWitStrategy);
			});
		} else {
			setOpenMethod("universal-link");
			openLinkBlank(linkWitStrategy);
		}
	} else if (isTmaPlatform("weba")) {
		if (options.returnStrategy === "back") if (isBrowser("safari")) options.returnStrategy = location.href;
		else if (isBrowser("chrome")) options.returnStrategy = "googlechrome://";
		else if (isBrowser("firefox")) options.returnStrategy = "firefox://";
		else if (isBrowser("opera")) options.returnStrategy = "opera-http://";
		else options.returnStrategy = location.href;
		const linkWitStrategy = addReturnStrategy(universalLink, options.returnStrategy);
		const useDeepLink = !!deepLink && !options.forceRedirect;
		if (useDeepLink) {
			setOpenMethod("custom-deeplink");
			openDeeplinkWithFallback(toDeeplink(linkWitStrategy, deepLink), () => {
				setOpenMethod("universal-link");
				openLinkBlank(linkWitStrategy);
			});
		} else {
			setOpenMethod("universal-link");
			openLinkBlank(linkWitStrategy);
		}
	} else if (isTmaPlatform("web")) {
		if (options.returnStrategy === "back") if (isBrowser("safari")) options.returnStrategy = location.href;
		else if (isBrowser("chrome")) options.returnStrategy = "googlechrome://";
		else if (isBrowser("firefox")) options.returnStrategy = "firefox://";
		else if (isBrowser("opera")) options.returnStrategy = "opera-http://";
		else options.returnStrategy = location.href;
		const linkWitStrategy = addReturnStrategy(universalLink, options.returnStrategy);
		const useDeepLink = !!deepLink && !options.forceRedirect;
		if (useDeepLink) {
			setOpenMethod("custom-deeplink");
			openDeeplinkWithFallback(toDeeplink(linkWitStrategy, deepLink), () => {
				setOpenMethod("universal-link");
				openLinkBlank(linkWitStrategy);
			});
		} else {
			setOpenMethod("universal-link");
			openLinkBlank(linkWitStrategy);
		}
	} else {
		setOpenMethod("universal-link");
		const linkWitStrategy = addReturnStrategy(universalLink, options.returnStrategy);
		openLinkBlank(linkWitStrategy);
	}
	else if (isOS("ios")) {
		if (options.returnStrategy === "back") if (isBrowser("safari")) options.returnStrategy = "none";
		else if (isBrowser("chrome")) options.returnStrategy = "googlechrome://";
		else if (isBrowser("firefox")) options.returnStrategy = "firefox://";
		else if (isBrowser("opera")) options.returnStrategy = "opera-http://";
		else options.returnStrategy = location.href;
		if (isBrowser("chrome")) {
			setOpenMethod("universal-link");
			openLink(addReturnStrategy(universalLink, options.returnStrategy), "_self");
		} else {
			setOpenMethod("universal-link");
			openLinkBlank(addReturnStrategy(universalLink, options.returnStrategy));
		}
	} else if (isOS("android")) {
		if (options.returnStrategy === "back") if (isBrowser("chrome")) options.returnStrategy = "googlechrome://";
		else if (isBrowser("firefox")) options.returnStrategy = "firefox://";
		else if (isBrowser("opera")) options.returnStrategy = "opera-http://";
		else options.returnStrategy = location.href;
		setOpenMethod("universal-link");
		openLinkBlank(addReturnStrategy(universalLink, options.returnStrategy));
	} else if (isOS("ipad")) {
		if (options.returnStrategy === "back") if (isBrowser("safari")) options.returnStrategy = "none";
		else if (isBrowser("chrome")) options.returnStrategy = "googlechrome://";
		else if (isBrowser("firefox")) options.returnStrategy = "firefox://";
		else if (isBrowser("opera")) options.returnStrategy = "opera-http://";
		else options.returnStrategy = location.href;
		if (isBrowser("chrome")) {
			setOpenMethod("universal-link");
			openLink(addReturnStrategy(universalLink, options.returnStrategy), "_self");
		} else {
			setOpenMethod("universal-link");
			openLinkBlank(addReturnStrategy(universalLink, options.returnStrategy));
		}
	} else if (isOS("macos", "windows", "linux")) {
		if (options.returnStrategy === "back") if (isBrowser("safari")) options.returnStrategy = "none";
		else if (isBrowser("chrome")) options.returnStrategy = "googlechrome://";
		else if (isBrowser("firefox")) options.returnStrategy = "firefox://";
		else if (isBrowser("opera")) options.returnStrategy = "opera-http://";
		else options.returnStrategy = "none";
		const linkWitStrategy = addReturnStrategy(universalLink, options.returnStrategy);
		const useDeepLink = !!deepLink && !options.forceRedirect;
		if (useDeepLink) {
			setOpenMethod("custom-deeplink");
			openDeeplinkWithFallback(toDeeplink(linkWitStrategy, deepLink), () => {
				setOpenMethod("universal-link");
				openLinkBlank(linkWitStrategy);
			});
		} else {
			setOpenMethod("universal-link");
			openLinkBlank(linkWitStrategy);
		}
	} else {
		setOpenMethod("universal-link");
		openLinkBlank(addReturnStrategy(universalLink, options.returnStrategy));
	}
}
function addQueryParameter(url, key, value) {
	const parsed = new URL(url);
	parsed.searchParams.append(key, value);
	return parsed.toString();
}
function convertToTGDirectLink(universalLink) {
	const url = new URL(universalLink);
	if (url.searchParams.has("attach")) {
		url.searchParams.delete("attach");
		url.pathname += "/start";
	}
	return url.toString();
}
function convertToTGDeepLink(directLink) {
	const parsed = new URL(directLink);
	const [, domain, appname] = parsed.pathname.split("/");
	const startapp = parsed.searchParams.get("startapp");
	return `tg://resolve?domain=${domain}&appname=${appname}&startapp=${startapp}`;
}
const DesktopConnectionModal = (props) => {
	const [mode, setMode] = createSignal("mobile");
	const [connectionErrored, setConnectionErrored] = createSignal(null);
	createEffect(() => {
		var _a2;
		setConnectionErrored((_a2 = props.defaultError) != null ? _a2 : null);
	});
	const [universalLink, setUniversalLink] = createSignal();
	const [firstClick, setFirstClick] = createSignal(true);
	const connector = useContext(ConnectorContext);
	const unsubscribe = connector.onStatusChange(() => {}, (error) => {
		if (error instanceof WalletMissingRequiredFeaturesError) {
			setConnectionErrored("missing-features");
			return;
		}
		if (props.wallet.appName !== AT_WALLET_APP_NAME) setConnectionErrored("connection-declined");
	});
	onCleanup(unsubscribe);
	const generateUniversalLink = () => {
		try {
			const universalLink2 = connector.connect({
				universalLink: props.wallet.universalLink,
				bridgeUrl: props.wallet.bridgeUrl
			}, props.additionalRequest);
			setUniversalLink(universalLink2);
		} catch (e2) {}
	};
	createEffect(() => {
		if (untrack(mode) !== "extension" && (supportsMobile(props.wallet) || supportsDesktop(props.wallet))) generateUniversalLink();
	});
	const onClickMobile = () => {
		setConnectionErrored(null);
		if (mode() === "extension") generateUniversalLink();
		setMode("mobile");
		setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), { openMethod: "qrcode" }));
	};
	const onClickDesktop = () => {
		setConnectionErrored(null);
		if (mode() === "extension") generateUniversalLink();
		setMode("desktop");
		if (isTelegramUrl(universalLink())) onClickTelegram();
		else {
			const forceRedirect = !firstClick();
			setFirstClick(false);
			redirectToWallet(universalLink(), props.wallet.deepLink, {
				returnStrategy: appState.returnStrategy,
				forceRedirect
			}, (method) => {
				setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), { openMethod: method }));
			});
		}
	};
	const onClickTelegram = () => {
		const forceRedirect = !firstClick();
		setFirstClick(false);
		setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), { openMethod: "universal-link" }));
		redirectToTelegram(universalLink(), {
			returnStrategy: appState.returnStrategy,
			twaReturnUrl: appState.twaReturnUrl,
			forceRedirect
		});
	};
	const onClickExtension = () => {
		setConnectionErrored(null);
		setMode("extension");
		if (isWalletInfoCurrentlyInjected(props.wallet)) {
			setLastSelectedWalletInfo(props.wallet);
			connector.connect({ jsBridgeKey: props.wallet.jsBridgeKey }, props.additionalRequest);
		}
	};
	if (supportsMobile(props.wallet)) onClickMobile();
	else if (supportsExtension(props.wallet)) onClickExtension();
	else onClickDesktop();
	return createComponent(DesktopConnectionModalStyled, {
		"data-tc-wallets-modal-connection-desktop": "true",
		get children() {
			return [
				createComponent(Show, {
					get when() {
						return !props.backDisabled;
					},
					get children() {
						return createComponent(StyledIconButton$2, {
							icon: "arrow",
							onClick: () => props.onBackClick()
						});
					}
				}),
				createComponent(H1Styled$6, { get children() {
					return props.wallet.name;
				} }),
				createComponent(Show, {
					get when() {
						return createMemo(() => mode() === "mobile")() && !connectionErrored();
					},
					get children() {
						return createComponent(H2Styled$4, {
							translationKey: "walletModal.desktopConnectionModal.scanQR",
							get translationValues() {
								return { name: props.wallet.name };
							},
							get children() {
								return [
									"Scan the QR code below with your phone’s or ",
									createMemo(() => props.wallet.name),
									"’s camera"
								];
							}
						});
					}
				}),
				createComponent(BodyStyled$1, {
					get qr() {
						return mode() === "mobile";
					},
					get children() {
						return createComponent(Switch, { get children() {
							return [
								createComponent(Match, {
									get when() {
										return connectionErrored();
									},
									get children() {
										return [
											createComponent(ErrorIconStyled$1, { size: "s" }),
											createComponent(Switch, { get children() {
												return [
													createComponent(Match, {
														get when() {
															return connectionErrored() === "missing-features";
														},
														get children() {
															return createComponent(BodyTextStyled$1, {
																translationKey: "walletModal.desktopConnectionModal.missingFeatures",
																get translationValues() {
																	return { name: props.wallet.name };
																},
																children: "Please update Wallet, your version does not support required features for this dApp"
															});
														}
													}),
													createComponent(Match, {
														get when() {
															return connectionErrored() === "connection-declined";
														},
														get children() {
															return createComponent(BodyTextStyled$1, {
																translationKey: "walletModal.desktopConnectionModal.connectionDeclined",
																children: "Connection declined"
															});
														}
													}),
													createComponent(Match, {
														get when() {
															return connectionErrored() === "not-supported";
														},
														get children() {
															return createComponent(BodyTextStyled$1, {
																translationKey: "walletModal.desktopConnectionModal.notSupportedWallet",
																get translationValues() {
																	return { name: props.wallet.name };
																},
																get children() {
																	return [createMemo(() => props.wallet.name), " doesn’t support the requested action. Please connect another wallet that supports it."];
																}
															});
														}
													})
												];
											} }),
											createComponent(ButtonsContainerStyled$1, { get children() {
												return [
													createComponent(Show, {
														get when() {
															return connectionErrored() !== "not-supported";
														},
														get children() {
															return createComponent(Button, {
																get leftIcon() {
																	return createComponent(RetryIcon, {});
																},
																get onClick() {
																	return mode() === "extension" ? onClickExtension : onClickDesktop;
																},
																get children() {
																	return createComponent(Translation, {
																		translationKey: "common.retry",
																		children: "Retry"
																	});
																}
															});
														}
													}),
													createComponent(Show, {
														get when() {
															return connectionErrored() === "missing-features";
														},
														get children() {
															return createComponent(Link, {
																get href() {
																	return props.wallet.aboutUrl;
																},
																blank: true,
																get children() {
																	return createComponent(Button, {
																		get leftIcon() {
																			return createComponent(LinkIcon, {});
																		},
																		get children() {
																			return createComponent(Translation, {
																				translationKey: "walletModal.desktopConnectionModal.updateWallet",
																				get translationValues() {
																					return { name: props.wallet.name };
																				},
																				get children() {
																					return ["Update ", createMemo(() => props.wallet.name)];
																				}
																			});
																		}
																	});
																}
															});
														}
													}),
													createComponent(Show, {
														get when() {
															return connectionErrored() === "not-supported";
														},
														get children() {
															return createComponent(Button, {
																onClick: () => props.onBackClick(),
																get children() {
																	return createComponent(Translation, {
																		translationKey: "walletModal.desktopConnectionModal.chooseAnotherWallet",
																		children: "Choose Another Wallet"
																	});
																}
															});
														}
													})
												];
											} })
										];
									}
								}),
								createComponent(Match, {
									get when() {
										return mode() === "mobile";
									},
									get children() {
										return createComponent(QRCodeStyled$1, {
											disableCopy: false,
											get sourceUrl() {
												return addReturnStrategy(universalLink(), "none");
											},
											get imageUrl() {
												return props.wallet.imageUrl;
											}
										});
									}
								}),
								createComponent(Match, {
									get when() {
										return mode() === "extension";
									},
									get children() {
										return [createComponent(Show, {
											get when() {
												return isWalletInfoCurrentlyInjected(props.wallet);
											},
											get children() {
												return [
													createComponent(LoaderStyled$1, { size: "s" }),
													createComponent(BodyTextStyled$1, {
														translationKey: "walletModal.desktopConnectionModal.continueInExtension",
														get translationValues() {
															return { name: props.wallet.name };
														},
														get children() {
															return [
																"Continue in ",
																createMemo(() => props.wallet.name),
																" browser extension…"
															];
														}
													}),
													createComponent(ButtonsContainerStyled$1, { get children() {
														return createComponent(Button, {
															get leftIcon() {
																return createComponent(RetryIcon, {});
															},
															onClick: onClickExtension,
															get children() {
																return createComponent(Translation, {
																	translationKey: "common.retry",
																	children: "Retry"
																});
															}
														});
													} })
												];
											}
										}), createComponent(Show, {
											get when() {
												return !isWalletInfoCurrentlyInjected(props.wallet);
											},
											get children() {
												return [createComponent(BodyTextStyled$1, {
													translationKey: "walletModal.desktopConnectionModal.dontHaveExtension",
													get translationValues() {
														return { name: props.wallet.name };
													},
													get children() {
														return [
															"Seems you don't have installed ",
															createMemo(() => props.wallet.name),
															" browser extension"
														];
													}
												}), createComponent(ButtonsContainerStyled$1, { get children() {
													return createComponent(Link, {
														get href() {
															return props.wallet.aboutUrl;
														},
														blank: true,
														get children() {
															return createComponent(Button, {
																get rightIcon() {
																	return createComponent(LinkIcon, {});
																},
																onClick: onClickExtension,
																get children() {
																	return createComponent(Translation, {
																		translationKey: "walletModal.desktopConnectionModal.getWallet",
																		get translationValues() {
																			return { name: props.wallet.name };
																		},
																		get children() {
																			return ["Get ", createMemo(() => props.wallet.name)];
																		}
																	});
																}
															});
														}
													});
												} })];
											}
										})];
									}
								}),
								createComponent(Match, {
									get when() {
										return mode() === "desktop";
									},
									get children() {
										return [
											createComponent(LoaderIcon, { size: "m" }),
											createComponent(BodyTextStyled$1, {
												translationKey: "walletModal.desktopConnectionModal.continueOnDesktop",
												get translationValues() {
													return { name: props.wallet.name };
												},
												get children() {
													return [
														"Continue in ",
														createMemo(() => props.wallet.name),
														" on desktop…"
													];
												}
											}),
											createComponent(ButtonsContainerStyled$1, { get children() {
												return [createComponent(Button, {
													get leftIcon() {
														return createComponent(RetryIcon, {});
													},
													onClick: onClickDesktop,
													get children() {
														return createComponent(Translation, {
															translationKey: "common.retry",
															children: "Retry"
														});
													}
												}), createComponent(Link, {
													get href() {
														return props.wallet.aboutUrl;
													},
													blank: true,
													get children() {
														return createComponent(Button, {
															get rightIcon() {
																return createComponent(LinkIcon, {});
															},
															get children() {
																return createComponent(Translation, {
																	translationKey: "walletModal.desktopConnectionModal.getWallet",
																	get translationValues() {
																		return { name: props.wallet.name };
																	},
																	get children() {
																		return ["Get ", createMemo(() => props.wallet.name)];
																	}
																});
															}
														});
													}
												})];
											} })
										];
									}
								})
							];
						} });
					}
				}),
				createComponent(Show, {
					get when() {
						return props.wallet.appName === AT_WALLET_APP_NAME;
					},
					get children() {
						return createComponent(TgButtonStyled, {
							get rightIcon() {
								return createComponent(TgImageStyled, { get src() {
									return IMG.TG;
								} });
							},
							scale: "s",
							onClick: onClickTelegram,
							get children() {
								return createComponent(Translation, {
									translationKey: "walletModal.desktopConnectionModal.openWalletOnTelegram",
									children: "Open Wallet in Telegram on desktop"
								});
							}
						});
					}
				}),
				createComponent(Show, {
					get when() {
						return props.wallet.appName !== AT_WALLET_APP_NAME;
					},
					get children() {
						return createComponent(BottomButtonsContainerStyled, { get children() {
							return [
								createComponent(Show, {
									get when() {
										return createMemo(() => mode() !== "mobile")() && supportsMobile(props.wallet);
									},
									get children() {
										return createComponent(FooterButton$1, {
											appearance: "secondary",
											get leftIcon() {
												return createComponent(MobileIcon, {});
											},
											onClick: onClickMobile,
											get children() {
												return createComponent(Translation, {
													translationKey: "common.mobile",
													children: "Mobile"
												});
											}
										});
									}
								}),
								createComponent(Show, {
									get when() {
										return createMemo(() => mode() !== "extension")() && supportsExtension(props.wallet);
									},
									get children() {
										return createComponent(FooterButton$1, {
											appearance: "secondary",
											get leftIcon() {
												return createComponent(BrowserIcon, {});
											},
											onClick: onClickExtension,
											get children() {
												return createComponent(Translation, {
													translationKey: "common.browserExtension",
													children: "Browser Extension"
												});
											}
										});
									}
								}),
								createComponent(Show, {
									get when() {
										return createMemo(() => mode() !== "desktop")() && supportsDesktop(props.wallet);
									},
									get children() {
										return createComponent(FooterButton$1, {
											appearance: "secondary",
											get leftIcon() {
												return createComponent(DesktopIcon, {});
											},
											onClick: onClickDesktop,
											get children() {
												return createComponent(Translation, {
													translationKey: "common.desktop",
													children: "Desktop"
												});
											}
										});
									}
								})
							];
						} });
					}
				})
			];
		}
	});
};
const InfoModalStyled = styled.div``;
const StyledIconButton$1 = styled(IconButton)`
    position: absolute;
    top: 16px;
    left: 16px;
`;
const H1Styled$5 = styled(H1)`
    margin-bottom: 18px;
`;
const InfoBlock = styled.div`
    padding: 16px 0;
    display: flex;
    flex-direction: column;
    align-items: center;
`;
const InfoBlockIconClass = u`
    margin-bottom: 12px;
`;
const H3Styled = styled(H3)`
    text-align: center;
    margin-bottom: 4px;
`;
const TextStyled$1 = styled(Text)`
    text-align: center;
    max-width: 352px;
    color: ${(props) => props.theme.colors.text.secondary};
`;
const ButtonsBlock = styled.div`
    padding: 16px 24px 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
`;
const LINKS = { GET_A_WALLET: "https://ton.org/wallets?filters[wallet_features][slug][$in]=dapp-auth&pagination[limit]=-1" };
const InfoModal = (props) => {
	return createComponent(InfoModalStyled, {
		"data-tc-wallets-modal-info": "true",
		get children() {
			return [
				createComponent(StyledIconButton$1, {
					icon: "arrow",
					onClick: () => props.onBackClick()
				}),
				createComponent(H1Styled$5, {
					translationKey: "walletModal.infoModal.whatIsAWallet",
					children: "What is a wallet"
				}),
				createComponent(ScrollContainer, { get children() {
					return [
						createComponent(InfoBlock, { get children() {
							return [
								createComponent(SecurityIcon, { "class": InfoBlockIconClass }),
								createComponent(H3Styled, {
									translationKey: "walletModal.infoModal.secureDigitalAssets",
									children: "Secure digital assets storage"
								}),
								createComponent(TextStyled$1, {
									translationKey: "walletModal.infoModal.walletProtects",
									children: "A wallet protects and manages your digital assets including TON, tokens and collectables."
								})
							];
						} }),
						createComponent(InfoBlock, { get children() {
							return [
								createComponent(PersonalityIcon, { "class": InfoBlockIconClass }),
								createComponent(H3Styled, {
									translationKey: "walletModal.infoModal.controlIdentity",
									children: "Control your Web3 identity"
								}),
								createComponent(TextStyled$1, {
									translationKey: "walletModal.infoModal.manageIdentity",
									children: "Manage your digital identity and access decentralized applications with ease. Maintain control over your data and engage securely in the blockchain ecosystem."
								})
							];
						} }),
						createComponent(InfoBlock, { get children() {
							return [
								createComponent(SwapIcon, { "class": InfoBlockIconClass }),
								createComponent(H3Styled, {
									translationKey: "walletModal.infoModal.effortlessCryptoTransactions",
									children: "Effortless crypto transactions"
								}),
								createComponent(TextStyled$1, {
									translationKey: "walletModal.infoModal.easilySend",
									children: "Easily send, receive, monitor your cryptocurrencies. Streamline your operations with decentralized applications."
								})
							];
						} }),
						createComponent(ButtonsBlock, { get children() {
							return createComponent(Link, {
								get href() {
									return LINKS.GET_A_WALLET;
								},
								blank: true,
								get children() {
									return createComponent(Button, {
										get rightIcon() {
											return createComponent(WalletIcon, {});
										},
										get children() {
											return createComponent(Translation, {
												translationKey: "walletModal.infoModal.getAWallet",
												children: "Get a Wallet"
											});
										}
									});
								}
							});
						} })
					];
				} })
			];
		}
	});
};
const MobileConnectionModalStyled = styled.div``;
const BodyStyled = styled.div`
    flex: 1;
    margin-top: 18px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 232px;
`;
const H1Styled$4 = styled(H1)`
    max-width: 262px;
    margin: 0 auto 8px;
`;
const StyledIconButton = styled(IconButton)`
    position: absolute;
    top: 16px;
    left: 16px;
`;
const FooterStyled = styled.div`
    padding: 16px;
    display: flex;
    align-items: center;
    gap: 12px;
    border-top: 0.5px solid ${(props) => rgba(props.theme.colors.icon.secondary, .2)};
`;
const ImageStyled = styled(Image)`
    width: 36px;
    height: 36px;
    border-radius: 10px;
`;
const FooterButton = styled(Link)`
    margin-left: auto;
`;
const LoaderStyled = styled(LoaderIcon)`
    margin-bottom: 18px;
    margin-top: 2px;
`;
const ErrorIconStyled = styled(ErrorIcon)`
    margin-bottom: 16px;
`;
const BodyTextStyled = styled(H2)`
    color: ${(props) => props.theme.colors.text.secondary};
    text-align: center;
    margin-bottom: 20px;
`;
const ButtonsContainerStyled = styled.div`
    display: flex;
    justify-content: center;
    gap: 8px;
    padding-bottom: 16px;
`;
const actionButtonBorderRadius$1 = {
	m: "16px",
	s: "8px",
	none: "0"
};
const H1Styled$3 = styled(H1)`
    margin-bottom: 2px;
    padding: 0 52px;
`;
const H2Styled$3 = styled(H2)`
    margin-bottom: 20px;
    padding: 0 64px;
`;
const QrCodeWrapper$1 = styled.div`
    padding: 0 24px 16px;
`;
const ButtonsWrapper$1 = styled.div`
    display: flex;
    flex-direction: row;
    gap: 16px;
    padding: 0 24px 24px;
    margin-top: 0;
`;
const ActionButton$1 = styled(Button)`
    width: 100%;
    height: 56px;
    border-radius: ${(props) => actionButtonBorderRadius$1[props.theme.borderRadius]};
    background-color: ${(props) => rgba(props.theme.colors.accent, .12)};
    color: ${(props) => props.theme.colors.accent};
    font-size: 16px;
    line-height: 20px;
    font-weight: 500;
    padding: 17px 20px 19px 20px;
`;
const MobileConnectionQR = (props) => {
	return [
		createComponent(H1Styled$3, { get children() {
			return props.walletInfo.name;
		} }),
		createComponent(H2Styled$3, {
			translationKey: "walletModal.mobileConnectionModal.scanQR",
			get translationValues() {
				return { name: props.walletInfo.name };
			},
			get children() {
				return [
					"Scan the QR code below with your phone’s or ",
					createMemo(() => props.walletInfo.name),
					"’s camera"
				];
			}
		}),
		createComponent(QrCodeWrapper$1, { get children() {
			return createComponent(QRCode, {
				get imageUrl() {
					return props.walletInfo.imageUrl;
				},
				get sourceUrl() {
					return addReturnStrategy(props.universalLink, "none");
				},
				disableCopy: true
			});
		} }),
		createComponent(ButtonsWrapper$1, { get children() {
			return [createComponent(ActionButton$1, {
				appearance: "secondary",
				onClick: () => {
					var _a2;
					return (_a2 = props.onOpenLink) == null ? void 0 : _a2.call(props);
				},
				get children() {
					return createComponent(Translation, {
						translationKey: "walletModal.mobileUniversalModal.openLink",
						children: "Open Link"
					});
				}
			}), createComponent(ActionButton$1, {
				appearance: "secondary",
				onClick: () => {
					var _a2;
					return (_a2 = props.onCopy) == null ? void 0 : _a2.call(props);
				},
				get children() {
					return createComponent(Translation, {
						get translationKey() {
							return props.isCopiedShown !== void 0 ? "common.copied" : "common.copyLink";
						},
						get children() {
							return props.isCopiedShown !== void 0 ? "Copied" : "Copy Link";
						}
					});
				}
			})];
		} })
	];
};
const MobileConnectionModal = (props) => {
	const theme = useTheme();
	const [firstClick, setFirstClick] = createSignal(true);
	const [showQR, setShowQR] = createSignal(false);
	const [connectionErrored, setConnectionErrored] = createSignal(null);
	createEffect(() => {
		var _a2;
		setConnectionErrored((_a2 = props.defaultError) != null ? _a2 : null);
	});
	const connector = useContext(ConnectorContext);
	const unsubscribe = connector.onStatusChange(() => {}, () => {
		setConnectionErrored(null);
	});
	const universalLink = createMemo(() => connector.connect({
		universalLink: props.wallet.universalLink,
		bridgeUrl: props.wallet.bridgeUrl
	}, props.additionalRequest));
	const onClickTelegram = () => {
		const alwaysForceRedirect = true;
		setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), { openMethod: "universal-link" }));
		redirectToTelegram(universalLink(), {
			returnStrategy: appState.returnStrategy,
			twaReturnUrl: appState.twaReturnUrl,
			forceRedirect: alwaysForceRedirect
		});
	};
	const onRetry = () => {
		const currentUniversalLink = universalLink();
		if (isTelegramUrl(currentUniversalLink)) return onClickTelegram();
		setConnectionErrored(null);
		const forceRedirect = !firstClick();
		setFirstClick(false);
		redirectToWallet(universalLink(), props.wallet.deepLink, {
			returnStrategy: appState.returnStrategy,
			forceRedirect
		}, (method) => {
			setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), { openMethod: method }));
		});
	};
	const [isCopiedShown, setIsCopiedShown] = createSignal(void 0);
	const onCopy = () => __async(void 0, null, function* () {
		if (isCopiedShown() !== void 0) clearTimeout(isCopiedShown());
		yield copyToClipboard(universalLink());
		const timeoutId = setTimeout(() => setIsCopiedShown(void 0), 1500);
		setIsCopiedShown(timeoutId);
	});
	const onOpenQR = () => {
		setConnectionErrored(null);
		setShowQR(true);
		setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), { openMethod: "qrcode" }));
	};
	const onCloseQR = () => {
		setShowQR(false);
		setLastSelectedWalletInfo(__spreadProps(__spreadValues({}, props.wallet), { openMethod: "universal-link" }));
	};
	const onBack = () => {
		if (showQR()) onCloseQR();
		else props.onBackClick();
	};
	onCleanup(unsubscribe);
	onRetry();
	return createComponent(MobileConnectionModalStyled, {
		"data-tc-wallets-modal-connection-mobile": "true",
		get children() {
			return [
				createComponent(Show, {
					get when() {
						return !props.backDisabled || showQR();
					},
					get children() {
						return createComponent(StyledIconButton, {
							icon: "arrow",
							onClick: onBack
						});
					}
				}),
				createComponent(Show, {
					get when() {
						return showQR();
					},
					get children() {
						return createComponent(MobileConnectionQR, {
							get universalLink() {
								return universalLink();
							},
							get walletInfo() {
								return props.wallet;
							},
							onOpenLink: onRetry,
							onCopy,
							get isCopiedShown() {
								return isCopiedShown();
							}
						});
					}
				}),
				createComponent(Show, {
					get when() {
						return !showQR();
					},
					get children() {
						return [
							createComponent(H1Styled$4, { get children() {
								return props.wallet.name;
							} }),
							createComponent(BodyStyled, { get children() {
								return [createComponent(Show, {
									get when() {
										return connectionErrored();
									},
									get children() {
										return [
											createComponent(ErrorIconStyled, { size: "s" }),
											createComponent(Switch, { get children() {
												return [
													createComponent(Match, {
														get when() {
															return connectionErrored() === "missing-features";
														},
														get children() {
															return createComponent(BodyTextStyled, {
																translationKey: "walletModal.mobileConnectionModal.missingFeatures",
																get translationValues() {
																	return { name: props.wallet.name };
																},
																children: "Please update Wallet, your version does not support required features for this dApp"
															});
														}
													}),
													createComponent(Match, {
														get when() {
															return connectionErrored() === "connection-declined";
														},
														get children() {
															return createComponent(BodyTextStyled, {
																translationKey: "walletModal.mobileConnectionModal.connectionDeclined",
																children: "Connection declined"
															});
														}
													}),
													createComponent(Match, {
														get when() {
															return connectionErrored() === "not-supported";
														},
														get children() {
															return createComponent(BodyTextStyled, {
																translationKey: "walletModal.mobileConnectionModal.notSupportedWallet",
																get translationValues() {
																	return { name: props.wallet.name };
																},
																get children() {
																	return [createMemo(() => props.wallet.name), " doesn’t support the requested action. Please connect another wallet that supports it."];
																}
															});
														}
													})
												];
											} }),
											createComponent(ButtonsContainerStyled, { get children() {
												return createComponent(Switch, { get children() {
													return [
														createComponent(Match, {
															get when() {
																return connectionErrored() === "missing-features";
															},
															get children() {
																return [createComponent(Button, {
																	get leftIcon() {
																		return createComponent(RetryIcon, {});
																	},
																	onClick: onRetry,
																	get children() {
																		return createComponent(Translation, {
																			translationKey: "common.retry",
																			children: "Retry"
																		});
																	}
																}), createComponent(Link, {
																	get href() {
																		return props.wallet.aboutUrl;
																	},
																	blank: true,
																	get children() {
																		return createComponent(Button, {
																			get leftIcon() {
																				return createComponent(LinkIcon, {});
																			},
																			get children() {
																				return createComponent(Translation, {
																					translationKey: "walletModal.mobileConnectionModal.updateWallet",
																					get translationValues() {
																						return { name: props.wallet.name };
																					},
																					get children() {
																						return ["Update ", createMemo(() => props.wallet.name)];
																					}
																				});
																			}
																		});
																	}
																})];
															}
														}),
														createComponent(Match, {
															get when() {
																return connectionErrored() === "not-supported";
															},
															get children() {
																return createComponent(Button, {
																	onClick: () => props.onBackClick(),
																	get children() {
																		return createComponent(Translation, {
																			translationKey: "walletModal.mobileConnectionModal.chooseAnotherWallet",
																			children: "Choose Another Wallet"
																		});
																	}
																});
															}
														}),
														createComponent(Match, {
															get when() {
																return connectionErrored() === "connection-declined";
															},
															get children() {
																return [createComponent(Button, {
																	get leftIcon() {
																		return createComponent(RetryIcon, {});
																	},
																	onClick: onRetry,
																	get children() {
																		return createComponent(Translation, {
																			translationKey: "common.retry",
																			children: "Retry"
																		});
																	}
																}), createComponent(Button, {
																	get leftIcon() {
																		return createComponent(QRIcon, { get fill() {
																			return theme.colors.accent;
																		} });
																	},
																	onClick: onOpenQR,
																	get children() {
																		return createComponent(Translation, {
																			translationKey: "walletModal.mobileConnectionModal.showQR",
																			children: "Show QR Code"
																		});
																	}
																})];
															}
														})
													];
												} });
											} })
										];
									}
								}), createComponent(Show, {
									get when() {
										return !connectionErrored();
									},
									get children() {
										return [
											createComponent(LoaderStyled, { size: "s" }),
											createComponent(BodyTextStyled, {
												translationKey: "walletModal.mobileConnectionModal.continueIn",
												get translationValues() {
													return { name: props.wallet.name };
												},
												get children() {
													return [
														"Continue in ",
														createMemo(() => props.wallet.name),
														"…"
													];
												}
											}),
											createComponent(ButtonsContainerStyled, { get children() {
												return [createComponent(Button, {
													get leftIcon() {
														return createComponent(RetryIcon, {});
													},
													onClick: onRetry,
													get children() {
														return createComponent(Translation, {
															translationKey: "common.retry",
															children: "Retry"
														});
													}
												}), createComponent(Button, {
													get leftIcon() {
														return createComponent(QRIcon, { get fill() {
															return theme.colors.accent;
														} });
													},
													onClick: onOpenQR,
													get children() {
														return createComponent(Translation, {
															translationKey: "walletModal.mobileConnectionModal.showQR",
															children: "Show QR Code"
														});
													}
												})];
											} })
										];
									}
								})];
							} }),
							createComponent(FooterStyled, { get children() {
								return [
									createComponent(ImageStyled, { get src() {
										return props.wallet.imageUrl;
									} }),
									createComponent(H3, { get children() {
										return props.wallet.name;
									} }),
									createComponent(FooterButton, {
										get href() {
											return props.wallet.aboutUrl;
										},
										blank: true,
										get children() {
											return createComponent(Button, { get children() {
												return createComponent(Translation, {
													translationKey: "common.get",
													children: "GET"
												});
											} });
										}
									})
								];
							} })
						];
					}
				})
			];
		}
	});
};
const borders$1 = {
	m: "16px",
	s: "12px",
	none: "0"
};
const tgBorders = {
	m: "6px",
	s: "6px",
	none: "0"
};
styled.li`
    width: 82px;
    min-width: 82px;
    height: 124px;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 8px 4px;

    text-align: center;
    cursor: pointer;

    transition: transform 0.1s ease-in-out;

    ${mediaNotTouch} {
        &:hover {
            transform: scale(1.04);
        }
    }

    &:active {
        transform: scale(0.96);
    }

    ${mediaTouch} {
        &:active {
            transform: scale(0.92);
        }
    }
`;
const H1Styled$2 = styled(H1)`
    margin-top: 38px;
    margin-bottom: 4px;
    padding: 0 24px;
`;
const H2Styled$2 = styled(H2)`
    margin: ${(props) => {
	var _a2;
	return (_a2 = props.margin) != null ? _a2 : "0 0 28px 0";
}};
    padding: ${(props) => {
	var _a2;
	return (_a2 = props.padding) != null ? _a2 : "0 24px";
}};
    min-height: ${(props) => {
	var _a2;
	return (_a2 = props.padding) != null ? _a2 : "44px";
}};
    max-width: ${(props) => props.maxWidth}px;
    margin-left: ${(props) => props.maxWidth ? "auto" : "0px"};
    margin-right: ${(props) => props.maxWidth ? "auto" : "0px"};
`;
styled(Button)`
    display: block;
    margin: 0 auto;
`;
const TelegramButtonStyled = styled(Button)`
    margin: 0 28px 24px;
    width: calc(100% - 56px);
    border-radius: ${(props) => borders$1[props.theme.borderRadius]};
    padding: 14px 16px 14px 14px;
    background-color: ${(props) => props.theme.colors.telegramButton};

    color: ${(props) => props.theme.colors.constant.white};
    font-weight: 500;
    font-size: 16px;
    line-height: 20px;

    @media (max-width: 375px) {
        margin: 0 16px 24px;
        width: calc(100% - 32px);
    }
`;
const TGImageStyled = styled(Image)`
    background-color: transparent;
    border-radius: ${(props) => tgBorders[props.theme.borderRadius]};
    width: 24px;
    height: 24px;
`;
const StyledLeftActionButton = styled(IconButton)`
    position: absolute;
    top: 16px;
    left: 16px;
`;
const actionButtonBorderRadius = {
	m: "16px",
	s: "8px",
	none: "0"
};
const H1Styled$1 = styled(H1)`
    margin-bottom: 2px;
    padding: 0 52px;
`;
const H2Styled$1 = styled(H2)`
    margin-bottom: 20px;
    padding: 0 64px;
`;
const QrCodeWrapper = styled.div`
    padding: 0 24px 16px;
`;
const ButtonsWrapper = styled.div`
    display: flex;
    flex-direction: row;
    gap: 16px;
    padding: 0 24px 24px;
    margin-top: 0;
`;
const ActionButton = styled(Button)`
    width: 100%;
    height: 56px;
    border-radius: ${(props) => actionButtonBorderRadius[props.theme.borderRadius]};
    background-color: ${(props) => rgba(props.theme.colors.accent, .12)};
    color: ${(props) => props.theme.colors.accent};
    font-size: 16px;
    line-height: 20px;
    font-weight: 500;
    padding: 17px 20px 19px 20px;
`;
const MobileUniversalQR = (props) => {
	return [
		createComponent(H1Styled$1, {
			translationKey: "walletModal.mobileUniversalModal.connectYourWallet",
			children: "Connect your TON wallet"
		}),
		createComponent(H2Styled$1, {
			translationKey: "walletModal.mobileUniversalModal.scan",
			children: "Scan with your mobile wallet"
		}),
		createComponent(QrCodeWrapper, { get children() {
			return createComponent(QRCode, {
				get imageUrl() {
					return IMG.TON;
				},
				get sourceUrl() {
					return addReturnStrategy(props.universalLink, "none");
				},
				disableCopy: true
			});
		} }),
		createComponent(ButtonsWrapper, { get children() {
			return [createComponent(ActionButton, {
				appearance: "secondary",
				onClick: () => props.onOpenLink(),
				get children() {
					return createComponent(Translation, {
						translationKey: "walletModal.mobileUniversalModal.openLink",
						children: "Open Link"
					});
				}
			}), createComponent(ActionButton, {
				appearance: "secondary",
				onClick: () => props.onCopy(),
				get children() {
					return createComponent(Translation, {
						get translationKey() {
							return props.isCopiedShown !== void 0 ? "common.copied" : "common.copyLink";
						},
						get children() {
							return props.isCopiedShown !== void 0 ? "Copied" : "Copy Link";
						}
					});
				}
			})];
		} })
	];
};
function getUniqueBridges(walletsList) {
	const uniqueBridges = new Set(walletsList.filter(isWalletInfoRemote).map((item) => item.bridgeUrl));
	return Array.from(uniqueBridges).map((bridgeUrl) => ({ bridgeUrl }));
}
function bridgesIsEqual(left, right) {
	const leftSet = new Set(left == null ? void 0 : left.map((i2) => i2.bridgeUrl));
	const rightSet = new Set(right == null ? void 0 : right.map((i2) => i2.bridgeUrl));
	return leftSet.size === rightSet.size && [...leftSet].every((value) => rightSet.has(value));
}
const _tmpl$$1 = /* @__PURE__ */ template$1(`<li></li>`), _tmpl$2 = /* @__PURE__ */ template$1(`<div data-tc-wallets-modal-universal-mobile="true"></div>`);
const MobileUniversalModal = (props) => {
	const [showQR, setShowQR] = createSignal(false);
	const [firstClick, setFirstClick] = createSignal(true);
	const [universalLink, setUniversalLink] = createSignal(null);
	const connector = appState.connector;
	const walletsList = () => props.walletsList.filter((w) => supportsMobile(w) && w.appName !== AT_WALLET_APP_NAME);
	const shouldShowMoreButton = () => walletsList().length > 7;
	const walletsBridges = createMemo(() => getUniqueBridges(props.walletsList), null, { equals: bridgesIsEqual });
	const atWalletSupportFeatures = createMemo(() => {
		var _a2, _b2;
		return (_b2 = (_a2 = props.walletsList.find((wallet) => wallet.appName === AT_WALLET_APP_NAME)) == null ? void 0 : _a2.isSupportRequiredFeatures) != null ? _b2 : false;
	}, null);
	const getUniversalLink = () => {
		if (!universalLink()) setUniversalLink(connector.connect(walletsBridges(), props.additionalRequest));
		return universalLink();
	};
	setLastSelectedWalletInfo({ openMethod: "universal-link" });
	const [isCopiedShown, setIsCopiedShown] = createSignal(void 0);
	const onCopy = () => __async(void 0, null, function* () {
		if (isCopiedShown() !== void 0) clearTimeout(isCopiedShown());
		yield copyToClipboard(getUniversalLink());
		const timeoutId = setTimeout(() => setIsCopiedShown(void 0), 1500);
		setIsCopiedShown(timeoutId);
	});
	const onSelectUniversal = () => {
		const forceRedirect = !firstClick();
		setFirstClick(false);
		redirectToWallet(getUniversalLink(), void 0, {
			returnStrategy: appState.returnStrategy,
			forceRedirect
		}, (method) => {
			setLastSelectedWalletInfo({ openMethod: method });
		});
	};
	const onSelectTelegram = () => {
		setUniversalLink(null);
		const atWallet = props.walletsList.find((wallet) => wallet.appName === AT_WALLET_APP_NAME);
		if (!atWallet || !isWalletInfoRemote(atWallet)) throw new TonConnectUIError("@wallet bot not found in the wallets list");
		const walletLink = connector.connect({
			bridgeUrl: atWallet.bridgeUrl,
			universalLink: atWallet.universalLink
		}, props.additionalRequest);
		const forceRedirect = !firstClick();
		setFirstClick(false);
		redirectToTelegram(walletLink, {
			returnStrategy: appState.returnStrategy,
			twaReturnUrl: appState.twaReturnUrl,
			forceRedirect
		});
	};
	const onOpenQR = () => {
		setShowQR(true);
		setLastSelectedWalletInfo({ openMethod: "qrcode" });
	};
	const onCloseQR = () => {
		setShowQR(false);
		setLastSelectedWalletInfo({ openMethod: "universal-link" });
	};
	const supportedWallets = createMemo(() => walletsList().filter((wallet) => wallet.isSupportRequiredFeatures), null);
	const visibleWallets = createMemo(() => supportedWallets().slice(0, 3), null);
	const fourWalletsItem = createMemo(() => walletsList().filter((wallet) => !visibleWallets().find((w) => w.appName === wallet.appName)).slice(0, 4), null);
	return (() => {
		const _el$ = _tmpl$2.cloneNode(true);
		insert(_el$, createComponent(Show, {
			get when() {
				return showQR();
			},
			get children() {
				return [createComponent(StyledLeftActionButton, {
					icon: "arrow",
					onClick: onCloseQR
				}), createComponent(MobileUniversalQR, {
					get universalLink() {
						return getUniversalLink();
					},
					get isCopiedShown() {
						return isCopiedShown();
					},
					onOpenLink: onSelectUniversal,
					onCopy
				})];
			}
		}), null);
		insert(_el$, createComponent(Show, {
			get when() {
				return !showQR();
			},
			get children() {
				return [
					createComponent(StyledLeftActionButton, {
						get icon() {
							return createComponent(QRIcon, {});
						},
						onClick: onOpenQR
					}),
					createComponent(H1Styled$2, {
						translationKey: "walletModal.mobileUniversalModal.connectYourWallet",
						children: "Connect your TON wallet"
					}),
					createComponent(Show, {
						get when() {
							return atWalletSupportFeatures();
						},
						get children() {
							return [createComponent(H2Styled$2, {
								translationKey: "walletModal.mobileUniversalModal.openWalletOnTelegramOrSelect",
								maxWidth: 320,
								children: "Use Wallet in Telegram or choose other application"
							}), createComponent(TelegramButtonStyled, {
								get leftIcon() {
									return createComponent(AtWalletIcon, {});
								},
								get rightIcon() {
									return createComponent(TGImageStyled, { get src() {
										return IMG.TG;
									} });
								},
								onClick: onSelectTelegram,
								scale: "s",
								get children() {
									return createComponent(Translation, {
										translationKey: "walletModal.mobileUniversalModal.openWalletOnTelegram",
										children: "Connect Wallet in Telegram"
									});
								}
							})];
						}
					}),
					createComponent(H2Styled$2, {
						translationKey: "walletModal.mobileUniversalModal.chooseOtherApplication",
						maxWidth: 342,
						padding: "0 24px 8px 24px",
						margin: "0",
						children: "Choose other application"
					}),
					createComponent(WalletUlContainer, { get children() {
						return [createComponent(For, {
							get each() {
								return createMemo(() => !!shouldShowMoreButton())() ? visibleWallets() : supportedWallets();
							},
							children: (wallet) => (() => {
								const _el$3 = _tmpl$$1.cloneNode(true);
								insert(_el$3, createComponent(WalletItem, {
									get icon() {
										return wallet.imageUrl;
									},
									get name() {
										return wallet.name;
									},
									onClick: () => props.onSelect(wallet)
								}));
								return _el$3;
							})()
						}), createComponent(Show, {
							get when() {
								return shouldShowMoreButton();
							},
							get children() {
								const _el$2 = _tmpl$$1.cloneNode(true);
								insert(_el$2, createComponent(FourWalletsItem, {
									labelLine1: "View all",
									labelLine2: "wallets",
									get images() {
										return fourWalletsItem().map((i2) => i2.imageUrl);
									},
									onClick: () => props.onSelectAllWallets()
								}));
								return _el$2;
							}
						})];
					} })
				];
			}
		}), null);
		return _el$;
	})();
};
const borders = {
	m: "16px",
	s: "8px",
	none: "0"
};
const hoverBorders = {
	m: "8px",
	s: "4px",
	none: "0"
};
const DesktopUniversalModalStyled = styled.div`
    display: flex;
    flex-direction: column;
    align-items: center;
    padding-bottom: 16px;
`;
const H2Styled = styled(H2)`
    max-width: 320px;
    margin-top: 2px;
    margin-bottom: 20px;
`;
const H2AvailableWalletsStyled = styled(H2)`
    margin-bottom: 16px;
`;
const QRCodeStyled = styled(QRCode)`
    margin-bottom: 24px;
`;
const WalletsContainerStyled = styled.ul`
    display: flex;
`;
styled.div`
    display: flex;
    gap: 16px;
    width: 100%;
`;
styled(Button)`
    position: relative;
    font-size: 16px;
    line-height: 20px;
    width: 100%;
    padding: 0 16px;
    height: 56px;
    border-radius: ${(props) => borders[props.theme.borderRadius]};

    &:hover {
        ${(props) => props.disableEventsAnimation ? "transform: unset;" : ""}
    }

    &:active {
        ${(props) => props.disableEventsAnimation ? "transform: unset;" : ""}
    }
`;
styled.ul`
    position: absolute;
    bottom: 100%;
    left: 0;
    margin: 0;
    padding: 8px;
    width: 188px;
    transform: translateY(-16px);

    background-color: ${(props) => props.theme.colors.background.primary};
    border-radius: ${(props) => borders[props.theme.borderRadius]};
    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.16);
`;
styled.li`
    padding: 8px;

    display: flex;
    align-items: center;
    gap: 8px;

    cursor: pointer;
    border-radius: ${(props) => hoverBorders[props.theme.borderRadius]};

    transition: background-color, transform 0.1s ease-in-out;

    &:hover {
        background-color: ${(props) => props.theme.colors.background.secondary};
    }

    &:active {
        transform: scale(0.96);
    }
`;
styled(Image)`
    width: 24px;
    height: 24px;

    border-radius: 6px;
`;
styled.div`
    margin-top: 23px;
    margin-bottom: 1px;
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
`;
styled(Text)`
    color: ${(props) => props.theme.colors.text.secondary};
    font-size: 16px;
`;
const _tmpl$ = /* @__PURE__ */ template$1(`<li></li>`);
const DesktopUniversalModal = (props) => {
	const [popupOpened, setPopupOpened] = createSignal(false);
	const connector = appState.connector;
	const walletsBridges = createMemo(() => getUniqueBridges(props.walletsList), null, { equals: bridgesIsEqual });
	setLastSelectedWalletInfo({ openMethod: "qrcode" });
	const request = createMemo(() => connector.connect(walletsBridges(), props.additionalRequest));
	const supportedWallets = createMemo(() => props.walletsList.filter((wallet) => wallet.isSupportRequiredFeatures), null);
	const visibleWallets = createMemo(() => supportedWallets().slice(0, 3), null);
	const fourWalletsItem = createMemo(() => props.walletsList.filter((wallet) => !visibleWallets().find((w) => w.appName === wallet.appName)).slice(0, 4), null);
	return createComponent(DesktopUniversalModalStyled, {
		onClick: () => setPopupOpened(false),
		"data-tc-wallets-modal-universal-desktop": "true",
		get children() {
			return [
				createComponent(H1, {
					translationKey: "walletModal.desktopUniversalModal.connectYourWallet",
					children: "Connect your wallet"
				}),
				createComponent(H2Styled, {
					translationKey: "walletModal.desktopUniversalModal.scan",
					children: "Scan with your mobile wallet"
				}),
				createComponent(QRCodeStyled, {
					get sourceUrl() {
						return addReturnStrategy(request(), "none");
					},
					get disableCopy() {
						return popupOpened();
					},
					get imageUrl() {
						return IMG.TON;
					}
				}),
				createComponent(H2AvailableWalletsStyled, {
					translationKey: "walletModal.desktopUniversalModal.availableWallets",
					children: "Available wallets"
				}),
				createComponent(WalletsContainerStyled, { get children() {
					return [createComponent(For, {
						get each() {
							return visibleWallets();
						},
						children: (wallet) => (() => {
							const _el$ = _tmpl$.cloneNode(true);
							insert(_el$, createComponent(WalletLabeledItem, {
								wallet,
								onClick: () => props.onSelect(wallet)
							}));
							return _el$;
						})()
					}), createComponent(FourWalletsItem, {
						labelLine1: "View all",
						labelLine2: "wallets",
						get images() {
							return fourWalletsItem().map((i2) => i2.imageUrl);
						},
						onClick: () => props.onSelectAllWallets()
					})];
				} })
			];
		}
	});
};
const WalletsModal = () => {
	const { locale } = useI18n()[1];
	createEffect(() => locale(appState.language));
	createEffect(() => {
		if (getWalletsModalIsOpened()) updateIsMobile();
		else {
			setSelectedWalletInfo(null);
			setSelectedTab("universal");
			setInfoTab(false);
		}
	});
	const connector = useContext(ConnectorContext);
	const tonConnectUI = useContext(TonConnectUiContext);
	const [fetchedWalletsList] = createResource(() => tonConnectUI.getWallets());
	const [selectedWalletInfo, setSelectedWalletInfo] = createSignal(null);
	const [selectedWalletError, setSelectedWalletError] = createSignal(null);
	const [selectedTab, setSelectedTab] = createSignal("universal");
	const [infoTab, setInfoTab] = createSignal(false);
	const walletsList = createMemo(() => {
		if (fetchedWalletsList.state !== "ready") return null;
		let walletsList2 = applyWalletsListConfiguration(fetchedWalletsList(), appState.walletsListConfiguration);
		const injectedWallets = walletsList2.filter(isWalletInfoCurrentlyInjected);
		const notInjectedWallets = walletsList2.filter((w) => !isWalletInfoCurrentlyInjected(w));
		walletsList2 = (injectedWallets || []).concat(notInjectedWallets);
		const preferredWalletAppName = appState.preferredWalletAppName;
		const preferredWallet = walletsList2.find((item) => eqWalletName(item, preferredWalletAppName));
		const someWalletsWithSameName = walletsList2.filter((item) => eqWalletName(item, preferredWalletAppName)).length >= 2;
		if (preferredWalletAppName && preferredWallet && !someWalletsWithSameName) walletsList2 = [__spreadProps(__spreadValues({}, preferredWallet), { isPreferred: true })].concat(walletsList2.filter((item) => !eqWalletName(item, preferredWalletAppName)));
		const atWallet = walletsList2.find((item) => eqWalletName(item, AT_WALLET_APP_NAME));
		if (atWallet) walletsList2 = [atWallet].concat(walletsList2.filter((item) => !eqWalletName(item, AT_WALLET_APP_NAME)));
		const uiWallets = walletsList2.map((wallet) => {
			var _a2;
			return __spreadProps(__spreadValues({}, wallet), { isSupportRequiredFeatures: (tonConnectUI == null ? void 0 : tonConnectUI.walletsRequiredFeatures) ? checkRequiredWalletFeatures((_a2 = wallet.features) != null ? _a2 : [], tonConnectUI.walletsRequiredFeatures) : true });
		});
		return uiWallets;
	});
	const additionalRequestLoading = () => {
		var _a2;
		return ((_a2 = appState.connectRequestParameters) == null ? void 0 : _a2.state) === "loading";
	};
	const additionalRequest = createMemo(() => {
		var _a2;
		if (additionalRequestLoading()) return void 0;
		return (_a2 = appState.connectRequestParameters) == null ? void 0 : _a2.value;
	});
	const onClose = (closeReason) => {
		tonConnectUI.closeModal(closeReason);
	};
	const unsubscribe = connector.onStatusChange((wallet) => {
		if (wallet) onClose("wallet-selected");
	}, (err) => {
		var _a2;
		if (err instanceof WalletMissingRequiredFeaturesError) {
			const errorAppName = err.cause.connectEvent.device.appName.toLowerCase();
			const wallet = (_a2 = walletsList()) == null ? void 0 : _a2.find((w) => w.appName.toLowerCase() === errorAppName);
			if (!wallet) throw new TonConnectError("Wallet not found");
			const walletErrorType = wallet.isSupportRequiredFeatures ? "missing-features" : "not-supported";
			setSelectedWalletError(walletErrorType);
			setSelectedWalletInfo(wallet);
		}
	});
	const onSelectAllWallets = () => {
		setSelectedTab("all-wallets");
	};
	const onSelectUniversal = () => {
		setSelectedTab("universal");
	};
	const clearSelectedWalletInfo = () => {
		setSelectedWalletInfo(null);
		setSelectedWalletError(null);
	};
	onCleanup(() => {
		setSelectedWalletInfo(null);
		setSelectedWalletError(null);
		setInfoTab(false);
	});
	onCleanup(unsubscribe);
	return createComponent(StyledModal, {
		get opened() {
			return getWalletsModalIsOpened();
		},
		get enableAndroidBackHandler() {
			return appState.enableAndroidBackHandler;
		},
		onClose: () => onClose("action-cancelled"),
		onClickQuestion: () => setInfoTab((v) => !v),
		"data-tc-wallets-modal-container": "true",
		get children() {
			return [createComponent(Show, {
				get when() {
					return infoTab();
				},
				get children() {
					return createComponent(InfoModal, { onBackClick: () => setInfoTab(false) });
				}
			}), createComponent(Show, {
				get when() {
					return !infoTab();
				},
				get children() {
					return [createComponent(Show, {
						get when() {
							return additionalRequestLoading() || !walletsList();
						},
						get children() {
							return [createComponent(H1Styled$8, {
								translationKey: "walletModal.loading",
								children: "Wallets list is loading"
							}), createComponent(LoaderContainerStyled, { get children() {
								return createComponent(LoaderIcon, { size: "m" });
							} })];
						}
					}), createComponent(Show, {
						get when() {
							return createMemo(() => !!!additionalRequestLoading())() && walletsList();
						},
						get children() {
							return createComponent(Switch, { get children() {
								return [
									createComponent(Match, {
										get when() {
											return selectedWalletInfo();
										},
										get children() {
											return createComponent(Dynamic, {
												get component() {
													return isMobile() ? MobileConnectionModal : DesktopConnectionModal;
												},
												get wallet() {
													return selectedWalletInfo();
												},
												get additionalRequest() {
													return additionalRequest();
												},
												onBackClick: clearSelectedWalletInfo,
												get defaultError() {
													return selectedWalletError();
												}
											});
										}
									}),
									createComponent(Match, {
										get when() {
											return selectedTab() === "universal";
										},
										get children() {
											return createComponent(Dynamic, {
												get component() {
													return isMobile() ? MobileUniversalModal : DesktopUniversalModal;
												},
												onSelect: setSelectedWalletInfo,
												get walletsList() {
													return walletsList();
												},
												get additionalRequest() {
													return additionalRequest();
												},
												onSelectAllWallets
											});
										}
									}),
									createComponent(Match, {
										get when() {
											return selectedTab() === "all-wallets";
										},
										get children() {
											return createComponent(AllWalletsListModal, {
												get walletsList() {
													return walletsList();
												},
												onBack: onSelectUniversal,
												onSelect: setSelectedWalletInfo
											});
										}
									})
								];
							} });
						}
					})];
				}
			})];
		}
	});
};
const ActionModalStyled = styled.div`
    display: flex;
    flex-direction: column;
    align-items: center;
    padding-bottom: 8px;
`;
const H1Styled = styled(H1)`
    margin-top: 16px;
`;
const TextStyled = styled(Text)`
    font-weight: 510;
    font-size: 16px;
    line-height: 20px;
    text-align: center;
    max-width: 250px;

    color: ${(props) => props.theme.colors.text.secondary};
`;
const LoaderButtonStyled = styled(Button)`
    min-width: 112px;
    margin-top: 32px;
`;
const LoaderIconStyled = styled(LoaderIcon)`
    height: 16px;
    width: 16px;
`;
const ButtonStyled = styled(Button)`
    margin-top: 32px;
`;
const ActionModal = (props) => {
	const dataAttrs = useDataAttributes(props);
	const tonConnectUI = useContext(TonConnectUiContext);
	const [firstClick, setFirstClick] = createSignal(true);
	const [sent, setSent] = createSignal(false);
	createEffect(() => {
		const currentAction = action();
		setSent(!!currentAction && "sent" in currentAction && currentAction.sent);
	});
	let universalLink;
	if ((tonConnectUI == null ? void 0 : tonConnectUI.wallet) && "universalLink" in tonConnectUI.wallet && (tonConnectUI.wallet.openMethod === "universal-link" || isTelegramUrl(tonConnectUI.wallet.universalLink) && isInTMA())) universalLink = tonConnectUI.wallet.universalLink;
	let deepLink;
	if ((tonConnectUI == null ? void 0 : tonConnectUI.wallet) && "deepLink" in tonConnectUI.wallet && (tonConnectUI.wallet.openMethod === "custom-deeplink" || isTelegramUrl(tonConnectUI.wallet.deepLink) && isInTMA())) deepLink = tonConnectUI.wallet.deepLink;
	const onOpenWallet = () => {
		const currentAction = action();
		const returnStrategy = "returnStrategy" in currentAction ? currentAction.returnStrategy : appState.returnStrategy;
		const forceRedirect = !firstClick();
		setFirstClick(false);
		if (isTelegramUrl(universalLink)) redirectToTelegram(universalLink, {
			returnStrategy,
			twaReturnUrl: "twaReturnUrl" in currentAction ? currentAction.twaReturnUrl : appState.twaReturnUrl,
			forceRedirect
		});
		else redirectToWallet(universalLink, deepLink, {
			returnStrategy,
			forceRedirect
		}, () => {});
	};
	return createComponent(ActionModalStyled, mergeProps(dataAttrs, { get children() {
		return [
			createMemo(() => props.icon),
			createComponent(H1Styled, {
				get translationKey() {
					return props.headerTranslationKey;
				},
				get translationValues() {
					return props.headerTranslationValues;
				}
			}),
			createComponent(TextStyled, {
				get translationKey() {
					return props.textTranslationKey;
				},
				get translationValues() {
					return props.textTranslationValues;
				}
			}),
			createComponent(Show, {
				get when() {
					return !sent() && (props.showButton === "open-wallet" && universalLink || props.showButton !== "open-wallet");
				},
				get children() {
					return createComponent(LoaderButtonStyled, {
						disabled: true,
						"data-tc-connect-button-loading": "true",
						get children() {
							return createComponent(LoaderIconStyled, {});
						}
					});
				}
			}),
			createComponent(Show, {
				get when() {
					return sent();
				},
				get children() {
					return [createComponent(Show, {
						get when() {
							return props.showButton !== "open-wallet";
						},
						get children() {
							return createComponent(ButtonStyled, {
								onClick: () => props.onClose(),
								get children() {
									return createComponent(Translation, {
										translationKey: "common.close",
										children: "Close"
									});
								}
							});
						}
					}), createComponent(Show, {
						get when() {
							return props.showButton === "open-wallet" && universalLink;
						},
						get children() {
							return createComponent(ButtonStyled, {
								onClick: onOpenWallet,
								get children() {
									return createComponent(Translation, {
										translationKey: "common.openWallet",
										children: "Open wallet"
									});
								}
							});
						}
					})];
				}
			})
		];
	} }));
};
const ConfirmTransactionModal = (props) => {
	const tonConnectUI = useContext(TonConnectUiContext);
	const [t2] = useI18n();
	const name = () => tonConnectUI.wallet && "name" in tonConnectUI.wallet ? tonConnectUI.wallet.name : t2("common.yourWallet", {}, "Your wallet");
	return createComponent(ActionModal, {
		headerTranslationKey: "actionModal.confirmTransaction.header",
		get headerTranslationValues() {
			return { name: name() };
		},
		textTranslationKey: "actionModal.confirmTransaction.text",
		get icon() {
			return createComponent(LoaderIcon, { size: "m" });
		},
		onClose: () => props.onClose(),
		showButton: "open-wallet",
		"data-tc-confirm-modal": "true"
	});
};
const TransactionCanceledModal = (props) => {
	return createComponent(ActionModal, {
		headerTranslationKey: "actionModal.transactionCanceled.header",
		textTranslationKey: "actionModal.transactionCanceled.text",
		get icon() {
			return createComponent(ErrorIcon, { size: "m" });
		},
		onClose: () => props.onClose(),
		"data-tc-transaction-canceled-modal": "true"
	});
};
const TransactionSentModal = (props) => {
	return createComponent(ActionModal, {
		headerTranslationKey: "actionModal.transactionSent.header",
		textTranslationKey: "actionModal.transactionSent.text",
		get icon() {
			return createComponent(SuccessIcon, { size: "m" });
		},
		onClose: () => props.onClose(),
		"data-tc-transaction-sent-modal": "true"
	});
};
const ActionsModal = () => {
	return createComponent(Modal, {
		get opened() {
			var _a2;
			return createMemo(() => action() !== null)() && ((_a2 = action()) == null ? void 0 : _a2.openModal) === true;
		},
		get enableAndroidBackHandler() {
			return appState.enableAndroidBackHandler;
		},
		onClose: () => setAction(null),
		"data-tc-actions-modal-container": "true",
		get children() {
			return createComponent(Switch, { get children() {
				return [
					createComponent(Match, {
						get when() {
							return action().name === "transaction-sent";
						},
						get children() {
							return createComponent(TransactionSentModal, { onClose: () => setAction(null) });
						}
					}),
					createComponent(Match, {
						get when() {
							return action().name === "transaction-canceled";
						},
						get children() {
							return createComponent(TransactionCanceledModal, { onClose: () => setAction(null) });
						}
					}),
					createComponent(Match, {
						get when() {
							return action().name === "confirm-transaction";
						},
						get children() {
							return createComponent(ConfirmTransactionModal, { onClose: () => setAction(null) });
						}
					})
				];
			} });
		}
	});
};
const SingleWalletModal = () => {
	const { locale } = useI18n()[1];
	createEffect(() => locale(appState.language));
	createEffect(() => {
		if (getSingleWalletModalIsOpened()) updateIsMobile();
	});
	const connector = useContext(ConnectorContext);
	const tonConnectUI = useContext(TonConnectUiContext);
	const [infoTab, setInfoTab] = createSignal(false);
	const additionalRequestLoading = () => {
		var _a2;
		return ((_a2 = appState.connectRequestParameters) == null ? void 0 : _a2.state) === "loading";
	};
	const additionalRequest = createMemo(() => {
		var _a2;
		if (additionalRequestLoading()) return void 0;
		return (_a2 = appState.connectRequestParameters) == null ? void 0 : _a2.value;
	});
	const onClose = (closeReason) => {
		tonConnectUI.closeSingleWalletModal(closeReason);
	};
	const unsubscribe = connector.onStatusChange((wallet) => {
		if (wallet) onClose("wallet-selected");
	});
	onCleanup(unsubscribe);
	onCleanup(() => {
		setInfoTab(false);
	});
	return createComponent(StyledModal, {
		get opened() {
			return getSingleWalletModalIsOpened();
		},
		get enableAndroidBackHandler() {
			return appState.enableAndroidBackHandler;
		},
		onClose: () => onClose("action-cancelled"),
		onClickQuestion: () => setInfoTab((v) => !v),
		"data-tc-wallets-modal-container": "true",
		get children() {
			return [createComponent(Show, {
				get when() {
					return infoTab();
				},
				get children() {
					return createComponent(InfoModal, { onBackClick: () => setInfoTab(false) });
				}
			}), createComponent(Show, {
				get when() {
					return !infoTab();
				},
				get children() {
					return [createComponent(Show, {
						get when() {
							return additionalRequestLoading();
						},
						get children() {
							return [createComponent(H1Styled$8, {
								translationKey: "walletModal.loading",
								children: "Wallets list is loading"
							}), createComponent(LoaderContainerStyled, { get children() {
								return createComponent(LoaderIcon, { size: "m" });
							} })];
						}
					}), createComponent(Show, {
						get when() {
							return !additionalRequestLoading();
						},
						get children() {
							return createComponent(Dynamic, {
								get component() {
									return isMobile() ? MobileConnectionModal : DesktopConnectionModal;
								},
								get wallet() {
									return getSingleWalletModalWalletInfo();
								},
								get additionalRequest() {
									return additionalRequest();
								},
								onBackClick: () => {},
								backDisabled: true
							});
						}
					})];
				}
			})];
		}
	});
};
const App = (props) => {
	const translations = createI18nContext(i18nDictionary, appState.language);
	defineStylesRoot();
	fixMobileSafariActiveTransition();
	return createComponent(I18nContext.Provider, {
		value: translations,
		get children() {
			return createComponent(TonConnectUiContext.Provider, {
				get value() {
					return props.tonConnectUI;
				},
				get children() {
					return createComponent(ConnectorContext.Provider, {
						get value() {
							return appState.connector;
						},
						get children() {
							return [createComponent(GlobalStyles, {}), createComponent(ThemeProvider, {
								theme: themeState,
								get children() {
									return [createComponent(Show, {
										get when() {
											return appState.buttonRootId;
										},
										get children() {
											return createComponent(Portal, {
												get mount() {
													return document.getElementById(appState.buttonRootId);
												},
												get children() {
													return createComponent(AccountButton, {});
												}
											});
										}
									}), createComponent(Dynamic, {
										component: globalStylesTag,
										get children() {
											return [
												createComponent(WalletsModal, {}),
												createComponent(SingleWalletModal, {}),
												createComponent(ActionsModal, {})
											];
										}
									})];
								}
							})];
						}
					});
				}
			});
		}
	});
};
const widgetController = {
	openWalletsModal: () => void setTimeout(() => setWalletsModalState({
		status: "opened",
		closeReason: null
	})),
	closeWalletsModal: (reason) => void setTimeout(() => setWalletsModalState({
		status: "closed",
		closeReason: reason
	})),
	openSingleWalletModal: (walletInfo) => {
		setTimeout(() => setSingleWalletModalState({
			status: "opened",
			closeReason: null,
			walletInfo
		}));
	},
	closeSingleWalletModal: (reason) => void setTimeout(() => setSingleWalletModalState({
		status: "closed",
		closeReason: reason
	})),
	setAction: (action2) => void setTimeout(() => setAction(action2)),
	clearAction: () => void setTimeout(() => setAction(null)),
	getSelectedWalletInfo: () => lastSelectedWalletInfo(),
	removeSelectedWalletInfo: () => setLastSelectedWalletInfo(null),
	renderApp: (root, tonConnectUI) => render(() => createComponent(App, { tonConnectUI }), document.getElementById(root))
};
var WalletsModalManager = class {
	constructor(options) {
		__publicField(this, "connector");
		__publicField(this, "setConnectRequestParametersCallback");
		__publicField(this, "consumers", []);
		__publicField(this, "tracker");
		__publicField(this, "state", walletsModalState());
		this.connector = options.connector;
		this.tracker = options.tracker;
		this.setConnectRequestParametersCallback = options.setConnectRequestParametersCallback;
		createEffect(() => {
			const state = walletsModalState();
			this.state = state;
			this.consumers.forEach((consumer) => consumer(state));
		});
	}
	open() {
		return __async(this, null, function* () {
			this.tracker.trackConnectionStarted();
			const walletsList = yield this.connector.getWallets();
			const embeddedWallet = walletsList.find(isWalletInfoCurrentlyEmbedded);
			if (embeddedWallet) return this.connectEmbeddedWallet(embeddedWallet);
			else return this.openWalletsModal();
		});
	}
	close(reason = "action-cancelled") {
		if (reason === "action-cancelled") this.tracker.trackConnectionError("Connection was cancelled");
		widgetController.closeWalletsModal(reason);
	}
	onStateChange(onChange) {
		this.consumers.push(onChange);
		return () => {
			this.consumers = this.consumers.filter((consumer) => consumer !== onChange);
		};
	}
	connectEmbeddedWallet(embeddedWallet) {
		const connect = (parameters) => {
			setLastSelectedWalletInfo(embeddedWallet);
			this.connector.connect({ jsBridgeKey: embeddedWallet.jsBridgeKey }, parameters);
		};
		const additionalRequest = appState.connectRequestParameters;
		if ((additionalRequest == null ? void 0 : additionalRequest.state) === "loading") this.setConnectRequestParametersCallback(connect);
		else connect(additionalRequest == null ? void 0 : additionalRequest.value);
	}
	openWalletsModal() {
		return __async(this, null, function* () {
			if (isInTMA()) sendExpand();
			widgetController.openWalletsModal();
			return new Promise((resolve) => {
				const unsubscribe = this.onStateChange((state) => {
					const { status } = state;
					if (status === "opened") {
						unsubscribe();
						resolve();
					}
				});
			});
		});
	}
};
var TransactionModalManager = class {
	constructor(options) {
		__publicField(this, "connector");
		__publicField(this, "consumers", []);
		this.connector = options.connector;
		createEffect(() => {
			const currentAction = action();
			this.consumers.forEach((consumer) => consumer(currentAction));
		});
	}
	onStateChange(consumer) {
		this.consumers.push(consumer);
		return () => {
			this.consumers = this.consumers.filter((c2) => c2 !== consumer);
		};
	}
};
var SingleWalletModalManager = class {
	constructor(options) {
		__publicField(this, "connector");
		__publicField(this, "setConnectRequestParametersCallback");
		__publicField(this, "consumers", []);
		__publicField(this, "tracker");
		__publicField(this, "state", singleWalletModalState());
		this.connector = options.connector;
		this.tracker = options.tracker;
		this.setConnectRequestParametersCallback = options.setConnectRequestParametersCallback;
		createEffect(() => {
			const state = singleWalletModalState();
			this.state = state;
			this.consumers.forEach((consumer) => consumer(state));
		});
	}
	open(wallet) {
		return __async(this, null, function* () {
			this.tracker.trackConnectionStarted();
			const fetchedWalletsList = yield this.connector.getWallets();
			const walletsList = applyWalletsListConfiguration(fetchedWalletsList, appState.walletsListConfiguration);
			const embeddedWallet = walletsList.find(isWalletInfoCurrentlyEmbedded);
			const isEmbeddedWalletExist = !!embeddedWallet;
			if (isEmbeddedWalletExist) return this.connectEmbeddedWallet(embeddedWallet);
			const externalWallets = walletsList.filter(isWalletInfoRemote);
			const externalWallet = externalWallets.find((walletInfo) => eqWalletName(walletInfo, wallet));
			const isExternalWalletExist = !!externalWallet;
			if (isExternalWalletExist) return this.openSingleWalletModal(externalWallet);
			const error = `Trying to open modal window with unknown wallet "${wallet}".`;
			this.tracker.trackConnectionError(error);
			throw new TonConnectUIError(error);
		});
	}
	close(reason = "action-cancelled") {
		if (reason === "action-cancelled") this.tracker.trackConnectionError("Connection was cancelled");
		widgetController.closeSingleWalletModal("action-cancelled");
	}
	onStateChange(onChange) {
		this.consumers.push(onChange);
		return () => {
			this.consumers = this.consumers.filter((consumer) => consumer !== onChange);
		};
	}
	connectEmbeddedWallet(embeddedWallet) {
		const connect = (parameters) => {
			setLastSelectedWalletInfo(embeddedWallet);
			this.connector.connect({ jsBridgeKey: embeddedWallet.jsBridgeKey }, parameters);
		};
		const additionalRequest = appState.connectRequestParameters;
		if ((additionalRequest == null ? void 0 : additionalRequest.state) === "loading") this.setConnectRequestParametersCallback(connect);
		else connect(additionalRequest == null ? void 0 : additionalRequest.value);
	}
	openSingleWalletModal(wallet) {
		return __async(this, null, function* () {
			if (isInTMA()) sendExpand();
			widgetController.openSingleWalletModal(wallet);
			return new Promise((resolve) => {
				const unsubscribe = this.onStateChange((state) => {
					const { status } = state;
					if (status === "opened") {
						unsubscribe();
						resolve();
					}
				});
			});
		});
	}
};
var TonConnectUITracker = class {
	constructor(options) {
		__publicField(this, "eventPrefix", "ton-connect-ui-");
		__publicField(this, "tonConnectUiVersion");
		__publicField(this, "tonConnectSdkVersion", null);
		__publicField(this, "eventDispatcher");
		var _a2;
		this.eventDispatcher = (_a2 = options == null ? void 0 : options.eventDispatcher) != null ? _a2 : new BrowserEventDispatcher();
		this.tonConnectUiVersion = options.tonConnectUiVersion;
		this.init().catch();
	}
	get version() {
		return createVersionInfo({
			ton_connect_sdk_lib: this.tonConnectSdkVersion,
			ton_connect_ui_lib: this.tonConnectUiVersion
		});
	}
	init() {
		return __async(this, null, function* () {
			try {
				yield this.setRequestVersionHandler();
				this.tonConnectSdkVersion = yield this.requestTonConnectSdkVersion();
			} catch (e2) {}
		});
	}
	setRequestVersionHandler() {
		return __async(this, null, function* () {
			yield this.eventDispatcher.addEventListener("ton-connect-ui-request-version", () => __async(this, null, function* () {
				yield this.eventDispatcher.dispatchEvent("ton-connect-ui-response-version", createResponseVersionEvent(this.tonConnectUiVersion));
			}));
		});
	}
	requestTonConnectSdkVersion() {
		return __async(this, null, function* () {
			return new Promise((resolve, reject) => __async(this, null, function* () {
				try {
					yield this.eventDispatcher.addEventListener("ton-connect-response-version", (event) => {
						resolve(event.detail.version);
					}, { once: true });
					yield this.eventDispatcher.dispatchEvent("ton-connect-request-version", createRequestVersionEvent());
				} catch (e2) {
					reject(e2);
				}
			}));
		});
	}
	dispatchUserActionEvent(eventDetails) {
		var _a2;
		try {
			(_a2 = this.eventDispatcher) == null || _a2.dispatchEvent(`${this.eventPrefix}${eventDetails.type}`, eventDetails).catch();
		} catch (e2) {}
	}
	trackConnectionStarted(...args) {
		try {
			const event = createConnectionStartedEvent(this.version, ...args);
			this.dispatchUserActionEvent(event);
		} catch (e2) {}
	}
	trackConnectionCompleted(...args) {
		try {
			const event = createConnectionCompletedEvent(this.version, ...args);
			this.dispatchUserActionEvent(event);
		} catch (e2) {}
	}
	trackConnectionError(...args) {
		try {
			const event = createConnectionErrorEvent(this.version, ...args);
			this.dispatchUserActionEvent(event);
		} catch (e2) {}
	}
	trackConnectionRestoringStarted(...args) {
		try {
			const event = createConnectionRestoringStartedEvent(this.version, ...args);
			this.dispatchUserActionEvent(event);
		} catch (e2) {}
	}
	trackConnectionRestoringCompleted(...args) {
		try {
			const event = createConnectionRestoringCompletedEvent(this.version, ...args);
			this.dispatchUserActionEvent(event);
		} catch (e2) {}
	}
	trackConnectionRestoringError(...args) {
		try {
			const event = createConnectionRestoringErrorEvent(this.version, ...args);
			this.dispatchUserActionEvent(event);
		} catch (e2) {}
	}
	trackDisconnection(...args) {
		try {
			const event = createDisconnectionEvent(this.version, ...args);
			this.dispatchUserActionEvent(event);
		} catch (e2) {}
	}
	trackTransactionSentForSignature(...args) {
		try {
			const event = createTransactionSentForSignatureEvent(this.version, ...args);
			this.dispatchUserActionEvent(event);
		} catch (e2) {}
	}
	trackTransactionSigned(...args) {
		try {
			const event = createTransactionSignedEvent(this.version, ...args);
			this.dispatchUserActionEvent(event);
		} catch (e2) {}
	}
	trackTransactionSigningFailed(...args) {
		try {
			const event = createTransactionSigningFailedEvent(this.version, ...args);
			this.dispatchUserActionEvent(event);
		} catch (e2) {}
	}
};
const tonConnectUiVersion = "2.1.0";
var TonConnectUI = class {
	constructor(options) {
		__publicField(this, "walletInfoStorage", new WalletInfoStorage());
		__publicField(this, "preferredWalletStorage", new PreferredWalletStorage());
		__publicField(this, "tracker");
		__publicField(this, "walletInfo", null);
		__publicField(this, "systemThemeChangeUnsubscribe", null);
		__publicField(this, "actionsConfiguration");
		__publicField(this, "walletsList");
		__publicField(this, "walletsRequiredFeatures");
		__publicField(this, "connectRequestParametersCallback");
		__publicField(this, "connector");
		__publicField(this, "modal");
		__publicField(this, "singleWalletModal");
		__publicField(this, "transactionModal");
		__publicField(this, "connectionRestored", Promise.resolve(false));
		if (options && "connector" in options && options.connector) this.connector = options.connector;
		else if (options && "manifestUrl" in options && options.manifestUrl) this.connector = new TonConnect({
			manifestUrl: options.manifestUrl,
			eventDispatcher: options.eventDispatcher,
			walletsRequiredFeatures: options.walletsRequiredFeatures
		});
		else throw new TonConnectUIError("You have to specify a `manifestUrl` or a `connector` in the options.");
		this.tracker = new TonConnectUITracker({
			eventDispatcher: options == null ? void 0 : options.eventDispatcher,
			tonConnectUiVersion
		});
		this.modal = new WalletsModalManager({
			connector: this.connector,
			tracker: this.tracker,
			setConnectRequestParametersCallback: (callback) => {
				this.connectRequestParametersCallback = callback;
			}
		});
		this.singleWalletModal = new SingleWalletModalManager({
			connector: this.connector,
			tracker: this.tracker,
			setConnectRequestParametersCallback: (callback) => {
				this.connectRequestParametersCallback = callback;
			}
		});
		this.transactionModal = new TransactionModalManager({ connector: this.connector });
		this.walletsRequiredFeatures = options.walletsRequiredFeatures;
		this.walletsList = this.getWallets();
		this.walletsList.then((list) => preloadImages(uniq(list.map((item) => item.imageUrl))));
		const rootId = this.normalizeWidgetRoot(options == null ? void 0 : options.widgetRootId);
		this.subscribeToWalletChange();
		if ((options == null ? void 0 : options.restoreConnection) !== false) this.connectionRestored = createMacrotaskAsync(() => __async(this, null, function* () {
			this.tracker.trackConnectionRestoringStarted();
			yield this.connector.restoreConnection();
			if (!this.connector.connected) {
				this.tracker.trackConnectionRestoringError("Connection was not restored");
				this.walletInfoStorage.removeWalletInfo();
			} else this.tracker.trackConnectionRestoringCompleted(this.wallet);
			return this.connector.connected;
		}));
		this.uiOptions = mergeOptions(options, { uiPreferences: { theme: "SYSTEM" } });
		const preferredWalletName = this.preferredWalletStorage.getPreferredWalletAppName();
		setAppState({
			connector: this.connector,
			preferredWalletAppName: preferredWalletName
		});
		widgetController.renderApp(rootId, this);
	}
	static getWallets() {
		return TonConnect.getWallets();
	}
	get connected() {
		return this.connector.connected;
	}
	get account() {
		return this.connector.account;
	}
	get wallet() {
		if (!this.connector.wallet) return null;
		return __spreadValues(__spreadValues({}, this.connector.wallet), this.walletInfo);
	}
	set uiOptions(options) {
		var _a2, _b2, _c2, _d2, _e2;
		this.checkButtonRootExist(options.buttonRootId);
		this.actionsConfiguration = options.actionsConfiguration;
		if ((_a2 = options.uiPreferences) == null ? void 0 : _a2.theme) if (((_b2 = options.uiPreferences) == null ? void 0 : _b2.theme) !== "SYSTEM") {
			(_c2 = this.systemThemeChangeUnsubscribe) == null || _c2.call(this);
			setTheme(options.uiPreferences.theme, options.uiPreferences.colorsSet);
		} else {
			setTheme(getSystemTheme(), options.uiPreferences.colorsSet);
			if (!this.systemThemeChangeUnsubscribe) this.systemThemeChangeUnsubscribe = subscribeToThemeChange(setTheme);
		}
		else if ((_d2 = options.uiPreferences) == null ? void 0 : _d2.colorsSet) setColors(options.uiPreferences.colorsSet);
		if ((_e2 = options.uiPreferences) == null ? void 0 : _e2.borderRadius) setBorderRadius(options.uiPreferences.borderRadius);
		setAppState((state) => {
			var _a3, _b3;
			const merged = mergeOptions(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, options.language && { language: options.language }), !!((_a3 = options.actionsConfiguration) == null ? void 0 : _a3.returnStrategy) && { returnStrategy: options.actionsConfiguration.returnStrategy }), !!((_b3 = options.actionsConfiguration) == null ? void 0 : _b3.twaReturnUrl) && { twaReturnUrl: options.actionsConfiguration.twaReturnUrl }), !!options.walletsListConfiguration && { walletsListConfiguration: options.walletsListConfiguration }), unwrap(state));
			if (options.buttonRootId !== void 0) merged.buttonRootId = options.buttonRootId;
			if (options.enableAndroidBackHandler !== void 0) merged.enableAndroidBackHandler = options.enableAndroidBackHandler;
			return merged;
		});
	}
	setConnectRequestParameters(connectRequestParameters) {
		var _a2;
		setAppState({ connectRequestParameters });
		if ((connectRequestParameters == null ? void 0 : connectRequestParameters.state) === "ready" || !connectRequestParameters) (_a2 = this.connectRequestParametersCallback) == null || _a2.call(this, connectRequestParameters == null ? void 0 : connectRequestParameters.value);
	}
	getWallets() {
		return __async(this, null, function* () {
			return this.connector.getWallets();
		});
	}
	onStatusChange(callback, errorsHandler) {
		return this.connector.onStatusChange((wallet) => __async(this, null, function* () {
			if (wallet) {
				const lastSelectedWalletInfo2 = yield this.getSelectedWalletInfo(wallet);
				callback(__spreadValues(__spreadValues({}, wallet), lastSelectedWalletInfo2 || this.walletInfoStorage.getWalletInfo()));
			} else callback(wallet);
		}), errorsHandler);
	}
	openModal() {
		return __async(this, null, function* () {
			return this.modal.open();
		});
	}
	closeModal(reason) {
		this.modal.close(reason);
	}
	onModalStateChange(onChange) {
		return this.modal.onStateChange(onChange);
	}
	get modalState() {
		return this.modal.state;
	}
	openSingleWalletModal(wallet) {
		return __async(this, null, function* () {
			return this.singleWalletModal.open(wallet);
		});
	}
	closeSingleWalletModal(closeReason) {
		this.singleWalletModal.close(closeReason);
	}
	onSingleWalletModalStateChange(onChange) {
		return this.singleWalletModal.onStateChange(onChange);
	}
	get singleWalletModalState() {
		return this.singleWalletModal.state;
	}
	connectWallet() {
		return __async(this, null, function* () {
			const walletsList = yield this.getWallets();
			const embeddedWallet = walletsList.find(isWalletInfoCurrentlyEmbedded);
			if (embeddedWallet) return yield this.connectEmbeddedWallet(embeddedWallet);
			else return yield this.connectExternalWallet();
		});
	}
	disconnect() {
		this.tracker.trackDisconnection(this.wallet, "dapp");
		widgetController.clearAction();
		widgetController.removeSelectedWalletInfo();
		this.walletInfoStorage.removeWalletInfo();
		return this.connector.disconnect();
	}
	sendTransaction(tx, options) {
		return __async(this, null, function* () {
			this.tracker.trackTransactionSentForSignature(this.wallet, tx);
			if (!this.connected) {
				this.tracker.trackTransactionSigningFailed(this.wallet, tx, "Wallet was not connected");
				throw new TonConnectUIError("Connect wallet to send a transaction.");
			}
			if (isInTMA()) sendExpand();
			const { notifications: notifications2, modals, returnStrategy, twaReturnUrl } = this.getModalsAndNotificationsConfiguration(options);
			widgetController.setAction({
				name: "confirm-transaction",
				showNotification: notifications2.includes("before"),
				openModal: modals.includes("before"),
				sent: false
			});
			const onRequestSent = () => {
				if (abortController.signal.aborted) return;
				widgetController.setAction({
					name: "confirm-transaction",
					showNotification: notifications2.includes("before"),
					openModal: modals.includes("before"),
					sent: true
				});
				if (this.walletInfo && "universalLink" in this.walletInfo && (this.walletInfo.openMethod === "universal-link" || this.walletInfo.openMethod === "custom-deeplink")) if (isTelegramUrl(this.walletInfo.universalLink)) redirectToTelegram(this.walletInfo.universalLink, {
					returnStrategy,
					twaReturnUrl: twaReturnUrl || appState.twaReturnUrl,
					forceRedirect: false
				});
				else redirectToWallet(this.walletInfo.universalLink, this.walletInfo.deepLink, {
					returnStrategy,
					forceRedirect: false
				}, () => {});
			};
			const abortController = new AbortController();
			const unsubscribe = this.onTransactionModalStateChange((action2) => {
				if (action2 == null ? void 0 : action2.openModal) return;
				unsubscribe();
				if (!action2) abortController.abort();
			});
			try {
				const result = yield this.waitForSendTransaction({
					transaction: tx,
					signal: abortController.signal
				}, onRequestSent);
				this.tracker.trackTransactionSigned(this.wallet, tx, result);
				widgetController.setAction({
					name: "transaction-sent",
					showNotification: notifications2.includes("success"),
					openModal: modals.includes("success")
				});
				return result;
			} catch (e2) {
				widgetController.setAction({
					name: "transaction-canceled",
					showNotification: notifications2.includes("error"),
					openModal: modals.includes("error")
				});
				if (e2 instanceof TonConnectError) throw e2;
				else {
					console.error(e2);
					throw new TonConnectUIError("Unhandled error:" + e2);
				}
			} finally {
				unsubscribe();
			}
		});
	}
	connectEmbeddedWallet(embeddedWallet) {
		return __async(this, null, function* () {
			const connect = (parameters) => {
				setLastSelectedWalletInfo(embeddedWallet);
				this.connector.connect({ jsBridgeKey: embeddedWallet.jsBridgeKey }, parameters);
			};
			const additionalRequest = appState.connectRequestParameters;
			if ((additionalRequest == null ? void 0 : additionalRequest.state) === "loading") this.connectRequestParametersCallback = connect;
			else connect(additionalRequest == null ? void 0 : additionalRequest.value);
			return yield this.waitForWalletConnection({ ignoreErrors: false });
		});
	}
	connectExternalWallet() {
		return __async(this, null, function* () {
			const abortController = new AbortController();
			widgetController.openWalletsModal();
			const unsubscribe = this.onModalStateChange((state) => {
				const { status, closeReason } = state;
				if (status === "opened") return;
				unsubscribe();
				if (closeReason === "action-cancelled") abortController.abort();
			});
			return yield this.waitForWalletConnection({
				ignoreErrors: true,
				signal: abortController.signal
			});
		});
	}
	waitForWalletConnection(options) {
		return __async(this, null, function* () {
			return new Promise((resolve, reject) => {
				this.tracker.trackConnectionStarted();
				const { ignoreErrors = false, signal = null } = options;
				if (signal && signal.aborted) {
					this.tracker.trackConnectionError("Connection was cancelled");
					return reject(new TonConnectUIError("Wallet was not connected"));
				}
				const onStatusChangeHandler = (wallet) => __async(this, null, function* () {
					if (!wallet) {
						this.tracker.trackConnectionError("Connection was cancelled");
						if (ignoreErrors) return;
						unsubscribe();
						reject(new TonConnectUIError("Wallet was not connected"));
					} else {
						this.tracker.trackConnectionCompleted(wallet);
						unsubscribe();
						resolve(wallet);
					}
				});
				const onErrorsHandler = (reason) => {
					this.tracker.trackConnectionError(reason.message);
					if (ignoreErrors) return;
					unsubscribe();
					reject(reason);
				};
				const unsubscribe = this.onStatusChange((wallet) => onStatusChangeHandler(wallet), (reason) => onErrorsHandler(reason));
				if (signal) signal.addEventListener("abort", () => {
					unsubscribe();
					reject(new TonConnectUIError("Wallet was not connected"));
				}, { once: true });
			});
		});
	}
	waitForSendTransaction(options, onRequestSent) {
		return __async(this, null, function* () {
			return new Promise((resolve, reject) => {
				const { transaction, signal } = options;
				if (signal.aborted) {
					this.tracker.trackTransactionSigningFailed(this.wallet, transaction, "Transaction was cancelled");
					return reject(new TonConnectUIError("Transaction was not sent"));
				}
				const onTransactionHandler = (transaction2) => __async(this, null, function* () {
					resolve(transaction2);
				});
				const onErrorsHandler = (reason) => {
					reject(reason);
				};
				const onCanceledHandler = () => {
					this.tracker.trackTransactionSigningFailed(this.wallet, transaction, "Transaction was cancelled");
					reject(new TonConnectUIError("Transaction was not sent"));
				};
				signal.addEventListener("abort", onCanceledHandler, { once: true });
				this.connector.sendTransaction(transaction, {
					onRequestSent,
					signal
				}).then((result) => {
					signal.removeEventListener("abort", onCanceledHandler);
					return onTransactionHandler(result);
				}).catch((reason) => {
					signal.removeEventListener("abort", onCanceledHandler);
					return onErrorsHandler(reason);
				});
			});
		});
	}
	onTransactionModalStateChange(onChange) {
		return this.transactionModal.onStateChange(onChange);
	}
	subscribeToWalletChange() {
		this.connector.onStatusChange((wallet) => __async(this, null, function* () {
			var _a2;
			if (wallet) {
				yield this.updateWalletInfo(wallet);
				this.setPreferredWalletAppName(((_a2 = this.walletInfo) == null ? void 0 : _a2.appName) || wallet.device.appName);
			} else this.walletInfoStorage.removeWalletInfo();
		}));
	}
	setPreferredWalletAppName(value) {
		this.preferredWalletStorage.setPreferredWalletAppName(value);
		setAppState({ preferredWalletAppName: value });
	}
	getSelectedWalletInfo(wallet) {
		return __async(this, null, function* () {
			let lastSelectedWalletInfo2 = widgetController.getSelectedWalletInfo();
			if (!lastSelectedWalletInfo2) return null;
			let fullLastSelectedWalletInfo;
			if (!("name" in lastSelectedWalletInfo2)) {
				const walletsList = applyWalletsListConfiguration(yield this.walletsList, appState.walletsListConfiguration);
				const walletInfo = walletsList.find((item) => eqWalletName(item, wallet.device.appName));
				if (!walletInfo) throw new TonConnectUIError(`Cannot find WalletInfo for the '${wallet.device.appName}' wallet`);
				fullLastSelectedWalletInfo = __spreadValues(__spreadValues({}, walletInfo), lastSelectedWalletInfo2);
			} else fullLastSelectedWalletInfo = lastSelectedWalletInfo2;
			return fullLastSelectedWalletInfo;
		});
	}
	updateWalletInfo(wallet) {
		return __async(this, null, function* () {
			const selectedWalletInfo = yield this.getSelectedWalletInfo(wallet);
			if (selectedWalletInfo) {
				this.walletInfo = selectedWalletInfo;
				this.walletInfoStorage.setWalletInfo(selectedWalletInfo);
				return;
			}
			const storedWalletInfo = this.walletInfoStorage.getWalletInfo();
			if (storedWalletInfo) {
				this.walletInfo = storedWalletInfo;
				return;
			}
			this.walletInfo = (yield this.walletsList).find((walletInfo) => eqWalletName(walletInfo, wallet.device.appName)) || null;
		});
	}
	normalizeWidgetRoot(rootId) {
		if (!rootId || !document.getElementById(rootId)) {
			rootId = "tc-widget-root";
			const rootElement = document.createElement("div");
			rootElement.id = rootId;
			document.body.appendChild(rootElement);
		}
		return rootId;
	}
	checkButtonRootExist(buttonRootId) {
		if (buttonRootId == null) return;
		if (!document.getElementById(buttonRootId)) throw new TonConnectUIError(`${buttonRootId} element not found in the document.`);
	}
	getModalsAndNotificationsConfiguration(options) {
		var _a2, _b2, _c2, _d2, _e2, _f2;
		const allActions = [
			"before",
			"success",
			"error"
		];
		let notifications2 = allActions;
		if (((_a2 = this.actionsConfiguration) == null ? void 0 : _a2.notifications) && ((_b2 = this.actionsConfiguration) == null ? void 0 : _b2.notifications) !== "all") notifications2 = this.actionsConfiguration.notifications;
		if (options == null ? void 0 : options.notifications) if (options.notifications === "all") notifications2 = allActions;
		else notifications2 = options.notifications;
		let modals = ["before"];
		if ((_c2 = this.actionsConfiguration) == null ? void 0 : _c2.modals) if (this.actionsConfiguration.modals === "all") modals = allActions;
		else modals = this.actionsConfiguration.modals;
		if (options == null ? void 0 : options.modals) if (options.modals === "all") modals = allActions;
		else modals = options.modals;
		const returnStrategy = (options == null ? void 0 : options.returnStrategy) || ((_d2 = this.actionsConfiguration) == null ? void 0 : _d2.returnStrategy) || "back";
		const twaReturnUrl = (options == null ? void 0 : options.twaReturnUrl) || ((_e2 = this.actionsConfiguration) == null ? void 0 : _e2.twaReturnUrl);
		let skipRedirectToWallet = (options == null ? void 0 : options.skipRedirectToWallet) || ((_f2 = this.actionsConfiguration) == null ? void 0 : _f2.skipRedirectToWallet) || "ios";
		if (isInTMA()) skipRedirectToWallet = "never";
		return {
			notifications: notifications2,
			modals,
			returnStrategy,
			twaReturnUrl,
			skipRedirectToWallet
		};
	}
};

//#endregion
//#region ../../node_modules/.pnpm/symbol.inspect@1.0.1/node_modules/symbol.inspect/index.js
var require_symbol = __commonJS({ "../../node_modules/.pnpm/symbol.inspect@1.0.1/node_modules/symbol.inspect/index.js"(exports, module) {
	/**
	* <symbol> that can be used to declare custom inspect functions.
	*
	* same as Symbol.for('nodejs.util.inspect.custom')
	* same as util.inspect.custom
	*/
	const SymbolInspect = Symbol.for("nodejs.util.inspect.custom");
	module.exports = SymbolInspect;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/utils/crc16.js
var require_crc16 = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/utils/crc16.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.crc16 = void 0;
	function crc16$1(data) {
		const poly = 4129;
		let reg = 0;
		const message = Buffer.alloc(data.length + 2);
		message.set(data);
		for (let byte of message) {
			let mask = 128;
			while (mask > 0) {
				reg <<= 1;
				if (byte & mask) reg += 1;
				mask >>= 1;
				if (reg > 65535) {
					reg &= 65535;
					reg ^= poly;
				}
			}
		}
		return Buffer.from([Math.floor(reg / 256), reg % 256]);
	}
	exports.crc16 = crc16$1;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/address/Address.js
var require_Address = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/address/Address.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	var __importDefault$10 = void 0 && (void 0).__importDefault || function(mod) {
		return mod && mod.__esModule ? mod : { "default": mod };
	};
	var _a$5;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.address = exports.Address = void 0;
	const symbol_inspect_1$5 = __importDefault$10(require_symbol());
	const crc16_1$2 = require_crc16();
	const bounceable_tag = 17;
	const non_bounceable_tag = 81;
	const test_flag = 128;
	function parseFriendlyAddress(src) {
		if (typeof src === "string" && !Address$1.isFriendly(src)) throw new Error("Unknown address type");
		const data = Buffer.isBuffer(src) ? src : Buffer.from(src, "base64");
		if (data.length !== 36) throw new Error("Unknown address type: byte length is not equal to 36");
		const addr = data.subarray(0, 34);
		const crc = data.subarray(34, 36);
		const calcedCrc = (0, crc16_1$2.crc16)(addr);
		if (!(calcedCrc[0] === crc[0] && calcedCrc[1] === crc[1])) throw new Error("Invalid checksum: " + src);
		let tag = addr[0];
		let isTestOnly = false;
		let isBounceable = false;
		if (tag & test_flag) {
			isTestOnly = true;
			tag = tag ^ test_flag;
		}
		if (tag !== bounceable_tag && tag !== non_bounceable_tag) throw "Unknown address tag";
		isBounceable = tag === bounceable_tag;
		let workchain = null;
		if (addr[1] === 255) workchain = -1;
		else workchain = addr[1];
		const hashPart = addr.subarray(2, 34);
		return {
			isTestOnly,
			isBounceable,
			workchain,
			hashPart
		};
	}
	var Address$1 = class Address$1 {
		static isAddress(src) {
			return src instanceof Address$1;
		}
		static isFriendly(source) {
			if (source.length !== 48) return false;
			if (!/[A-Za-z0-9+/_-]+/.test(source)) return false;
			return true;
		}
		static isRaw(source) {
			if (source.indexOf(":") === -1) return false;
			let [wc, hash] = source.split(":");
			if (!Number.isInteger(parseFloat(wc))) return false;
			if (!/[a-f0-9]+/.test(hash.toLowerCase())) return false;
			if (hash.length !== 64) return false;
			return true;
		}
		static normalize(source) {
			if (typeof source === "string") return Address$1.parse(source).toString();
			else return source.toString();
		}
		static parse(source) {
			if (Address$1.isFriendly(source)) return this.parseFriendly(source).address;
			else if (Address$1.isRaw(source)) return this.parseRaw(source);
			else throw new Error("Unknown address type: " + source);
		}
		static parseRaw(source) {
			let workChain = parseInt(source.split(":")[0]);
			let hash = Buffer.from(source.split(":")[1], "hex");
			return new Address$1(workChain, hash);
		}
		static parseFriendly(source) {
			if (Buffer.isBuffer(source)) {
				let r = parseFriendlyAddress(source);
				return {
					isBounceable: r.isBounceable,
					isTestOnly: r.isTestOnly,
					address: new Address$1(r.workchain, r.hashPart)
				};
			} else {
				let addr = source.replace(/\-/g, "+").replace(/_/g, "/");
				let r = parseFriendlyAddress(addr);
				return {
					isBounceable: r.isBounceable,
					isTestOnly: r.isTestOnly,
					address: new Address$1(r.workchain, r.hashPart)
				};
			}
		}
		constructor(workChain, hash) {
			this.toRawString = () => {
				return this.workChain + ":" + this.hash.toString("hex");
			};
			this.toRaw = () => {
				const addressWithChecksum = Buffer.alloc(36);
				addressWithChecksum.set(this.hash);
				addressWithChecksum.set([
					this.workChain,
					this.workChain,
					this.workChain,
					this.workChain
				], 32);
				return addressWithChecksum;
			};
			this.toStringBuffer = (args) => {
				let testOnly = args && args.testOnly !== void 0 ? args.testOnly : false;
				let bounceable = args && args.bounceable !== void 0 ? args.bounceable : true;
				let tag = bounceable ? bounceable_tag : non_bounceable_tag;
				if (testOnly) tag |= test_flag;
				const addr = Buffer.alloc(34);
				addr[0] = tag;
				addr[1] = this.workChain;
				addr.set(this.hash, 2);
				const addressWithChecksum = Buffer.alloc(36);
				addressWithChecksum.set(addr);
				addressWithChecksum.set((0, crc16_1$2.crc16)(addr), 34);
				return addressWithChecksum;
			};
			this.toString = (args) => {
				let urlSafe = args && args.urlSafe !== void 0 ? args.urlSafe : true;
				let buffer = this.toStringBuffer(args);
				if (urlSafe) return buffer.toString("base64").replace(/\+/g, "-").replace(/\//g, "_");
				else return buffer.toString("base64");
			};
			this[_a$5] = () => this.toString();
			if (hash.length !== 32) throw new Error("Invalid address hash length: " + hash.length);
			this.workChain = workChain;
			this.hash = hash;
			Object.freeze(this);
		}
		equals(src) {
			if (src.workChain !== this.workChain) return false;
			return src.hash.equals(this.hash);
		}
	};
	exports.Address = Address$1;
	_a$5 = symbol_inspect_1$5.default;
	function address(src) {
		return Address$1.parse(src);
	}
	exports.address = address;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/address/ExternalAddress.js
var require_ExternalAddress = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/address/ExternalAddress.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	var __importDefault$9 = void 0 && (void 0).__importDefault || function(mod) {
		return mod && mod.__esModule ? mod : { "default": mod };
	};
	var _a$4;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ExternalAddress = void 0;
	const symbol_inspect_1$4 = __importDefault$9(require_symbol());
	var ExternalAddress = class ExternalAddress {
		static isAddress(src) {
			return src instanceof ExternalAddress;
		}
		constructor(value, bits) {
			this[_a$4] = () => this.toString();
			this.value = value;
			this.bits = bits;
		}
		toString() {
			return `External<${this.bits}:${this.value}>`;
		}
	};
	exports.ExternalAddress = ExternalAddress;
	_a$4 = symbol_inspect_1$4.default;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/utils/base32.js
var require_base32 = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/utils/base32.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.base32Decode = exports.base32Encode = void 0;
	const alphabet = "abcdefghijklmnopqrstuvwxyz234567";
	function base32Encode(buffer) {
		const length = buffer.byteLength;
		let bits = 0;
		let value = 0;
		let output = "";
		for (let i$2 = 0; i$2 < length; i$2++) {
			value = value << 8 | buffer[i$2];
			bits += 8;
			while (bits >= 5) {
				output += alphabet[value >>> bits - 5 & 31];
				bits -= 5;
			}
		}
		if (bits > 0) output += alphabet[value << 5 - bits & 31];
		return output;
	}
	exports.base32Encode = base32Encode;
	function readChar(alphabet$1, char) {
		const idx = alphabet$1.indexOf(char);
		if (idx === -1) throw new Error("Invalid character found: " + char);
		return idx;
	}
	function base32Decode(input) {
		let cleanedInput;
		cleanedInput = input.toLowerCase();
		const { length } = cleanedInput;
		let bits = 0;
		let value = 0;
		let index = 0;
		const output = Buffer.alloc(length * 5 / 8 | 0);
		for (let i$2 = 0; i$2 < length; i$2++) {
			value = value << 5 | readChar(alphabet, cleanedInput[i$2]);
			bits += 5;
			if (bits >= 8) {
				output[index++] = value >>> bits - 8 & 255;
				bits -= 8;
			}
		}
		return output;
	}
	exports.base32Decode = base32Decode;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/address/ADNLAddress.js
var require_ADNLAddress = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/address/ADNLAddress.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	var __importDefault$8 = void 0 && (void 0).__importDefault || function(mod) {
		return mod && mod.__esModule ? mod : { "default": mod };
	};
	var _a$3;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ADNLAddress = void 0;
	const symbol_inspect_1$3 = __importDefault$8(require_symbol());
	const base32_1$1 = require_base32();
	const crc16_1$1 = require_crc16();
	var ADNLAddress = class ADNLAddress {
		static parseFriendly(src) {
			if (src.length !== 55) throw Error("Invalid address");
			src = "f" + src;
			let decoded = (0, base32_1$1.base32Decode)(src);
			if (decoded[0] !== 45) throw Error("Invalid address");
			let gotHash = decoded.slice(33);
			let hash = (0, crc16_1$1.crc16)(decoded.slice(0, 33));
			if (!hash.equals(gotHash)) throw Error("Invalid address");
			return new ADNLAddress(decoded.slice(1, 33));
		}
		static parseRaw(src) {
			const data = Buffer.from(src, "base64");
			return new ADNLAddress(data);
		}
		constructor(address$1) {
			this.toRaw = () => {
				return this.address.toString("hex").toUpperCase();
			};
			this.toString = () => {
				let data = Buffer.concat([Buffer.from([45]), this.address]);
				let hash = (0, crc16_1$1.crc16)(data);
				data = Buffer.concat([data, hash]);
				return (0, base32_1$1.base32Encode)(data).slice(1);
			};
			this[_a$3] = () => this.toString();
			if (address$1.length !== 32) throw Error("Invalid address");
			this.address = address$1;
		}
		equals(b) {
			return this.address.equals(b.address);
		}
	};
	exports.ADNLAddress = ADNLAddress;
	_a$3 = symbol_inspect_1$3.default;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/utils/paddedBits.js
var require_paddedBits = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/utils/paddedBits.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.paddedBufferToBits = exports.bitsToPaddedBuffer = void 0;
	const BitBuilder_1$3 = require_BitBuilder();
	const BitString_1$7 = require_BitString();
	function bitsToPaddedBuffer(bits) {
		let builder = new BitBuilder_1$3.BitBuilder(Math.ceil(bits.length / 8) * 8);
		builder.writeBits(bits);
		let padding = Math.ceil(bits.length / 8) * 8 - bits.length;
		for (let i$2 = 0; i$2 < padding; i$2++) if (i$2 === 0) builder.writeBit(1);
		else builder.writeBit(0);
		return builder.buffer();
	}
	exports.bitsToPaddedBuffer = bitsToPaddedBuffer;
	function paddedBufferToBits(buff) {
		let bitLen = 0;
		for (let i$2 = buff.length - 1; i$2 >= 0; i$2--) if (buff[i$2] !== 0) {
			const testByte = buff[i$2];
			let bitPos = testByte & -testByte;
			if ((bitPos & 1) == 0) bitPos = Math.log2(bitPos) + 1;
			if (i$2 > 0) bitLen = i$2 << 3;
			bitLen += 8 - bitPos;
			break;
		}
		return new BitString_1$7.BitString(buff, 0, bitLen);
	}
	exports.paddedBufferToBits = paddedBufferToBits;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/BitString.js
var require_BitString = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/BitString.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	var __importDefault$7 = void 0 && (void 0).__importDefault || function(mod) {
		return mod && mod.__esModule ? mod : { "default": mod };
	};
	var _a$2;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.BitString = void 0;
	const paddedBits_1$3 = require_paddedBits();
	const symbol_inspect_1$2 = __importDefault$7(require_symbol());
	/**
	* BitString is a class that represents a bitstring in a buffer with a specified offset and length
	*/
	var BitString = class BitString {
		/**
		* Checks if supplied object is BitString
		* @param src is unknow object
		* @returns true if object is BitString and false otherwise
		**/
		static isBitString(src) {
			return src instanceof BitString;
		}
		/**
		* Constructing BitString from a buffer
		* @param data data that contains the bitstring data. NOTE: We are expecting this buffer to be NOT modified
		* @param offset offset in bits from the start of the buffer
		* @param length length of the bitstring in bits
		*/
		constructor(data, offset, length) {
			this[_a$2] = () => this.toString();
			if (length < 0) throw new Error(`Length ${length} is out of bounds`);
			this._length = length;
			this._data = data;
			this._offset = offset;
		}
		/**
		* Returns the length of the bitstring
		*/
		get length() {
			return this._length;
		}
		/**
		* Returns the bit at the specified index
		* @param index index of the bit
		* @throws Error if index is out of bounds
		* @returns true if the bit is set, false otherwise
		*/
		at(index) {
			if (index >= this._length) throw new Error(`Index ${index} > ${this._length} is out of bounds`);
			if (index < 0) throw new Error(`Index ${index} < 0 is out of bounds`);
			let byteIndex = this._offset + index >> 3;
			let bitIndex = 7 - (this._offset + index) % 8;
			return (this._data[byteIndex] & 1 << bitIndex) !== 0;
		}
		/**
		* Get a subscring of the bitstring
		* @param offset
		* @param length
		* @returns
		*/
		substring(offset, length) {
			if (offset > this._length) throw new Error(`Offset(${offset}) > ${this._length} is out of bounds`);
			if (offset < 0) throw new Error(`Offset(${offset}) < 0 is out of bounds`);
			if (length === 0) return BitString.EMPTY;
			if (offset + length > this._length) throw new Error(`Offset ${offset} + Length ${length} > ${this._length} is out of bounds`);
			return new BitString(this._data, this._offset + offset, length);
		}
		/**
		* Try to get a buffer from the bitstring without allocations
		* @param offset offset in bits
		* @param length length in bits
		* @returns buffer if the bitstring is aligned to bytes, null otherwise
		*/
		subbuffer(offset, length) {
			if (offset > this._length) throw new Error(`Offset ${offset} is out of bounds`);
			if (offset < 0) throw new Error(`Offset ${offset} is out of bounds`);
			if (offset + length > this._length) throw new Error(`Offset + Lenght = ${offset + length} is out of bounds`);
			if (length % 8 !== 0) return null;
			if ((this._offset + offset) % 8 !== 0) return null;
			let start = this._offset + offset >> 3;
			let end = start + (length >> 3);
			return this._data.subarray(start, end);
		}
		/**
		* Checks for equality
		* @param b other bitstring
		* @returns true if the bitstrings are equal, false otherwise
		*/
		equals(b) {
			if (this._length !== b._length) return false;
			for (let i$2 = 0; i$2 < this._length; i$2++) if (this.at(i$2) !== b.at(i$2)) return false;
			return true;
		}
		/**
		* Format to canonical string
		* @returns formatted bits as a string
		*/
		toString() {
			const padded = (0, paddedBits_1$3.bitsToPaddedBuffer)(this);
			if (this._length % 4 === 0) {
				const s$1 = padded.subarray(0, Math.ceil(this._length / 8)).toString("hex").toUpperCase();
				if (this._length % 8 === 0) return s$1;
				else return s$1.substring(0, s$1.length - 1);
			} else {
				const hex = padded.toString("hex").toUpperCase();
				if (this._length % 8 <= 4) return hex.substring(0, hex.length - 1) + "_";
				else return hex + "_";
			}
		}
	};
	exports.BitString = BitString;
	_a$2 = symbol_inspect_1$2.default;
	BitString.EMPTY = new BitString(Buffer.alloc(0), 0, 0);
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/BitBuilder.js
var require_BitBuilder = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/BitBuilder.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.BitBuilder = void 0;
	const Address_1$7 = require_Address();
	const ExternalAddress_1$2 = require_ExternalAddress();
	const BitString_1$6 = require_BitString();
	/**
	* Class for building bit strings
	*/
	var BitBuilder = class {
		constructor(size = 1023) {
			this._buffer = Buffer.alloc(Math.ceil(size / 8));
			this._length = 0;
		}
		/**
		* Current number of bits written
		*/
		get length() {
			return this._length;
		}
		/**
		* Write a single bit
		* @param value bit to write, true or positive number for 1, false or zero or negative for 0
		*/
		writeBit(value) {
			let n$1 = this._length;
			if (n$1 > this._buffer.length * 8) throw new Error("BitBuilder overflow");
			if (value === true || value > 0) this._buffer[n$1 / 8 | 0] |= 1 << 7 - n$1 % 8;
			this._length++;
		}
		/**
		* Copy bits from BitString
		* @param src source bits
		*/
		writeBits(src) {
			for (let i$2 = 0; i$2 < src.length; i$2++) this.writeBit(src.at(i$2));
		}
		/**
		* Write bits from buffer
		* @param src source buffer
		*/
		writeBuffer(src) {
			if (this._length % 8 === 0) {
				if (this._length + src.length * 8 > this._buffer.length * 8) throw new Error("BitBuilder overflow");
				src.copy(this._buffer, this._length / 8);
				this._length += src.length * 8;
			} else for (let i$2 = 0; i$2 < src.length; i$2++) this.writeUint(src[i$2], 8);
		}
		/**
		* Write uint value
		* @param value value as bigint or number
		* @param bits number of bits to write
		*/
		writeUint(value, bits) {
			if (bits === 8 && this._length % 8 === 0) {
				let v$1 = Number(value);
				if (v$1 < 0 || v$1 > 255 || !Number.isSafeInteger(v$1)) throw Error(`value is out of range for ${bits} bits. Got ${value}`);
				this._buffer[this._length / 8] = Number(value);
				this._length += 8;
				return;
			}
			if (bits === 16 && this._length % 8 === 0) {
				let v$1 = Number(value);
				if (v$1 < 0 || v$1 > 65536 || !Number.isSafeInteger(v$1)) throw Error(`value is out of range for ${bits} bits. Got ${value}`);
				this._buffer[this._length / 8] = v$1 >> 8;
				this._buffer[this._length / 8 + 1] = v$1 & 255;
				this._length += 16;
				return;
			}
			let v = BigInt(value);
			if (bits < 0 || !Number.isSafeInteger(bits)) throw Error(`invalid bit length. Got ${bits}`);
			if (bits === 0) if (value !== 0n) throw Error(`value is not zero for ${bits} bits. Got ${value}`);
			else return;
			let vBits = 1n << BigInt(bits);
			if (v < 0 || v >= vBits) throw Error(`bitLength is too small for a value ${value}. Got ${bits}`);
			let b = [];
			while (v > 0) {
				b.push(v % 2n === 1n);
				v /= 2n;
			}
			for (let i$2 = 0; i$2 < bits; i$2++) {
				let off = bits - i$2 - 1;
				if (off < b.length) this.writeBit(b[off]);
				else this.writeBit(false);
			}
		}
		/**
		* Write int value
		* @param value value as bigint or number
		* @param bits number of bits to write
		*/
		writeInt(value, bits) {
			let v = BigInt(value);
			if (bits < 0 || !Number.isSafeInteger(bits)) throw Error(`invalid bit length. Got ${bits}`);
			if (bits === 0) if (value !== 0n) throw Error(`value is not zero for ${bits} bits. Got ${value}`);
			else return;
			if (bits === 1) if (value !== -1n && value !== 0n) throw Error(`value is not zero or -1 for ${bits} bits. Got ${value}`);
			else {
				this.writeBit(value === -1n);
				return;
			}
			let vBits = 1n << BigInt(bits) - 1n;
			if (v < -vBits || v >= vBits) throw Error(`value is out of range for ${bits} bits. Got ${value}`);
			if (v < 0) {
				this.writeBit(true);
				v = vBits + v;
			} else this.writeBit(false);
			this.writeUint(v, bits - 1);
		}
		/**
		* Wrtie var uint value, used for serializing coins
		* @param value value to write as bigint or number
		* @param bits header bits to write size
		*/
		writeVarUint(value, bits) {
			let v = BigInt(value);
			if (bits < 0 || !Number.isSafeInteger(bits)) throw Error(`invalid bit length. Got ${bits}`);
			if (v < 0) throw Error(`value is negative. Got ${value}`);
			if (v === 0n) {
				this.writeUint(0, bits);
				return;
			}
			const sizeBytes = Math.ceil(v.toString(2).length / 8);
			const sizeBits = sizeBytes * 8;
			this.writeUint(sizeBytes, bits);
			this.writeUint(v, sizeBits);
		}
		/**
		* Wrtie var int value, used for serializing coins
		* @param value value to write as bigint or number
		* @param bits header bits to write size
		*/
		writeVarInt(value, bits) {
			let v = BigInt(value);
			if (bits < 0 || !Number.isSafeInteger(bits)) throw Error(`invalid bit length. Got ${bits}`);
			if (v === 0n) {
				this.writeUint(0, bits);
				return;
			}
			let v2 = v > 0 ? v : -v;
			const sizeBytes = 1 + Math.ceil(v2.toString(2).length / 8);
			const sizeBits = sizeBytes * 8;
			this.writeUint(sizeBytes, bits);
			this.writeInt(v, sizeBits);
		}
		/**
		* Write coins in var uint format
		* @param amount amount to write
		*/
		writeCoins(amount) {
			this.writeVarUint(amount, 4);
		}
		/**
		* Write address
		* @param address write address or address external
		*/
		writeAddress(address$1) {
			if (address$1 === null || address$1 === void 0) {
				this.writeUint(0, 2);
				return;
			}
			if (Address_1$7.Address.isAddress(address$1)) {
				this.writeUint(2, 2);
				this.writeUint(0, 1);
				this.writeInt(address$1.workChain, 8);
				this.writeBuffer(address$1.hash);
				return;
			}
			if (ExternalAddress_1$2.ExternalAddress.isAddress(address$1)) {
				this.writeUint(1, 2);
				this.writeUint(address$1.bits, 9);
				this.writeUint(address$1.value, address$1.bits);
				return;
			}
			throw Error(`Invalid address. Got ${address$1}`);
		}
		/**
		* Build BitString
		* @returns result bit string
		*/
		build() {
			return new BitString_1$6.BitString(this._buffer, 0, this._length);
		}
		/**
		* Build into Buffer
		* @returns result buffer
		*/
		buffer() {
			if (this._length % 8 !== 0) throw new Error("BitBuilder buffer is not byte aligned");
			return this._buffer.subarray(0, this._length / 8);
		}
	};
	exports.BitBuilder = BitBuilder;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/CellType.js
var require_CellType = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/CellType.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.CellType = void 0;
	var CellType;
	(function(CellType$1) {
		CellType$1[CellType$1["Ordinary"] = -1] = "Ordinary";
		CellType$1[CellType$1["PrunedBranch"] = 1] = "PrunedBranch";
		CellType$1[CellType$1["Library"] = 2] = "Library";
		CellType$1[CellType$1["MerkleProof"] = 3] = "MerkleProof";
		CellType$1[CellType$1["MerkleUpdate"] = 4] = "MerkleUpdate";
	})(CellType = exports.CellType || (exports.CellType = {}));
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/dict/utils/readUnaryLength.js
var require_readUnaryLength = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/dict/utils/readUnaryLength.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.readUnaryLength = void 0;
	function readUnaryLength$1(slice) {
		let res = 0;
		while (slice.loadBit()) res++;
		return res;
	}
	exports.readUnaryLength = readUnaryLength$1;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/dict/generateMerkleProof.js
var require_generateMerkleProof = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/dict/generateMerkleProof.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.generateMerkleProof = void 0;
	const Builder_1$18 = require_Builder();
	const Cell_1$8 = require_Cell();
	const readUnaryLength_1 = require_readUnaryLength();
	function convertToPrunedBranch(c$1) {
		return new Cell_1$8.Cell({
			exotic: true,
			bits: (0, Builder_1$18.beginCell)().storeUint(1, 8).storeUint(1, 8).storeBuffer(c$1.hash(0)).storeUint(c$1.depth(0), 16).endCell().beginParse().loadBits(288)
		});
	}
	function convertToMerkleProof(c$1) {
		return new Cell_1$8.Cell({
			exotic: true,
			bits: (0, Builder_1$18.beginCell)().storeUint(3, 8).storeBuffer(c$1.hash(0)).storeUint(c$1.depth(0), 16).endCell().beginParse().loadBits(280),
			refs: [c$1]
		});
	}
	function doGenerateMerkleProof(prefix, slice, n$1, key) {
		const originalCell = slice.asCell();
		let lb0 = slice.loadBit() ? 1 : 0;
		let prefixLength = 0;
		let pp = prefix;
		if (lb0 === 0) {
			prefixLength = (0, readUnaryLength_1.readUnaryLength)(slice);
			for (let i$2 = 0; i$2 < prefixLength; i$2++) pp += slice.loadBit() ? "1" : "0";
		} else {
			let lb1 = slice.loadBit() ? 1 : 0;
			if (lb1 === 0) {
				prefixLength = slice.loadUint(Math.ceil(Math.log2(n$1 + 1)));
				for (let i$2 = 0; i$2 < prefixLength; i$2++) pp += slice.loadBit() ? "1" : "0";
			} else {
				let bit = slice.loadBit() ? "1" : "0";
				prefixLength = slice.loadUint(Math.ceil(Math.log2(n$1 + 1)));
				for (let i$2 = 0; i$2 < prefixLength; i$2++) pp += bit;
			}
		}
		if (n$1 - prefixLength === 0) return originalCell;
		else {
			let sl = originalCell.beginParse();
			let left = sl.loadRef();
			let right = sl.loadRef();
			if (!left.isExotic) if (pp + "0" === key.slice(0, pp.length + 1)) left = doGenerateMerkleProof(pp + "0", left.beginParse(), n$1 - prefixLength - 1, key);
			else left = convertToPrunedBranch(left);
			if (!right.isExotic) if (pp + "1" === key.slice(0, pp.length + 1)) right = doGenerateMerkleProof(pp + "1", right.beginParse(), n$1 - prefixLength - 1, key);
			else right = convertToPrunedBranch(right);
			return (0, Builder_1$18.beginCell)().storeSlice(sl).storeRef(left).storeRef(right).endCell();
		}
	}
	function generateMerkleProof(dict, key, keyObject) {
		const s$1 = (0, Builder_1$18.beginCell)().storeDictDirect(dict).endCell().beginParse();
		return convertToMerkleProof(doGenerateMerkleProof("", s$1, keyObject.bits, keyObject.serialize(key).toString(2).padStart(keyObject.bits, "0")));
	}
	exports.generateMerkleProof = generateMerkleProof;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/dict/generateMerkleUpdate.js
var require_generateMerkleUpdate = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/dict/generateMerkleUpdate.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.generateMerkleUpdate = void 0;
	const Builder_1$17 = require_Builder();
	const Cell_1$7 = require_Cell();
	const generateMerkleProof_1$2 = require_generateMerkleProof();
	function convertToMerkleUpdate(c1, c2) {
		return new Cell_1$7.Cell({
			exotic: true,
			bits: (0, Builder_1$17.beginCell)().storeUint(4, 8).storeBuffer(c1.hash(0)).storeBuffer(c2.hash(0)).storeUint(c1.depth(0), 16).storeUint(c2.depth(0), 16).endCell().beginParse().loadBits(552),
			refs: [c1, c2]
		});
	}
	function generateMerkleUpdate(dict, key, keyObject, newValue) {
		const oldProof = (0, generateMerkleProof_1$2.generateMerkleProof)(dict, key, keyObject).refs[0];
		dict.set(key, newValue);
		const newProof = (0, generateMerkleProof_1$2.generateMerkleProof)(dict, key, keyObject).refs[0];
		return convertToMerkleUpdate(oldProof, newProof);
	}
	exports.generateMerkleUpdate = generateMerkleUpdate;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/dict/parseDict.js
var require_parseDict = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/dict/parseDict.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.parseDict = void 0;
	function readUnaryLength(slice) {
		let res = 0;
		while (slice.loadBit()) res++;
		return res;
	}
	function doParse(prefix, slice, n$1, res, extractor) {
		let lb0 = slice.loadBit() ? 1 : 0;
		let prefixLength = 0;
		let pp = prefix;
		if (lb0 === 0) {
			prefixLength = readUnaryLength(slice);
			for (let i$2 = 0; i$2 < prefixLength; i$2++) pp += slice.loadBit() ? "1" : "0";
		} else {
			let lb1 = slice.loadBit() ? 1 : 0;
			if (lb1 === 0) {
				prefixLength = slice.loadUint(Math.ceil(Math.log2(n$1 + 1)));
				for (let i$2 = 0; i$2 < prefixLength; i$2++) pp += slice.loadBit() ? "1" : "0";
			} else {
				let bit = slice.loadBit() ? "1" : "0";
				prefixLength = slice.loadUint(Math.ceil(Math.log2(n$1 + 1)));
				for (let i$2 = 0; i$2 < prefixLength; i$2++) pp += bit;
			}
		}
		if (n$1 - prefixLength === 0) res.set(BigInt("0b" + pp), extractor(slice));
		else {
			let left = slice.loadRef();
			let right = slice.loadRef();
			if (!left.isExotic) doParse(pp + "0", left.beginParse(), n$1 - prefixLength - 1, res, extractor);
			if (!right.isExotic) doParse(pp + "1", right.beginParse(), n$1 - prefixLength - 1, res, extractor);
		}
	}
	function parseDict(sc, keySize, extractor) {
		let res = /* @__PURE__ */ new Map();
		if (sc) doParse("", sc, keySize, res, extractor);
		return res;
	}
	exports.parseDict = parseDict;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/dict/utils/findCommonPrefix.js
var require_findCommonPrefix = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/dict/utils/findCommonPrefix.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.findCommonPrefix = void 0;
	function findCommonPrefix(src) {
		if (src.length === 0) return "";
		if (src.length === 1) return src[0];
		const sorted = [...src].sort();
		let size = 0;
		for (let i$2 = 0; i$2 < sorted[0].length; i$2++) {
			if (sorted[0][i$2] !== sorted[sorted.length - 1][i$2]) break;
			size++;
		}
		return src[0].slice(0, size);
	}
	exports.findCommonPrefix = findCommonPrefix;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/dict/serializeDict.js
var require_serializeDict = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/dict/serializeDict.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.serializeDict = exports.detectLabelType = exports.writeLabelSame = exports.writeLabelLong = exports.writeLabelShort = exports.buildTree = void 0;
	const Builder_1$16 = require_Builder();
	const findCommonPrefix_1 = require_findCommonPrefix();
	function pad(src, size) {
		while (src.length < size) src = "0" + src;
		return src;
	}
	function removePrefixMap(src, length) {
		if (length === 0) return src;
		else {
			let res = /* @__PURE__ */ new Map();
			for (let k of src.keys()) {
				let d = src.get(k);
				res.set(k.slice(length), d);
			}
			return res;
		}
	}
	function forkMap(src) {
		if (src.size === 0) throw Error("Internal inconsistency");
		let left = /* @__PURE__ */ new Map();
		let right = /* @__PURE__ */ new Map();
		for (let k of src.keys()) {
			let d = src.get(k);
			if (k.startsWith("0")) left.set(k.substr(1), d);
			else right.set(k.substr(1), d);
		}
		if (left.size === 0) throw Error("Internal inconsistency. Left emtpy.");
		if (right.size === 0) throw Error("Internal inconsistency. Right emtpy.");
		return {
			left,
			right
		};
	}
	function buildNode(src) {
		if (src.size === 0) throw Error("Internal inconsistency");
		if (src.size === 1) return {
			type: "leaf",
			value: Array.from(src.values())[0]
		};
		let { left, right } = forkMap(src);
		return {
			type: "fork",
			left: buildEdge(left),
			right: buildEdge(right)
		};
	}
	function buildEdge(src) {
		if (src.size === 0) throw Error("Internal inconsistency");
		const label = (0, findCommonPrefix_1.findCommonPrefix)(Array.from(src.keys()));
		return {
			label,
			node: buildNode(removePrefixMap(src, label.length))
		};
	}
	function buildTree(src, keyLength) {
		let converted = /* @__PURE__ */ new Map();
		for (let k of Array.from(src.keys())) {
			const padded = pad(k.toString(2), keyLength);
			converted.set(padded, src.get(k));
		}
		return buildEdge(converted);
	}
	exports.buildTree = buildTree;
	function writeLabelShort(src, to) {
		to.storeBit(0);
		for (let i$2 = 0; i$2 < src.length; i$2++) to.storeBit(1);
		to.storeBit(0);
		for (let i$2 = 0; i$2 < src.length; i$2++) to.storeBit(src[i$2] === "1");
		return to;
	}
	exports.writeLabelShort = writeLabelShort;
	function labelShortLength(src) {
		return 1 + src.length + 1 + src.length;
	}
	function writeLabelLong(src, keyLength, to) {
		to.storeBit(1);
		to.storeBit(0);
		let length = Math.ceil(Math.log2(keyLength + 1));
		to.storeUint(src.length, length);
		for (let i$2 = 0; i$2 < src.length; i$2++) to.storeBit(src[i$2] === "1");
		return to;
	}
	exports.writeLabelLong = writeLabelLong;
	function labelLongLength(src, keyLength) {
		return 2 + Math.ceil(Math.log2(keyLength + 1)) + src.length;
	}
	function writeLabelSame(value, length, keyLength, to) {
		to.storeBit(1);
		to.storeBit(1);
		to.storeBit(value);
		let lenLen = Math.ceil(Math.log2(keyLength + 1));
		to.storeUint(length, lenLen);
	}
	exports.writeLabelSame = writeLabelSame;
	function labelSameLength(keyLength) {
		return 3 + Math.ceil(Math.log2(keyLength + 1));
	}
	function isSame(src) {
		if (src.length === 0 || src.length === 1) return true;
		for (let i$2 = 1; i$2 < src.length; i$2++) if (src[i$2] !== src[0]) return false;
		return true;
	}
	function detectLabelType(src, keyLength) {
		let kind = "short";
		let kindLength = labelShortLength(src);
		let longLength = labelLongLength(src, keyLength);
		if (longLength < kindLength) {
			kindLength = longLength;
			kind = "long";
		}
		if (isSame(src)) {
			let sameLength = labelSameLength(keyLength);
			if (sameLength < kindLength) {
				kindLength = sameLength;
				kind = "same";
			}
		}
		return kind;
	}
	exports.detectLabelType = detectLabelType;
	function writeLabel(src, keyLength, to) {
		let type = detectLabelType(src, keyLength);
		if (type === "short") writeLabelShort(src, to);
		if (type === "long") writeLabelLong(src, keyLength, to);
		if (type === "same") writeLabelSame(src[0] === "1", src.length, keyLength, to);
	}
	function writeNode(src, keyLength, serializer, to) {
		if (src.type === "leaf") serializer(src.value, to);
		if (src.type === "fork") {
			const leftCell = (0, Builder_1$16.beginCell)();
			const rightCell = (0, Builder_1$16.beginCell)();
			writeEdge(src.left, keyLength - 1, serializer, leftCell);
			writeEdge(src.right, keyLength - 1, serializer, rightCell);
			to.storeRef(leftCell);
			to.storeRef(rightCell);
		}
	}
	function writeEdge(src, keyLength, serializer, to) {
		writeLabel(src.label, keyLength, to);
		writeNode(src.node, keyLength - src.label.length, serializer, to);
	}
	function serializeDict(src, keyLength, serializer, to) {
		const tree = buildTree(src, keyLength);
		writeEdge(tree, keyLength, serializer, to);
	}
	exports.serializeDict = serializeDict;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/dict/utils/internalKeySerializer.js
var require_internalKeySerializer = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/dict/utils/internalKeySerializer.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.deserializeInternalKey = exports.serializeInternalKey = void 0;
	const Address_1$6 = require_Address();
	const BitString_1$5 = require_BitString();
	const paddedBits_1$2 = require_paddedBits();
	function serializeInternalKey(value) {
		if (typeof value === "number") {
			if (!Number.isSafeInteger(value)) throw Error("Invalid key type: not a safe integer: " + value);
			return "n:" + value.toString(10);
		} else if (typeof value === "bigint") return "b:" + value.toString(10);
		else if (Address_1$6.Address.isAddress(value)) return "a:" + value.toString();
		else if (Buffer.isBuffer(value)) return "f:" + value.toString("hex");
		else if (BitString_1$5.BitString.isBitString(value)) return "B:" + value.toString();
		else throw Error("Invalid key type");
	}
	exports.serializeInternalKey = serializeInternalKey;
	function deserializeInternalKey(value) {
		let k = value.slice(0, 2);
		let v = value.slice(2);
		if (k === "n:") return parseInt(v, 10);
		else if (k === "b:") return BigInt(v);
		else if (k === "a:") return Address_1$6.Address.parse(v);
		else if (k === "f:") return Buffer.from(v, "hex");
		else if (k === "B:") {
			const lastDash = v.slice(-1) == "_";
			const isPadded = lastDash || v.length % 2 != 0;
			if (isPadded) {
				let charLen = lastDash ? v.length - 1 : v.length;
				const padded = v.substr(0, charLen) + "0";
				if (!lastDash && (charLen & 1) !== 0) return new BitString_1$5.BitString(Buffer.from(padded, "hex"), 0, charLen << 2);
				else return (0, paddedBits_1$2.paddedBufferToBits)(Buffer.from(padded, "hex"));
			} else return new BitString_1$5.BitString(Buffer.from(v, "hex"), 0, v.length << 2);
		}
		throw Error("Invalid key type: " + k);
	}
	exports.deserializeInternalKey = deserializeInternalKey;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/dict/Dictionary.js
var require_Dictionary = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/dict/Dictionary.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Dictionary = void 0;
	const Address_1$5 = require_Address();
	const Builder_1$15 = require_Builder();
	const Cell_1$6 = require_Cell();
	const BitString_1$4 = require_BitString();
	const generateMerkleProof_1$1 = require_generateMerkleProof();
	const generateMerkleUpdate_1$1 = require_generateMerkleUpdate();
	const parseDict_1 = require_parseDict();
	const serializeDict_1 = require_serializeDict();
	const internalKeySerializer_1 = require_internalKeySerializer();
	var Dictionary = class Dictionary {
		/**
		* Create an empty map
		* @param key key type
		* @param value value type
		* @returns Dictionary<K, V>
		*/
		static empty(key, value) {
			if (key && value) return new Dictionary(/* @__PURE__ */ new Map(), key, value);
			else return new Dictionary(/* @__PURE__ */ new Map(), null, null);
		}
		/**
		* Load dictionary from slice
		* @param key key description
		* @param value value description
		* @param src slice
		* @returns Dictionary<K, V>
		*/
		static load(key, value, sc) {
			let slice;
			if (sc instanceof Cell_1$6.Cell) {
				if (sc.isExotic) return Dictionary.empty(key, value);
				slice = sc.beginParse();
			} else slice = sc;
			let cell = slice.loadMaybeRef();
			if (cell && !cell.isExotic) return Dictionary.loadDirect(key, value, cell.beginParse());
			else return Dictionary.empty(key, value);
		}
		/**
		* Low level method for rare dictionaries from system contracts.
		* Loads dictionary from slice directly without going to the ref.
		*
		* @param key key description
		* @param value value description
		* @param sc slice
		* @returns Dictionary<K, V>
		*/
		static loadDirect(key, value, sc) {
			if (!sc) return Dictionary.empty(key, value);
			let slice;
			if (sc instanceof Cell_1$6.Cell) slice = sc.beginParse();
			else slice = sc;
			let values = (0, parseDict_1.parseDict)(slice, key.bits, value.parse);
			let prepare = /* @__PURE__ */ new Map();
			for (let [k, v] of values) prepare.set((0, internalKeySerializer_1.serializeInternalKey)(key.parse(k)), v);
			return new Dictionary(prepare, key, value);
		}
		constructor(values, key, value) {
			this._key = key;
			this._value = value;
			this._map = values;
		}
		get size() {
			return this._map.size;
		}
		get(key) {
			return this._map.get((0, internalKeySerializer_1.serializeInternalKey)(key));
		}
		has(key) {
			return this._map.has((0, internalKeySerializer_1.serializeInternalKey)(key));
		}
		set(key, value) {
			this._map.set((0, internalKeySerializer_1.serializeInternalKey)(key), value);
			return this;
		}
		delete(key) {
			const k = (0, internalKeySerializer_1.serializeInternalKey)(key);
			return this._map.delete(k);
		}
		clear() {
			this._map.clear();
		}
		*[Symbol.iterator]() {
			for (const [k, v] of this._map) {
				const key = (0, internalKeySerializer_1.deserializeInternalKey)(k);
				yield [key, v];
			}
		}
		keys() {
			return Array.from(this._map.keys()).map((v) => (0, internalKeySerializer_1.deserializeInternalKey)(v));
		}
		values() {
			return Array.from(this._map.values());
		}
		store(builder, key, value) {
			if (this._map.size === 0) builder.storeBit(0);
			else {
				let resolvedKey = this._key;
				if (key !== null && key !== void 0) resolvedKey = key;
				let resolvedValue = this._value;
				if (value !== null && value !== void 0) resolvedValue = value;
				if (!resolvedKey) throw Error("Key serializer is not defined");
				if (!resolvedValue) throw Error("Value serializer is not defined");
				let prepared = /* @__PURE__ */ new Map();
				for (const [k, v] of this._map) prepared.set(resolvedKey.serialize((0, internalKeySerializer_1.deserializeInternalKey)(k)), v);
				builder.storeBit(1);
				let dd = (0, Builder_1$15.beginCell)();
				(0, serializeDict_1.serializeDict)(prepared, resolvedKey.bits, resolvedValue.serialize, dd);
				builder.storeRef(dd.endCell());
			}
		}
		storeDirect(builder, key, value) {
			if (this._map.size === 0) throw Error("Cannot store empty dictionary directly");
			let resolvedKey = this._key;
			if (key !== null && key !== void 0) resolvedKey = key;
			let resolvedValue = this._value;
			if (value !== null && value !== void 0) resolvedValue = value;
			if (!resolvedKey) throw Error("Key serializer is not defined");
			if (!resolvedValue) throw Error("Value serializer is not defined");
			let prepared = /* @__PURE__ */ new Map();
			for (const [k, v] of this._map) prepared.set(resolvedKey.serialize((0, internalKeySerializer_1.deserializeInternalKey)(k)), v);
			(0, serializeDict_1.serializeDict)(prepared, resolvedKey.bits, resolvedValue.serialize, builder);
		}
		generateMerkleProof(key) {
			return (0, generateMerkleProof_1$1.generateMerkleProof)(this, key, this._key);
		}
		generateMerkleUpdate(key, newValue) {
			return (0, generateMerkleUpdate_1$1.generateMerkleUpdate)(this, key, this._key, newValue);
		}
	};
	exports.Dictionary = Dictionary;
	Dictionary.Keys = {
		Address: () => {
			return createAddressKey();
		},
		BigInt: (bits) => {
			return createBigIntKey(bits);
		},
		Int: (bits) => {
			return createIntKey(bits);
		},
		BigUint: (bits) => {
			return createBigUintKey(bits);
		},
		Uint: (bits) => {
			return createUintKey(bits);
		},
		Buffer: (bytes) => {
			return createBufferKey(bytes);
		},
		BitString: (bits) => {
			return createBitStringKey(bits);
		}
	};
	Dictionary.Values = {
		BigInt: (bits) => {
			return createBigIntValue(bits);
		},
		Int: (bits) => {
			return createIntValue(bits);
		},
		BigVarInt: (bits) => {
			return createBigVarIntValue(bits);
		},
		BigUint: (bits) => {
			return createBigUintValue(bits);
		},
		Uint: (bits) => {
			return createUintValue(bits);
		},
		BigVarUint: (bits) => {
			return createBigVarUintValue(bits);
		},
		Bool: () => {
			return createBooleanValue();
		},
		Address: () => {
			return createAddressValue();
		},
		Cell: () => {
			return createCellValue();
		},
		Buffer: (bytes) => {
			return createBufferValue(bytes);
		},
		BitString: (bits) => {
			return createBitStringValue(bits);
		},
		Dictionary: (key, value) => {
			return createDictionaryValue(key, value);
		}
	};
	function createAddressKey() {
		return {
			bits: 267,
			serialize: (src) => {
				if (!Address_1$5.Address.isAddress(src)) throw Error("Key is not an address");
				return (0, Builder_1$15.beginCell)().storeAddress(src).endCell().beginParse().preloadUintBig(267);
			},
			parse: (src) => {
				return (0, Builder_1$15.beginCell)().storeUint(src, 267).endCell().beginParse().loadAddress();
			}
		};
	}
	function createBigIntKey(bits) {
		return {
			bits,
			serialize: (src) => {
				if (typeof src !== "bigint") throw Error("Key is not a bigint");
				return (0, Builder_1$15.beginCell)().storeInt(src, bits).endCell().beginParse().loadUintBig(bits);
			},
			parse: (src) => {
				return (0, Builder_1$15.beginCell)().storeUint(src, bits).endCell().beginParse().loadIntBig(bits);
			}
		};
	}
	function createIntKey(bits) {
		return {
			bits,
			serialize: (src) => {
				if (typeof src !== "number") throw Error("Key is not a number");
				if (!Number.isSafeInteger(src)) throw Error("Key is not a safe integer: " + src);
				return (0, Builder_1$15.beginCell)().storeInt(src, bits).endCell().beginParse().loadUintBig(bits);
			},
			parse: (src) => {
				return (0, Builder_1$15.beginCell)().storeUint(src, bits).endCell().beginParse().loadInt(bits);
			}
		};
	}
	function createBigUintKey(bits) {
		return {
			bits,
			serialize: (src) => {
				if (typeof src !== "bigint") throw Error("Key is not a bigint");
				if (src < 0) throw Error("Key is negative: " + src);
				return (0, Builder_1$15.beginCell)().storeUint(src, bits).endCell().beginParse().loadUintBig(bits);
			},
			parse: (src) => {
				return (0, Builder_1$15.beginCell)().storeUint(src, bits).endCell().beginParse().loadUintBig(bits);
			}
		};
	}
	function createUintKey(bits) {
		return {
			bits,
			serialize: (src) => {
				if (typeof src !== "number") throw Error("Key is not a number");
				if (!Number.isSafeInteger(src)) throw Error("Key is not a safe integer: " + src);
				if (src < 0) throw Error("Key is negative: " + src);
				return (0, Builder_1$15.beginCell)().storeUint(src, bits).endCell().beginParse().loadUintBig(bits);
			},
			parse: (src) => {
				return Number((0, Builder_1$15.beginCell)().storeUint(src, bits).endCell().beginParse().loadUint(bits));
			}
		};
	}
	function createBufferKey(bytes) {
		return {
			bits: bytes * 8,
			serialize: (src) => {
				if (!Buffer.isBuffer(src)) throw Error("Key is not a buffer");
				return (0, Builder_1$15.beginCell)().storeBuffer(src).endCell().beginParse().loadUintBig(bytes * 8);
			},
			parse: (src) => {
				return (0, Builder_1$15.beginCell)().storeUint(src, bytes * 8).endCell().beginParse().loadBuffer(bytes);
			}
		};
	}
	function createBitStringKey(bits) {
		return {
			bits,
			serialize: (src) => {
				if (!BitString_1$4.BitString.isBitString(src)) throw Error("Key is not a BitString");
				return (0, Builder_1$15.beginCell)().storeBits(src).endCell().beginParse().loadUintBig(bits);
			},
			parse: (src) => {
				return (0, Builder_1$15.beginCell)().storeUint(src, bits).endCell().beginParse().loadBits(bits);
			}
		};
	}
	function createIntValue(bits) {
		return {
			serialize: (src, buidler) => {
				buidler.storeInt(src, bits);
			},
			parse: (src) => {
				return src.loadInt(bits);
			}
		};
	}
	function createBigIntValue(bits) {
		return {
			serialize: (src, buidler) => {
				buidler.storeInt(src, bits);
			},
			parse: (src) => {
				return src.loadIntBig(bits);
			}
		};
	}
	function createBigVarIntValue(bits) {
		return {
			serialize: (src, buidler) => {
				buidler.storeVarInt(src, bits);
			},
			parse: (src) => {
				return src.loadVarIntBig(bits);
			}
		};
	}
	function createBigVarUintValue(bits) {
		return {
			serialize: (src, buidler) => {
				buidler.storeVarUint(src, bits);
			},
			parse: (src) => {
				return src.loadVarUintBig(bits);
			}
		};
	}
	function createUintValue(bits) {
		return {
			serialize: (src, buidler) => {
				buidler.storeUint(src, bits);
			},
			parse: (src) => {
				return src.loadUint(bits);
			}
		};
	}
	function createBigUintValue(bits) {
		return {
			serialize: (src, buidler) => {
				buidler.storeUint(src, bits);
			},
			parse: (src) => {
				return src.loadUintBig(bits);
			}
		};
	}
	function createBooleanValue() {
		return {
			serialize: (src, buidler) => {
				buidler.storeBit(src);
			},
			parse: (src) => {
				return src.loadBit();
			}
		};
	}
	function createAddressValue() {
		return {
			serialize: (src, buidler) => {
				buidler.storeAddress(src);
			},
			parse: (src) => {
				return src.loadAddress();
			}
		};
	}
	function createCellValue() {
		return {
			serialize: (src, buidler) => {
				buidler.storeRef(src);
			},
			parse: (src) => {
				return src.loadRef();
			}
		};
	}
	function createDictionaryValue(key, value) {
		return {
			serialize: (src, buidler) => {
				src.store(buidler);
			},
			parse: (src) => {
				return Dictionary.load(key, value, src);
			}
		};
	}
	function createBufferValue(size) {
		return {
			serialize: (src, buidler) => {
				if (src.length !== size) throw Error("Invalid buffer size");
				buidler.storeBuffer(src);
			},
			parse: (src) => {
				return src.loadBuffer(size);
			}
		};
	}
	function createBitStringValue(bits) {
		return {
			serialize: (src, builder) => {
				if (src.length !== bits) throw Error("Invalid BitString size");
				builder.storeBits(src);
			},
			parse: (src) => {
				return src.loadBits(bits);
			}
		};
	}
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/utils/strings.js
var require_strings = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/utils/strings.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.writeString = exports.stringToCell = exports.readString = void 0;
	const Builder_1$14 = require_Builder();
	function readBuffer(slice) {
		if (slice.remainingBits % 8 !== 0) throw new Error(`Invalid string length: ${slice.remainingBits}`);
		if (slice.remainingRefs !== 0 && slice.remainingRefs !== 1) throw new Error(`invalid number of refs: ${slice.remainingRefs}`);
		let res;
		if (slice.remainingBits === 0) res = Buffer.alloc(0);
		else res = slice.loadBuffer(slice.remainingBits / 8);
		if (slice.remainingRefs === 1) res = Buffer.concat([res, readBuffer(slice.loadRef().beginParse())]);
		return res;
	}
	function readString(slice) {
		return readBuffer(slice).toString();
	}
	exports.readString = readString;
	function writeBuffer(src, builder) {
		if (src.length > 0) {
			let bytes = Math.floor(builder.availableBits / 8);
			if (src.length > bytes) {
				let a$1 = src.subarray(0, bytes);
				let t$1 = src.subarray(bytes);
				builder = builder.storeBuffer(a$1);
				let bb = (0, Builder_1$14.beginCell)();
				writeBuffer(t$1, bb);
				builder = builder.storeRef(bb.endCell());
			} else builder = builder.storeBuffer(src);
		}
	}
	function stringToCell(src) {
		let builder = (0, Builder_1$14.beginCell)();
		writeBuffer(Buffer.from(src), builder);
		return builder.endCell();
	}
	exports.stringToCell = stringToCell;
	function writeString(src, builder) {
		writeBuffer(Buffer.from(src), builder);
	}
	exports.writeString = writeString;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/Slice.js
var require_Slice = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/Slice.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	var __importDefault$6 = void 0 && (void 0).__importDefault || function(mod) {
		return mod && mod.__esModule ? mod : { "default": mod };
	};
	var _a$1;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Slice = void 0;
	const symbol_inspect_1$1 = __importDefault$6(require_symbol());
	const Dictionary_1$6 = require_Dictionary();
	const Builder_1$13 = require_Builder();
	const strings_1$1 = require_strings();
	/**
	* Slice is a class that allows to read cell data
	*/
	var Slice = class Slice {
		constructor(reader, refs) {
			this[_a$1] = () => this.toString();
			this._reader = reader.clone();
			this._refs = [...refs];
			this._refsOffset = 0;
		}
		/**
		* Get remaining bits
		*/
		get remainingBits() {
			return this._reader.remaining;
		}
		/**
		* Get offset bits
		*/
		get offsetBits() {
			return this._reader.offset;
		}
		/**
		* Get remaining refs
		*/
		get remainingRefs() {
			return this._refs.length - this._refsOffset;
		}
		/**
		* Get offset refs
		*/
		get offsetRefs() {
			return this._refsOffset;
		}
		/**
		* Skip bits
		* @param bits
		*/
		skip(bits) {
			this._reader.skip(bits);
			return this;
		}
		/**
		* Load a single bit
		* @returns true or false depending on the bit value
		*/
		loadBit() {
			return this._reader.loadBit();
		}
		/**
		* Preload a signle bit
		* @returns true or false depending on the bit value
		*/
		preloadBit() {
			return this._reader.preloadBit();
		}
		/**
		* Load a boolean
		* @returns true or false depending on the bit value
		*/
		loadBoolean() {
			return this.loadBit();
		}
		/**
		* Load maybe boolean
		* @returns true or false depending on the bit value or null
		*/
		loadMaybeBoolean() {
			if (this.loadBit()) return this.loadBoolean();
			else return null;
		}
		/**
		* Load bits as a new BitString
		* @param bits number of bits to read
		* @returns new BitString
		*/
		loadBits(bits) {
			return this._reader.loadBits(bits);
		}
		/**
		* Preload bits as a new BitString
		* @param bits number of bits to read
		* @returns new BitString
		*/
		preloadBits(bits) {
			return this._reader.preloadBits(bits);
		}
		/**
		* Load uint
		* @param bits number of bits to read
		* @returns uint value
		*/
		loadUint(bits) {
			return this._reader.loadUint(bits);
		}
		/**
		* Load uint
		* @param bits number of bits to read
		* @returns uint value
		*/
		loadUintBig(bits) {
			return this._reader.loadUintBig(bits);
		}
		/**
		* Preload uint
		* @param bits number of bits to read
		* @returns uint value
		*/
		preloadUint(bits) {
			return this._reader.preloadUint(bits);
		}
		/**
		* Preload uint
		* @param bits number of bits to read
		* @returns uint value
		*/
		preloadUintBig(bits) {
			return this._reader.preloadUintBig(bits);
		}
		/**
		* Load maybe uint
		* @param bits number of bits to read
		* @returns uint value or null
		*/
		loadMaybeUint(bits) {
			if (this.loadBit()) return this.loadUint(bits);
			else return null;
		}
		/**
		* Load maybe uint
		* @param bits number of bits to read
		* @returns uint value or null
		*/
		loadMaybeUintBig(bits) {
			if (this.loadBit()) return this.loadUintBig(bits);
			else return null;
		}
		/**
		* Load int
		* @param bits number of bits to read
		* @returns int value
		*/
		loadInt(bits) {
			return this._reader.loadInt(bits);
		}
		/**
		* Load int
		* @param bits number of bits to read
		* @returns int value
		*/
		loadIntBig(bits) {
			return this._reader.loadIntBig(bits);
		}
		/**
		* Preload int
		* @param bits number of bits to read
		* @returns int value
		*/
		preloadInt(bits) {
			return this._reader.preloadInt(bits);
		}
		/**
		* Preload int
		* @param bits number of bits to read
		* @returns int value
		*/
		preloadIntBig(bits) {
			return this._reader.preloadIntBig(bits);
		}
		/**
		* Load maybe uint
		* @param bits number of bits to read
		* @returns uint value or null
		*/
		loadMaybeInt(bits) {
			if (this.loadBit()) return this.loadInt(bits);
			else return null;
		}
		/**
		* Load maybe uint
		* @param bits number of bits to read
		* @returns uint value or null
		*/
		loadMaybeIntBig(bits) {
			if (this.loadBit()) return this.loadIntBig(bits);
			else return null;
		}
		/**
		* Load varuint
		* @param bits number of bits to read in header
		* @returns varuint value
		*/
		loadVarUint(bits) {
			return this._reader.loadVarUint(bits);
		}
		/**
		* Load varuint
		* @param bits number of bits to read in header
		* @returns varuint value
		*/
		loadVarUintBig(bits) {
			return this._reader.loadVarUintBig(bits);
		}
		/**
		* Preload varuint
		* @param bits number of bits to read in header
		* @returns varuint value
		*/
		preloadVarUint(bits) {
			return this._reader.preloadVarUint(bits);
		}
		/**
		* Preload varuint
		* @param bits number of bits to read in header
		* @returns varuint value
		*/
		preloadVarUintBig(bits) {
			return this._reader.preloadVarUintBig(bits);
		}
		/**
		* Load varint
		* @param bits number of bits to read in header
		* @returns varint value
		*/
		loadVarInt(bits) {
			return this._reader.loadVarInt(bits);
		}
		/**
		* Load varint
		* @param bits number of bits to read in header
		* @returns varint value
		*/
		loadVarIntBig(bits) {
			return this._reader.loadVarIntBig(bits);
		}
		/**
		* Preload varint
		* @param bits number of bits to read in header
		* @returns varint value
		*/
		preloadVarInt(bits) {
			return this._reader.preloadVarInt(bits);
		}
		/**
		* Preload varint
		* @param bits number of bits to read in header
		* @returns varint value
		*/
		preloadVarIntBig(bits) {
			return this._reader.preloadVarIntBig(bits);
		}
		/**
		* Load coins
		* @returns coins value
		*/
		loadCoins() {
			return this._reader.loadCoins();
		}
		/**
		* Preload coins
		* @returns coins value
		*/
		preloadCoins() {
			return this._reader.preloadCoins();
		}
		/**
		* Load maybe coins
		* @returns coins value or null
		*/
		loadMaybeCoins() {
			if (this._reader.loadBit()) return this._reader.loadCoins();
			else return null;
		}
		/**
		* Load internal Address
		* @returns Address
		*/
		loadAddress() {
			return this._reader.loadAddress();
		}
		/**
		* Load optional internal Address
		* @returns Address or null
		*/
		loadMaybeAddress() {
			return this._reader.loadMaybeAddress();
		}
		/**
		* Load external address
		* @returns ExternalAddress
		*/
		loadExternalAddress() {
			return this._reader.loadExternalAddress();
		}
		/**
		* Load optional external address
		* @returns ExternalAddress or null
		*/
		loadMaybeExternalAddress() {
			return this._reader.loadMaybeExternalAddress();
		}
		/**
		* Load address
		* @returns Address, ExternalAddress or null
		*/
		loadAddressAny() {
			return this._reader.loadAddressAny();
		}
		/**
		* Load reference
		* @returns Cell
		*/
		loadRef() {
			if (this._refsOffset >= this._refs.length) throw new Error("No more references");
			return this._refs[this._refsOffset++];
		}
		/**
		* Preload reference
		* @returns Cell
		*/
		preloadRef() {
			if (this._refsOffset >= this._refs.length) throw new Error("No more references");
			return this._refs[this._refsOffset];
		}
		/**
		* Load optional reference
		* @returns Cell or null
		*/
		loadMaybeRef() {
			if (this.loadBit()) return this.loadRef();
			else return null;
		}
		/**
		* Preload optional reference
		* @returns Cell or null
		*/
		preloadMaybeRef() {
			if (this.preloadBit()) return this.preloadRef();
			else return null;
		}
		/**
		* Load byte buffer
		* @param bytes number of bytes to load
		* @returns Buffer
		*/
		loadBuffer(bytes) {
			return this._reader.loadBuffer(bytes);
		}
		/**
		* Load byte buffer
		* @param bytes number of bytes to load
		* @returns Buffer
		*/
		preloadBuffer(bytes) {
			return this._reader.preloadBuffer(bytes);
		}
		/**
		* Load string tail
		*/
		loadStringTail() {
			return (0, strings_1$1.readString)(this);
		}
		/**
		* Load maybe string tail
		* @returns string or null
		*/
		loadMaybeStringTail() {
			if (this.loadBit()) return (0, strings_1$1.readString)(this);
			else return null;
		}
		/**
		* Load string tail from ref
		* @returns string
		*/
		loadStringRefTail() {
			return (0, strings_1$1.readString)(this.loadRef().beginParse());
		}
		/**
		* Load maybe string tail from ref
		* @returns string or null
		*/
		loadMaybeStringRefTail() {
			const ref = this.loadMaybeRef();
			if (ref) return (0, strings_1$1.readString)(ref.beginParse());
			else return null;
		}
		/**
		* Loads dictionary
		* @param key key description
		* @param value value description
		* @returns Dictionary<K, V>
		*/
		loadDict(key, value) {
			return Dictionary_1$6.Dictionary.load(key, value, this);
		}
		/**
		* Loads dictionary directly from current slice
		* @param key key description
		* @param value value description
		* @returns Dictionary<K, V>
		*/
		loadDictDirect(key, value) {
			return Dictionary_1$6.Dictionary.loadDirect(key, value, this);
		}
		/**
		* Checks if slice is empty
		*/
		endParse() {
			if (this.remainingBits > 0 || this.remainingRefs > 0) throw new Error("Slice is not empty");
		}
		/**
		* Convert slice to cell
		*/
		asCell() {
			return (0, Builder_1$13.beginCell)().storeSlice(this).endCell();
		}
		/**
		*
		* @returns
		*/
		asBuilder() {
			return (0, Builder_1$13.beginCell)().storeSlice(this);
		}
		/**
		* Clone slice
		* @returns cloned slice
		*/
		clone(fromStart = false) {
			if (fromStart) {
				let reader = this._reader.clone();
				reader.reset();
				return new Slice(reader, this._refs);
			} else {
				let res = new Slice(this._reader, this._refs);
				res._refsOffset = this._refsOffset;
				return res;
			}
		}
		/**
		* Print slice as string by converting it to cell
		* @returns string
		*/
		toString() {
			return this.asCell().toString();
		}
	};
	exports.Slice = Slice;
	_a$1 = symbol_inspect_1$1.default;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/BitReader.js
var require_BitReader = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/BitReader.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.BitReader = void 0;
	const Address_1$4 = require_Address();
	const ExternalAddress_1$1 = require_ExternalAddress();
	/**
	* Class for reading bit strings
	*/
	var BitReader = class BitReader {
		constructor(bits, offset = 0) {
			this._checkpoints = [];
			this._bits = bits;
			this._offset = offset;
		}
		/**
		* Offset in source bit string
		*/
		get offset() {
			return this._offset;
		}
		/**
		* Number of bits remaining
		*/
		get remaining() {
			return this._bits.length - this._offset;
		}
		/**
		* Skip bits
		* @param bits number of bits to skip
		*/
		skip(bits) {
			if (bits < 0 || this._offset + bits > this._bits.length) throw new Error(`Index ${this._offset + bits} is out of bounds`);
			this._offset += bits;
		}
		/**
		* Reset to the beginning or latest checkpoint
		*/
		reset() {
			if (this._checkpoints.length > 0) this._offset = this._checkpoints.pop();
			else this._offset = 0;
		}
		/**
		* Save checkpoint
		*/
		save() {
			this._checkpoints.push(this._offset);
		}
		/**
		* Load a single bit
		* @returns true if the bit is set, false otherwise
		*/
		loadBit() {
			let r = this._bits.at(this._offset);
			this._offset++;
			return r;
		}
		/**
		* Preload bit
		* @returns true if the bit is set, false otherwise
		*/
		preloadBit() {
			return this._bits.at(this._offset);
		}
		/**
		* Load bit string
		* @param bits number of bits to read
		* @returns new bitstring
		*/
		loadBits(bits) {
			let r = this._bits.substring(this._offset, bits);
			this._offset += bits;
			return r;
		}
		/**
		* Preload bit string
		* @param bits number of bits to read
		* @returns new bitstring
		*/
		preloadBits(bits) {
			return this._bits.substring(this._offset, bits);
		}
		/**
		* Load buffer
		* @param bytes number of bytes
		* @returns new buffer
		*/
		loadBuffer(bytes) {
			let buf = this._preloadBuffer(bytes, this._offset);
			this._offset += bytes * 8;
			return buf;
		}
		/**
		* Preload buffer
		* @param bytes number of bytes
		* @returns new buffer
		*/
		preloadBuffer(bytes) {
			return this._preloadBuffer(bytes, this._offset);
		}
		/**
		* Load uint value
		* @param bits uint bits
		* @returns read value as number
		*/
		loadUint(bits) {
			return Number(this.loadUintBig(bits));
		}
		/**
		* Load uint value as bigint
		* @param bits uint bits
		* @returns read value as bigint
		*/
		loadUintBig(bits) {
			let loaded = this.preloadUintBig(bits);
			this._offset += bits;
			return loaded;
		}
		/**
		* Preload uint value
		* @param bits uint bits
		* @returns read value as number
		*/
		preloadUint(bits) {
			return Number(this._preloadUint(bits, this._offset));
		}
		/**
		* Preload uint value as bigint
		* @param bits uint bits
		* @returns read value as bigint
		*/
		preloadUintBig(bits) {
			return this._preloadUint(bits, this._offset);
		}
		/**
		* Load int value
		* @param bits int bits
		* @returns read value as bigint
		*/
		loadInt(bits) {
			let res = this._preloadInt(bits, this._offset);
			this._offset += bits;
			return Number(res);
		}
		/**
		* Load int value as bigint
		* @param bits int bits
		* @returns read value as bigint
		*/
		loadIntBig(bits) {
			let res = this._preloadInt(bits, this._offset);
			this._offset += bits;
			return res;
		}
		/**
		* Preload int value
		* @param bits int bits
		* @returns read value as bigint
		*/
		preloadInt(bits) {
			return Number(this._preloadInt(bits, this._offset));
		}
		/**
		* Preload int value
		* @param bits int bits
		* @returns read value as bigint
		*/
		preloadIntBig(bits) {
			return this._preloadInt(bits, this._offset);
		}
		/**
		* Load varuint value
		* @param bits number of bits to read the size
		* @returns read value as bigint
		*/
		loadVarUint(bits) {
			let size = Number(this.loadUint(bits));
			return Number(this.loadUintBig(size * 8));
		}
		/**
		* Load varuint value
		* @param bits number of bits to read the size
		* @returns read value as bigint
		*/
		loadVarUintBig(bits) {
			let size = Number(this.loadUint(bits));
			return this.loadUintBig(size * 8);
		}
		/**
		* Preload varuint value
		* @param bits number of bits to read the size
		* @returns read value as bigint
		*/
		preloadVarUint(bits) {
			let size = Number(this._preloadUint(bits, this._offset));
			return Number(this._preloadUint(size * 8, this._offset + bits));
		}
		/**
		* Preload varuint value
		* @param bits number of bits to read the size
		* @returns read value as bigint
		*/
		preloadVarUintBig(bits) {
			let size = Number(this._preloadUint(bits, this._offset));
			return this._preloadUint(size * 8, this._offset + bits);
		}
		/**
		* Load varint value
		* @param bits number of bits to read the size
		* @returns read value as bigint
		*/
		loadVarInt(bits) {
			let size = Number(this.loadUint(bits));
			return Number(this.loadIntBig(size * 8));
		}
		/**
		* Load varint value
		* @param bits number of bits to read the size
		* @returns read value as bigint
		*/
		loadVarIntBig(bits) {
			let size = Number(this.loadUint(bits));
			return this.loadIntBig(size * 8);
		}
		/**
		* Preload varint value
		* @param bits number of bits to read the size
		* @returns read value as bigint
		*/
		preloadVarInt(bits) {
			let size = Number(this._preloadUint(bits, this._offset));
			return Number(this._preloadInt(size * 8, this._offset + bits));
		}
		/**
		* Preload varint value
		* @param bits number of bits to read the size
		* @returns read value as bigint
		*/
		preloadVarIntBig(bits) {
			let size = Number(this._preloadUint(bits, this._offset));
			return this._preloadInt(size * 8, this._offset + bits);
		}
		/**
		* Load coins value
		* @returns read value as bigint
		*/
		loadCoins() {
			return this.loadVarUintBig(4);
		}
		/**
		* Preload coins value
		* @returns read value as bigint
		*/
		preloadCoins() {
			return this.preloadVarUintBig(4);
		}
		/**
		* Load Address
		* @returns Address
		*/
		loadAddress() {
			let type = Number(this._preloadUint(2, this._offset));
			if (type === 2) return this._loadInternalAddress();
			else throw new Error("Invalid address: " + type);
		}
		/**
		* Load internal address
		* @returns Address or null
		*/
		loadMaybeAddress() {
			let type = Number(this._preloadUint(2, this._offset));
			if (type === 0) {
				this._offset += 2;
				return null;
			} else if (type === 2) return this._loadInternalAddress();
			else throw new Error("Invalid address");
		}
		/**
		* Load external address
		* @returns ExternalAddress
		*/
		loadExternalAddress() {
			let type = Number(this._preloadUint(2, this._offset));
			if (type === 1) return this._loadExternalAddress();
			else throw new Error("Invalid address");
		}
		/**
		* Load external address
		* @returns ExternalAddress or null
		*/
		loadMaybeExternalAddress() {
			let type = Number(this._preloadUint(2, this._offset));
			if (type === 0) {
				this._offset += 2;
				return null;
			} else if (type === 1) return this._loadExternalAddress();
			else throw new Error("Invalid address");
		}
		/**
		* Read address of any type
		* @returns Address or ExternalAddress or null
		*/
		loadAddressAny() {
			let type = Number(this._preloadUint(2, this._offset));
			if (type === 0) {
				this._offset += 2;
				return null;
			} else if (type === 2) return this._loadInternalAddress();
			else if (type === 1) return this._loadExternalAddress();
			else if (type === 3) throw Error("Unsupported");
			else throw Error("Unreachable");
		}
		/**
		* Load bit string that was padded to make it byte alligned. Used in BOC serialization
		* @param bytes number of bytes to read
		*/
		loadPaddedBits(bits) {
			if (bits % 8 !== 0) throw new Error("Invalid number of bits");
			let length = bits;
			while (true) if (this._bits.at(this._offset + length - 1)) {
				length--;
				break;
			} else length--;
			let r = this._bits.substring(this._offset, length);
			this._offset += bits;
			return r;
		}
		/**
		* Clone BitReader
		*/
		clone() {
			return new BitReader(this._bits, this._offset);
		}
		/**
		* Preload int from specific offset
		* @param bits bits to preload
		* @param offset offset to start from
		* @returns read value as bigint
		*/
		_preloadInt(bits, offset) {
			if (bits == 0) return 0n;
			let sign$1 = this._bits.at(offset);
			let res = 0n;
			for (let i$2 = 0; i$2 < bits - 1; i$2++) if (this._bits.at(offset + 1 + i$2)) res += 1n << BigInt(bits - i$2 - 1 - 1);
			if (sign$1) res = res - (1n << BigInt(bits - 1));
			return res;
		}
		/**
		* Preload uint from specific offset
		* @param bits bits to preload
		* @param offset offset to start from
		* @returns read value as bigint
		*/
		_preloadUint(bits, offset) {
			if (bits == 0) return 0n;
			let res = 0n;
			for (let i$2 = 0; i$2 < bits; i$2++) if (this._bits.at(offset + i$2)) res += 1n << BigInt(bits - i$2 - 1);
			return res;
		}
		_preloadBuffer(bytes, offset) {
			let fastBuffer = this._bits.subbuffer(offset, bytes * 8);
			if (fastBuffer) return fastBuffer;
			let buf = Buffer.alloc(bytes);
			for (let i$2 = 0; i$2 < bytes; i$2++) buf[i$2] = Number(this._preloadUint(8, offset + i$2 * 8));
			return buf;
		}
		_loadInternalAddress() {
			let type = Number(this._preloadUint(2, this._offset));
			if (type !== 2) throw Error("Invalid address");
			if (this._preloadUint(1, this._offset + 2) !== 0n) throw Error("Invalid address");
			let wc = Number(this._preloadInt(8, this._offset + 3));
			let hash = this._preloadBuffer(32, this._offset + 11);
			this._offset += 267;
			return new Address_1$4.Address(wc, hash);
		}
		_loadExternalAddress() {
			let type = Number(this._preloadUint(2, this._offset));
			if (type !== 1) throw Error("Invalid address");
			let bits = Number(this._preloadUint(9, this._offset + 2));
			let value = this._preloadUint(bits, this._offset + 11);
			this._offset += 11 + bits;
			return new ExternalAddress_1$1.ExternalAddress(value, bits);
		}
	};
	exports.BitReader = BitReader;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/cell/exoticLibrary.js
var require_exoticLibrary = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/cell/exoticLibrary.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.exoticLibrary = void 0;
	const BitReader_1$7 = require_BitReader();
	function exoticLibrary(bits, refs) {
		const reader = new BitReader_1$7.BitReader(bits);
		const size = 264;
		if (bits.length !== size) throw new Error(`Library cell must have exactly (8 + 256) bits, got "${bits.length}"`);
		let type = reader.loadUint(8);
		if (type !== 2) throw new Error(`Library cell must have type 2, got "${type}"`);
		return {};
	}
	exports.exoticLibrary = exoticLibrary;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/cell/exoticMerkleProof.js
var require_exoticMerkleProof = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/cell/exoticMerkleProof.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.exoticMerkleProof = void 0;
	const BitReader_1$6 = require_BitReader();
	function exoticMerkleProof(bits, refs) {
		const reader = new BitReader_1$6.BitReader(bits);
		const size = 280;
		if (bits.length !== size) throw new Error(`Merkle Proof cell must have exactly (8 + 256 + 16) bits, got "${bits.length}"`);
		if (refs.length !== 1) throw new Error(`Merkle Proof cell must have exactly 1 ref, got "${refs.length}"`);
		let type = reader.loadUint(8);
		if (type !== 3) throw new Error(`Merkle Proof cell must have type 3, got "${type}"`);
		const proofHash = reader.loadBuffer(32);
		const proofDepth = reader.loadUint(16);
		const refHash = refs[0].hash(0);
		const refDepth = refs[0].depth(0);
		if (proofDepth !== refDepth) throw new Error(`Merkle Proof cell ref depth must be exactly "${proofDepth}", got "${refDepth}"`);
		if (!proofHash.equals(refHash)) throw new Error(`Merkle Proof cell ref hash must be exactly "${proofHash.toString("hex")}", got "${refHash.toString("hex")}"`);
		return {
			proofDepth,
			proofHash
		};
	}
	exports.exoticMerkleProof = exoticMerkleProof;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/cell/exoticMerkleUpdate.js
var require_exoticMerkleUpdate = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/cell/exoticMerkleUpdate.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.exoticMerkleUpdate = void 0;
	const BitReader_1$5 = require_BitReader();
	function exoticMerkleUpdate(bits, refs) {
		const reader = new BitReader_1$5.BitReader(bits);
		const size = 552;
		if (bits.length !== size) throw new Error(`Merkle Update cell must have exactly (8 + (2 * (256 + 16))) bits, got "${bits.length}"`);
		if (refs.length !== 2) throw new Error(`Merkle Update cell must have exactly 2 refs, got "${refs.length}"`);
		let type = reader.loadUint(8);
		if (type !== 4) throw new Error(`Merkle Update cell type must be exactly 4, got "${type}"`);
		const proofHash1 = reader.loadBuffer(32);
		const proofHash2 = reader.loadBuffer(32);
		const proofDepth1 = reader.loadUint(16);
		const proofDepth2 = reader.loadUint(16);
		if (proofDepth1 !== refs[0].depth(0)) throw new Error(`Merkle Update cell ref depth must be exactly "${proofDepth1}", got "${refs[0].depth(0)}"`);
		if (!proofHash1.equals(refs[0].hash(0))) throw new Error(`Merkle Update cell ref hash must be exactly "${proofHash1.toString("hex")}", got "${refs[0].hash(0).toString("hex")}"`);
		if (proofDepth2 !== refs[1].depth(0)) throw new Error(`Merkle Update cell ref depth must be exactly "${proofDepth2}", got "${refs[1].depth(0)}"`);
		if (!proofHash2.equals(refs[1].hash(0))) throw new Error(`Merkle Update cell ref hash must be exactly "${proofHash2.toString("hex")}", got "${refs[1].hash(0).toString("hex")}"`);
		return {
			proofDepth1,
			proofDepth2,
			proofHash1,
			proofHash2
		};
	}
	exports.exoticMerkleUpdate = exoticMerkleUpdate;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/cell/LevelMask.js
var require_LevelMask = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/cell/LevelMask.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.LevelMask = void 0;
	var LevelMask = class LevelMask {
		constructor(mask = 0) {
			this._mask = 0;
			this._mask = mask;
			this._hashIndex = countSetBits(this._mask);
			this._hashCount = this._hashIndex + 1;
		}
		get value() {
			return this._mask;
		}
		get level() {
			return 32 - Math.clz32(this._mask);
		}
		get hashIndex() {
			return this._hashIndex;
		}
		get hashCount() {
			return this._hashCount;
		}
		apply(level) {
			return new LevelMask(this._mask & (1 << level) - 1);
		}
		isSignificant(level) {
			let res = level === 0 || (this._mask >> level - 1) % 2 !== 0;
			return res;
		}
	};
	exports.LevelMask = LevelMask;
	function countSetBits(n$1) {
		n$1 = n$1 - (n$1 >> 1 & 1431655765);
		n$1 = (n$1 & 858993459) + (n$1 >> 2 & 858993459);
		return (n$1 + (n$1 >> 4) & 252645135) * 16843009 >> 24;
	}
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/cell/exoticPruned.js
var require_exoticPruned = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/cell/exoticPruned.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.exoticPruned = void 0;
	const BitReader_1$4 = require_BitReader();
	const LevelMask_1$2 = require_LevelMask();
	function exoticPruned(bits, refs) {
		let reader = new BitReader_1$4.BitReader(bits);
		let type = reader.loadUint(8);
		if (type !== 1) throw new Error(`Pruned branch cell must have type 1, got "${type}"`);
		if (refs.length !== 0) throw new Error(`Pruned Branch cell can't has refs, got "${refs.length}"`);
		let mask;
		if (bits.length === 280) mask = new LevelMask_1$2.LevelMask(1);
		else {
			mask = new LevelMask_1$2.LevelMask(reader.loadUint(8));
			if (mask.level < 1 || mask.level > 3) throw new Error(`Pruned Branch cell level must be >= 1 and <= 3, got "${mask.level}/${mask.value}"`);
			const size = 16 + mask.apply(mask.level - 1).hashCount * 272;
			if (bits.length !== size) throw new Error(`Pruned branch cell must have exactly ${size} bits, got "${bits.length}"`);
		}
		let pruned = [];
		let hashes = [];
		let depths = [];
		for (let i$2 = 0; i$2 < mask.level; i$2++) hashes.push(reader.loadBuffer(32));
		for (let i$2 = 0; i$2 < mask.level; i$2++) depths.push(reader.loadUint(16));
		for (let i$2 = 0; i$2 < mask.level; i$2++) pruned.push({
			depth: depths[i$2],
			hash: hashes[i$2]
		});
		return {
			mask: mask.value,
			pruned
		};
	}
	exports.exoticPruned = exoticPruned;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/cell/resolveExotic.js
var require_resolveExotic = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/cell/resolveExotic.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.resolveExotic = void 0;
	const BitReader_1$3 = require_BitReader();
	const CellType_1$4 = require_CellType();
	const exoticLibrary_1$1 = require_exoticLibrary();
	const exoticMerkleProof_1$2 = require_exoticMerkleProof();
	const exoticMerkleUpdate_1$2 = require_exoticMerkleUpdate();
	const exoticPruned_1$2 = require_exoticPruned();
	const LevelMask_1$1 = require_LevelMask();
	function resolvePruned(bits, refs) {
		let pruned = (0, exoticPruned_1$2.exoticPruned)(bits, refs);
		let depths = [];
		let hashes = [];
		let mask = new LevelMask_1$1.LevelMask(pruned.mask);
		for (let i$2 = 0; i$2 < pruned.pruned.length; i$2++) {
			depths.push(pruned.pruned[i$2].depth);
			hashes.push(pruned.pruned[i$2].hash);
		}
		return {
			type: CellType_1$4.CellType.PrunedBranch,
			depths,
			hashes,
			mask
		};
	}
	function resolveLibrary(bits, refs) {
		let pruned = (0, exoticLibrary_1$1.exoticLibrary)(bits, refs);
		let depths = [];
		let hashes = [];
		let mask = new LevelMask_1$1.LevelMask();
		return {
			type: CellType_1$4.CellType.Library,
			depths,
			hashes,
			mask
		};
	}
	function resolveMerkleProof(bits, refs) {
		let merkleProof = (0, exoticMerkleProof_1$2.exoticMerkleProof)(bits, refs);
		let depths = [];
		let hashes = [];
		let mask = new LevelMask_1$1.LevelMask(refs[0].level() >> 1);
		return {
			type: CellType_1$4.CellType.MerkleProof,
			depths,
			hashes,
			mask
		};
	}
	function resolveMerkleUpdate(bits, refs) {
		let merkleUpdate = (0, exoticMerkleUpdate_1$2.exoticMerkleUpdate)(bits, refs);
		let depths = [];
		let hashes = [];
		let mask = new LevelMask_1$1.LevelMask((refs[0].level() | refs[1].level()) >> 1);
		return {
			type: CellType_1$4.CellType.MerkleUpdate,
			depths,
			hashes,
			mask
		};
	}
	function resolveExotic(bits, refs) {
		let reader = new BitReader_1$3.BitReader(bits);
		let type = reader.preloadUint(8);
		if (type === 1) return resolvePruned(bits, refs);
		if (type === 2) return resolveLibrary(bits, refs);
		if (type === 3) return resolveMerkleProof(bits, refs);
		if (type === 4) return resolveMerkleUpdate(bits, refs);
		throw Error("Invalid exotic cell type: " + type);
	}
	exports.resolveExotic = resolveExotic;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/cell/descriptor.js
var require_descriptor = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/cell/descriptor.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getRepr = exports.getBitsDescriptor = exports.getRefsDescriptor = void 0;
	const CellType_1$3 = require_CellType();
	const paddedBits_1$1 = require_paddedBits();
	function getRefsDescriptor(refs, level, type) {
		return refs.length + (type !== CellType_1$3.CellType.Ordinary ? 1 : 0) * 8 + level * 32;
	}
	exports.getRefsDescriptor = getRefsDescriptor;
	function getBitsDescriptor(bits) {
		let len$1 = bits.length;
		return Math.ceil(len$1 / 8) + Math.floor(len$1 / 8);
	}
	exports.getBitsDescriptor = getBitsDescriptor;
	function getRepr(originalBits, bits, refs, level, type) {
		const bitsLen = Math.ceil(bits.length / 8);
		const repr = Buffer.alloc(2 + bitsLen + 34 * refs.length);
		let reprCursor = 0;
		repr[reprCursor++] = getRefsDescriptor(refs, level, type);
		repr[reprCursor++] = getBitsDescriptor(originalBits);
		(0, paddedBits_1$1.bitsToPaddedBuffer)(bits).copy(repr, reprCursor);
		reprCursor += bitsLen;
		for (const c$1 of refs) {
			let childDepth;
			if (type == CellType_1$3.CellType.MerkleProof || type == CellType_1$3.CellType.MerkleUpdate) childDepth = c$1.depth(level + 1);
			else childDepth = c$1.depth(level);
			repr[reprCursor++] = Math.floor(childDepth / 256);
			repr[reprCursor++] = childDepth % 256;
		}
		for (const c$1 of refs) {
			let childHash;
			if (type == CellType_1$3.CellType.MerkleProof || type == CellType_1$3.CellType.MerkleUpdate) childHash = c$1.hash(level + 1);
			else childHash = c$1.hash(level);
			childHash.copy(repr, reprCursor);
			reprCursor += 32;
		}
		return repr;
	}
	exports.getRepr = getRepr;
} });

//#endregion
//#region ../../node_modules/.pnpm/jssha@3.2.0/node_modules/jssha/dist/sha.js
var require_sha = __commonJS({ "../../node_modules/.pnpm/jssha@3.2.0/node_modules/jssha/dist/sha.js"(exports, module) {
	/**
	* A JavaScript implementation of the SHA family of hashes - defined in FIPS PUB 180-4, FIPS PUB 202,
	* and SP 800-185 - as well as the corresponding HMAC implementation as defined in FIPS PUB 198-1.
	*
	* Copyright 2008-2020 Brian Turek, 1998-2009 Paul Johnston & Contributors
	* Distributed under the BSD License
	* See http://caligatio.github.com/jsSHA/ for more information
	*
	* Two ECMAScript polyfill functions carry the following license:
	*
	* Copyright (c) Microsoft Corporation. All rights reserved.
	* Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
	* the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
	*
	* THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED,
	* INCLUDING WITHOUT LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
	* MERCHANTABLITY OR NON-INFRINGEMENT.
	*
	* See the Apache Version 2.0 License for specific language governing permissions and limitations under the License.
	*/
	(function(n$1, r) {
		"object" == typeof exports && "undefined" != typeof module ? module.exports = r() : "function" == typeof define && define.amd ? define(r) : (n$1 = "undefined" != typeof globalThis ? globalThis : n$1 || self).jsSHA = r();
	})(void 0, function() {
		"use strict";
		var n$1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
		function r(n$2, r$1, t$2, e$2) {
			var i$3, o$2, u$2, f$1 = r$1 || [0], w$1 = (t$2 = t$2 || 0) >>> 3, s$2 = -1 === e$2 ? 3 : 0;
			for (i$3 = 0; i$3 < n$2.length; i$3 += 1) o$2 = (u$2 = i$3 + w$1) >>> 2, f$1.length <= o$2 && f$1.push(0), f$1[o$2] |= n$2[i$3] << 8 * (s$2 + e$2 * (u$2 % 4));
			return {
				value: f$1,
				binLen: 8 * n$2.length + t$2
			};
		}
		function t$1(t$2, e$2, i$3) {
			switch (e$2) {
				case "UTF8":
				case "UTF16BE":
				case "UTF16LE": break;
				default: throw new Error("encoding must be UTF8, UTF16BE, or UTF16LE");
			}
			switch (t$2) {
				case "HEX": return function(n$2, r$1, t$3) {
					return function(n$3, r$2, t$4, e$3) {
						var i$4, o$2, u$2, f$1;
						if (0 != n$3.length % 2) throw new Error("String of HEX type must be in byte increments");
						var w$1 = r$2 || [0], s$2 = (t$4 = t$4 || 0) >>> 3, a$2 = -1 === e$3 ? 3 : 0;
						for (i$4 = 0; i$4 < n$3.length; i$4 += 2) {
							if (o$2 = parseInt(n$3.substr(i$4, 2), 16), isNaN(o$2)) throw new Error("String of HEX type contains invalid characters");
							for (u$2 = (f$1 = (i$4 >>> 1) + s$2) >>> 2; w$1.length <= u$2;) w$1.push(0);
							w$1[u$2] |= o$2 << 8 * (a$2 + e$3 * (f$1 % 4));
						}
						return {
							value: w$1,
							binLen: 4 * n$3.length + t$4
						};
					}(n$2, r$1, t$3, i$3);
				};
				case "TEXT": return function(n$2, r$1, t$3) {
					return function(n$3, r$2, t$4, e$3, i$4) {
						var o$2, u$2, f$1, w$1, s$2, a$2, h$2, c$2, v$1 = 0, A$1 = t$4 || [0], E$2 = (e$3 = e$3 || 0) >>> 3;
						if ("UTF8" === r$2) for (h$2 = -1 === i$4 ? 3 : 0, f$1 = 0; f$1 < n$3.length; f$1 += 1) for (u$2 = [], 128 > (o$2 = n$3.charCodeAt(f$1)) ? u$2.push(o$2) : 2048 > o$2 ? (u$2.push(192 | o$2 >>> 6), u$2.push(128 | 63 & o$2)) : 55296 > o$2 || 57344 <= o$2 ? u$2.push(224 | o$2 >>> 12, 128 | o$2 >>> 6 & 63, 128 | 63 & o$2) : (f$1 += 1, o$2 = 65536 + ((1023 & o$2) << 10 | 1023 & n$3.charCodeAt(f$1)), u$2.push(240 | o$2 >>> 18, 128 | o$2 >>> 12 & 63, 128 | o$2 >>> 6 & 63, 128 | 63 & o$2)), w$1 = 0; w$1 < u$2.length; w$1 += 1) {
							for (s$2 = (a$2 = v$1 + E$2) >>> 2; A$1.length <= s$2;) A$1.push(0);
							A$1[s$2] |= u$2[w$1] << 8 * (h$2 + i$4 * (a$2 % 4)), v$1 += 1;
						}
						else for (h$2 = -1 === i$4 ? 2 : 0, c$2 = "UTF16LE" === r$2 && 1 !== i$4 || "UTF16LE" !== r$2 && 1 === i$4, f$1 = 0; f$1 < n$3.length; f$1 += 1) {
							for (o$2 = n$3.charCodeAt(f$1), !0 === c$2 && (o$2 = (w$1 = 255 & o$2) << 8 | o$2 >>> 8), s$2 = (a$2 = v$1 + E$2) >>> 2; A$1.length <= s$2;) A$1.push(0);
							A$1[s$2] |= o$2 << 8 * (h$2 + i$4 * (a$2 % 4)), v$1 += 2;
						}
						return {
							value: A$1,
							binLen: 8 * v$1 + e$3
						};
					}(n$2, e$2, r$1, t$3, i$3);
				};
				case "B64": return function(r$1, t$3, e$3) {
					return function(r$2, t$4, e$4, i$4) {
						var o$2, u$2, f$1, w$1, s$2, a$2, h$2 = 0, c$2 = t$4 || [0], v$1 = (e$4 = e$4 || 0) >>> 3, A$1 = -1 === i$4 ? 3 : 0, E$2 = r$2.indexOf("=");
						if (-1 === r$2.search(/^[a-zA-Z0-9=+/]+$/)) throw new Error("Invalid character in base-64 string");
						if (r$2 = r$2.replace(/=/g, ""), -1 !== E$2 && E$2 < r$2.length) throw new Error("Invalid '=' found in base-64 string");
						for (o$2 = 0; o$2 < r$2.length; o$2 += 4) {
							for (w$1 = r$2.substr(o$2, 4), f$1 = 0, u$2 = 0; u$2 < w$1.length; u$2 += 1) f$1 |= n$1.indexOf(w$1.charAt(u$2)) << 18 - 6 * u$2;
							for (u$2 = 0; u$2 < w$1.length - 1; u$2 += 1) {
								for (s$2 = (a$2 = h$2 + v$1) >>> 2; c$2.length <= s$2;) c$2.push(0);
								c$2[s$2] |= (f$1 >>> 16 - 8 * u$2 & 255) << 8 * (A$1 + i$4 * (a$2 % 4)), h$2 += 1;
							}
						}
						return {
							value: c$2,
							binLen: 8 * h$2 + e$4
						};
					}(r$1, t$3, e$3, i$3);
				};
				case "BYTES": return function(n$2, r$1, t$3) {
					return function(n$3, r$2, t$4, e$3) {
						var i$4, o$2, u$2, f$1, w$1 = r$2 || [0], s$2 = (t$4 = t$4 || 0) >>> 3, a$2 = -1 === e$3 ? 3 : 0;
						for (o$2 = 0; o$2 < n$3.length; o$2 += 1) i$4 = n$3.charCodeAt(o$2), u$2 = (f$1 = o$2 + s$2) >>> 2, w$1.length <= u$2 && w$1.push(0), w$1[u$2] |= i$4 << 8 * (a$2 + e$3 * (f$1 % 4));
						return {
							value: w$1,
							binLen: 8 * n$3.length + t$4
						};
					}(n$2, r$1, t$3, i$3);
				};
				case "ARRAYBUFFER": return function(n$2, t$3, e$3) {
					return function(n$3, t$4, e$4, i$4) {
						return r(new Uint8Array(n$3), t$4, e$4, i$4);
					}(n$2, t$3, e$3, i$3);
				};
				case "UINT8ARRAY":
					try {
						new Uint8Array(0);
					} catch (n$2) {
						throw new Error("UINT8ARRAY not supported by this environment");
					}
					return function(n$2, t$3, e$3) {
						return r(n$2, t$3, e$3, i$3);
					};
				default: throw new Error("format must be HEX, TEXT, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY");
			}
		}
		function e$1(r$1, t$2, e$2, i$3) {
			switch (r$1) {
				case "HEX": return function(n$2) {
					return function(n$3, r$2, t$3, e$3) {
						var i$4, o$2, u$2 = "", f$1 = r$2 / 8, w$1 = -1 === t$3 ? 3 : 0;
						for (i$4 = 0; i$4 < f$1; i$4 += 1) o$2 = n$3[i$4 >>> 2] >>> 8 * (w$1 + t$3 * (i$4 % 4)), u$2 += "0123456789abcdef".charAt(o$2 >>> 4 & 15) + "0123456789abcdef".charAt(15 & o$2);
						return e$3.outputUpper ? u$2.toUpperCase() : u$2;
					}(n$2, t$2, e$2, i$3);
				};
				case "B64": return function(r$2) {
					return function(r$3, t$3, e$3, i$4) {
						var o$2, u$2, f$1, w$1, s$2, a$2 = "", h$2 = t$3 / 8, c$2 = -1 === e$3 ? 3 : 0;
						for (o$2 = 0; o$2 < h$2; o$2 += 3) for (w$1 = o$2 + 1 < h$2 ? r$3[o$2 + 1 >>> 2] : 0, s$2 = o$2 + 2 < h$2 ? r$3[o$2 + 2 >>> 2] : 0, f$1 = (r$3[o$2 >>> 2] >>> 8 * (c$2 + e$3 * (o$2 % 4)) & 255) << 16 | (w$1 >>> 8 * (c$2 + e$3 * ((o$2 + 1) % 4)) & 255) << 8 | s$2 >>> 8 * (c$2 + e$3 * ((o$2 + 2) % 4)) & 255, u$2 = 0; u$2 < 4; u$2 += 1) a$2 += 8 * o$2 + 6 * u$2 <= t$3 ? n$1.charAt(f$1 >>> 6 * (3 - u$2) & 63) : i$4.b64Pad;
						return a$2;
					}(r$2, t$2, e$2, i$3);
				};
				case "BYTES": return function(n$2) {
					return function(n$3, r$2, t$3) {
						var e$3, i$4, o$2 = "", u$2 = r$2 / 8, f$1 = -1 === t$3 ? 3 : 0;
						for (e$3 = 0; e$3 < u$2; e$3 += 1) i$4 = n$3[e$3 >>> 2] >>> 8 * (f$1 + t$3 * (e$3 % 4)) & 255, o$2 += String.fromCharCode(i$4);
						return o$2;
					}(n$2, t$2, e$2);
				};
				case "ARRAYBUFFER": return function(n$2) {
					return function(n$3, r$2, t$3) {
						var e$3, i$4 = r$2 / 8, o$2 = new ArrayBuffer(i$4), u$2 = new Uint8Array(o$2), f$1 = -1 === t$3 ? 3 : 0;
						for (e$3 = 0; e$3 < i$4; e$3 += 1) u$2[e$3] = n$3[e$3 >>> 2] >>> 8 * (f$1 + t$3 * (e$3 % 4)) & 255;
						return o$2;
					}(n$2, t$2, e$2);
				};
				case "UINT8ARRAY":
					try {
						new Uint8Array(0);
					} catch (n$2) {
						throw new Error("UINT8ARRAY not supported by this environment");
					}
					return function(n$2) {
						return function(n$3, r$2, t$3) {
							var e$3, i$4 = r$2 / 8, o$2 = -1 === t$3 ? 3 : 0, u$2 = new Uint8Array(i$4);
							for (e$3 = 0; e$3 < i$4; e$3 += 1) u$2[e$3] = n$3[e$3 >>> 2] >>> 8 * (o$2 + t$3 * (e$3 % 4)) & 255;
							return u$2;
						}(n$2, t$2, e$2);
					};
				default: throw new Error("format must be HEX, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY");
			}
		}
		var i$2 = [
			1116352408,
			1899447441,
			3049323471,
			3921009573,
			961987163,
			1508970993,
			2453635748,
			2870763221,
			3624381080,
			310598401,
			607225278,
			1426881987,
			1925078388,
			2162078206,
			2614888103,
			3248222580,
			3835390401,
			4022224774,
			264347078,
			604807628,
			770255983,
			1249150122,
			1555081692,
			1996064986,
			2554220882,
			2821834349,
			2952996808,
			3210313671,
			3336571891,
			3584528711,
			113926993,
			338241895,
			666307205,
			773529912,
			1294757372,
			1396182291,
			1695183700,
			1986661051,
			2177026350,
			2456956037,
			2730485921,
			2820302411,
			3259730800,
			3345764771,
			3516065817,
			3600352804,
			4094571909,
			275423344,
			430227734,
			506948616,
			659060556,
			883997877,
			958139571,
			1322822218,
			1537002063,
			1747873779,
			1955562222,
			2024104815,
			2227730452,
			2361852424,
			2428436474,
			2756734187,
			3204031479,
			3329325298
		], o$1 = [
			3238371032,
			914150663,
			812702999,
			4144912697,
			4290775857,
			1750603025,
			1694076839,
			3204075428
		], u$1 = [
			1779033703,
			3144134277,
			1013904242,
			2773480762,
			1359893119,
			2600822924,
			528734635,
			1541459225
		], f = "Chosen SHA variant is not supported";
		function w(n$2, r$1) {
			var t$2, e$2, i$3 = n$2.binLen >>> 3, o$2 = r$1.binLen >>> 3, u$2 = i$3 << 3, f$1 = 4 - i$3 << 3;
			if (i$3 % 4 != 0) {
				for (t$2 = 0; t$2 < o$2; t$2 += 4) e$2 = i$3 + t$2 >>> 2, n$2.value[e$2] |= r$1.value[t$2 >>> 2] << u$2, n$2.value.push(0), n$2.value[e$2 + 1] |= r$1.value[t$2 >>> 2] >>> f$1;
				return (n$2.value.length << 2) - 4 >= o$2 + i$3 && n$2.value.pop(), {
					value: n$2.value,
					binLen: n$2.binLen + r$1.binLen
				};
			}
			return {
				value: n$2.value.concat(r$1.value),
				binLen: n$2.binLen + r$1.binLen
			};
		}
		function s$1(n$2) {
			var r$1 = {
				outputUpper: !1,
				b64Pad: "=",
				outputLen: -1
			}, t$2 = n$2 || {}, e$2 = "Output length must be a multiple of 8";
			if (r$1.outputUpper = t$2.outputUpper || !1, t$2.b64Pad && (r$1.b64Pad = t$2.b64Pad), t$2.outputLen) {
				if (t$2.outputLen % 8 != 0) throw new Error(e$2);
				r$1.outputLen = t$2.outputLen;
			} else if (t$2.shakeLen) {
				if (t$2.shakeLen % 8 != 0) throw new Error(e$2);
				r$1.outputLen = t$2.shakeLen;
			}
			if ("boolean" != typeof r$1.outputUpper) throw new Error("Invalid outputUpper formatting option");
			if ("string" != typeof r$1.b64Pad) throw new Error("Invalid b64Pad formatting option");
			return r$1;
		}
		function a$1(n$2, r$1, e$2, i$3) {
			var o$2 = n$2 + " must include a value and format";
			if (!r$1) {
				if (!i$3) throw new Error(o$2);
				return i$3;
			}
			if (void 0 === r$1.value || !r$1.format) throw new Error(o$2);
			return t$1(r$1.format, r$1.encoding || "UTF8", e$2)(r$1.value);
		}
		var h$1 = function() {
			function n$2(n$3, r$1, t$2) {
				var e$2 = t$2 || {};
				if (this.t = r$1, this.i = e$2.encoding || "UTF8", this.numRounds = e$2.numRounds || 1, isNaN(this.numRounds) || this.numRounds !== parseInt(this.numRounds, 10) || 1 > this.numRounds) throw new Error("numRounds must a integer >= 1");
				this.o = n$3, this.u = [], this.s = 0, this.h = !1, this.v = 0, this.A = !1, this.l = [], this.H = [];
			}
			return n$2.prototype.update = function(n$3) {
				var r$1, t$2 = 0, e$2 = this.S >>> 5, i$3 = this.p(n$3, this.u, this.s), o$2 = i$3.binLen, u$2 = i$3.value, f$1 = o$2 >>> 5;
				for (r$1 = 0; r$1 < f$1; r$1 += e$2) t$2 + this.S <= o$2 && (this.m = this.R(u$2.slice(r$1, r$1 + e$2), this.m), t$2 += this.S);
				this.v += t$2, this.u = u$2.slice(t$2 >>> 5), this.s = o$2 % this.S, this.h = !0;
			}, n$2.prototype.getHash = function(n$3, r$1) {
				var t$2, i$3, o$2 = this.U, u$2 = s$1(r$1);
				if (this.T) {
					if (-1 === u$2.outputLen) throw new Error("Output length must be specified in options");
					o$2 = u$2.outputLen;
				}
				var f$1 = e$1(n$3, o$2, this.C, u$2);
				if (this.A && this.F) return f$1(this.F(u$2));
				for (i$3 = this.K(this.u.slice(), this.s, this.v, this.B(this.m), o$2), t$2 = 1; t$2 < this.numRounds; t$2 += 1) this.T && o$2 % 32 != 0 && (i$3[i$3.length - 1] &= 16777215 >>> 24 - o$2 % 32), i$3 = this.K(i$3, o$2, 0, this.L(this.o), o$2);
				return f$1(i$3);
			}, n$2.prototype.setHMACKey = function(n$3, r$1, e$2) {
				if (!this.g) throw new Error("Variant does not support HMAC");
				if (this.h) throw new Error("Cannot set MAC key after calling update");
				var i$3 = t$1(r$1, (e$2 || {}).encoding || "UTF8", this.C);
				this.k(i$3(n$3));
			}, n$2.prototype.k = function(n$3) {
				var r$1, t$2 = this.S >>> 3, e$2 = t$2 / 4 - 1;
				if (1 !== this.numRounds) throw new Error("Cannot set numRounds with MAC");
				if (this.A) throw new Error("MAC key already set");
				for (t$2 < n$3.binLen / 8 && (n$3.value = this.K(n$3.value, n$3.binLen, 0, this.L(this.o), this.U)); n$3.value.length <= e$2;) n$3.value.push(0);
				for (r$1 = 0; r$1 <= e$2; r$1 += 1) this.l[r$1] = 909522486 ^ n$3.value[r$1], this.H[r$1] = 1549556828 ^ n$3.value[r$1];
				this.m = this.R(this.l, this.m), this.v = this.S, this.A = !0;
			}, n$2.prototype.getHMAC = function(n$3, r$1) {
				var t$2 = s$1(r$1);
				return e$1(n$3, this.U, this.C, t$2)(this.Y());
			}, n$2.prototype.Y = function() {
				var n$3;
				if (!this.A) throw new Error("Cannot call getHMAC without first setting MAC key");
				var r$1 = this.K(this.u.slice(), this.s, this.v, this.B(this.m), this.U);
				return n$3 = this.R(this.H, this.L(this.o)), n$3 = this.K(r$1, this.U, this.S, n$3, this.U);
			}, n$2;
		}(), c$1 = function(n$2, r$1) {
			return (c$1 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(n$3, r$2) {
				n$3.__proto__ = r$2;
			} || function(n$3, r$2) {
				for (var t$2 in r$2) Object.prototype.hasOwnProperty.call(r$2, t$2) && (n$3[t$2] = r$2[t$2]);
			})(n$2, r$1);
		};
		function v(n$2, r$1) {
			function t$2() {
				this.constructor = n$2;
			}
			c$1(n$2, r$1), n$2.prototype = null === r$1 ? Object.create(r$1) : (t$2.prototype = r$1.prototype, new t$2());
		}
		function A(n$2, r$1) {
			return n$2 << r$1 | n$2 >>> 32 - r$1;
		}
		function E$1(n$2, r$1) {
			return n$2 >>> r$1 | n$2 << 32 - r$1;
		}
		function l$1(n$2, r$1) {
			return n$2 >>> r$1;
		}
		function b(n$2, r$1, t$2) {
			return n$2 ^ r$1 ^ t$2;
		}
		function H(n$2, r$1, t$2) {
			return n$2 & r$1 ^ ~n$2 & t$2;
		}
		function d(n$2, r$1, t$2) {
			return n$2 & r$1 ^ n$2 & t$2 ^ r$1 & t$2;
		}
		function S(n$2) {
			return E$1(n$2, 2) ^ E$1(n$2, 13) ^ E$1(n$2, 22);
		}
		function p$1(n$2, r$1) {
			var t$2 = (65535 & n$2) + (65535 & r$1);
			return (65535 & (n$2 >>> 16) + (r$1 >>> 16) + (t$2 >>> 16)) << 16 | 65535 & t$2;
		}
		function m(n$2, r$1, t$2, e$2) {
			var i$3 = (65535 & n$2) + (65535 & r$1) + (65535 & t$2) + (65535 & e$2);
			return (65535 & (n$2 >>> 16) + (r$1 >>> 16) + (t$2 >>> 16) + (e$2 >>> 16) + (i$3 >>> 16)) << 16 | 65535 & i$3;
		}
		function y(n$2, r$1, t$2, e$2, i$3) {
			var o$2 = (65535 & n$2) + (65535 & r$1) + (65535 & t$2) + (65535 & e$2) + (65535 & i$3);
			return (65535 & (n$2 >>> 16) + (r$1 >>> 16) + (t$2 >>> 16) + (e$2 >>> 16) + (i$3 >>> 16) + (o$2 >>> 16)) << 16 | 65535 & o$2;
		}
		function R(n$2) {
			return E$1(n$2, 7) ^ E$1(n$2, 18) ^ l$1(n$2, 3);
		}
		function U(n$2) {
			return E$1(n$2, 6) ^ E$1(n$2, 11) ^ E$1(n$2, 25);
		}
		function T(n$2) {
			return [
				1732584193,
				4023233417,
				2562383102,
				271733878,
				3285377520
			];
		}
		function C(n$2, r$1) {
			var t$2, e$2, i$3, o$2, u$2, f$1, w$1, s$2 = [];
			for (t$2 = r$1[0], e$2 = r$1[1], i$3 = r$1[2], o$2 = r$1[3], u$2 = r$1[4], w$1 = 0; w$1 < 80; w$1 += 1) s$2[w$1] = w$1 < 16 ? n$2[w$1] : A(s$2[w$1 - 3] ^ s$2[w$1 - 8] ^ s$2[w$1 - 14] ^ s$2[w$1 - 16], 1), f$1 = w$1 < 20 ? y(A(t$2, 5), H(e$2, i$3, o$2), u$2, 1518500249, s$2[w$1]) : w$1 < 40 ? y(A(t$2, 5), b(e$2, i$3, o$2), u$2, 1859775393, s$2[w$1]) : w$1 < 60 ? y(A(t$2, 5), d(e$2, i$3, o$2), u$2, 2400959708, s$2[w$1]) : y(A(t$2, 5), b(e$2, i$3, o$2), u$2, 3395469782, s$2[w$1]), u$2 = o$2, o$2 = i$3, i$3 = A(e$2, 30), e$2 = t$2, t$2 = f$1;
			return r$1[0] = p$1(t$2, r$1[0]), r$1[1] = p$1(e$2, r$1[1]), r$1[2] = p$1(i$3, r$1[2]), r$1[3] = p$1(o$2, r$1[3]), r$1[4] = p$1(u$2, r$1[4]), r$1;
		}
		function F(n$2, r$1, t$2, e$2) {
			for (var i$3, o$2 = 15 + (r$1 + 65 >>> 9 << 4), u$2 = r$1 + t$2; n$2.length <= o$2;) n$2.push(0);
			for (n$2[r$1 >>> 5] |= 128 << 24 - r$1 % 32, n$2[o$2] = 4294967295 & u$2, n$2[o$2 - 1] = u$2 / 4294967296 | 0, i$3 = 0; i$3 < n$2.length; i$3 += 16) e$2 = C(n$2.slice(i$3, i$3 + 16), e$2);
			return e$2;
		}
		var K = function(n$2) {
			function r$1(r$2, e$2, i$3) {
				var o$2 = this;
				if ("SHA-1" !== r$2) throw new Error(f);
				var u$2 = i$3 || {};
				return (o$2 = n$2.call(this, r$2, e$2, i$3) || this).g = !0, o$2.F = o$2.Y, o$2.C = -1, o$2.p = t$1(o$2.t, o$2.i, o$2.C), o$2.R = C, o$2.B = function(n$3) {
					return n$3.slice();
				}, o$2.L = T, o$2.K = F, o$2.m = [
					1732584193,
					4023233417,
					2562383102,
					271733878,
					3285377520
				], o$2.S = 512, o$2.U = 160, o$2.T = !1, u$2.hmacKey && o$2.k(a$1("hmacKey", u$2.hmacKey, o$2.C)), o$2;
			}
			return v(r$1, n$2), r$1;
		}(h$1);
		function B(n$2) {
			return "SHA-224" == n$2 ? o$1.slice() : u$1.slice();
		}
		function L(n$2, r$1) {
			var t$2, e$2, o$2, u$2, f$1, w$1, s$2, a$2, h$2, c$2, v$1, A$1, b$1 = [];
			for (t$2 = r$1[0], e$2 = r$1[1], o$2 = r$1[2], u$2 = r$1[3], f$1 = r$1[4], w$1 = r$1[5], s$2 = r$1[6], a$2 = r$1[7], v$1 = 0; v$1 < 64; v$1 += 1) b$1[v$1] = v$1 < 16 ? n$2[v$1] : m(E$1(A$1 = b$1[v$1 - 2], 17) ^ E$1(A$1, 19) ^ l$1(A$1, 10), b$1[v$1 - 7], R(b$1[v$1 - 15]), b$1[v$1 - 16]), h$2 = y(a$2, U(f$1), H(f$1, w$1, s$2), i$2[v$1], b$1[v$1]), c$2 = p$1(S(t$2), d(t$2, e$2, o$2)), a$2 = s$2, s$2 = w$1, w$1 = f$1, f$1 = p$1(u$2, h$2), u$2 = o$2, o$2 = e$2, e$2 = t$2, t$2 = p$1(h$2, c$2);
			return r$1[0] = p$1(t$2, r$1[0]), r$1[1] = p$1(e$2, r$1[1]), r$1[2] = p$1(o$2, r$1[2]), r$1[3] = p$1(u$2, r$1[3]), r$1[4] = p$1(f$1, r$1[4]), r$1[5] = p$1(w$1, r$1[5]), r$1[6] = p$1(s$2, r$1[6]), r$1[7] = p$1(a$2, r$1[7]), r$1;
		}
		var g = function(n$2) {
			function r$1(r$2, e$2, i$3) {
				var o$2 = this;
				if ("SHA-224" !== r$2 && "SHA-256" !== r$2) throw new Error(f);
				var u$2 = i$3 || {};
				return (o$2 = n$2.call(this, r$2, e$2, i$3) || this).F = o$2.Y, o$2.g = !0, o$2.C = -1, o$2.p = t$1(o$2.t, o$2.i, o$2.C), o$2.R = L, o$2.B = function(n$3) {
					return n$3.slice();
				}, o$2.L = B, o$2.K = function(n$3, t$2, e$3, i$4) {
					return function(n$4, r$3, t$3, e$4, i$5) {
						for (var o$3, u$3 = 15 + (r$3 + 65 >>> 9 << 4), f$1 = r$3 + t$3; n$4.length <= u$3;) n$4.push(0);
						for (n$4[r$3 >>> 5] |= 128 << 24 - r$3 % 32, n$4[u$3] = 4294967295 & f$1, n$4[u$3 - 1] = f$1 / 4294967296 | 0, o$3 = 0; o$3 < n$4.length; o$3 += 16) e$4 = L(n$4.slice(o$3, o$3 + 16), e$4);
						return "SHA-224" === i$5 ? [
							e$4[0],
							e$4[1],
							e$4[2],
							e$4[3],
							e$4[4],
							e$4[5],
							e$4[6]
						] : e$4;
					}(n$3, t$2, e$3, i$4, r$2);
				}, o$2.m = B(r$2), o$2.S = 512, o$2.U = "SHA-224" === r$2 ? 224 : 256, o$2.T = !1, u$2.hmacKey && o$2.k(a$1("hmacKey", u$2.hmacKey, o$2.C)), o$2;
			}
			return v(r$1, n$2), r$1;
		}(h$1), k = function(n$2, r$1) {
			this.N = n$2, this.I = r$1;
		};
		function Y(n$2, r$1) {
			var t$2;
			return r$1 > 32 ? (t$2 = 64 - r$1, new k(n$2.I << r$1 | n$2.N >>> t$2, n$2.N << r$1 | n$2.I >>> t$2)) : 0 !== r$1 ? (t$2 = 32 - r$1, new k(n$2.N << r$1 | n$2.I >>> t$2, n$2.I << r$1 | n$2.N >>> t$2)) : n$2;
		}
		function N(n$2, r$1) {
			var t$2;
			return r$1 < 32 ? (t$2 = 32 - r$1, new k(n$2.N >>> r$1 | n$2.I << t$2, n$2.I >>> r$1 | n$2.N << t$2)) : (t$2 = 64 - r$1, new k(n$2.I >>> r$1 | n$2.N << t$2, n$2.N >>> r$1 | n$2.I << t$2));
		}
		function I(n$2, r$1) {
			return new k(n$2.N >>> r$1, n$2.I >>> r$1 | n$2.N << 32 - r$1);
		}
		function M(n$2, r$1, t$2) {
			return new k(n$2.N & r$1.N ^ ~n$2.N & t$2.N, n$2.I & r$1.I ^ ~n$2.I & t$2.I);
		}
		function X(n$2, r$1, t$2) {
			return new k(n$2.N & r$1.N ^ n$2.N & t$2.N ^ r$1.N & t$2.N, n$2.I & r$1.I ^ n$2.I & t$2.I ^ r$1.I & t$2.I);
		}
		function z(n$2) {
			var r$1 = N(n$2, 28), t$2 = N(n$2, 34), e$2 = N(n$2, 39);
			return new k(r$1.N ^ t$2.N ^ e$2.N, r$1.I ^ t$2.I ^ e$2.I);
		}
		function O(n$2, r$1) {
			var t$2, e$2;
			t$2 = (65535 & n$2.I) + (65535 & r$1.I);
			var i$3 = (65535 & (e$2 = (n$2.I >>> 16) + (r$1.I >>> 16) + (t$2 >>> 16))) << 16 | 65535 & t$2;
			return t$2 = (65535 & n$2.N) + (65535 & r$1.N) + (e$2 >>> 16), e$2 = (n$2.N >>> 16) + (r$1.N >>> 16) + (t$2 >>> 16), new k((65535 & e$2) << 16 | 65535 & t$2, i$3);
		}
		function j(n$2, r$1, t$2, e$2) {
			var i$3, o$2;
			i$3 = (65535 & n$2.I) + (65535 & r$1.I) + (65535 & t$2.I) + (65535 & e$2.I);
			var u$2 = (65535 & (o$2 = (n$2.I >>> 16) + (r$1.I >>> 16) + (t$2.I >>> 16) + (e$2.I >>> 16) + (i$3 >>> 16))) << 16 | 65535 & i$3;
			return i$3 = (65535 & n$2.N) + (65535 & r$1.N) + (65535 & t$2.N) + (65535 & e$2.N) + (o$2 >>> 16), o$2 = (n$2.N >>> 16) + (r$1.N >>> 16) + (t$2.N >>> 16) + (e$2.N >>> 16) + (i$3 >>> 16), new k((65535 & o$2) << 16 | 65535 & i$3, u$2);
		}
		function _(n$2, r$1, t$2, e$2, i$3) {
			var o$2, u$2;
			o$2 = (65535 & n$2.I) + (65535 & r$1.I) + (65535 & t$2.I) + (65535 & e$2.I) + (65535 & i$3.I);
			var f$1 = (65535 & (u$2 = (n$2.I >>> 16) + (r$1.I >>> 16) + (t$2.I >>> 16) + (e$2.I >>> 16) + (i$3.I >>> 16) + (o$2 >>> 16))) << 16 | 65535 & o$2;
			return o$2 = (65535 & n$2.N) + (65535 & r$1.N) + (65535 & t$2.N) + (65535 & e$2.N) + (65535 & i$3.N) + (u$2 >>> 16), u$2 = (n$2.N >>> 16) + (r$1.N >>> 16) + (t$2.N >>> 16) + (e$2.N >>> 16) + (i$3.N >>> 16) + (o$2 >>> 16), new k((65535 & u$2) << 16 | 65535 & o$2, f$1);
		}
		function P$1(n$2, r$1) {
			return new k(n$2.N ^ r$1.N, n$2.I ^ r$1.I);
		}
		function x(n$2) {
			var r$1 = N(n$2, 1), t$2 = N(n$2, 8), e$2 = I(n$2, 7);
			return new k(r$1.N ^ t$2.N ^ e$2.N, r$1.I ^ t$2.I ^ e$2.I);
		}
		function V(n$2) {
			var r$1 = N(n$2, 14), t$2 = N(n$2, 18), e$2 = N(n$2, 41);
			return new k(r$1.N ^ t$2.N ^ e$2.N, r$1.I ^ t$2.I ^ e$2.I);
		}
		var Z = [
			new k(i$2[0], 3609767458),
			new k(i$2[1], 602891725),
			new k(i$2[2], 3964484399),
			new k(i$2[3], 2173295548),
			new k(i$2[4], 4081628472),
			new k(i$2[5], 3053834265),
			new k(i$2[6], 2937671579),
			new k(i$2[7], 3664609560),
			new k(i$2[8], 2734883394),
			new k(i$2[9], 1164996542),
			new k(i$2[10], 1323610764),
			new k(i$2[11], 3590304994),
			new k(i$2[12], 4068182383),
			new k(i$2[13], 991336113),
			new k(i$2[14], 633803317),
			new k(i$2[15], 3479774868),
			new k(i$2[16], 2666613458),
			new k(i$2[17], 944711139),
			new k(i$2[18], 2341262773),
			new k(i$2[19], 2007800933),
			new k(i$2[20], 1495990901),
			new k(i$2[21], 1856431235),
			new k(i$2[22], 3175218132),
			new k(i$2[23], 2198950837),
			new k(i$2[24], 3999719339),
			new k(i$2[25], 766784016),
			new k(i$2[26], 2566594879),
			new k(i$2[27], 3203337956),
			new k(i$2[28], 1034457026),
			new k(i$2[29], 2466948901),
			new k(i$2[30], 3758326383),
			new k(i$2[31], 168717936),
			new k(i$2[32], 1188179964),
			new k(i$2[33], 1546045734),
			new k(i$2[34], 1522805485),
			new k(i$2[35], 2643833823),
			new k(i$2[36], 2343527390),
			new k(i$2[37], 1014477480),
			new k(i$2[38], 1206759142),
			new k(i$2[39], 344077627),
			new k(i$2[40], 1290863460),
			new k(i$2[41], 3158454273),
			new k(i$2[42], 3505952657),
			new k(i$2[43], 106217008),
			new k(i$2[44], 3606008344),
			new k(i$2[45], 1432725776),
			new k(i$2[46], 1467031594),
			new k(i$2[47], 851169720),
			new k(i$2[48], 3100823752),
			new k(i$2[49], 1363258195),
			new k(i$2[50], 3750685593),
			new k(i$2[51], 3785050280),
			new k(i$2[52], 3318307427),
			new k(i$2[53], 3812723403),
			new k(i$2[54], 2003034995),
			new k(i$2[55], 3602036899),
			new k(i$2[56], 1575990012),
			new k(i$2[57], 1125592928),
			new k(i$2[58], 2716904306),
			new k(i$2[59], 442776044),
			new k(i$2[60], 593698344),
			new k(i$2[61], 3733110249),
			new k(i$2[62], 2999351573),
			new k(i$2[63], 3815920427),
			new k(3391569614, 3928383900),
			new k(3515267271, 566280711),
			new k(3940187606, 3454069534),
			new k(4118630271, 4000239992),
			new k(116418474, 1914138554),
			new k(174292421, 2731055270),
			new k(289380356, 3203993006),
			new k(460393269, 320620315),
			new k(685471733, 587496836),
			new k(852142971, 1086792851),
			new k(1017036298, 365543100),
			new k(1126000580, 2618297676),
			new k(1288033470, 3409855158),
			new k(1501505948, 4234509866),
			new k(1607167915, 987167468),
			new k(1816402316, 1246189591)
		];
		function q(n$2) {
			return "SHA-384" === n$2 ? [
				new k(3418070365, o$1[0]),
				new k(1654270250, o$1[1]),
				new k(2438529370, o$1[2]),
				new k(355462360, o$1[3]),
				new k(1731405415, o$1[4]),
				new k(41048885895, o$1[5]),
				new k(3675008525, o$1[6]),
				new k(1203062813, o$1[7])
			] : [
				new k(u$1[0], 4089235720),
				new k(u$1[1], 2227873595),
				new k(u$1[2], 4271175723),
				new k(u$1[3], 1595750129),
				new k(u$1[4], 2917565137),
				new k(u$1[5], 725511199),
				new k(u$1[6], 4215389547),
				new k(u$1[7], 327033209)
			];
		}
		function D(n$2, r$1) {
			var t$2, e$2, i$3, o$2, u$2, f$1, w$1, s$2, a$2, h$2, c$2, v$1, A$1, E$2, l$2, b$1, H$1 = [];
			for (t$2 = r$1[0], e$2 = r$1[1], i$3 = r$1[2], o$2 = r$1[3], u$2 = r$1[4], f$1 = r$1[5], w$1 = r$1[6], s$2 = r$1[7], c$2 = 0; c$2 < 80; c$2 += 1) c$2 < 16 ? (v$1 = 2 * c$2, H$1[c$2] = new k(n$2[v$1], n$2[v$1 + 1])) : H$1[c$2] = j((A$1 = H$1[c$2 - 2], E$2 = void 0, l$2 = void 0, b$1 = void 0, E$2 = N(A$1, 19), l$2 = N(A$1, 61), b$1 = I(A$1, 6), new k(E$2.N ^ l$2.N ^ b$1.N, E$2.I ^ l$2.I ^ b$1.I)), H$1[c$2 - 7], x(H$1[c$2 - 15]), H$1[c$2 - 16]), a$2 = _(s$2, V(u$2), M(u$2, f$1, w$1), Z[c$2], H$1[c$2]), h$2 = O(z(t$2), X(t$2, e$2, i$3)), s$2 = w$1, w$1 = f$1, f$1 = u$2, u$2 = O(o$2, a$2), o$2 = i$3, i$3 = e$2, e$2 = t$2, t$2 = O(a$2, h$2);
			return r$1[0] = O(t$2, r$1[0]), r$1[1] = O(e$2, r$1[1]), r$1[2] = O(i$3, r$1[2]), r$1[3] = O(o$2, r$1[3]), r$1[4] = O(u$2, r$1[4]), r$1[5] = O(f$1, r$1[5]), r$1[6] = O(w$1, r$1[6]), r$1[7] = O(s$2, r$1[7]), r$1;
		}
		var G = function(n$2) {
			function r$1(r$2, e$2, i$3) {
				var o$2 = this;
				if ("SHA-384" !== r$2 && "SHA-512" !== r$2) throw new Error(f);
				var u$2 = i$3 || {};
				return (o$2 = n$2.call(this, r$2, e$2, i$3) || this).F = o$2.Y, o$2.g = !0, o$2.C = -1, o$2.p = t$1(o$2.t, o$2.i, o$2.C), o$2.R = D, o$2.B = function(n$3) {
					return n$3.slice();
				}, o$2.L = q, o$2.K = function(n$3, t$2, e$3, i$4) {
					return function(n$4, r$3, t$3, e$4, i$5) {
						for (var o$3, u$3 = 31 + (r$3 + 129 >>> 10 << 5), f$1 = r$3 + t$3; n$4.length <= u$3;) n$4.push(0);
						for (n$4[r$3 >>> 5] |= 128 << 24 - r$3 % 32, n$4[u$3] = 4294967295 & f$1, n$4[u$3 - 1] = f$1 / 4294967296 | 0, o$3 = 0; o$3 < n$4.length; o$3 += 32) e$4 = D(n$4.slice(o$3, o$3 + 32), e$4);
						return "SHA-384" === i$5 ? [
							(e$4 = e$4)[0].N,
							e$4[0].I,
							e$4[1].N,
							e$4[1].I,
							e$4[2].N,
							e$4[2].I,
							e$4[3].N,
							e$4[3].I,
							e$4[4].N,
							e$4[4].I,
							e$4[5].N,
							e$4[5].I
						] : [
							e$4[0].N,
							e$4[0].I,
							e$4[1].N,
							e$4[1].I,
							e$4[2].N,
							e$4[2].I,
							e$4[3].N,
							e$4[3].I,
							e$4[4].N,
							e$4[4].I,
							e$4[5].N,
							e$4[5].I,
							e$4[6].N,
							e$4[6].I,
							e$4[7].N,
							e$4[7].I
						];
					}(n$3, t$2, e$3, i$4, r$2);
				}, o$2.m = q(r$2), o$2.S = 1024, o$2.U = "SHA-384" === r$2 ? 384 : 512, o$2.T = !1, u$2.hmacKey && o$2.k(a$1("hmacKey", u$2.hmacKey, o$2.C)), o$2;
			}
			return v(r$1, n$2), r$1;
		}(h$1), J = [
			new k(0, 1),
			new k(0, 32898),
			new k(2147483648, 32906),
			new k(2147483648, 2147516416),
			new k(0, 32907),
			new k(0, 2147483649),
			new k(2147483648, 2147516545),
			new k(2147483648, 32777),
			new k(0, 138),
			new k(0, 136),
			new k(0, 2147516425),
			new k(0, 2147483658),
			new k(0, 2147516555),
			new k(2147483648, 139),
			new k(2147483648, 32905),
			new k(2147483648, 32771),
			new k(2147483648, 32770),
			new k(2147483648, 128),
			new k(0, 32778),
			new k(2147483648, 2147483658),
			new k(2147483648, 2147516545),
			new k(2147483648, 32896),
			new k(0, 2147483649),
			new k(2147483648, 2147516424)
		], Q = [
			[
				0,
				36,
				3,
				41,
				18
			],
			[
				1,
				44,
				10,
				45,
				2
			],
			[
				62,
				6,
				43,
				15,
				61
			],
			[
				28,
				55,
				25,
				21,
				56
			],
			[
				27,
				20,
				39,
				8,
				14
			]
		];
		function W(n$2) {
			var r$1, t$2 = [];
			for (r$1 = 0; r$1 < 5; r$1 += 1) t$2[r$1] = [
				new k(0, 0),
				new k(0, 0),
				new k(0, 0),
				new k(0, 0),
				new k(0, 0)
			];
			return t$2;
		}
		function $(n$2) {
			var r$1, t$2 = [];
			for (r$1 = 0; r$1 < 5; r$1 += 1) t$2[r$1] = n$2[r$1].slice();
			return t$2;
		}
		function nn(n$2, r$1) {
			var t$2, e$2, i$3, o$2, u$2, f$1, w$1, s$2, a$2, h$2 = [], c$2 = [];
			if (null !== n$2) for (e$2 = 0; e$2 < n$2.length; e$2 += 2) r$1[(e$2 >>> 1) % 5][(e$2 >>> 1) / 5 | 0] = P$1(r$1[(e$2 >>> 1) % 5][(e$2 >>> 1) / 5 | 0], new k(n$2[e$2 + 1], n$2[e$2]));
			for (t$2 = 0; t$2 < 24; t$2 += 1) {
				for (o$2 = W(), e$2 = 0; e$2 < 5; e$2 += 1) h$2[e$2] = (u$2 = r$1[e$2][0], f$1 = r$1[e$2][1], w$1 = r$1[e$2][2], s$2 = r$1[e$2][3], a$2 = r$1[e$2][4], new k(u$2.N ^ f$1.N ^ w$1.N ^ s$2.N ^ a$2.N, u$2.I ^ f$1.I ^ w$1.I ^ s$2.I ^ a$2.I));
				for (e$2 = 0; e$2 < 5; e$2 += 1) c$2[e$2] = P$1(h$2[(e$2 + 4) % 5], Y(h$2[(e$2 + 1) % 5], 1));
				for (e$2 = 0; e$2 < 5; e$2 += 1) for (i$3 = 0; i$3 < 5; i$3 += 1) r$1[e$2][i$3] = P$1(r$1[e$2][i$3], c$2[e$2]);
				for (e$2 = 0; e$2 < 5; e$2 += 1) for (i$3 = 0; i$3 < 5; i$3 += 1) o$2[i$3][(2 * e$2 + 3 * i$3) % 5] = Y(r$1[e$2][i$3], Q[e$2][i$3]);
				for (e$2 = 0; e$2 < 5; e$2 += 1) for (i$3 = 0; i$3 < 5; i$3 += 1) r$1[e$2][i$3] = P$1(o$2[e$2][i$3], new k(~o$2[(e$2 + 1) % 5][i$3].N & o$2[(e$2 + 2) % 5][i$3].N, ~o$2[(e$2 + 1) % 5][i$3].I & o$2[(e$2 + 2) % 5][i$3].I));
				r$1[0][0] = P$1(r$1[0][0], J[t$2]);
			}
			return r$1;
		}
		function rn(n$2) {
			var r$1, t$2, e$2 = 0, i$3 = [0, 0], o$2 = [4294967295 & n$2, n$2 / 4294967296 & 2097151];
			for (r$1 = 6; r$1 >= 0; r$1--) 0 === (t$2 = o$2[r$1 >> 2] >>> 8 * r$1 & 255) && 0 === e$2 || (i$3[e$2 + 1 >> 2] |= t$2 << 8 * (e$2 + 1), e$2 += 1);
			return e$2 = 0 !== e$2 ? e$2 : 1, i$3[0] |= e$2, {
				value: e$2 + 1 > 4 ? i$3 : [i$3[0]],
				binLen: 8 + 8 * e$2
			};
		}
		function tn(n$2) {
			return w(rn(n$2.binLen), n$2);
		}
		function en$1(n$2, r$1) {
			var t$2, e$2 = rn(r$1), i$3 = r$1 >>> 2, o$2 = (i$3 - (e$2 = w(e$2, n$2)).value.length % i$3) % i$3;
			for (t$2 = 0; t$2 < o$2; t$2++) e$2.value.push(0);
			return e$2.value;
		}
		var on$1 = function(n$2) {
			function r$1(r$2, e$2, i$3) {
				var o$2 = this, u$2 = 6, w$1 = 0, s$2 = i$3 || {};
				if (1 !== (o$2 = n$2.call(this, r$2, e$2, i$3) || this).numRounds) {
					if (s$2.kmacKey || s$2.hmacKey) throw new Error("Cannot set numRounds with MAC");
					if ("CSHAKE128" === o$2.o || "CSHAKE256" === o$2.o) throw new Error("Cannot set numRounds for CSHAKE variants");
				}
				switch (o$2.C = 1, o$2.p = t$1(o$2.t, o$2.i, o$2.C), o$2.R = nn, o$2.B = $, o$2.L = W, o$2.m = W(), o$2.T = !1, r$2) {
					case "SHA3-224":
						o$2.S = w$1 = 1152, o$2.U = 224, o$2.g = !0, o$2.F = o$2.Y;
						break;
					case "SHA3-256":
						o$2.S = w$1 = 1088, o$2.U = 256, o$2.g = !0, o$2.F = o$2.Y;
						break;
					case "SHA3-384":
						o$2.S = w$1 = 832, o$2.U = 384, o$2.g = !0, o$2.F = o$2.Y;
						break;
					case "SHA3-512":
						o$2.S = w$1 = 576, o$2.U = 512, o$2.g = !0, o$2.F = o$2.Y;
						break;
					case "SHAKE128":
						u$2 = 31, o$2.S = w$1 = 1344, o$2.U = -1, o$2.T = !0, o$2.g = !1, o$2.F = null;
						break;
					case "SHAKE256":
						u$2 = 31, o$2.S = w$1 = 1088, o$2.U = -1, o$2.T = !0, o$2.g = !1, o$2.F = null;
						break;
					case "KMAC128":
						u$2 = 4, o$2.S = w$1 = 1344, o$2.M(i$3), o$2.U = -1, o$2.T = !0, o$2.g = !1, o$2.F = o$2.X;
						break;
					case "KMAC256":
						u$2 = 4, o$2.S = w$1 = 1088, o$2.M(i$3), o$2.U = -1, o$2.T = !0, o$2.g = !1, o$2.F = o$2.X;
						break;
					case "CSHAKE128":
						o$2.S = w$1 = 1344, u$2 = o$2.O(i$3), o$2.U = -1, o$2.T = !0, o$2.g = !1, o$2.F = null;
						break;
					case "CSHAKE256":
						o$2.S = w$1 = 1088, u$2 = o$2.O(i$3), o$2.U = -1, o$2.T = !0, o$2.g = !1, o$2.F = null;
						break;
					default: throw new Error(f);
				}
				return o$2.K = function(n$3, r$3, t$2, e$3, i$4) {
					return function(n$4, r$4, t$3, e$4, i$5, o$3, u$3) {
						var f$1, w$2, s$3 = 0, a$2 = [], h$2 = i$5 >>> 5, c$2 = r$4 >>> 5;
						for (f$1 = 0; f$1 < c$2 && r$4 >= i$5; f$1 += h$2) e$4 = nn(n$4.slice(f$1, f$1 + h$2), e$4), r$4 -= i$5;
						for (n$4 = n$4.slice(f$1), r$4 %= i$5; n$4.length < h$2;) n$4.push(0);
						for (n$4[(f$1 = r$4 >>> 3) >> 2] ^= o$3 << f$1 % 4 * 8, n$4[h$2 - 1] ^= 2147483648, e$4 = nn(n$4, e$4); 32 * a$2.length < u$3 && (w$2 = e$4[s$3 % 5][s$3 / 5 | 0], a$2.push(w$2.I), !(32 * a$2.length >= u$3));) a$2.push(w$2.N), 0 == 64 * (s$3 += 1) % i$5 && (nn(null, e$4), s$3 = 0);
						return a$2;
					}(n$3, r$3, 0, e$3, w$1, u$2, i$4);
				}, s$2.hmacKey && o$2.k(a$1("hmacKey", s$2.hmacKey, o$2.C)), o$2;
			}
			return v(r$1, n$2), r$1.prototype.O = function(n$3, r$2) {
				var t$2 = function(n$4) {
					var r$3 = n$4 || {};
					return {
						funcName: a$1("funcName", r$3.funcName, 1, {
							value: [],
							binLen: 0
						}),
						customization: a$1("Customization", r$3.customization, 1, {
							value: [],
							binLen: 0
						})
					};
				}(n$3 || {});
				r$2 && (t$2.funcName = r$2);
				var e$2 = w(tn(t$2.funcName), tn(t$2.customization));
				if (0 !== t$2.customization.binLen || 0 !== t$2.funcName.binLen) {
					for (var i$3 = en$1(e$2, this.S >>> 3), o$2 = 0; o$2 < i$3.length; o$2 += this.S >>> 5) this.m = this.R(i$3.slice(o$2, o$2 + (this.S >>> 5)), this.m), this.v += this.S;
					return 4;
				}
				return 31;
			}, r$1.prototype.M = function(n$3) {
				var r$2 = function(n$4) {
					var r$3 = n$4 || {};
					return {
						kmacKey: a$1("kmacKey", r$3.kmacKey, 1),
						funcName: {
							value: [1128353099],
							binLen: 32
						},
						customization: a$1("Customization", r$3.customization, 1, {
							value: [],
							binLen: 0
						})
					};
				}(n$3 || {});
				this.O(n$3, r$2.funcName);
				for (var t$2 = en$1(tn(r$2.kmacKey), this.S >>> 3), e$2 = 0; e$2 < t$2.length; e$2 += this.S >>> 5) this.m = this.R(t$2.slice(e$2, e$2 + (this.S >>> 5)), this.m), this.v += this.S;
				this.A = !0;
			}, r$1.prototype.X = function(n$3) {
				var r$2 = w({
					value: this.u.slice(),
					binLen: this.s
				}, function(n$4) {
					var r$3, t$2, e$2 = 0, i$3 = [0, 0], o$2 = [4294967295 & n$4, n$4 / 4294967296 & 2097151];
					for (r$3 = 6; r$3 >= 0; r$3--) 0 == (t$2 = o$2[r$3 >> 2] >>> 8 * r$3 & 255) && 0 === e$2 || (i$3[e$2 >> 2] |= t$2 << 8 * e$2, e$2 += 1);
					return i$3[(e$2 = 0 !== e$2 ? e$2 : 1) >> 2] |= e$2 << 8 * e$2, {
						value: e$2 + 1 > 4 ? i$3 : [i$3[0]],
						binLen: 8 + 8 * e$2
					};
				}(n$3.outputLen));
				return this.K(r$2.value, r$2.binLen, this.v, this.B(this.m), n$3.outputLen);
			}, r$1;
		}(h$1);
		return function() {
			function n$2(n$3, r$1, t$2) {
				if ("SHA-1" == n$3) this.j = new K(n$3, r$1, t$2);
				else if ("SHA-224" == n$3 || "SHA-256" == n$3) this.j = new g(n$3, r$1, t$2);
				else if ("SHA-384" == n$3 || "SHA-512" == n$3) this.j = new G(n$3, r$1, t$2);
				else {
					if ("SHA3-224" != n$3 && "SHA3-256" != n$3 && "SHA3-384" != n$3 && "SHA3-512" != n$3 && "SHAKE128" != n$3 && "SHAKE256" != n$3 && "CSHAKE128" != n$3 && "CSHAKE256" != n$3 && "KMAC128" != n$3 && "KMAC256" != n$3) throw new Error(f);
					this.j = new on$1(n$3, r$1, t$2);
				}
			}
			return n$2.prototype.update = function(n$3) {
				this.j.update(n$3);
			}, n$2.prototype.getHash = function(n$3, r$1) {
				return this.j.getHash(n$3, r$1);
			}, n$2.prototype.setHMACKey = function(n$3, r$1, t$2) {
				this.j.setHMACKey(n$3, r$1, t$2);
			}, n$2.prototype.getHMAC = function(n$3, r$1) {
				return this.j.getHMAC(n$3, r$1);
			}, n$2;
		}();
	});
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+crypto-primitives@2.1.0/node_modules/@ton/crypto-primitives/dist/browser/getSecureRandom.js
var require_getSecureRandom$1 = __commonJS({ "../../node_modules/.pnpm/@ton+crypto-primitives@2.1.0/node_modules/@ton/crypto-primitives/dist/browser/getSecureRandom.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getSecureRandomWords = exports.getSecureRandomBytes = void 0;
	function getSecureRandomBytes$1(size) {
		return Buffer.from(window.crypto.getRandomValues(new Uint8Array(size)));
	}
	exports.getSecureRandomBytes = getSecureRandomBytes$1;
	function getSecureRandomWords$1(size) {
		return window.crypto.getRandomValues(new Uint16Array(size));
	}
	exports.getSecureRandomWords = getSecureRandomWords$1;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+crypto-primitives@2.1.0/node_modules/@ton/crypto-primitives/dist/browser/hmac_sha512.js
var require_hmac_sha512$1 = __commonJS({ "../../node_modules/.pnpm/@ton+crypto-primitives@2.1.0/node_modules/@ton/crypto-primitives/dist/browser/hmac_sha512.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.hmac_sha512 = void 0;
	async function hmac_sha512$1(key, data) {
		let keyBuffer = typeof key === "string" ? Buffer.from(key, "utf-8") : key;
		let dataBuffer = typeof data === "string" ? Buffer.from(data, "utf-8") : data;
		const hmacAlgo = {
			name: "HMAC",
			hash: "SHA-512"
		};
		const hmacKey = await window.crypto.subtle.importKey("raw", keyBuffer, hmacAlgo, false, ["sign"]);
		return Buffer.from(await crypto.subtle.sign(hmacAlgo, hmacKey, dataBuffer));
	}
	exports.hmac_sha512 = hmac_sha512$1;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+crypto-primitives@2.1.0/node_modules/@ton/crypto-primitives/dist/browser/pbkdf2_sha512.js
var require_pbkdf2_sha512$1 = __commonJS({ "../../node_modules/.pnpm/@ton+crypto-primitives@2.1.0/node_modules/@ton/crypto-primitives/dist/browser/pbkdf2_sha512.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.pbkdf2_sha512 = void 0;
	async function pbkdf2_sha512$1(key, salt, iterations, keyLen) {
		const keyBuffer = typeof key === "string" ? Buffer.from(key, "utf-8") : key;
		const saltBuffer = typeof salt === "string" ? Buffer.from(salt, "utf-8") : salt;
		const pbkdf2_key = await window.crypto.subtle.importKey("raw", keyBuffer, { name: "PBKDF2" }, false, ["deriveBits"]);
		const derivedBits = await window.crypto.subtle.deriveBits({
			name: "PBKDF2",
			hash: "SHA-512",
			salt: saltBuffer,
			iterations
		}, pbkdf2_key, keyLen * 8);
		return Buffer.from(derivedBits);
	}
	exports.pbkdf2_sha512 = pbkdf2_sha512$1;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+crypto-primitives@2.1.0/node_modules/@ton/crypto-primitives/dist/browser/sha256.js
var require_sha256$1 = __commonJS({ "../../node_modules/.pnpm/@ton+crypto-primitives@2.1.0/node_modules/@ton/crypto-primitives/dist/browser/sha256.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.sha256 = void 0;
	async function sha256$1(source) {
		if (typeof source === "string") return Buffer.from(await crypto.subtle.digest("SHA-256", Buffer.from(source, "utf-8")));
		return Buffer.from(await crypto.subtle.digest("SHA-256", source));
	}
	exports.sha256 = sha256$1;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+crypto-primitives@2.1.0/node_modules/@ton/crypto-primitives/dist/browser/sha512.js
var require_sha512$1 = __commonJS({ "../../node_modules/.pnpm/@ton+crypto-primitives@2.1.0/node_modules/@ton/crypto-primitives/dist/browser/sha512.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.sha512 = void 0;
	async function sha512$1(source) {
		if (typeof source === "string") return Buffer.from(await crypto.subtle.digest("SHA-512", Buffer.from(source, "utf-8")));
		return Buffer.from(await crypto.subtle.digest("SHA-512", source));
	}
	exports.sha512 = sha512$1;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+crypto-primitives@2.1.0/node_modules/@ton/crypto-primitives/dist/browser.js
var require_browser = __commonJS({ "../../node_modules/.pnpm/@ton+crypto-primitives@2.1.0/node_modules/@ton/crypto-primitives/dist/browser.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.sha512 = exports.sha256 = exports.pbkdf2_sha512 = exports.hmac_sha512 = exports.getSecureRandomWords = exports.getSecureRandomBytes = void 0;
	var getSecureRandom_1$3 = require_getSecureRandom$1();
	Object.defineProperty(exports, "getSecureRandomBytes", {
		enumerable: true,
		get: function() {
			return getSecureRandom_1$3.getSecureRandomBytes;
		}
	});
	Object.defineProperty(exports, "getSecureRandomWords", {
		enumerable: true,
		get: function() {
			return getSecureRandom_1$3.getSecureRandomWords;
		}
	});
	var hmac_sha512_1$5 = require_hmac_sha512$1();
	Object.defineProperty(exports, "hmac_sha512", {
		enumerable: true,
		get: function() {
			return hmac_sha512_1$5.hmac_sha512;
		}
	});
	var pbkdf2_sha512_1$2 = require_pbkdf2_sha512$1();
	Object.defineProperty(exports, "pbkdf2_sha512", {
		enumerable: true,
		get: function() {
			return pbkdf2_sha512_1$2.pbkdf2_sha512;
		}
	});
	var sha256_1$1 = require_sha256$1();
	Object.defineProperty(exports, "sha256", {
		enumerable: true,
		get: function() {
			return sha256_1$1.sha256;
		}
	});
	var sha512_1$1 = require_sha512$1();
	Object.defineProperty(exports, "sha512", {
		enumerable: true,
		get: function() {
			return sha512_1$1.sha512;
		}
	});
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/primitives/sha256.js
var require_sha256 = __commonJS({ "../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/primitives/sha256.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	var __importDefault$5 = void 0 && (void 0).__importDefault || function(mod) {
		return mod && mod.__esModule ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.sha256 = exports.sha256_fallback = exports.sha256_sync = void 0;
	const jssha_1$2 = __importDefault$5(require_sha());
	const crypto_primitives_1$4 = require_browser();
	function sha256_sync(source) {
		let src;
		if (typeof source === "string") src = Buffer.from(source, "utf-8").toString("hex");
		else src = source.toString("hex");
		let hasher = new jssha_1$2.default("SHA-256", "HEX");
		hasher.update(src);
		let res = hasher.getHash("HEX");
		return Buffer.from(res, "hex");
	}
	exports.sha256_sync = sha256_sync;
	async function sha256_fallback(source) {
		return sha256_sync(source);
	}
	exports.sha256_fallback = sha256_fallback;
	function sha256(source) {
		return (0, crypto_primitives_1$4.sha256)(source);
	}
	exports.sha256 = sha256;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/primitives/sha512.js
var require_sha512 = __commonJS({ "../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/primitives/sha512.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	var __importDefault$4 = void 0 && (void 0).__importDefault || function(mod) {
		return mod && mod.__esModule ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.sha512 = exports.sha512_fallback = exports.sha512_sync = void 0;
	const jssha_1$1 = __importDefault$4(require_sha());
	const crypto_primitives_1$3 = require_browser();
	function sha512_sync(source) {
		let src;
		if (typeof source === "string") src = Buffer.from(source, "utf-8").toString("hex");
		else src = source.toString("hex");
		let hasher = new jssha_1$1.default("SHA-512", "HEX");
		hasher.update(src);
		let res = hasher.getHash("HEX");
		return Buffer.from(res, "hex");
	}
	exports.sha512_sync = sha512_sync;
	async function sha512_fallback(source) {
		return sha512_sync(source);
	}
	exports.sha512_fallback = sha512_fallback;
	async function sha512(source) {
		return (0, crypto_primitives_1$3.sha512)(source);
	}
	exports.sha512 = sha512;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/primitives/pbkdf2_sha512.js
var require_pbkdf2_sha512 = __commonJS({ "../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/primitives/pbkdf2_sha512.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.pbkdf2_sha512 = void 0;
	const crypto_primitives_1$2 = require_browser();
	function pbkdf2_sha512(key, salt, iterations, keyLen) {
		return (0, crypto_primitives_1$2.pbkdf2_sha512)(key, salt, iterations, keyLen);
	}
	exports.pbkdf2_sha512 = pbkdf2_sha512;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/primitives/hmac_sha512.js
var require_hmac_sha512 = __commonJS({ "../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/primitives/hmac_sha512.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	var __importDefault$3 = void 0 && (void 0).__importDefault || function(mod) {
		return mod && mod.__esModule ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.hmac_sha512 = exports.hmac_sha512_fallback = void 0;
	const jssha_1 = __importDefault$3(require_sha());
	const crypto_primitives_1$1 = require_browser();
	async function hmac_sha512_fallback(key, data) {
		let keyBuffer = typeof key === "string" ? Buffer.from(key, "utf-8") : key;
		let dataBuffer = typeof data === "string" ? Buffer.from(data, "utf-8") : data;
		const shaObj = new jssha_1.default("SHA-512", "HEX", { hmacKey: {
			value: keyBuffer.toString("hex"),
			format: "HEX"
		} });
		shaObj.update(dataBuffer.toString("hex"));
		const hmac = shaObj.getHash("HEX");
		return Buffer.from(hmac, "hex");
	}
	exports.hmac_sha512_fallback = hmac_sha512_fallback;
	function hmac_sha512(key, data) {
		return (0, crypto_primitives_1$1.hmac_sha512)(key, data);
	}
	exports.hmac_sha512 = hmac_sha512;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/primitives/getSecureRandom.js
var require_getSecureRandom = __commonJS({ "../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/primitives/getSecureRandom.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getSecureRandomNumber = exports.getSecureRandomWords = exports.getSecureRandomBytes = void 0;
	const crypto_primitives_1 = require_browser();
	async function getSecureRandomBytes(size) {
		return (0, crypto_primitives_1.getSecureRandomBytes)(size);
	}
	exports.getSecureRandomBytes = getSecureRandomBytes;
	async function getSecureRandomWords(size) {
		return getSecureRandomWords(size);
	}
	exports.getSecureRandomWords = getSecureRandomWords;
	async function getSecureRandomNumber(min$1, max$1) {
		let range = max$1 - min$1;
		var bitsNeeded = Math.ceil(Math.log2(range));
		if (bitsNeeded > 53) throw new Error("Range is too large");
		var bytesNeeded = Math.ceil(bitsNeeded / 8);
		var mask = Math.pow(2, bitsNeeded) - 1;
		while (true) {
			let res = await getSecureRandomBytes(bitsNeeded);
			let power = (bytesNeeded - 1) * 8;
			let numberValue = 0;
			for (var i$2 = 0; i$2 < bytesNeeded; i$2++) {
				numberValue += res[i$2] * Math.pow(2, power);
				power -= 8;
			}
			numberValue = numberValue & mask;
			if (numberValue >= range) continue;
			return min$1 + numberValue;
		}
	}
	exports.getSecureRandomNumber = getSecureRandomNumber;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/passwords/wordlist.js
var require_wordlist$1 = __commonJS({ "../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/passwords/wordlist.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.wordlist = void 0;
	exports.wordlist = [
		"abacus",
		"abdomen",
		"abdominal",
		"abide",
		"abiding",
		"ability",
		"ablaze",
		"able",
		"abnormal",
		"abrasion",
		"abrasive",
		"abreast",
		"abridge",
		"abroad",
		"abruptly",
		"absence",
		"absentee",
		"absently",
		"absinthe",
		"absolute",
		"absolve",
		"abstain",
		"abstract",
		"absurd",
		"accent",
		"acclaim",
		"acclimate",
		"accompany",
		"account",
		"accuracy",
		"accurate",
		"accustom",
		"acetone",
		"achiness",
		"aching",
		"acid",
		"acorn",
		"acquaint",
		"acquire",
		"acre",
		"acrobat",
		"acronym",
		"acting",
		"action",
		"activate",
		"activator",
		"active",
		"activism",
		"activist",
		"activity",
		"actress",
		"acts",
		"acutely",
		"acuteness",
		"aeration",
		"aerobics",
		"aerosol",
		"aerospace",
		"afar",
		"affair",
		"affected",
		"affecting",
		"affection",
		"affidavit",
		"affiliate",
		"affirm",
		"affix",
		"afflicted",
		"affluent",
		"afford",
		"affront",
		"aflame",
		"afloat",
		"aflutter",
		"afoot",
		"afraid",
		"afterglow",
		"afterlife",
		"aftermath",
		"aftermost",
		"afternoon",
		"aged",
		"ageless",
		"agency",
		"agenda",
		"agent",
		"aggregate",
		"aghast",
		"agile",
		"agility",
		"aging",
		"agnostic",
		"agonize",
		"agonizing",
		"agony",
		"agreeable",
		"agreeably",
		"agreed",
		"agreeing",
		"agreement",
		"aground",
		"ahead",
		"ahoy",
		"aide",
		"aids",
		"aim",
		"ajar",
		"alabaster",
		"alarm",
		"albatross",
		"album",
		"alfalfa",
		"algebra",
		"algorithm",
		"alias",
		"alibi",
		"alienable",
		"alienate",
		"aliens",
		"alike",
		"alive",
		"alkaline",
		"alkalize",
		"almanac",
		"almighty",
		"almost",
		"aloe",
		"aloft",
		"aloha",
		"alone",
		"alongside",
		"aloof",
		"alphabet",
		"alright",
		"although",
		"altitude",
		"alto",
		"aluminum",
		"alumni",
		"always",
		"amaretto",
		"amaze",
		"amazingly",
		"amber",
		"ambiance",
		"ambiguity",
		"ambiguous",
		"ambition",
		"ambitious",
		"ambulance",
		"ambush",
		"amendable",
		"amendment",
		"amends",
		"amenity",
		"amiable",
		"amicably",
		"amid",
		"amigo",
		"amino",
		"amiss",
		"ammonia",
		"ammonium",
		"amnesty",
		"amniotic",
		"among",
		"amount",
		"amperage",
		"ample",
		"amplifier",
		"amplify",
		"amply",
		"amuck",
		"amulet",
		"amusable",
		"amused",
		"amusement",
		"amuser",
		"amusing",
		"anaconda",
		"anaerobic",
		"anagram",
		"anatomist",
		"anatomy",
		"anchor",
		"anchovy",
		"ancient",
		"android",
		"anemia",
		"anemic",
		"aneurism",
		"anew",
		"angelfish",
		"angelic",
		"anger",
		"angled",
		"angler",
		"angles",
		"angling",
		"angrily",
		"angriness",
		"anguished",
		"angular",
		"animal",
		"animate",
		"animating",
		"animation",
		"animator",
		"anime",
		"animosity",
		"ankle",
		"annex",
		"annotate",
		"announcer",
		"annoying",
		"annually",
		"annuity",
		"anointer",
		"another",
		"answering",
		"antacid",
		"antarctic",
		"anteater",
		"antelope",
		"antennae",
		"anthem",
		"anthill",
		"anthology",
		"antibody",
		"antics",
		"antidote",
		"antihero",
		"antiquely",
		"antiques",
		"antiquity",
		"antirust",
		"antitoxic",
		"antitrust",
		"antiviral",
		"antivirus",
		"antler",
		"antonym",
		"antsy",
		"anvil",
		"anybody",
		"anyhow",
		"anymore",
		"anyone",
		"anyplace",
		"anything",
		"anytime",
		"anyway",
		"anywhere",
		"aorta",
		"apache",
		"apostle",
		"appealing",
		"appear",
		"appease",
		"appeasing",
		"appendage",
		"appendix",
		"appetite",
		"appetizer",
		"applaud",
		"applause",
		"apple",
		"appliance",
		"applicant",
		"applied",
		"apply",
		"appointee",
		"appraisal",
		"appraiser",
		"apprehend",
		"approach",
		"approval",
		"approve",
		"apricot",
		"april",
		"apron",
		"aptitude",
		"aptly",
		"aqua",
		"aqueduct",
		"arbitrary",
		"arbitrate",
		"ardently",
		"area",
		"arena",
		"arguable",
		"arguably",
		"argue",
		"arise",
		"armadillo",
		"armband",
		"armchair",
		"armed",
		"armful",
		"armhole",
		"arming",
		"armless",
		"armoire",
		"armored",
		"armory",
		"armrest",
		"army",
		"aroma",
		"arose",
		"around",
		"arousal",
		"arrange",
		"array",
		"arrest",
		"arrival",
		"arrive",
		"arrogance",
		"arrogant",
		"arson",
		"art",
		"ascend",
		"ascension",
		"ascent",
		"ascertain",
		"ashamed",
		"ashen",
		"ashes",
		"ashy",
		"aside",
		"askew",
		"asleep",
		"asparagus",
		"aspect",
		"aspirate",
		"aspire",
		"aspirin",
		"astonish",
		"astound",
		"astride",
		"astrology",
		"astronaut",
		"astronomy",
		"astute",
		"atlantic",
		"atlas",
		"atom",
		"atonable",
		"atop",
		"atrium",
		"atrocious",
		"atrophy",
		"attach",
		"attain",
		"attempt",
		"attendant",
		"attendee",
		"attention",
		"attentive",
		"attest",
		"attic",
		"attire",
		"attitude",
		"attractor",
		"attribute",
		"atypical",
		"auction",
		"audacious",
		"audacity",
		"audible",
		"audibly",
		"audience",
		"audio",
		"audition",
		"augmented",
		"august",
		"authentic",
		"author",
		"autism",
		"autistic",
		"autograph",
		"automaker",
		"automated",
		"automatic",
		"autopilot",
		"available",
		"avalanche",
		"avatar",
		"avenge",
		"avenging",
		"avenue",
		"average",
		"aversion",
		"avert",
		"aviation",
		"aviator",
		"avid",
		"avoid",
		"await",
		"awaken",
		"award",
		"aware",
		"awhile",
		"awkward",
		"awning",
		"awoke",
		"awry",
		"axis",
		"babble",
		"babbling",
		"babied",
		"baboon",
		"backache",
		"backboard",
		"backboned",
		"backdrop",
		"backed",
		"backer",
		"backfield",
		"backfire",
		"backhand",
		"backing",
		"backlands",
		"backlash",
		"backless",
		"backlight",
		"backlit",
		"backlog",
		"backpack",
		"backpedal",
		"backrest",
		"backroom",
		"backshift",
		"backside",
		"backslid",
		"backspace",
		"backspin",
		"backstab",
		"backstage",
		"backtalk",
		"backtrack",
		"backup",
		"backward",
		"backwash",
		"backwater",
		"backyard",
		"bacon",
		"bacteria",
		"bacterium",
		"badass",
		"badge",
		"badland",
		"badly",
		"badness",
		"baffle",
		"baffling",
		"bagel",
		"bagful",
		"baggage",
		"bagged",
		"baggie",
		"bagginess",
		"bagging",
		"baggy",
		"bagpipe",
		"baguette",
		"baked",
		"bakery",
		"bakeshop",
		"baking",
		"balance",
		"balancing",
		"balcony",
		"balmy",
		"balsamic",
		"bamboo",
		"banana",
		"banish",
		"banister",
		"banjo",
		"bankable",
		"bankbook",
		"banked",
		"banker",
		"banking",
		"banknote",
		"bankroll",
		"banner",
		"bannister",
		"banshee",
		"banter",
		"barbecue",
		"barbed",
		"barbell",
		"barber",
		"barcode",
		"barge",
		"bargraph",
		"barista",
		"baritone",
		"barley",
		"barmaid",
		"barman",
		"barn",
		"barometer",
		"barrack",
		"barracuda",
		"barrel",
		"barrette",
		"barricade",
		"barrier",
		"barstool",
		"bartender",
		"barterer",
		"bash",
		"basically",
		"basics",
		"basil",
		"basin",
		"basis",
		"basket",
		"batboy",
		"batch",
		"bath",
		"baton",
		"bats",
		"battalion",
		"battered",
		"battering",
		"battery",
		"batting",
		"battle",
		"bauble",
		"bazooka",
		"blabber",
		"bladder",
		"blade",
		"blah",
		"blame",
		"blaming",
		"blanching",
		"blandness",
		"blank",
		"blaspheme",
		"blasphemy",
		"blast",
		"blatancy",
		"blatantly",
		"blazer",
		"blazing",
		"bleach",
		"bleak",
		"bleep",
		"blemish",
		"blend",
		"bless",
		"blighted",
		"blimp",
		"bling",
		"blinked",
		"blinker",
		"blinking",
		"blinks",
		"blip",
		"blissful",
		"blitz",
		"blizzard",
		"bloated",
		"bloating",
		"blob",
		"blog",
		"bloomers",
		"blooming",
		"blooper",
		"blot",
		"blouse",
		"blubber",
		"bluff",
		"bluish",
		"blunderer",
		"blunt",
		"blurb",
		"blurred",
		"blurry",
		"blurt",
		"blush",
		"blustery",
		"boaster",
		"boastful",
		"boasting",
		"boat",
		"bobbed",
		"bobbing",
		"bobble",
		"bobcat",
		"bobsled",
		"bobtail",
		"bodacious",
		"body",
		"bogged",
		"boggle",
		"bogus",
		"boil",
		"bok",
		"bolster",
		"bolt",
		"bonanza",
		"bonded",
		"bonding",
		"bondless",
		"boned",
		"bonehead",
		"boneless",
		"bonelike",
		"boney",
		"bonfire",
		"bonnet",
		"bonsai",
		"bonus",
		"bony",
		"boogeyman",
		"boogieman",
		"book",
		"boondocks",
		"booted",
		"booth",
		"bootie",
		"booting",
		"bootlace",
		"bootleg",
		"boots",
		"boozy",
		"borax",
		"boring",
		"borough",
		"borrower",
		"borrowing",
		"boss",
		"botanical",
		"botanist",
		"botany",
		"botch",
		"both",
		"bottle",
		"bottling",
		"bottom",
		"bounce",
		"bouncing",
		"bouncy",
		"bounding",
		"boundless",
		"bountiful",
		"bovine",
		"boxcar",
		"boxer",
		"boxing",
		"boxlike",
		"boxy",
		"breach",
		"breath",
		"breeches",
		"breeching",
		"breeder",
		"breeding",
		"breeze",
		"breezy",
		"brethren",
		"brewery",
		"brewing",
		"briar",
		"bribe",
		"brick",
		"bride",
		"bridged",
		"brigade",
		"bright",
		"brilliant",
		"brim",
		"bring",
		"brink",
		"brisket",
		"briskly",
		"briskness",
		"bristle",
		"brittle",
		"broadband",
		"broadcast",
		"broaden",
		"broadly",
		"broadness",
		"broadside",
		"broadways",
		"broiler",
		"broiling",
		"broken",
		"broker",
		"bronchial",
		"bronco",
		"bronze",
		"bronzing",
		"brook",
		"broom",
		"brought",
		"browbeat",
		"brownnose",
		"browse",
		"browsing",
		"bruising",
		"brunch",
		"brunette",
		"brunt",
		"brush",
		"brussels",
		"brute",
		"brutishly",
		"bubble",
		"bubbling",
		"bubbly",
		"buccaneer",
		"bucked",
		"bucket",
		"buckle",
		"buckshot",
		"buckskin",
		"bucktooth",
		"buckwheat",
		"buddhism",
		"buddhist",
		"budding",
		"buddy",
		"budget",
		"buffalo",
		"buffed",
		"buffer",
		"buffing",
		"buffoon",
		"buggy",
		"bulb",
		"bulge",
		"bulginess",
		"bulgur",
		"bulk",
		"bulldog",
		"bulldozer",
		"bullfight",
		"bullfrog",
		"bullhorn",
		"bullion",
		"bullish",
		"bullpen",
		"bullring",
		"bullseye",
		"bullwhip",
		"bully",
		"bunch",
		"bundle",
		"bungee",
		"bunion",
		"bunkbed",
		"bunkhouse",
		"bunkmate",
		"bunny",
		"bunt",
		"busboy",
		"bush",
		"busily",
		"busload",
		"bust",
		"busybody",
		"buzz",
		"cabana",
		"cabbage",
		"cabbie",
		"cabdriver",
		"cable",
		"caboose",
		"cache",
		"cackle",
		"cacti",
		"cactus",
		"caddie",
		"caddy",
		"cadet",
		"cadillac",
		"cadmium",
		"cage",
		"cahoots",
		"cake",
		"calamari",
		"calamity",
		"calcium",
		"calculate",
		"calculus",
		"caliber",
		"calibrate",
		"calm",
		"caloric",
		"calorie",
		"calzone",
		"camcorder",
		"cameo",
		"camera",
		"camisole",
		"camper",
		"campfire",
		"camping",
		"campsite",
		"campus",
		"canal",
		"canary",
		"cancel",
		"candied",
		"candle",
		"candy",
		"cane",
		"canine",
		"canister",
		"cannabis",
		"canned",
		"canning",
		"cannon",
		"cannot",
		"canola",
		"canon",
		"canopener",
		"canopy",
		"canteen",
		"canyon",
		"capable",
		"capably",
		"capacity",
		"cape",
		"capillary",
		"capital",
		"capitol",
		"capped",
		"capricorn",
		"capsize",
		"capsule",
		"caption",
		"captivate",
		"captive",
		"captivity",
		"capture",
		"caramel",
		"carat",
		"caravan",
		"carbon",
		"cardboard",
		"carded",
		"cardiac",
		"cardigan",
		"cardinal",
		"cardstock",
		"carefully",
		"caregiver",
		"careless",
		"caress",
		"caretaker",
		"cargo",
		"caring",
		"carless",
		"carload",
		"carmaker",
		"carnage",
		"carnation",
		"carnival",
		"carnivore",
		"carol",
		"carpenter",
		"carpentry",
		"carpool",
		"carport",
		"carried",
		"carrot",
		"carrousel",
		"carry",
		"cartel",
		"cartload",
		"carton",
		"cartoon",
		"cartridge",
		"cartwheel",
		"carve",
		"carving",
		"carwash",
		"cascade",
		"case",
		"cash",
		"casing",
		"casino",
		"casket",
		"cassette",
		"casually",
		"casualty",
		"catacomb",
		"catalog",
		"catalyst",
		"catalyze",
		"catapult",
		"cataract",
		"catatonic",
		"catcall",
		"catchable",
		"catcher",
		"catching",
		"catchy",
		"caterer",
		"catering",
		"catfight",
		"catfish",
		"cathedral",
		"cathouse",
		"catlike",
		"catnap",
		"catnip",
		"catsup",
		"cattail",
		"cattishly",
		"cattle",
		"catty",
		"catwalk",
		"caucasian",
		"caucus",
		"causal",
		"causation",
		"cause",
		"causing",
		"cauterize",
		"caution",
		"cautious",
		"cavalier",
		"cavalry",
		"caviar",
		"cavity",
		"cedar",
		"celery",
		"celestial",
		"celibacy",
		"celibate",
		"celtic",
		"cement",
		"census",
		"ceramics",
		"ceremony",
		"certainly",
		"certainty",
		"certified",
		"certify",
		"cesarean",
		"cesspool",
		"chafe",
		"chaffing",
		"chain",
		"chair",
		"chalice",
		"challenge",
		"chamber",
		"chamomile",
		"champion",
		"chance",
		"change",
		"channel",
		"chant",
		"chaos",
		"chaperone",
		"chaplain",
		"chapped",
		"chaps",
		"chapter",
		"character",
		"charbroil",
		"charcoal",
		"charger",
		"charging",
		"chariot",
		"charity",
		"charm",
		"charred",
		"charter",
		"charting",
		"chase",
		"chasing",
		"chaste",
		"chastise",
		"chastity",
		"chatroom",
		"chatter",
		"chatting",
		"chatty",
		"cheating",
		"cheddar",
		"cheek",
		"cheer",
		"cheese",
		"cheesy",
		"chef",
		"chemicals",
		"chemist",
		"chemo",
		"cherisher",
		"cherub",
		"chess",
		"chest",
		"chevron",
		"chevy",
		"chewable",
		"chewer",
		"chewing",
		"chewy",
		"chief",
		"chihuahua",
		"childcare",
		"childhood",
		"childish",
		"childless",
		"childlike",
		"chili",
		"chill",
		"chimp",
		"chip",
		"chirping",
		"chirpy",
		"chitchat",
		"chivalry",
		"chive",
		"chloride",
		"chlorine",
		"choice",
		"chokehold",
		"choking",
		"chomp",
		"chooser",
		"choosing",
		"choosy",
		"chop",
		"chosen",
		"chowder",
		"chowtime",
		"chrome",
		"chubby",
		"chuck",
		"chug",
		"chummy",
		"chump",
		"chunk",
		"churn",
		"chute",
		"cider",
		"cilantro",
		"cinch",
		"cinema",
		"cinnamon",
		"circle",
		"circling",
		"circular",
		"circulate",
		"circus",
		"citable",
		"citadel",
		"citation",
		"citizen",
		"citric",
		"citrus",
		"city",
		"civic",
		"civil",
		"clad",
		"claim",
		"clambake",
		"clammy",
		"clamor",
		"clamp",
		"clamshell",
		"clang",
		"clanking",
		"clapped",
		"clapper",
		"clapping",
		"clarify",
		"clarinet",
		"clarity",
		"clash",
		"clasp",
		"class",
		"clatter",
		"clause",
		"clavicle",
		"claw",
		"clay",
		"clean",
		"clear",
		"cleat",
		"cleaver",
		"cleft",
		"clench",
		"clergyman",
		"clerical",
		"clerk",
		"clever",
		"clicker",
		"client",
		"climate",
		"climatic",
		"cling",
		"clinic",
		"clinking",
		"clip",
		"clique",
		"cloak",
		"clobber",
		"clock",
		"clone",
		"cloning",
		"closable",
		"closure",
		"clothes",
		"clothing",
		"cloud",
		"clover",
		"clubbed",
		"clubbing",
		"clubhouse",
		"clump",
		"clumsily",
		"clumsy",
		"clunky",
		"clustered",
		"clutch",
		"clutter",
		"coach",
		"coagulant",
		"coastal",
		"coaster",
		"coasting",
		"coastland",
		"coastline",
		"coat",
		"coauthor",
		"cobalt",
		"cobbler",
		"cobweb",
		"cocoa",
		"coconut",
		"cod",
		"coeditor",
		"coerce",
		"coexist",
		"coffee",
		"cofounder",
		"cognition",
		"cognitive",
		"cogwheel",
		"coherence",
		"coherent",
		"cohesive",
		"coil",
		"coke",
		"cola",
		"cold",
		"coleslaw",
		"coliseum",
		"collage",
		"collapse",
		"collar",
		"collected",
		"collector",
		"collide",
		"collie",
		"collision",
		"colonial",
		"colonist",
		"colonize",
		"colony",
		"colossal",
		"colt",
		"coma",
		"come",
		"comfort",
		"comfy",
		"comic",
		"coming",
		"comma",
		"commence",
		"commend",
		"comment",
		"commerce",
		"commode",
		"commodity",
		"commodore",
		"common",
		"commotion",
		"commute",
		"commuting",
		"compacted",
		"compacter",
		"compactly",
		"compactor",
		"companion",
		"company",
		"compare",
		"compel",
		"compile",
		"comply",
		"component",
		"composed",
		"composer",
		"composite",
		"compost",
		"composure",
		"compound",
		"compress",
		"comprised",
		"computer",
		"computing",
		"comrade",
		"concave",
		"conceal",
		"conceded",
		"concept",
		"concerned",
		"concert",
		"conch",
		"concierge",
		"concise",
		"conclude",
		"concrete",
		"concur",
		"condense",
		"condiment",
		"condition",
		"condone",
		"conducive",
		"conductor",
		"conduit",
		"cone",
		"confess",
		"confetti",
		"confidant",
		"confident",
		"confider",
		"confiding",
		"configure",
		"confined",
		"confining",
		"confirm",
		"conflict",
		"conform",
		"confound",
		"confront",
		"confused",
		"confusing",
		"confusion",
		"congenial",
		"congested",
		"congrats",
		"congress",
		"conical",
		"conjoined",
		"conjure",
		"conjuror",
		"connected",
		"connector",
		"consensus",
		"consent",
		"console",
		"consoling",
		"consonant",
		"constable",
		"constant",
		"constrain",
		"constrict",
		"construct",
		"consult",
		"consumer",
		"consuming",
		"contact",
		"container",
		"contempt",
		"contend",
		"contented",
		"contently",
		"contents",
		"contest",
		"context",
		"contort",
		"contour",
		"contrite",
		"control",
		"contusion",
		"convene",
		"convent",
		"copartner",
		"cope",
		"copied",
		"copier",
		"copilot",
		"coping",
		"copious",
		"copper",
		"copy",
		"coral",
		"cork",
		"cornball",
		"cornbread",
		"corncob",
		"cornea",
		"corned",
		"corner",
		"cornfield",
		"cornflake",
		"cornhusk",
		"cornmeal",
		"cornstalk",
		"corny",
		"coronary",
		"coroner",
		"corporal",
		"corporate",
		"corral",
		"correct",
		"corridor",
		"corrode",
		"corroding",
		"corrosive",
		"corsage",
		"corset",
		"cortex",
		"cosigner",
		"cosmetics",
		"cosmic",
		"cosmos",
		"cosponsor",
		"cost",
		"cottage",
		"cotton",
		"couch",
		"cough",
		"could",
		"countable",
		"countdown",
		"counting",
		"countless",
		"country",
		"county",
		"courier",
		"covenant",
		"cover",
		"coveted",
		"coveting",
		"coyness",
		"cozily",
		"coziness",
		"cozy",
		"crabbing",
		"crabgrass",
		"crablike",
		"crabmeat",
		"cradle",
		"cradling",
		"crafter",
		"craftily",
		"craftsman",
		"craftwork",
		"crafty",
		"cramp",
		"cranberry",
		"crane",
		"cranial",
		"cranium",
		"crank",
		"crate",
		"crave",
		"craving",
		"crawfish",
		"crawlers",
		"crawling",
		"crayfish",
		"crayon",
		"crazed",
		"crazily",
		"craziness",
		"crazy",
		"creamed",
		"creamer",
		"creamlike",
		"crease",
		"creasing",
		"creatable",
		"create",
		"creation",
		"creative",
		"creature",
		"credible",
		"credibly",
		"credit",
		"creed",
		"creme",
		"creole",
		"crepe",
		"crept",
		"crescent",
		"crested",
		"cresting",
		"crestless",
		"crevice",
		"crewless",
		"crewman",
		"crewmate",
		"crib",
		"cricket",
		"cried",
		"crier",
		"crimp",
		"crimson",
		"cringe",
		"cringing",
		"crinkle",
		"crinkly",
		"crisped",
		"crisping",
		"crisply",
		"crispness",
		"crispy",
		"criteria",
		"critter",
		"croak",
		"crock",
		"crook",
		"croon",
		"crop",
		"cross",
		"crouch",
		"crouton",
		"crowbar",
		"crowd",
		"crown",
		"crucial",
		"crudely",
		"crudeness",
		"cruelly",
		"cruelness",
		"cruelty",
		"crumb",
		"crummiest",
		"crummy",
		"crumpet",
		"crumpled",
		"cruncher",
		"crunching",
		"crunchy",
		"crusader",
		"crushable",
		"crushed",
		"crusher",
		"crushing",
		"crust",
		"crux",
		"crying",
		"cryptic",
		"crystal",
		"cubbyhole",
		"cube",
		"cubical",
		"cubicle",
		"cucumber",
		"cuddle",
		"cuddly",
		"cufflink",
		"culinary",
		"culminate",
		"culpable",
		"culprit",
		"cultivate",
		"cultural",
		"culture",
		"cupbearer",
		"cupcake",
		"cupid",
		"cupped",
		"cupping",
		"curable",
		"curator",
		"curdle",
		"cure",
		"curfew",
		"curing",
		"curled",
		"curler",
		"curliness",
		"curling",
		"curly",
		"curry",
		"curse",
		"cursive",
		"cursor",
		"curtain",
		"curtly",
		"curtsy",
		"curvature",
		"curve",
		"curvy",
		"cushy",
		"cusp",
		"cussed",
		"custard",
		"custodian",
		"custody",
		"customary",
		"customer",
		"customize",
		"customs",
		"cut",
		"cycle",
		"cyclic",
		"cycling",
		"cyclist",
		"cylinder",
		"cymbal",
		"cytoplasm",
		"cytoplast",
		"dab",
		"dad",
		"daffodil",
		"dagger",
		"daily",
		"daintily",
		"dainty",
		"dairy",
		"daisy",
		"dallying",
		"dance",
		"dancing",
		"dandelion",
		"dander",
		"dandruff",
		"dandy",
		"danger",
		"dangle",
		"dangling",
		"daredevil",
		"dares",
		"daringly",
		"darkened",
		"darkening",
		"darkish",
		"darkness",
		"darkroom",
		"darling",
		"darn",
		"dart",
		"darwinism",
		"dash",
		"dastardly",
		"data",
		"datebook",
		"dating",
		"daughter",
		"daunting",
		"dawdler",
		"dawn",
		"daybed",
		"daybreak",
		"daycare",
		"daydream",
		"daylight",
		"daylong",
		"dayroom",
		"daytime",
		"dazzler",
		"dazzling",
		"deacon",
		"deafening",
		"deafness",
		"dealer",
		"dealing",
		"dealmaker",
		"dealt",
		"dean",
		"debatable",
		"debate",
		"debating",
		"debit",
		"debrief",
		"debtless",
		"debtor",
		"debug",
		"debunk",
		"decade",
		"decaf",
		"decal",
		"decathlon",
		"decay",
		"deceased",
		"deceit",
		"deceiver",
		"deceiving",
		"december",
		"decency",
		"decent",
		"deception",
		"deceptive",
		"decibel",
		"decidable",
		"decimal",
		"decimeter",
		"decipher",
		"deck",
		"declared",
		"decline",
		"decode",
		"decompose",
		"decorated",
		"decorator",
		"decoy",
		"decrease",
		"decree",
		"dedicate",
		"dedicator",
		"deduce",
		"deduct",
		"deed",
		"deem",
		"deepen",
		"deeply",
		"deepness",
		"deface",
		"defacing",
		"defame",
		"default",
		"defeat",
		"defection",
		"defective",
		"defendant",
		"defender",
		"defense",
		"defensive",
		"deferral",
		"deferred",
		"defiance",
		"defiant",
		"defile",
		"defiling",
		"define",
		"definite",
		"deflate",
		"deflation",
		"deflator",
		"deflected",
		"deflector",
		"defog",
		"deforest",
		"defraud",
		"defrost",
		"deftly",
		"defuse",
		"defy",
		"degraded",
		"degrading",
		"degrease",
		"degree",
		"dehydrate",
		"deity",
		"dejected",
		"delay",
		"delegate",
		"delegator",
		"delete",
		"deletion",
		"delicacy",
		"delicate",
		"delicious",
		"delighted",
		"delirious",
		"delirium",
		"deliverer",
		"delivery",
		"delouse",
		"delta",
		"deluge",
		"delusion",
		"deluxe",
		"demanding",
		"demeaning",
		"demeanor",
		"demise",
		"democracy",
		"democrat",
		"demote",
		"demotion",
		"demystify",
		"denatured",
		"deniable",
		"denial",
		"denim",
		"denote",
		"dense",
		"density",
		"dental",
		"dentist",
		"denture",
		"deny",
		"deodorant",
		"deodorize",
		"departed",
		"departure",
		"depict",
		"deplete",
		"depletion",
		"deplored",
		"deploy",
		"deport",
		"depose",
		"depraved",
		"depravity",
		"deprecate",
		"depress",
		"deprive",
		"depth",
		"deputize",
		"deputy",
		"derail",
		"deranged",
		"derby",
		"derived",
		"desecrate",
		"deserve",
		"deserving",
		"designate",
		"designed",
		"designer",
		"designing",
		"deskbound",
		"desktop",
		"deskwork",
		"desolate",
		"despair",
		"despise",
		"despite",
		"destiny",
		"destitute",
		"destruct",
		"detached",
		"detail",
		"detection",
		"detective",
		"detector",
		"detention",
		"detergent",
		"detest",
		"detonate",
		"detonator",
		"detoxify",
		"detract",
		"deuce",
		"devalue",
		"deviancy",
		"deviant",
		"deviate",
		"deviation",
		"deviator",
		"device",
		"devious",
		"devotedly",
		"devotee",
		"devotion",
		"devourer",
		"devouring",
		"devoutly",
		"dexterity",
		"dexterous",
		"diabetes",
		"diabetic",
		"diabolic",
		"diagnoses",
		"diagnosis",
		"diagram",
		"dial",
		"diameter",
		"diaper",
		"diaphragm",
		"diary",
		"dice",
		"dicing",
		"dictate",
		"dictation",
		"dictator",
		"difficult",
		"diffused",
		"diffuser",
		"diffusion",
		"diffusive",
		"dig",
		"dilation",
		"diligence",
		"diligent",
		"dill",
		"dilute",
		"dime",
		"diminish",
		"dimly",
		"dimmed",
		"dimmer",
		"dimness",
		"dimple",
		"diner",
		"dingbat",
		"dinghy",
		"dinginess",
		"dingo",
		"dingy",
		"dining",
		"dinner",
		"diocese",
		"dioxide",
		"diploma",
		"dipped",
		"dipper",
		"dipping",
		"directed",
		"direction",
		"directive",
		"directly",
		"directory",
		"direness",
		"dirtiness",
		"disabled",
		"disagree",
		"disallow",
		"disarm",
		"disarray",
		"disaster",
		"disband",
		"disbelief",
		"disburse",
		"discard",
		"discern",
		"discharge",
		"disclose",
		"discolor",
		"discount",
		"discourse",
		"discover",
		"discuss",
		"disdain",
		"disengage",
		"disfigure",
		"disgrace",
		"dish",
		"disinfect",
		"disjoin",
		"disk",
		"dislike",
		"disliking",
		"dislocate",
		"dislodge",
		"disloyal",
		"dismantle",
		"dismay",
		"dismiss",
		"dismount",
		"disobey",
		"disorder",
		"disown",
		"disparate",
		"disparity",
		"dispatch",
		"dispense",
		"dispersal",
		"dispersed",
		"disperser",
		"displace",
		"display",
		"displease",
		"disposal",
		"dispose",
		"disprove",
		"dispute",
		"disregard",
		"disrupt",
		"dissuade",
		"distance",
		"distant",
		"distaste",
		"distill",
		"distinct",
		"distort",
		"distract",
		"distress",
		"district",
		"distrust",
		"ditch",
		"ditto",
		"ditzy",
		"dividable",
		"divided",
		"dividend",
		"dividers",
		"dividing",
		"divinely",
		"diving",
		"divinity",
		"divisible",
		"divisibly",
		"division",
		"divisive",
		"divorcee",
		"dizziness",
		"dizzy",
		"doable",
		"docile",
		"dock",
		"doctrine",
		"document",
		"dodge",
		"dodgy",
		"doily",
		"doing",
		"dole",
		"dollar",
		"dollhouse",
		"dollop",
		"dolly",
		"dolphin",
		"domain",
		"domelike",
		"domestic",
		"dominion",
		"dominoes",
		"donated",
		"donation",
		"donator",
		"donor",
		"donut",
		"doodle",
		"doorbell",
		"doorframe",
		"doorknob",
		"doorman",
		"doormat",
		"doornail",
		"doorpost",
		"doorstep",
		"doorstop",
		"doorway",
		"doozy",
		"dork",
		"dormitory",
		"dorsal",
		"dosage",
		"dose",
		"dotted",
		"doubling",
		"douche",
		"dove",
		"down",
		"dowry",
		"doze",
		"drab",
		"dragging",
		"dragonfly",
		"dragonish",
		"dragster",
		"drainable",
		"drainage",
		"drained",
		"drainer",
		"drainpipe",
		"dramatic",
		"dramatize",
		"drank",
		"drapery",
		"drastic",
		"draw",
		"dreaded",
		"dreadful",
		"dreadlock",
		"dreamboat",
		"dreamily",
		"dreamland",
		"dreamless",
		"dreamlike",
		"dreamt",
		"dreamy",
		"drearily",
		"dreary",
		"drench",
		"dress",
		"drew",
		"dribble",
		"dried",
		"drier",
		"drift",
		"driller",
		"drilling",
		"drinkable",
		"drinking",
		"dripping",
		"drippy",
		"drivable",
		"driven",
		"driver",
		"driveway",
		"driving",
		"drizzle",
		"drizzly",
		"drone",
		"drool",
		"droop",
		"drop-down",
		"dropbox",
		"dropkick",
		"droplet",
		"dropout",
		"dropper",
		"drove",
		"drown",
		"drowsily",
		"drudge",
		"drum",
		"dry",
		"dubbed",
		"dubiously",
		"duchess",
		"duckbill",
		"ducking",
		"duckling",
		"ducktail",
		"ducky",
		"duct",
		"dude",
		"duffel",
		"dugout",
		"duh",
		"duke",
		"duller",
		"dullness",
		"duly",
		"dumping",
		"dumpling",
		"dumpster",
		"duo",
		"dupe",
		"duplex",
		"duplicate",
		"duplicity",
		"durable",
		"durably",
		"duration",
		"duress",
		"during",
		"dusk",
		"dust",
		"dutiful",
		"duty",
		"duvet",
		"dwarf",
		"dweeb",
		"dwelled",
		"dweller",
		"dwelling",
		"dwindle",
		"dwindling",
		"dynamic",
		"dynamite",
		"dynasty",
		"dyslexia",
		"dyslexic",
		"each",
		"eagle",
		"earache",
		"eardrum",
		"earflap",
		"earful",
		"earlobe",
		"early",
		"earmark",
		"earmuff",
		"earphone",
		"earpiece",
		"earplugs",
		"earring",
		"earshot",
		"earthen",
		"earthlike",
		"earthling",
		"earthly",
		"earthworm",
		"earthy",
		"earwig",
		"easeful",
		"easel",
		"easiest",
		"easily",
		"easiness",
		"easing",
		"eastbound",
		"eastcoast",
		"easter",
		"eastward",
		"eatable",
		"eaten",
		"eatery",
		"eating",
		"eats",
		"ebay",
		"ebony",
		"ebook",
		"ecard",
		"eccentric",
		"echo",
		"eclair",
		"eclipse",
		"ecologist",
		"ecology",
		"economic",
		"economist",
		"economy",
		"ecosphere",
		"ecosystem",
		"edge",
		"edginess",
		"edging",
		"edgy",
		"edition",
		"editor",
		"educated",
		"education",
		"educator",
		"eel",
		"effective",
		"effects",
		"efficient",
		"effort",
		"eggbeater",
		"egging",
		"eggnog",
		"eggplant",
		"eggshell",
		"egomaniac",
		"egotism",
		"egotistic",
		"either",
		"eject",
		"elaborate",
		"elastic",
		"elated",
		"elbow",
		"eldercare",
		"elderly",
		"eldest",
		"electable",
		"election",
		"elective",
		"elephant",
		"elevate",
		"elevating",
		"elevation",
		"elevator",
		"eleven",
		"elf",
		"eligible",
		"eligibly",
		"eliminate",
		"elite",
		"elitism",
		"elixir",
		"elk",
		"ellipse",
		"elliptic",
		"elm",
		"elongated",
		"elope",
		"eloquence",
		"eloquent",
		"elsewhere",
		"elude",
		"elusive",
		"elves",
		"email",
		"embargo",
		"embark",
		"embassy",
		"embattled",
		"embellish",
		"ember",
		"embezzle",
		"emblaze",
		"emblem",
		"embody",
		"embolism",
		"emboss",
		"embroider",
		"emcee",
		"emerald",
		"emergency",
		"emission",
		"emit",
		"emote",
		"emoticon",
		"emotion",
		"empathic",
		"empathy",
		"emperor",
		"emphases",
		"emphasis",
		"emphasize",
		"emphatic",
		"empirical",
		"employed",
		"employee",
		"employer",
		"emporium",
		"empower",
		"emptier",
		"emptiness",
		"empty",
		"emu",
		"enable",
		"enactment",
		"enamel",
		"enchanted",
		"enchilada",
		"encircle",
		"enclose",
		"enclosure",
		"encode",
		"encore",
		"encounter",
		"encourage",
		"encroach",
		"encrust",
		"encrypt",
		"endanger",
		"endeared",
		"endearing",
		"ended",
		"ending",
		"endless",
		"endnote",
		"endocrine",
		"endorphin",
		"endorse",
		"endowment",
		"endpoint",
		"endurable",
		"endurance",
		"enduring",
		"energetic",
		"energize",
		"energy",
		"enforced",
		"enforcer",
		"engaged",
		"engaging",
		"engine",
		"engorge",
		"engraved",
		"engraver",
		"engraving",
		"engross",
		"engulf",
		"enhance",
		"enigmatic",
		"enjoyable",
		"enjoyably",
		"enjoyer",
		"enjoying",
		"enjoyment",
		"enlarged",
		"enlarging",
		"enlighten",
		"enlisted",
		"enquirer",
		"enrage",
		"enrich",
		"enroll",
		"enslave",
		"ensnare",
		"ensure",
		"entail",
		"entangled",
		"entering",
		"entertain",
		"enticing",
		"entire",
		"entitle",
		"entity",
		"entomb",
		"entourage",
		"entrap",
		"entree",
		"entrench",
		"entrust",
		"entryway",
		"entwine",
		"enunciate",
		"envelope",
		"enviable",
		"enviably",
		"envious",
		"envision",
		"envoy",
		"envy",
		"enzyme",
		"epic",
		"epidemic",
		"epidermal",
		"epidermis",
		"epidural",
		"epilepsy",
		"epileptic",
		"epilogue",
		"epiphany",
		"episode",
		"equal",
		"equate",
		"equation",
		"equator",
		"equinox",
		"equipment",
		"equity",
		"equivocal",
		"eradicate",
		"erasable",
		"erased",
		"eraser",
		"erasure",
		"ergonomic",
		"errand",
		"errant",
		"erratic",
		"error",
		"erupt",
		"escalate",
		"escalator",
		"escapable",
		"escapade",
		"escapist",
		"escargot",
		"eskimo",
		"esophagus",
		"espionage",
		"espresso",
		"esquire",
		"essay",
		"essence",
		"essential",
		"establish",
		"estate",
		"esteemed",
		"estimate",
		"estimator",
		"estranged",
		"estrogen",
		"etching",
		"eternal",
		"eternity",
		"ethanol",
		"ether",
		"ethically",
		"ethics",
		"euphemism",
		"evacuate",
		"evacuee",
		"evade",
		"evaluate",
		"evaluator",
		"evaporate",
		"evasion",
		"evasive",
		"even",
		"everglade",
		"evergreen",
		"everybody",
		"everyday",
		"everyone",
		"evict",
		"evidence",
		"evident",
		"evil",
		"evoke",
		"evolution",
		"evolve",
		"exact",
		"exalted",
		"example",
		"excavate",
		"excavator",
		"exceeding",
		"exception",
		"excess",
		"exchange",
		"excitable",
		"exciting",
		"exclaim",
		"exclude",
		"excluding",
		"exclusion",
		"exclusive",
		"excretion",
		"excretory",
		"excursion",
		"excusable",
		"excusably",
		"excuse",
		"exemplary",
		"exemplify",
		"exemption",
		"exerciser",
		"exert",
		"exes",
		"exfoliate",
		"exhale",
		"exhaust",
		"exhume",
		"exile",
		"existing",
		"exit",
		"exodus",
		"exonerate",
		"exorcism",
		"exorcist",
		"expand",
		"expanse",
		"expansion",
		"expansive",
		"expectant",
		"expedited",
		"expediter",
		"expel",
		"expend",
		"expenses",
		"expensive",
		"expert",
		"expire",
		"expiring",
		"explain",
		"expletive",
		"explicit",
		"explode",
		"exploit",
		"explore",
		"exploring",
		"exponent",
		"exporter",
		"exposable",
		"expose",
		"exposure",
		"express",
		"expulsion",
		"exquisite",
		"extended",
		"extending",
		"extent",
		"extenuate",
		"exterior",
		"external",
		"extinct",
		"extortion",
		"extradite",
		"extras",
		"extrovert",
		"extrude",
		"extruding",
		"exuberant",
		"fable",
		"fabric",
		"fabulous",
		"facebook",
		"facecloth",
		"facedown",
		"faceless",
		"facelift",
		"faceplate",
		"faceted",
		"facial",
		"facility",
		"facing",
		"facsimile",
		"faction",
		"factoid",
		"factor",
		"factsheet",
		"factual",
		"faculty",
		"fade",
		"fading",
		"failing",
		"falcon",
		"fall",
		"false",
		"falsify",
		"fame",
		"familiar",
		"family",
		"famine",
		"famished",
		"fanatic",
		"fancied",
		"fanciness",
		"fancy",
		"fanfare",
		"fang",
		"fanning",
		"fantasize",
		"fantastic",
		"fantasy",
		"fascism",
		"fastball",
		"faster",
		"fasting",
		"fastness",
		"faucet",
		"favorable",
		"favorably",
		"favored",
		"favoring",
		"favorite",
		"fax",
		"feast",
		"federal",
		"fedora",
		"feeble",
		"feed",
		"feel",
		"feisty",
		"feline",
		"felt-tip",
		"feminine",
		"feminism",
		"feminist",
		"feminize",
		"femur",
		"fence",
		"fencing",
		"fender",
		"ferment",
		"fernlike",
		"ferocious",
		"ferocity",
		"ferret",
		"ferris",
		"ferry",
		"fervor",
		"fester",
		"festival",
		"festive",
		"festivity",
		"fetal",
		"fetch",
		"fever",
		"fiber",
		"fiction",
		"fiddle",
		"fiddling",
		"fidelity",
		"fidgeting",
		"fidgety",
		"fifteen",
		"fifth",
		"fiftieth",
		"fifty",
		"figment",
		"figure",
		"figurine",
		"filing",
		"filled",
		"filler",
		"filling",
		"film",
		"filter",
		"filth",
		"filtrate",
		"finale",
		"finalist",
		"finalize",
		"finally",
		"finance",
		"financial",
		"finch",
		"fineness",
		"finer",
		"finicky",
		"finished",
		"finisher",
		"finishing",
		"finite",
		"finless",
		"finlike",
		"fiscally",
		"fit",
		"five",
		"flaccid",
		"flagman",
		"flagpole",
		"flagship",
		"flagstick",
		"flagstone",
		"flail",
		"flakily",
		"flaky",
		"flame",
		"flammable",
		"flanked",
		"flanking",
		"flannels",
		"flap",
		"flaring",
		"flashback",
		"flashbulb",
		"flashcard",
		"flashily",
		"flashing",
		"flashy",
		"flask",
		"flatbed",
		"flatfoot",
		"flatly",
		"flatness",
		"flatten",
		"flattered",
		"flatterer",
		"flattery",
		"flattop",
		"flatware",
		"flatworm",
		"flavored",
		"flavorful",
		"flavoring",
		"flaxseed",
		"fled",
		"fleshed",
		"fleshy",
		"flick",
		"flier",
		"flight",
		"flinch",
		"fling",
		"flint",
		"flip",
		"flirt",
		"float",
		"flock",
		"flogging",
		"flop",
		"floral",
		"florist",
		"floss",
		"flounder",
		"flyable",
		"flyaway",
		"flyer",
		"flying",
		"flyover",
		"flypaper",
		"foam",
		"foe",
		"fog",
		"foil",
		"folic",
		"folk",
		"follicle",
		"follow",
		"fondling",
		"fondly",
		"fondness",
		"fondue",
		"font",
		"food",
		"fool",
		"footage",
		"football",
		"footbath",
		"footboard",
		"footer",
		"footgear",
		"foothill",
		"foothold",
		"footing",
		"footless",
		"footman",
		"footnote",
		"footpad",
		"footpath",
		"footprint",
		"footrest",
		"footsie",
		"footsore",
		"footwear",
		"footwork",
		"fossil",
		"foster",
		"founder",
		"founding",
		"fountain",
		"fox",
		"foyer",
		"fraction",
		"fracture",
		"fragile",
		"fragility",
		"fragment",
		"fragrance",
		"fragrant",
		"frail",
		"frame",
		"framing",
		"frantic",
		"fraternal",
		"frayed",
		"fraying",
		"frays",
		"freckled",
		"freckles",
		"freebase",
		"freebee",
		"freebie",
		"freedom",
		"freefall",
		"freehand",
		"freeing",
		"freeload",
		"freely",
		"freemason",
		"freeness",
		"freestyle",
		"freeware",
		"freeway",
		"freewill",
		"freezable",
		"freezing",
		"freight",
		"french",
		"frenzied",
		"frenzy",
		"frequency",
		"frequent",
		"fresh",
		"fretful",
		"fretted",
		"friction",
		"friday",
		"fridge",
		"fried",
		"friend",
		"frighten",
		"frightful",
		"frigidity",
		"frigidly",
		"frill",
		"fringe",
		"frisbee",
		"frisk",
		"fritter",
		"frivolous",
		"frolic",
		"from",
		"front",
		"frostbite",
		"frosted",
		"frostily",
		"frosting",
		"frostlike",
		"frosty",
		"froth",
		"frown",
		"frozen",
		"fructose",
		"frugality",
		"frugally",
		"fruit",
		"frustrate",
		"frying",
		"gab",
		"gaffe",
		"gag",
		"gainfully",
		"gaining",
		"gains",
		"gala",
		"gallantly",
		"galleria",
		"gallery",
		"galley",
		"gallon",
		"gallows",
		"gallstone",
		"galore",
		"galvanize",
		"gambling",
		"game",
		"gaming",
		"gamma",
		"gander",
		"gangly",
		"gangrene",
		"gangway",
		"gap",
		"garage",
		"garbage",
		"garden",
		"gargle",
		"garland",
		"garlic",
		"garment",
		"garnet",
		"garnish",
		"garter",
		"gas",
		"gatherer",
		"gathering",
		"gating",
		"gauging",
		"gauntlet",
		"gauze",
		"gave",
		"gawk",
		"gazing",
		"gear",
		"gecko",
		"geek",
		"geiger",
		"gem",
		"gender",
		"generic",
		"generous",
		"genetics",
		"genre",
		"gentile",
		"gentleman",
		"gently",
		"gents",
		"geography",
		"geologic",
		"geologist",
		"geology",
		"geometric",
		"geometry",
		"geranium",
		"gerbil",
		"geriatric",
		"germicide",
		"germinate",
		"germless",
		"germproof",
		"gestate",
		"gestation",
		"gesture",
		"getaway",
		"getting",
		"getup",
		"giant",
		"gibberish",
		"giblet",
		"giddily",
		"giddiness",
		"giddy",
		"gift",
		"gigabyte",
		"gigahertz",
		"gigantic",
		"giggle",
		"giggling",
		"giggly",
		"gigolo",
		"gilled",
		"gills",
		"gimmick",
		"girdle",
		"giveaway",
		"given",
		"giver",
		"giving",
		"gizmo",
		"gizzard",
		"glacial",
		"glacier",
		"glade",
		"gladiator",
		"gladly",
		"glamorous",
		"glamour",
		"glance",
		"glancing",
		"glandular",
		"glare",
		"glaring",
		"glass",
		"glaucoma",
		"glazing",
		"gleaming",
		"gleeful",
		"glider",
		"gliding",
		"glimmer",
		"glimpse",
		"glisten",
		"glitch",
		"glitter",
		"glitzy",
		"gloater",
		"gloating",
		"gloomily",
		"gloomy",
		"glorified",
		"glorifier",
		"glorify",
		"glorious",
		"glory",
		"gloss",
		"glove",
		"glowing",
		"glowworm",
		"glucose",
		"glue",
		"gluten",
		"glutinous",
		"glutton",
		"gnarly",
		"gnat",
		"goal",
		"goatskin",
		"goes",
		"goggles",
		"going",
		"goldfish",
		"goldmine",
		"goldsmith",
		"golf",
		"goliath",
		"gonad",
		"gondola",
		"gone",
		"gong",
		"good",
		"gooey",
		"goofball",
		"goofiness",
		"goofy",
		"google",
		"goon",
		"gopher",
		"gore",
		"gorged",
		"gorgeous",
		"gory",
		"gosling",
		"gossip",
		"gothic",
		"gotten",
		"gout",
		"gown",
		"grab",
		"graceful",
		"graceless",
		"gracious",
		"gradation",
		"graded",
		"grader",
		"gradient",
		"grading",
		"gradually",
		"graduate",
		"graffiti",
		"grafted",
		"grafting",
		"grain",
		"granddad",
		"grandkid",
		"grandly",
		"grandma",
		"grandpa",
		"grandson",
		"granite",
		"granny",
		"granola",
		"grant",
		"granular",
		"grape",
		"graph",
		"grapple",
		"grappling",
		"grasp",
		"grass",
		"gratified",
		"gratify",
		"grating",
		"gratitude",
		"gratuity",
		"gravel",
		"graveness",
		"graves",
		"graveyard",
		"gravitate",
		"gravity",
		"gravy",
		"gray",
		"grazing",
		"greasily",
		"greedily",
		"greedless",
		"greedy",
		"green",
		"greeter",
		"greeting",
		"grew",
		"greyhound",
		"grid",
		"grief",
		"grievance",
		"grieving",
		"grievous",
		"grill",
		"grimace",
		"grimacing",
		"grime",
		"griminess",
		"grimy",
		"grinch",
		"grinning",
		"grip",
		"gristle",
		"grit",
		"groggily",
		"groggy",
		"groin",
		"groom",
		"groove",
		"grooving",
		"groovy",
		"grope",
		"ground",
		"grouped",
		"grout",
		"grove",
		"grower",
		"growing",
		"growl",
		"grub",
		"grudge",
		"grudging",
		"grueling",
		"gruffly",
		"grumble",
		"grumbling",
		"grumbly",
		"grumpily",
		"grunge",
		"grunt",
		"guacamole",
		"guidable",
		"guidance",
		"guide",
		"guiding",
		"guileless",
		"guise",
		"gulf",
		"gullible",
		"gully",
		"gulp",
		"gumball",
		"gumdrop",
		"gumminess",
		"gumming",
		"gummy",
		"gurgle",
		"gurgling",
		"guru",
		"gush",
		"gusto",
		"gusty",
		"gutless",
		"guts",
		"gutter",
		"guy",
		"guzzler",
		"gyration",
		"habitable",
		"habitant",
		"habitat",
		"habitual",
		"hacked",
		"hacker",
		"hacking",
		"hacksaw",
		"had",
		"haggler",
		"haiku",
		"half",
		"halogen",
		"halt",
		"halved",
		"halves",
		"hamburger",
		"hamlet",
		"hammock",
		"hamper",
		"hamster",
		"hamstring",
		"handbag",
		"handball",
		"handbook",
		"handbrake",
		"handcart",
		"handclap",
		"handclasp",
		"handcraft",
		"handcuff",
		"handed",
		"handful",
		"handgrip",
		"handgun",
		"handheld",
		"handiness",
		"handiwork",
		"handlebar",
		"handled",
		"handler",
		"handling",
		"handmade",
		"handoff",
		"handpick",
		"handprint",
		"handrail",
		"handsaw",
		"handset",
		"handsfree",
		"handshake",
		"handstand",
		"handwash",
		"handwork",
		"handwoven",
		"handwrite",
		"handyman",
		"hangnail",
		"hangout",
		"hangover",
		"hangup",
		"hankering",
		"hankie",
		"hanky",
		"haphazard",
		"happening",
		"happier",
		"happiest",
		"happily",
		"happiness",
		"happy",
		"harbor",
		"hardcopy",
		"hardcore",
		"hardcover",
		"harddisk",
		"hardened",
		"hardener",
		"hardening",
		"hardhat",
		"hardhead",
		"hardiness",
		"hardly",
		"hardness",
		"hardship",
		"hardware",
		"hardwired",
		"hardwood",
		"hardy",
		"harmful",
		"harmless",
		"harmonica",
		"harmonics",
		"harmonize",
		"harmony",
		"harness",
		"harpist",
		"harsh",
		"harvest",
		"hash",
		"hassle",
		"haste",
		"hastily",
		"hastiness",
		"hasty",
		"hatbox",
		"hatchback",
		"hatchery",
		"hatchet",
		"hatching",
		"hatchling",
		"hate",
		"hatless",
		"hatred",
		"haunt",
		"haven",
		"hazard",
		"hazelnut",
		"hazily",
		"haziness",
		"hazing",
		"hazy",
		"headache",
		"headband",
		"headboard",
		"headcount",
		"headdress",
		"headed",
		"header",
		"headfirst",
		"headgear",
		"heading",
		"headlamp",
		"headless",
		"headlock",
		"headphone",
		"headpiece",
		"headrest",
		"headroom",
		"headscarf",
		"headset",
		"headsman",
		"headstand",
		"headstone",
		"headway",
		"headwear",
		"heap",
		"heat",
		"heave",
		"heavily",
		"heaviness",
		"heaving",
		"hedge",
		"hedging",
		"heftiness",
		"hefty",
		"helium",
		"helmet",
		"helper",
		"helpful",
		"helping",
		"helpless",
		"helpline",
		"hemlock",
		"hemstitch",
		"hence",
		"henchman",
		"henna",
		"herald",
		"herbal",
		"herbicide",
		"herbs",
		"heritage",
		"hermit",
		"heroics",
		"heroism",
		"herring",
		"herself",
		"hertz",
		"hesitancy",
		"hesitant",
		"hesitate",
		"hexagon",
		"hexagram",
		"hubcap",
		"huddle",
		"huddling",
		"huff",
		"hug",
		"hula",
		"hulk",
		"hull",
		"human",
		"humble",
		"humbling",
		"humbly",
		"humid",
		"humiliate",
		"humility",
		"humming",
		"hummus",
		"humongous",
		"humorist",
		"humorless",
		"humorous",
		"humpback",
		"humped",
		"humvee",
		"hunchback",
		"hundredth",
		"hunger",
		"hungrily",
		"hungry",
		"hunk",
		"hunter",
		"hunting",
		"huntress",
		"huntsman",
		"hurdle",
		"hurled",
		"hurler",
		"hurling",
		"hurray",
		"hurricane",
		"hurried",
		"hurry",
		"hurt",
		"husband",
		"hush",
		"husked",
		"huskiness",
		"hut",
		"hybrid",
		"hydrant",
		"hydrated",
		"hydration",
		"hydrogen",
		"hydroxide",
		"hyperlink",
		"hypertext",
		"hyphen",
		"hypnoses",
		"hypnosis",
		"hypnotic",
		"hypnotism",
		"hypnotist",
		"hypnotize",
		"hypocrisy",
		"hypocrite",
		"ibuprofen",
		"ice",
		"iciness",
		"icing",
		"icky",
		"icon",
		"icy",
		"idealism",
		"idealist",
		"idealize",
		"ideally",
		"idealness",
		"identical",
		"identify",
		"identity",
		"ideology",
		"idiocy",
		"idiom",
		"idly",
		"igloo",
		"ignition",
		"ignore",
		"iguana",
		"illicitly",
		"illusion",
		"illusive",
		"image",
		"imaginary",
		"imagines",
		"imaging",
		"imbecile",
		"imitate",
		"imitation",
		"immature",
		"immerse",
		"immersion",
		"imminent",
		"immobile",
		"immodest",
		"immorally",
		"immortal",
		"immovable",
		"immovably",
		"immunity",
		"immunize",
		"impaired",
		"impale",
		"impart",
		"impatient",
		"impeach",
		"impeding",
		"impending",
		"imperfect",
		"imperial",
		"impish",
		"implant",
		"implement",
		"implicate",
		"implicit",
		"implode",
		"implosion",
		"implosive",
		"imply",
		"impolite",
		"important",
		"importer",
		"impose",
		"imposing",
		"impotence",
		"impotency",
		"impotent",
		"impound",
		"imprecise",
		"imprint",
		"imprison",
		"impromptu",
		"improper",
		"improve",
		"improving",
		"improvise",
		"imprudent",
		"impulse",
		"impulsive",
		"impure",
		"impurity",
		"iodine",
		"iodize",
		"ion",
		"ipad",
		"iphone",
		"ipod",
		"irate",
		"irk",
		"iron",
		"irregular",
		"irrigate",
		"irritable",
		"irritably",
		"irritant",
		"irritate",
		"islamic",
		"islamist",
		"isolated",
		"isolating",
		"isolation",
		"isotope",
		"issue",
		"issuing",
		"italicize",
		"italics",
		"item",
		"itinerary",
		"itunes",
		"ivory",
		"ivy",
		"jab",
		"jackal",
		"jacket",
		"jackknife",
		"jackpot",
		"jailbird",
		"jailbreak",
		"jailer",
		"jailhouse",
		"jalapeno",
		"jam",
		"janitor",
		"january",
		"jargon",
		"jarring",
		"jasmine",
		"jaundice",
		"jaunt",
		"java",
		"jawed",
		"jawless",
		"jawline",
		"jaws",
		"jaybird",
		"jaywalker",
		"jazz",
		"jeep",
		"jeeringly",
		"jellied",
		"jelly",
		"jersey",
		"jester",
		"jet",
		"jiffy",
		"jigsaw",
		"jimmy",
		"jingle",
		"jingling",
		"jinx",
		"jitters",
		"jittery",
		"job",
		"jockey",
		"jockstrap",
		"jogger",
		"jogging",
		"john",
		"joining",
		"jokester",
		"jokingly",
		"jolliness",
		"jolly",
		"jolt",
		"jot",
		"jovial",
		"joyfully",
		"joylessly",
		"joyous",
		"joyride",
		"joystick",
		"jubilance",
		"jubilant",
		"judge",
		"judgingly",
		"judicial",
		"judiciary",
		"judo",
		"juggle",
		"juggling",
		"jugular",
		"juice",
		"juiciness",
		"juicy",
		"jujitsu",
		"jukebox",
		"july",
		"jumble",
		"jumbo",
		"jump",
		"junction",
		"juncture",
		"june",
		"junior",
		"juniper",
		"junkie",
		"junkman",
		"junkyard",
		"jurist",
		"juror",
		"jury",
		"justice",
		"justifier",
		"justify",
		"justly",
		"justness",
		"juvenile",
		"kabob",
		"kangaroo",
		"karaoke",
		"karate",
		"karma",
		"kebab",
		"keenly",
		"keenness",
		"keep",
		"keg",
		"kelp",
		"kennel",
		"kept",
		"kerchief",
		"kerosene",
		"kettle",
		"kick",
		"kiln",
		"kilobyte",
		"kilogram",
		"kilometer",
		"kilowatt",
		"kilt",
		"kimono",
		"kindle",
		"kindling",
		"kindly",
		"kindness",
		"kindred",
		"kinetic",
		"kinfolk",
		"king",
		"kinship",
		"kinsman",
		"kinswoman",
		"kissable",
		"kisser",
		"kissing",
		"kitchen",
		"kite",
		"kitten",
		"kitty",
		"kiwi",
		"kleenex",
		"knapsack",
		"knee",
		"knelt",
		"knickers",
		"knoll",
		"koala",
		"kooky",
		"kosher",
		"krypton",
		"kudos",
		"kung",
		"labored",
		"laborer",
		"laboring",
		"laborious",
		"labrador",
		"ladder",
		"ladies",
		"ladle",
		"ladybug",
		"ladylike",
		"lagged",
		"lagging",
		"lagoon",
		"lair",
		"lake",
		"lance",
		"landed",
		"landfall",
		"landfill",
		"landing",
		"landlady",
		"landless",
		"landline",
		"landlord",
		"landmark",
		"landmass",
		"landmine",
		"landowner",
		"landscape",
		"landside",
		"landslide",
		"language",
		"lankiness",
		"lanky",
		"lantern",
		"lapdog",
		"lapel",
		"lapped",
		"lapping",
		"laptop",
		"lard",
		"large",
		"lark",
		"lash",
		"lasso",
		"last",
		"latch",
		"late",
		"lather",
		"latitude",
		"latrine",
		"latter",
		"latticed",
		"launch",
		"launder",
		"laundry",
		"laurel",
		"lavender",
		"lavish",
		"laxative",
		"lazily",
		"laziness",
		"lazy",
		"lecturer",
		"left",
		"legacy",
		"legal",
		"legend",
		"legged",
		"leggings",
		"legible",
		"legibly",
		"legislate",
		"lego",
		"legroom",
		"legume",
		"legwarmer",
		"legwork",
		"lemon",
		"lend",
		"length",
		"lens",
		"lent",
		"leotard",
		"lesser",
		"letdown",
		"lethargic",
		"lethargy",
		"letter",
		"lettuce",
		"level",
		"leverage",
		"levers",
		"levitate",
		"levitator",
		"liability",
		"liable",
		"liberty",
		"librarian",
		"library",
		"licking",
		"licorice",
		"lid",
		"life",
		"lifter",
		"lifting",
		"liftoff",
		"ligament",
		"likely",
		"likeness",
		"likewise",
		"liking",
		"lilac",
		"lilly",
		"lily",
		"limb",
		"limeade",
		"limelight",
		"limes",
		"limit",
		"limping",
		"limpness",
		"line",
		"lingo",
		"linguini",
		"linguist",
		"lining",
		"linked",
		"linoleum",
		"linseed",
		"lint",
		"lion",
		"lip",
		"liquefy",
		"liqueur",
		"liquid",
		"lisp",
		"list",
		"litigate",
		"litigator",
		"litmus",
		"litter",
		"little",
		"livable",
		"lived",
		"lively",
		"liver",
		"livestock",
		"lividly",
		"living",
		"lizard",
		"lubricant",
		"lubricate",
		"lucid",
		"luckily",
		"luckiness",
		"luckless",
		"lucrative",
		"ludicrous",
		"lugged",
		"lukewarm",
		"lullaby",
		"lumber",
		"luminance",
		"luminous",
		"lumpiness",
		"lumping",
		"lumpish",
		"lunacy",
		"lunar",
		"lunchbox",
		"luncheon",
		"lunchroom",
		"lunchtime",
		"lung",
		"lurch",
		"lure",
		"luridness",
		"lurk",
		"lushly",
		"lushness",
		"luster",
		"lustfully",
		"lustily",
		"lustiness",
		"lustrous",
		"lusty",
		"luxurious",
		"luxury",
		"lying",
		"lyrically",
		"lyricism",
		"lyricist",
		"lyrics",
		"macarena",
		"macaroni",
		"macaw",
		"mace",
		"machine",
		"machinist",
		"magazine",
		"magenta",
		"maggot",
		"magical",
		"magician",
		"magma",
		"magnesium",
		"magnetic",
		"magnetism",
		"magnetize",
		"magnifier",
		"magnify",
		"magnitude",
		"magnolia",
		"mahogany",
		"maimed",
		"majestic",
		"majesty",
		"majorette",
		"majority",
		"makeover",
		"maker",
		"makeshift",
		"making",
		"malformed",
		"malt",
		"mama",
		"mammal",
		"mammary",
		"mammogram",
		"manager",
		"managing",
		"manatee",
		"mandarin",
		"mandate",
		"mandatory",
		"mandolin",
		"manger",
		"mangle",
		"mango",
		"mangy",
		"manhandle",
		"manhole",
		"manhood",
		"manhunt",
		"manicotti",
		"manicure",
		"manifesto",
		"manila",
		"mankind",
		"manlike",
		"manliness",
		"manly",
		"manmade",
		"manned",
		"mannish",
		"manor",
		"manpower",
		"mantis",
		"mantra",
		"manual",
		"many",
		"map",
		"marathon",
		"marauding",
		"marbled",
		"marbles",
		"marbling",
		"march",
		"mardi",
		"margarine",
		"margarita",
		"margin",
		"marigold",
		"marina",
		"marine",
		"marital",
		"maritime",
		"marlin",
		"marmalade",
		"maroon",
		"married",
		"marrow",
		"marry",
		"marshland",
		"marshy",
		"marsupial",
		"marvelous",
		"marxism",
		"mascot",
		"masculine",
		"mashed",
		"mashing",
		"massager",
		"masses",
		"massive",
		"mastiff",
		"matador",
		"matchbook",
		"matchbox",
		"matcher",
		"matching",
		"matchless",
		"material",
		"maternal",
		"maternity",
		"math",
		"mating",
		"matriarch",
		"matrimony",
		"matrix",
		"matron",
		"matted",
		"matter",
		"maturely",
		"maturing",
		"maturity",
		"mauve",
		"maverick",
		"maximize",
		"maximum",
		"maybe",
		"mayday",
		"mayflower",
		"moaner",
		"moaning",
		"mobile",
		"mobility",
		"mobilize",
		"mobster",
		"mocha",
		"mocker",
		"mockup",
		"modified",
		"modify",
		"modular",
		"modulator",
		"module",
		"moisten",
		"moistness",
		"moisture",
		"molar",
		"molasses",
		"mold",
		"molecular",
		"molecule",
		"molehill",
		"mollusk",
		"mom",
		"monastery",
		"monday",
		"monetary",
		"monetize",
		"moneybags",
		"moneyless",
		"moneywise",
		"mongoose",
		"mongrel",
		"monitor",
		"monkhood",
		"monogamy",
		"monogram",
		"monologue",
		"monopoly",
		"monorail",
		"monotone",
		"monotype",
		"monoxide",
		"monsieur",
		"monsoon",
		"monstrous",
		"monthly",
		"monument",
		"moocher",
		"moodiness",
		"moody",
		"mooing",
		"moonbeam",
		"mooned",
		"moonlight",
		"moonlike",
		"moonlit",
		"moonrise",
		"moonscape",
		"moonshine",
		"moonstone",
		"moonwalk",
		"mop",
		"morale",
		"morality",
		"morally",
		"morbidity",
		"morbidly",
		"morphine",
		"morphing",
		"morse",
		"mortality",
		"mortally",
		"mortician",
		"mortified",
		"mortify",
		"mortuary",
		"mosaic",
		"mossy",
		"most",
		"mothball",
		"mothproof",
		"motion",
		"motivate",
		"motivator",
		"motive",
		"motocross",
		"motor",
		"motto",
		"mountable",
		"mountain",
		"mounted",
		"mounting",
		"mourner",
		"mournful",
		"mouse",
		"mousiness",
		"moustache",
		"mousy",
		"mouth",
		"movable",
		"move",
		"movie",
		"moving",
		"mower",
		"mowing",
		"much",
		"muck",
		"mud",
		"mug",
		"mulberry",
		"mulch",
		"mule",
		"mulled",
		"mullets",
		"multiple",
		"multiply",
		"multitask",
		"multitude",
		"mumble",
		"mumbling",
		"mumbo",
		"mummified",
		"mummify",
		"mummy",
		"mumps",
		"munchkin",
		"mundane",
		"municipal",
		"muppet",
		"mural",
		"murkiness",
		"murky",
		"murmuring",
		"muscular",
		"museum",
		"mushily",
		"mushiness",
		"mushroom",
		"mushy",
		"music",
		"musket",
		"muskiness",
		"musky",
		"mustang",
		"mustard",
		"muster",
		"mustiness",
		"musty",
		"mutable",
		"mutate",
		"mutation",
		"mute",
		"mutilated",
		"mutilator",
		"mutiny",
		"mutt",
		"mutual",
		"muzzle",
		"myself",
		"myspace",
		"mystified",
		"mystify",
		"myth",
		"nacho",
		"nag",
		"nail",
		"name",
		"naming",
		"nanny",
		"nanometer",
		"nape",
		"napkin",
		"napped",
		"napping",
		"nappy",
		"narrow",
		"nastily",
		"nastiness",
		"national",
		"native",
		"nativity",
		"natural",
		"nature",
		"naturist",
		"nautical",
		"navigate",
		"navigator",
		"navy",
		"nearby",
		"nearest",
		"nearly",
		"nearness",
		"neatly",
		"neatness",
		"nebula",
		"nebulizer",
		"nectar",
		"negate",
		"negation",
		"negative",
		"neglector",
		"negligee",
		"negligent",
		"negotiate",
		"nemeses",
		"nemesis",
		"neon",
		"nephew",
		"nerd",
		"nervous",
		"nervy",
		"nest",
		"net",
		"neurology",
		"neuron",
		"neurosis",
		"neurotic",
		"neuter",
		"neutron",
		"never",
		"next",
		"nibble",
		"nickname",
		"nicotine",
		"niece",
		"nifty",
		"nimble",
		"nimbly",
		"nineteen",
		"ninetieth",
		"ninja",
		"nintendo",
		"ninth",
		"nuclear",
		"nuclei",
		"nucleus",
		"nugget",
		"nullify",
		"number",
		"numbing",
		"numbly",
		"numbness",
		"numeral",
		"numerate",
		"numerator",
		"numeric",
		"numerous",
		"nuptials",
		"nursery",
		"nursing",
		"nurture",
		"nutcase",
		"nutlike",
		"nutmeg",
		"nutrient",
		"nutshell",
		"nuttiness",
		"nutty",
		"nuzzle",
		"nylon",
		"oaf",
		"oak",
		"oasis",
		"oat",
		"obedience",
		"obedient",
		"obituary",
		"object",
		"obligate",
		"obliged",
		"oblivion",
		"oblivious",
		"oblong",
		"obnoxious",
		"oboe",
		"obscure",
		"obscurity",
		"observant",
		"observer",
		"observing",
		"obsessed",
		"obsession",
		"obsessive",
		"obsolete",
		"obstacle",
		"obstinate",
		"obstruct",
		"obtain",
		"obtrusive",
		"obtuse",
		"obvious",
		"occultist",
		"occupancy",
		"occupant",
		"occupier",
		"occupy",
		"ocean",
		"ocelot",
		"octagon",
		"octane",
		"october",
		"octopus",
		"ogle",
		"oil",
		"oink",
		"ointment",
		"okay",
		"old",
		"olive",
		"olympics",
		"omega",
		"omen",
		"ominous",
		"omission",
		"omit",
		"omnivore",
		"onboard",
		"oncoming",
		"ongoing",
		"onion",
		"online",
		"onlooker",
		"only",
		"onscreen",
		"onset",
		"onshore",
		"onslaught",
		"onstage",
		"onto",
		"onward",
		"onyx",
		"oops",
		"ooze",
		"oozy",
		"opacity",
		"opal",
		"open",
		"operable",
		"operate",
		"operating",
		"operation",
		"operative",
		"operator",
		"opium",
		"opossum",
		"opponent",
		"oppose",
		"opposing",
		"opposite",
		"oppressed",
		"oppressor",
		"opt",
		"opulently",
		"osmosis",
		"other",
		"otter",
		"ouch",
		"ought",
		"ounce",
		"outage",
		"outback",
		"outbid",
		"outboard",
		"outbound",
		"outbreak",
		"outburst",
		"outcast",
		"outclass",
		"outcome",
		"outdated",
		"outdoors",
		"outer",
		"outfield",
		"outfit",
		"outflank",
		"outgoing",
		"outgrow",
		"outhouse",
		"outing",
		"outlast",
		"outlet",
		"outline",
		"outlook",
		"outlying",
		"outmatch",
		"outmost",
		"outnumber",
		"outplayed",
		"outpost",
		"outpour",
		"output",
		"outrage",
		"outrank",
		"outreach",
		"outright",
		"outscore",
		"outsell",
		"outshine",
		"outshoot",
		"outsider",
		"outskirts",
		"outsmart",
		"outsource",
		"outspoken",
		"outtakes",
		"outthink",
		"outward",
		"outweigh",
		"outwit",
		"oval",
		"ovary",
		"oven",
		"overact",
		"overall",
		"overarch",
		"overbid",
		"overbill",
		"overbite",
		"overblown",
		"overboard",
		"overbook",
		"overbuilt",
		"overcast",
		"overcoat",
		"overcome",
		"overcook",
		"overcrowd",
		"overdraft",
		"overdrawn",
		"overdress",
		"overdrive",
		"overdue",
		"overeager",
		"overeater",
		"overexert",
		"overfed",
		"overfeed",
		"overfill",
		"overflow",
		"overfull",
		"overgrown",
		"overhand",
		"overhang",
		"overhaul",
		"overhead",
		"overhear",
		"overheat",
		"overhung",
		"overjoyed",
		"overkill",
		"overlabor",
		"overlaid",
		"overlap",
		"overlay",
		"overload",
		"overlook",
		"overlord",
		"overlying",
		"overnight",
		"overpass",
		"overpay",
		"overplant",
		"overplay",
		"overpower",
		"overprice",
		"overrate",
		"overreach",
		"overreact",
		"override",
		"overripe",
		"overrule",
		"overrun",
		"overshoot",
		"overshot",
		"oversight",
		"oversized",
		"oversleep",
		"oversold",
		"overspend",
		"overstate",
		"overstay",
		"overstep",
		"overstock",
		"overstuff",
		"oversweet",
		"overtake",
		"overthrow",
		"overtime",
		"overtly",
		"overtone",
		"overture",
		"overturn",
		"overuse",
		"overvalue",
		"overview",
		"overwrite",
		"owl",
		"oxford",
		"oxidant",
		"oxidation",
		"oxidize",
		"oxidizing",
		"oxygen",
		"oxymoron",
		"oyster",
		"ozone",
		"paced",
		"pacemaker",
		"pacific",
		"pacifier",
		"pacifism",
		"pacifist",
		"pacify",
		"padded",
		"padding",
		"paddle",
		"paddling",
		"padlock",
		"pagan",
		"pager",
		"paging",
		"pajamas",
		"palace",
		"palatable",
		"palm",
		"palpable",
		"palpitate",
		"paltry",
		"pampered",
		"pamperer",
		"pampers",
		"pamphlet",
		"panama",
		"pancake",
		"pancreas",
		"panda",
		"pandemic",
		"pang",
		"panhandle",
		"panic",
		"panning",
		"panorama",
		"panoramic",
		"panther",
		"pantomime",
		"pantry",
		"pants",
		"pantyhose",
		"paparazzi",
		"papaya",
		"paper",
		"paprika",
		"papyrus",
		"parabola",
		"parachute",
		"parade",
		"paradox",
		"paragraph",
		"parakeet",
		"paralegal",
		"paralyses",
		"paralysis",
		"paralyze",
		"paramedic",
		"parameter",
		"paramount",
		"parasail",
		"parasite",
		"parasitic",
		"parcel",
		"parched",
		"parchment",
		"pardon",
		"parish",
		"parka",
		"parking",
		"parkway",
		"parlor",
		"parmesan",
		"parole",
		"parrot",
		"parsley",
		"parsnip",
		"partake",
		"parted",
		"parting",
		"partition",
		"partly",
		"partner",
		"partridge",
		"party",
		"passable",
		"passably",
		"passage",
		"passcode",
		"passenger",
		"passerby",
		"passing",
		"passion",
		"passive",
		"passivism",
		"passover",
		"passport",
		"password",
		"pasta",
		"pasted",
		"pastel",
		"pastime",
		"pastor",
		"pastrami",
		"pasture",
		"pasty",
		"patchwork",
		"patchy",
		"paternal",
		"paternity",
		"path",
		"patience",
		"patient",
		"patio",
		"patriarch",
		"patriot",
		"patrol",
		"patronage",
		"patronize",
		"pauper",
		"pavement",
		"paver",
		"pavestone",
		"pavilion",
		"paving",
		"pawing",
		"payable",
		"payback",
		"paycheck",
		"payday",
		"payee",
		"payer",
		"paying",
		"payment",
		"payphone",
		"payroll",
		"pebble",
		"pebbly",
		"pecan",
		"pectin",
		"peculiar",
		"peddling",
		"pediatric",
		"pedicure",
		"pedigree",
		"pedometer",
		"pegboard",
		"pelican",
		"pellet",
		"pelt",
		"pelvis",
		"penalize",
		"penalty",
		"pencil",
		"pendant",
		"pending",
		"penholder",
		"penknife",
		"pennant",
		"penniless",
		"penny",
		"penpal",
		"pension",
		"pentagon",
		"pentagram",
		"pep",
		"perceive",
		"percent",
		"perch",
		"percolate",
		"perennial",
		"perfected",
		"perfectly",
		"perfume",
		"periscope",
		"perish",
		"perjurer",
		"perjury",
		"perkiness",
		"perky",
		"perm",
		"peroxide",
		"perpetual",
		"perplexed",
		"persecute",
		"persevere",
		"persuaded",
		"persuader",
		"pesky",
		"peso",
		"pessimism",
		"pessimist",
		"pester",
		"pesticide",
		"petal",
		"petite",
		"petition",
		"petri",
		"petroleum",
		"petted",
		"petticoat",
		"pettiness",
		"petty",
		"petunia",
		"phantom",
		"phobia",
		"phoenix",
		"phonebook",
		"phoney",
		"phonics",
		"phoniness",
		"phony",
		"phosphate",
		"photo",
		"phrase",
		"phrasing",
		"placard",
		"placate",
		"placidly",
		"plank",
		"planner",
		"plant",
		"plasma",
		"plaster",
		"plastic",
		"plated",
		"platform",
		"plating",
		"platinum",
		"platonic",
		"platter",
		"platypus",
		"plausible",
		"plausibly",
		"playable",
		"playback",
		"player",
		"playful",
		"playgroup",
		"playhouse",
		"playing",
		"playlist",
		"playmaker",
		"playmate",
		"playoff",
		"playpen",
		"playroom",
		"playset",
		"plaything",
		"playtime",
		"plaza",
		"pleading",
		"pleat",
		"pledge",
		"plentiful",
		"plenty",
		"plethora",
		"plexiglas",
		"pliable",
		"plod",
		"plop",
		"plot",
		"plow",
		"ploy",
		"pluck",
		"plug",
		"plunder",
		"plunging",
		"plural",
		"plus",
		"plutonium",
		"plywood",
		"poach",
		"pod",
		"poem",
		"poet",
		"pogo",
		"pointed",
		"pointer",
		"pointing",
		"pointless",
		"pointy",
		"poise",
		"poison",
		"poker",
		"poking",
		"polar",
		"police",
		"policy",
		"polio",
		"polish",
		"politely",
		"polka",
		"polo",
		"polyester",
		"polygon",
		"polygraph",
		"polymer",
		"poncho",
		"pond",
		"pony",
		"popcorn",
		"pope",
		"poplar",
		"popper",
		"poppy",
		"popsicle",
		"populace",
		"popular",
		"populate",
		"porcupine",
		"pork",
		"porous",
		"porridge",
		"portable",
		"portal",
		"portfolio",
		"porthole",
		"portion",
		"portly",
		"portside",
		"poser",
		"posh",
		"posing",
		"possible",
		"possibly",
		"possum",
		"postage",
		"postal",
		"postbox",
		"postcard",
		"posted",
		"poster",
		"posting",
		"postnasal",
		"posture",
		"postwar",
		"pouch",
		"pounce",
		"pouncing",
		"pound",
		"pouring",
		"pout",
		"powdered",
		"powdering",
		"powdery",
		"power",
		"powwow",
		"pox",
		"praising",
		"prance",
		"prancing",
		"pranker",
		"prankish",
		"prankster",
		"prayer",
		"praying",
		"preacher",
		"preaching",
		"preachy",
		"preamble",
		"precinct",
		"precise",
		"precision",
		"precook",
		"precut",
		"predator",
		"predefine",
		"predict",
		"preface",
		"prefix",
		"preflight",
		"preformed",
		"pregame",
		"pregnancy",
		"pregnant",
		"preheated",
		"prelaunch",
		"prelaw",
		"prelude",
		"premiere",
		"premises",
		"premium",
		"prenatal",
		"preoccupy",
		"preorder",
		"prepaid",
		"prepay",
		"preplan",
		"preppy",
		"preschool",
		"prescribe",
		"preseason",
		"preset",
		"preshow",
		"president",
		"presoak",
		"press",
		"presume",
		"presuming",
		"preteen",
		"pretended",
		"pretender",
		"pretense",
		"pretext",
		"pretty",
		"pretzel",
		"prevail",
		"prevalent",
		"prevent",
		"preview",
		"previous",
		"prewar",
		"prewashed",
		"prideful",
		"pried",
		"primal",
		"primarily",
		"primary",
		"primate",
		"primer",
		"primp",
		"princess",
		"print",
		"prior",
		"prism",
		"prison",
		"prissy",
		"pristine",
		"privacy",
		"private",
		"privatize",
		"prize",
		"proactive",
		"probable",
		"probably",
		"probation",
		"probe",
		"probing",
		"probiotic",
		"problem",
		"procedure",
		"process",
		"proclaim",
		"procreate",
		"procurer",
		"prodigal",
		"prodigy",
		"produce",
		"product",
		"profane",
		"profanity",
		"professed",
		"professor",
		"profile",
		"profound",
		"profusely",
		"progeny",
		"prognosis",
		"program",
		"progress",
		"projector",
		"prologue",
		"prolonged",
		"promenade",
		"prominent",
		"promoter",
		"promotion",
		"prompter",
		"promptly",
		"prone",
		"prong",
		"pronounce",
		"pronto",
		"proofing",
		"proofread",
		"proofs",
		"propeller",
		"properly",
		"property",
		"proponent",
		"proposal",
		"propose",
		"props",
		"prorate",
		"protector",
		"protegee",
		"proton",
		"prototype",
		"protozoan",
		"protract",
		"protrude",
		"proud",
		"provable",
		"proved",
		"proven",
		"provided",
		"provider",
		"providing",
		"province",
		"proving",
		"provoke",
		"provoking",
		"provolone",
		"prowess",
		"prowler",
		"prowling",
		"proximity",
		"proxy",
		"prozac",
		"prude",
		"prudishly",
		"prune",
		"pruning",
		"pry",
		"psychic",
		"public",
		"publisher",
		"pucker",
		"pueblo",
		"pug",
		"pull",
		"pulmonary",
		"pulp",
		"pulsate",
		"pulse",
		"pulverize",
		"puma",
		"pumice",
		"pummel",
		"punch",
		"punctual",
		"punctuate",
		"punctured",
		"pungent",
		"punisher",
		"punk",
		"pupil",
		"puppet",
		"puppy",
		"purchase",
		"pureblood",
		"purebred",
		"purely",
		"pureness",
		"purgatory",
		"purge",
		"purging",
		"purifier",
		"purify",
		"purist",
		"puritan",
		"purity",
		"purple",
		"purplish",
		"purposely",
		"purr",
		"purse",
		"pursuable",
		"pursuant",
		"pursuit",
		"purveyor",
		"pushcart",
		"pushchair",
		"pusher",
		"pushiness",
		"pushing",
		"pushover",
		"pushpin",
		"pushup",
		"pushy",
		"putdown",
		"putt",
		"puzzle",
		"puzzling",
		"pyramid",
		"pyromania",
		"python",
		"quack",
		"quadrant",
		"quail",
		"quaintly",
		"quake",
		"quaking",
		"qualified",
		"qualifier",
		"qualify",
		"quality",
		"qualm",
		"quantum",
		"quarrel",
		"quarry",
		"quartered",
		"quarterly",
		"quarters",
		"quartet",
		"quench",
		"query",
		"quicken",
		"quickly",
		"quickness",
		"quicksand",
		"quickstep",
		"quiet",
		"quill",
		"quilt",
		"quintet",
		"quintuple",
		"quirk",
		"quit",
		"quiver",
		"quizzical",
		"quotable",
		"quotation",
		"quote",
		"rabid",
		"race",
		"racing",
		"racism",
		"rack",
		"racoon",
		"radar",
		"radial",
		"radiance",
		"radiantly",
		"radiated",
		"radiation",
		"radiator",
		"radio",
		"radish",
		"raffle",
		"raft",
		"rage",
		"ragged",
		"raging",
		"ragweed",
		"raider",
		"railcar",
		"railing",
		"railroad",
		"railway",
		"raisin",
		"rake",
		"raking",
		"rally",
		"ramble",
		"rambling",
		"ramp",
		"ramrod",
		"ranch",
		"rancidity",
		"random",
		"ranged",
		"ranger",
		"ranging",
		"ranked",
		"ranking",
		"ransack",
		"ranting",
		"rants",
		"rare",
		"rarity",
		"rascal",
		"rash",
		"rasping",
		"ravage",
		"raven",
		"ravine",
		"raving",
		"ravioli",
		"ravishing",
		"reabsorb",
		"reach",
		"reacquire",
		"reaction",
		"reactive",
		"reactor",
		"reaffirm",
		"ream",
		"reanalyze",
		"reappear",
		"reapply",
		"reappoint",
		"reapprove",
		"rearrange",
		"rearview",
		"reason",
		"reassign",
		"reassure",
		"reattach",
		"reawake",
		"rebalance",
		"rebate",
		"rebel",
		"rebirth",
		"reboot",
		"reborn",
		"rebound",
		"rebuff",
		"rebuild",
		"rebuilt",
		"reburial",
		"rebuttal",
		"recall",
		"recant",
		"recapture",
		"recast",
		"recede",
		"recent",
		"recess",
		"recharger",
		"recipient",
		"recital",
		"recite",
		"reckless",
		"reclaim",
		"recliner",
		"reclining",
		"recluse",
		"reclusive",
		"recognize",
		"recoil",
		"recollect",
		"recolor",
		"reconcile",
		"reconfirm",
		"reconvene",
		"recopy",
		"record",
		"recount",
		"recoup",
		"recovery",
		"recreate",
		"rectal",
		"rectangle",
		"rectified",
		"rectify",
		"recycled",
		"recycler",
		"recycling",
		"reemerge",
		"reenact",
		"reenter",
		"reentry",
		"reexamine",
		"referable",
		"referee",
		"reference",
		"refill",
		"refinance",
		"refined",
		"refinery",
		"refining",
		"refinish",
		"reflected",
		"reflector",
		"reflex",
		"reflux",
		"refocus",
		"refold",
		"reforest",
		"reformat",
		"reformed",
		"reformer",
		"reformist",
		"refract",
		"refrain",
		"refreeze",
		"refresh",
		"refried",
		"refueling",
		"refund",
		"refurbish",
		"refurnish",
		"refusal",
		"refuse",
		"refusing",
		"refutable",
		"refute",
		"regain",
		"regalia",
		"regally",
		"reggae",
		"regime",
		"region",
		"register",
		"registrar",
		"registry",
		"regress",
		"regretful",
		"regroup",
		"regular",
		"regulate",
		"regulator",
		"rehab",
		"reheat",
		"rehire",
		"rehydrate",
		"reimburse",
		"reissue",
		"reiterate",
		"rejoice",
		"rejoicing",
		"rejoin",
		"rekindle",
		"relapse",
		"relapsing",
		"relatable",
		"related",
		"relation",
		"relative",
		"relax",
		"relay",
		"relearn",
		"release",
		"relenting",
		"reliable",
		"reliably",
		"reliance",
		"reliant",
		"relic",
		"relieve",
		"relieving",
		"relight",
		"relish",
		"relive",
		"reload",
		"relocate",
		"relock",
		"reluctant",
		"rely",
		"remake",
		"remark",
		"remarry",
		"rematch",
		"remedial",
		"remedy",
		"remember",
		"reminder",
		"remindful",
		"remission",
		"remix",
		"remnant",
		"remodeler",
		"remold",
		"remorse",
		"remote",
		"removable",
		"removal",
		"removed",
		"remover",
		"removing",
		"rename",
		"renderer",
		"rendering",
		"rendition",
		"renegade",
		"renewable",
		"renewably",
		"renewal",
		"renewed",
		"renounce",
		"renovate",
		"renovator",
		"rentable",
		"rental",
		"rented",
		"renter",
		"reoccupy",
		"reoccur",
		"reopen",
		"reorder",
		"repackage",
		"repacking",
		"repaint",
		"repair",
		"repave",
		"repaying",
		"repayment",
		"repeal",
		"repeated",
		"repeater",
		"repent",
		"rephrase",
		"replace",
		"replay",
		"replica",
		"reply",
		"reporter",
		"repose",
		"repossess",
		"repost",
		"repressed",
		"reprimand",
		"reprint",
		"reprise",
		"reproach",
		"reprocess",
		"reproduce",
		"reprogram",
		"reps",
		"reptile",
		"reptilian",
		"repugnant",
		"repulsion",
		"repulsive",
		"repurpose",
		"reputable",
		"reputably",
		"request",
		"require",
		"requisite",
		"reroute",
		"rerun",
		"resale",
		"resample",
		"rescuer",
		"reseal",
		"research",
		"reselect",
		"reseller",
		"resemble",
		"resend",
		"resent",
		"reset",
		"reshape",
		"reshoot",
		"reshuffle",
		"residence",
		"residency",
		"resident",
		"residual",
		"residue",
		"resigned",
		"resilient",
		"resistant",
		"resisting",
		"resize",
		"resolute",
		"resolved",
		"resonant",
		"resonate",
		"resort",
		"resource",
		"respect",
		"resubmit",
		"result",
		"resume",
		"resupply",
		"resurface",
		"resurrect",
		"retail",
		"retainer",
		"retaining",
		"retake",
		"retaliate",
		"retention",
		"rethink",
		"retinal",
		"retired",
		"retiree",
		"retiring",
		"retold",
		"retool",
		"retorted",
		"retouch",
		"retrace",
		"retract",
		"retrain",
		"retread",
		"retreat",
		"retrial",
		"retrieval",
		"retriever",
		"retry",
		"return",
		"retying",
		"retype",
		"reunion",
		"reunite",
		"reusable",
		"reuse",
		"reveal",
		"reveler",
		"revenge",
		"revenue",
		"reverb",
		"revered",
		"reverence",
		"reverend",
		"reversal",
		"reverse",
		"reversing",
		"reversion",
		"revert",
		"revisable",
		"revise",
		"revision",
		"revisit",
		"revivable",
		"revival",
		"reviver",
		"reviving",
		"revocable",
		"revoke",
		"revolt",
		"revolver",
		"revolving",
		"reward",
		"rewash",
		"rewind",
		"rewire",
		"reword",
		"rework",
		"rewrap",
		"rewrite",
		"rhyme",
		"ribbon",
		"ribcage",
		"rice",
		"riches",
		"richly",
		"richness",
		"rickety",
		"ricotta",
		"riddance",
		"ridden",
		"ride",
		"riding",
		"rifling",
		"rift",
		"rigging",
		"rigid",
		"rigor",
		"rimless",
		"rimmed",
		"rind",
		"rink",
		"rinse",
		"rinsing",
		"riot",
		"ripcord",
		"ripeness",
		"ripening",
		"ripping",
		"ripple",
		"rippling",
		"riptide",
		"rise",
		"rising",
		"risk",
		"risotto",
		"ritalin",
		"ritzy",
		"rival",
		"riverbank",
		"riverbed",
		"riverboat",
		"riverside",
		"riveter",
		"riveting",
		"roamer",
		"roaming",
		"roast",
		"robbing",
		"robe",
		"robin",
		"robotics",
		"robust",
		"rockband",
		"rocker",
		"rocket",
		"rockfish",
		"rockiness",
		"rocking",
		"rocklike",
		"rockslide",
		"rockstar",
		"rocky",
		"rogue",
		"roman",
		"romp",
		"rope",
		"roping",
		"roster",
		"rosy",
		"rotten",
		"rotting",
		"rotunda",
		"roulette",
		"rounding",
		"roundish",
		"roundness",
		"roundup",
		"roundworm",
		"routine",
		"routing",
		"rover",
		"roving",
		"royal",
		"rubbed",
		"rubber",
		"rubbing",
		"rubble",
		"rubdown",
		"ruby",
		"ruckus",
		"rudder",
		"rug",
		"ruined",
		"rule",
		"rumble",
		"rumbling",
		"rummage",
		"rumor",
		"runaround",
		"rundown",
		"runner",
		"running",
		"runny",
		"runt",
		"runway",
		"rupture",
		"rural",
		"ruse",
		"rush",
		"rust",
		"rut",
		"sabbath",
		"sabotage",
		"sacrament",
		"sacred",
		"sacrifice",
		"sadden",
		"saddlebag",
		"saddled",
		"saddling",
		"sadly",
		"sadness",
		"safari",
		"safeguard",
		"safehouse",
		"safely",
		"safeness",
		"saffron",
		"saga",
		"sage",
		"sagging",
		"saggy",
		"said",
		"saint",
		"sake",
		"salad",
		"salami",
		"salaried",
		"salary",
		"saline",
		"salon",
		"saloon",
		"salsa",
		"salt",
		"salutary",
		"salute",
		"salvage",
		"salvaging",
		"salvation",
		"same",
		"sample",
		"sampling",
		"sanction",
		"sanctity",
		"sanctuary",
		"sandal",
		"sandbag",
		"sandbank",
		"sandbar",
		"sandblast",
		"sandbox",
		"sanded",
		"sandfish",
		"sanding",
		"sandlot",
		"sandpaper",
		"sandpit",
		"sandstone",
		"sandstorm",
		"sandworm",
		"sandy",
		"sanitary",
		"sanitizer",
		"sank",
		"santa",
		"sapling",
		"sappiness",
		"sappy",
		"sarcasm",
		"sarcastic",
		"sardine",
		"sash",
		"sasquatch",
		"sassy",
		"satchel",
		"satiable",
		"satin",
		"satirical",
		"satisfied",
		"satisfy",
		"saturate",
		"saturday",
		"sauciness",
		"saucy",
		"sauna",
		"savage",
		"savanna",
		"saved",
		"savings",
		"savior",
		"savor",
		"saxophone",
		"say",
		"scabbed",
		"scabby",
		"scalded",
		"scalding",
		"scale",
		"scaling",
		"scallion",
		"scallop",
		"scalping",
		"scam",
		"scandal",
		"scanner",
		"scanning",
		"scant",
		"scapegoat",
		"scarce",
		"scarcity",
		"scarecrow",
		"scared",
		"scarf",
		"scarily",
		"scariness",
		"scarring",
		"scary",
		"scavenger",
		"scenic",
		"schedule",
		"schematic",
		"scheme",
		"scheming",
		"schilling",
		"schnapps",
		"scholar",
		"science",
		"scientist",
		"scion",
		"scoff",
		"scolding",
		"scone",
		"scoop",
		"scooter",
		"scope",
		"scorch",
		"scorebook",
		"scorecard",
		"scored",
		"scoreless",
		"scorer",
		"scoring",
		"scorn",
		"scorpion",
		"scotch",
		"scoundrel",
		"scoured",
		"scouring",
		"scouting",
		"scouts",
		"scowling",
		"scrabble",
		"scraggly",
		"scrambled",
		"scrambler",
		"scrap",
		"scratch",
		"scrawny",
		"screen",
		"scribble",
		"scribe",
		"scribing",
		"scrimmage",
		"script",
		"scroll",
		"scrooge",
		"scrounger",
		"scrubbed",
		"scrubber",
		"scruffy",
		"scrunch",
		"scrutiny",
		"scuba",
		"scuff",
		"sculptor",
		"sculpture",
		"scurvy",
		"scuttle",
		"secluded",
		"secluding",
		"seclusion",
		"second",
		"secrecy",
		"secret",
		"sectional",
		"sector",
		"secular",
		"securely",
		"security",
		"sedan",
		"sedate",
		"sedation",
		"sedative",
		"sediment",
		"seduce",
		"seducing",
		"segment",
		"seismic",
		"seizing",
		"seldom",
		"selected",
		"selection",
		"selective",
		"selector",
		"self",
		"seltzer",
		"semantic",
		"semester",
		"semicolon",
		"semifinal",
		"seminar",
		"semisoft",
		"semisweet",
		"senate",
		"senator",
		"send",
		"senior",
		"senorita",
		"sensation",
		"sensitive",
		"sensitize",
		"sensually",
		"sensuous",
		"sepia",
		"september",
		"septic",
		"septum",
		"sequel",
		"sequence",
		"sequester",
		"series",
		"sermon",
		"serotonin",
		"serpent",
		"serrated",
		"serve",
		"service",
		"serving",
		"sesame",
		"sessions",
		"setback",
		"setting",
		"settle",
		"settling",
		"setup",
		"sevenfold",
		"seventeen",
		"seventh",
		"seventy",
		"severity",
		"shabby",
		"shack",
		"shaded",
		"shadily",
		"shadiness",
		"shading",
		"shadow",
		"shady",
		"shaft",
		"shakable",
		"shakily",
		"shakiness",
		"shaking",
		"shaky",
		"shale",
		"shallot",
		"shallow",
		"shame",
		"shampoo",
		"shamrock",
		"shank",
		"shanty",
		"shape",
		"shaping",
		"share",
		"sharpener",
		"sharper",
		"sharpie",
		"sharply",
		"sharpness",
		"shawl",
		"sheath",
		"shed",
		"sheep",
		"sheet",
		"shelf",
		"shell",
		"shelter",
		"shelve",
		"shelving",
		"sherry",
		"shield",
		"shifter",
		"shifting",
		"shiftless",
		"shifty",
		"shimmer",
		"shimmy",
		"shindig",
		"shine",
		"shingle",
		"shininess",
		"shining",
		"shiny",
		"ship",
		"shirt",
		"shivering",
		"shock",
		"shone",
		"shoplift",
		"shopper",
		"shopping",
		"shoptalk",
		"shore",
		"shortage",
		"shortcake",
		"shortcut",
		"shorten",
		"shorter",
		"shorthand",
		"shortlist",
		"shortly",
		"shortness",
		"shorts",
		"shortwave",
		"shorty",
		"shout",
		"shove",
		"showbiz",
		"showcase",
		"showdown",
		"shower",
		"showgirl",
		"showing",
		"showman",
		"shown",
		"showoff",
		"showpiece",
		"showplace",
		"showroom",
		"showy",
		"shrank",
		"shrapnel",
		"shredder",
		"shredding",
		"shrewdly",
		"shriek",
		"shrill",
		"shrimp",
		"shrine",
		"shrink",
		"shrivel",
		"shrouded",
		"shrubbery",
		"shrubs",
		"shrug",
		"shrunk",
		"shucking",
		"shudder",
		"shuffle",
		"shuffling",
		"shun",
		"shush",
		"shut",
		"shy",
		"siamese",
		"siberian",
		"sibling",
		"siding",
		"sierra",
		"siesta",
		"sift",
		"sighing",
		"silenced",
		"silencer",
		"silent",
		"silica",
		"silicon",
		"silk",
		"silliness",
		"silly",
		"silo",
		"silt",
		"silver",
		"similarly",
		"simile",
		"simmering",
		"simple",
		"simplify",
		"simply",
		"sincere",
		"sincerity",
		"singer",
		"singing",
		"single",
		"singular",
		"sinister",
		"sinless",
		"sinner",
		"sinuous",
		"sip",
		"siren",
		"sister",
		"sitcom",
		"sitter",
		"sitting",
		"situated",
		"situation",
		"sixfold",
		"sixteen",
		"sixth",
		"sixties",
		"sixtieth",
		"sixtyfold",
		"sizable",
		"sizably",
		"size",
		"sizing",
		"sizzle",
		"sizzling",
		"skater",
		"skating",
		"skedaddle",
		"skeletal",
		"skeleton",
		"skeptic",
		"sketch",
		"skewed",
		"skewer",
		"skid",
		"skied",
		"skier",
		"skies",
		"skiing",
		"skilled",
		"skillet",
		"skillful",
		"skimmed",
		"skimmer",
		"skimming",
		"skimpily",
		"skincare",
		"skinhead",
		"skinless",
		"skinning",
		"skinny",
		"skintight",
		"skipper",
		"skipping",
		"skirmish",
		"skirt",
		"skittle",
		"skydiver",
		"skylight",
		"skyline",
		"skype",
		"skyrocket",
		"skyward",
		"slab",
		"slacked",
		"slacker",
		"slacking",
		"slackness",
		"slacks",
		"slain",
		"slam",
		"slander",
		"slang",
		"slapping",
		"slapstick",
		"slashed",
		"slashing",
		"slate",
		"slather",
		"slaw",
		"sled",
		"sleek",
		"sleep",
		"sleet",
		"sleeve",
		"slept",
		"sliceable",
		"sliced",
		"slicer",
		"slicing",
		"slick",
		"slider",
		"slideshow",
		"sliding",
		"slighted",
		"slighting",
		"slightly",
		"slimness",
		"slimy",
		"slinging",
		"slingshot",
		"slinky",
		"slip",
		"slit",
		"sliver",
		"slobbery",
		"slogan",
		"sloped",
		"sloping",
		"sloppily",
		"sloppy",
		"slot",
		"slouching",
		"slouchy",
		"sludge",
		"slug",
		"slum",
		"slurp",
		"slush",
		"sly",
		"small",
		"smartly",
		"smartness",
		"smasher",
		"smashing",
		"smashup",
		"smell",
		"smelting",
		"smile",
		"smilingly",
		"smirk",
		"smite",
		"smith",
		"smitten",
		"smock",
		"smog",
		"smoked",
		"smokeless",
		"smokiness",
		"smoking",
		"smoky",
		"smolder",
		"smooth",
		"smother",
		"smudge",
		"smudgy",
		"smuggler",
		"smuggling",
		"smugly",
		"smugness",
		"snack",
		"snagged",
		"snaking",
		"snap",
		"snare",
		"snarl",
		"snazzy",
		"sneak",
		"sneer",
		"sneeze",
		"sneezing",
		"snide",
		"sniff",
		"snippet",
		"snipping",
		"snitch",
		"snooper",
		"snooze",
		"snore",
		"snoring",
		"snorkel",
		"snort",
		"snout",
		"snowbird",
		"snowboard",
		"snowbound",
		"snowcap",
		"snowdrift",
		"snowdrop",
		"snowfall",
		"snowfield",
		"snowflake",
		"snowiness",
		"snowless",
		"snowman",
		"snowplow",
		"snowshoe",
		"snowstorm",
		"snowsuit",
		"snowy",
		"snub",
		"snuff",
		"snuggle",
		"snugly",
		"snugness",
		"speak",
		"spearfish",
		"spearhead",
		"spearman",
		"spearmint",
		"species",
		"specimen",
		"specked",
		"speckled",
		"specks",
		"spectacle",
		"spectator",
		"spectrum",
		"speculate",
		"speech",
		"speed",
		"spellbind",
		"speller",
		"spelling",
		"spendable",
		"spender",
		"spending",
		"spent",
		"spew",
		"sphere",
		"spherical",
		"sphinx",
		"spider",
		"spied",
		"spiffy",
		"spill",
		"spilt",
		"spinach",
		"spinal",
		"spindle",
		"spinner",
		"spinning",
		"spinout",
		"spinster",
		"spiny",
		"spiral",
		"spirited",
		"spiritism",
		"spirits",
		"spiritual",
		"splashed",
		"splashing",
		"splashy",
		"splatter",
		"spleen",
		"splendid",
		"splendor",
		"splice",
		"splicing",
		"splinter",
		"splotchy",
		"splurge",
		"spoilage",
		"spoiled",
		"spoiler",
		"spoiling",
		"spoils",
		"spoken",
		"spokesman",
		"sponge",
		"spongy",
		"sponsor",
		"spoof",
		"spookily",
		"spooky",
		"spool",
		"spoon",
		"spore",
		"sporting",
		"sports",
		"sporty",
		"spotless",
		"spotlight",
		"spotted",
		"spotter",
		"spotting",
		"spotty",
		"spousal",
		"spouse",
		"spout",
		"sprain",
		"sprang",
		"sprawl",
		"spray",
		"spree",
		"sprig",
		"spring",
		"sprinkled",
		"sprinkler",
		"sprint",
		"sprite",
		"sprout",
		"spruce",
		"sprung",
		"spry",
		"spud",
		"spur",
		"sputter",
		"spyglass",
		"squabble",
		"squad",
		"squall",
		"squander",
		"squash",
		"squatted",
		"squatter",
		"squatting",
		"squeak",
		"squealer",
		"squealing",
		"squeamish",
		"squeegee",
		"squeeze",
		"squeezing",
		"squid",
		"squiggle",
		"squiggly",
		"squint",
		"squire",
		"squirt",
		"squishier",
		"squishy",
		"stability",
		"stabilize",
		"stable",
		"stack",
		"stadium",
		"staff",
		"stage",
		"staging",
		"stagnant",
		"stagnate",
		"stainable",
		"stained",
		"staining",
		"stainless",
		"stalemate",
		"staleness",
		"stalling",
		"stallion",
		"stamina",
		"stammer",
		"stamp",
		"stand",
		"stank",
		"staple",
		"stapling",
		"starboard",
		"starch",
		"stardom",
		"stardust",
		"starfish",
		"stargazer",
		"staring",
		"stark",
		"starless",
		"starlet",
		"starlight",
		"starlit",
		"starring",
		"starry",
		"starship",
		"starter",
		"starting",
		"startle",
		"startling",
		"startup",
		"starved",
		"starving",
		"stash",
		"state",
		"static",
		"statistic",
		"statue",
		"stature",
		"status",
		"statute",
		"statutory",
		"staunch",
		"stays",
		"steadfast",
		"steadier",
		"steadily",
		"steadying",
		"steam",
		"steed",
		"steep",
		"steerable",
		"steering",
		"steersman",
		"stegosaur",
		"stellar",
		"stem",
		"stench",
		"stencil",
		"step",
		"stereo",
		"sterile",
		"sterility",
		"sterilize",
		"sterling",
		"sternness",
		"sternum",
		"stew",
		"stick",
		"stiffen",
		"stiffly",
		"stiffness",
		"stifle",
		"stifling",
		"stillness",
		"stilt",
		"stimulant",
		"stimulate",
		"stimuli",
		"stimulus",
		"stinger",
		"stingily",
		"stinging",
		"stingray",
		"stingy",
		"stinking",
		"stinky",
		"stipend",
		"stipulate",
		"stir",
		"stitch",
		"stock",
		"stoic",
		"stoke",
		"stole",
		"stomp",
		"stonewall",
		"stoneware",
		"stonework",
		"stoning",
		"stony",
		"stood",
		"stooge",
		"stool",
		"stoop",
		"stoplight",
		"stoppable",
		"stoppage",
		"stopped",
		"stopper",
		"stopping",
		"stopwatch",
		"storable",
		"storage",
		"storeroom",
		"storewide",
		"storm",
		"stout",
		"stove",
		"stowaway",
		"stowing",
		"straddle",
		"straggler",
		"strained",
		"strainer",
		"straining",
		"strangely",
		"stranger",
		"strangle",
		"strategic",
		"strategy",
		"stratus",
		"straw",
		"stray",
		"streak",
		"stream",
		"street",
		"strength",
		"strenuous",
		"strep",
		"stress",
		"stretch",
		"strewn",
		"stricken",
		"strict",
		"stride",
		"strife",
		"strike",
		"striking",
		"strive",
		"striving",
		"strobe",
		"strode",
		"stroller",
		"strongbox",
		"strongly",
		"strongman",
		"struck",
		"structure",
		"strudel",
		"struggle",
		"strum",
		"strung",
		"strut",
		"stubbed",
		"stubble",
		"stubbly",
		"stubborn",
		"stucco",
		"stuck",
		"student",
		"studied",
		"studio",
		"study",
		"stuffed",
		"stuffing",
		"stuffy",
		"stumble",
		"stumbling",
		"stump",
		"stung",
		"stunned",
		"stunner",
		"stunning",
		"stunt",
		"stupor",
		"sturdily",
		"sturdy",
		"styling",
		"stylishly",
		"stylist",
		"stylized",
		"stylus",
		"suave",
		"subarctic",
		"subatomic",
		"subdivide",
		"subdued",
		"subduing",
		"subfloor",
		"subgroup",
		"subheader",
		"subject",
		"sublease",
		"sublet",
		"sublevel",
		"sublime",
		"submarine",
		"submerge",
		"submersed",
		"submitter",
		"subpanel",
		"subpar",
		"subplot",
		"subprime",
		"subscribe",
		"subscript",
		"subsector",
		"subside",
		"subsiding",
		"subsidize",
		"subsidy",
		"subsoil",
		"subsonic",
		"substance",
		"subsystem",
		"subtext",
		"subtitle",
		"subtly",
		"subtotal",
		"subtract",
		"subtype",
		"suburb",
		"subway",
		"subwoofer",
		"subzero",
		"succulent",
		"such",
		"suction",
		"sudden",
		"sudoku",
		"suds",
		"sufferer",
		"suffering",
		"suffice",
		"suffix",
		"suffocate",
		"suffrage",
		"sugar",
		"suggest",
		"suing",
		"suitable",
		"suitably",
		"suitcase",
		"suitor",
		"sulfate",
		"sulfide",
		"sulfite",
		"sulfur",
		"sulk",
		"sullen",
		"sulphate",
		"sulphuric",
		"sultry",
		"superbowl",
		"superglue",
		"superhero",
		"superior",
		"superjet",
		"superman",
		"supermom",
		"supernova",
		"supervise",
		"supper",
		"supplier",
		"supply",
		"support",
		"supremacy",
		"supreme",
		"surcharge",
		"surely",
		"sureness",
		"surface",
		"surfacing",
		"surfboard",
		"surfer",
		"surgery",
		"surgical",
		"surging",
		"surname",
		"surpass",
		"surplus",
		"surprise",
		"surreal",
		"surrender",
		"surrogate",
		"surround",
		"survey",
		"survival",
		"survive",
		"surviving",
		"survivor",
		"sushi",
		"suspect",
		"suspend",
		"suspense",
		"sustained",
		"sustainer",
		"swab",
		"swaddling",
		"swagger",
		"swampland",
		"swan",
		"swapping",
		"swarm",
		"sway",
		"swear",
		"sweat",
		"sweep",
		"swell",
		"swept",
		"swerve",
		"swifter",
		"swiftly",
		"swiftness",
		"swimmable",
		"swimmer",
		"swimming",
		"swimsuit",
		"swimwear",
		"swinger",
		"swinging",
		"swipe",
		"swirl",
		"switch",
		"swivel",
		"swizzle",
		"swooned",
		"swoop",
		"swoosh",
		"swore",
		"sworn",
		"swung",
		"sycamore",
		"sympathy",
		"symphonic",
		"symphony",
		"symptom",
		"synapse",
		"syndrome",
		"synergy",
		"synopses",
		"synopsis",
		"synthesis",
		"synthetic",
		"syrup",
		"system",
		"t-shirt",
		"tabasco",
		"tabby",
		"tableful",
		"tables",
		"tablet",
		"tableware",
		"tabloid",
		"tackiness",
		"tacking",
		"tackle",
		"tackling",
		"tacky",
		"taco",
		"tactful",
		"tactical",
		"tactics",
		"tactile",
		"tactless",
		"tadpole",
		"taekwondo",
		"tag",
		"tainted",
		"take",
		"taking",
		"talcum",
		"talisman",
		"tall",
		"talon",
		"tamale",
		"tameness",
		"tamer",
		"tamper",
		"tank",
		"tanned",
		"tannery",
		"tanning",
		"tantrum",
		"tapeless",
		"tapered",
		"tapering",
		"tapestry",
		"tapioca",
		"tapping",
		"taps",
		"tarantula",
		"target",
		"tarmac",
		"tarnish",
		"tarot",
		"tartar",
		"tartly",
		"tartness",
		"task",
		"tassel",
		"taste",
		"tastiness",
		"tasting",
		"tasty",
		"tattered",
		"tattle",
		"tattling",
		"tattoo",
		"taunt",
		"tavern",
		"thank",
		"that",
		"thaw",
		"theater",
		"theatrics",
		"thee",
		"theft",
		"theme",
		"theology",
		"theorize",
		"thermal",
		"thermos",
		"thesaurus",
		"these",
		"thesis",
		"thespian",
		"thicken",
		"thicket",
		"thickness",
		"thieving",
		"thievish",
		"thigh",
		"thimble",
		"thing",
		"think",
		"thinly",
		"thinner",
		"thinness",
		"thinning",
		"thirstily",
		"thirsting",
		"thirsty",
		"thirteen",
		"thirty",
		"thong",
		"thorn",
		"those",
		"thousand",
		"thrash",
		"thread",
		"threaten",
		"threefold",
		"thrift",
		"thrill",
		"thrive",
		"thriving",
		"throat",
		"throbbing",
		"throng",
		"throttle",
		"throwaway",
		"throwback",
		"thrower",
		"throwing",
		"thud",
		"thumb",
		"thumping",
		"thursday",
		"thus",
		"thwarting",
		"thyself",
		"tiara",
		"tibia",
		"tidal",
		"tidbit",
		"tidiness",
		"tidings",
		"tidy",
		"tiger",
		"tighten",
		"tightly",
		"tightness",
		"tightrope",
		"tightwad",
		"tigress",
		"tile",
		"tiling",
		"till",
		"tilt",
		"timid",
		"timing",
		"timothy",
		"tinderbox",
		"tinfoil",
		"tingle",
		"tingling",
		"tingly",
		"tinker",
		"tinkling",
		"tinsel",
		"tinsmith",
		"tint",
		"tinwork",
		"tiny",
		"tipoff",
		"tipped",
		"tipper",
		"tipping",
		"tiptoeing",
		"tiptop",
		"tiring",
		"tissue",
		"trace",
		"tracing",
		"track",
		"traction",
		"tractor",
		"trade",
		"trading",
		"tradition",
		"traffic",
		"tragedy",
		"trailing",
		"trailside",
		"train",
		"traitor",
		"trance",
		"tranquil",
		"transfer",
		"transform",
		"translate",
		"transpire",
		"transport",
		"transpose",
		"trapdoor",
		"trapeze",
		"trapezoid",
		"trapped",
		"trapper",
		"trapping",
		"traps",
		"trash",
		"travel",
		"traverse",
		"travesty",
		"tray",
		"treachery",
		"treading",
		"treadmill",
		"treason",
		"treat",
		"treble",
		"tree",
		"trekker",
		"tremble",
		"trembling",
		"tremor",
		"trench",
		"trend",
		"trespass",
		"triage",
		"trial",
		"triangle",
		"tribesman",
		"tribunal",
		"tribune",
		"tributary",
		"tribute",
		"triceps",
		"trickery",
		"trickily",
		"tricking",
		"trickle",
		"trickster",
		"tricky",
		"tricolor",
		"tricycle",
		"trident",
		"tried",
		"trifle",
		"trifocals",
		"trillion",
		"trilogy",
		"trimester",
		"trimmer",
		"trimming",
		"trimness",
		"trinity",
		"trio",
		"tripod",
		"tripping",
		"triumph",
		"trivial",
		"trodden",
		"trolling",
		"trombone",
		"trophy",
		"tropical",
		"tropics",
		"trouble",
		"troubling",
		"trough",
		"trousers",
		"trout",
		"trowel",
		"truce",
		"truck",
		"truffle",
		"trump",
		"trunks",
		"trustable",
		"trustee",
		"trustful",
		"trusting",
		"trustless",
		"truth",
		"try",
		"tubby",
		"tubeless",
		"tubular",
		"tucking",
		"tuesday",
		"tug",
		"tuition",
		"tulip",
		"tumble",
		"tumbling",
		"tummy",
		"turban",
		"turbine",
		"turbofan",
		"turbojet",
		"turbulent",
		"turf",
		"turkey",
		"turmoil",
		"turret",
		"turtle",
		"tusk",
		"tutor",
		"tutu",
		"tux",
		"tweak",
		"tweed",
		"tweet",
		"tweezers",
		"twelve",
		"twentieth",
		"twenty",
		"twerp",
		"twice",
		"twiddle",
		"twiddling",
		"twig",
		"twilight",
		"twine",
		"twins",
		"twirl",
		"twistable",
		"twisted",
		"twister",
		"twisting",
		"twisty",
		"twitch",
		"twitter",
		"tycoon",
		"tying",
		"tyke",
		"udder",
		"ultimate",
		"ultimatum",
		"ultra",
		"umbilical",
		"umbrella",
		"umpire",
		"unabashed",
		"unable",
		"unadorned",
		"unadvised",
		"unafraid",
		"unaired",
		"unaligned",
		"unaltered",
		"unarmored",
		"unashamed",
		"unaudited",
		"unawake",
		"unaware",
		"unbaked",
		"unbalance",
		"unbeaten",
		"unbend",
		"unbent",
		"unbiased",
		"unbitten",
		"unblended",
		"unblessed",
		"unblock",
		"unbolted",
		"unbounded",
		"unboxed",
		"unbraided",
		"unbridle",
		"unbroken",
		"unbuckled",
		"unbundle",
		"unburned",
		"unbutton",
		"uncanny",
		"uncapped",
		"uncaring",
		"uncertain",
		"unchain",
		"unchanged",
		"uncharted",
		"uncheck",
		"uncivil",
		"unclad",
		"unclaimed",
		"unclamped",
		"unclasp",
		"uncle",
		"unclip",
		"uncloak",
		"unclog",
		"unclothed",
		"uncoated",
		"uncoiled",
		"uncolored",
		"uncombed",
		"uncommon",
		"uncooked",
		"uncork",
		"uncorrupt",
		"uncounted",
		"uncouple",
		"uncouth",
		"uncover",
		"uncross",
		"uncrown",
		"uncrushed",
		"uncured",
		"uncurious",
		"uncurled",
		"uncut",
		"undamaged",
		"undated",
		"undaunted",
		"undead",
		"undecided",
		"undefined",
		"underage",
		"underarm",
		"undercoat",
		"undercook",
		"undercut",
		"underdog",
		"underdone",
		"underfed",
		"underfeed",
		"underfoot",
		"undergo",
		"undergrad",
		"underhand",
		"underline",
		"underling",
		"undermine",
		"undermost",
		"underpaid",
		"underpass",
		"underpay",
		"underrate",
		"undertake",
		"undertone",
		"undertook",
		"undertow",
		"underuse",
		"underwear",
		"underwent",
		"underwire",
		"undesired",
		"undiluted",
		"undivided",
		"undocked",
		"undoing",
		"undone",
		"undrafted",
		"undress",
		"undrilled",
		"undusted",
		"undying",
		"unearned",
		"unearth",
		"unease",
		"uneasily",
		"uneasy",
		"uneatable",
		"uneaten",
		"unedited",
		"unelected",
		"unending",
		"unengaged",
		"unenvied",
		"unequal",
		"unethical",
		"uneven",
		"unexpired",
		"unexposed",
		"unfailing",
		"unfair",
		"unfasten",
		"unfazed",
		"unfeeling",
		"unfiled",
		"unfilled",
		"unfitted",
		"unfitting",
		"unfixable",
		"unfixed",
		"unflawed",
		"unfocused",
		"unfold",
		"unfounded",
		"unframed",
		"unfreeze",
		"unfrosted",
		"unfrozen",
		"unfunded",
		"unglazed",
		"ungloved",
		"unglue",
		"ungodly",
		"ungraded",
		"ungreased",
		"unguarded",
		"unguided",
		"unhappily",
		"unhappy",
		"unharmed",
		"unhealthy",
		"unheard",
		"unhearing",
		"unheated",
		"unhelpful",
		"unhidden",
		"unhinge",
		"unhitched",
		"unholy",
		"unhook",
		"unicorn",
		"unicycle",
		"unified",
		"unifier",
		"uniformed",
		"uniformly",
		"unify",
		"unimpeded",
		"uninjured",
		"uninstall",
		"uninsured",
		"uninvited",
		"union",
		"uniquely",
		"unisexual",
		"unison",
		"unissued",
		"unit",
		"universal",
		"universe",
		"unjustly",
		"unkempt",
		"unkind",
		"unknotted",
		"unknowing",
		"unknown",
		"unlaced",
		"unlatch",
		"unlawful",
		"unleaded",
		"unlearned",
		"unleash",
		"unless",
		"unleveled",
		"unlighted",
		"unlikable",
		"unlimited",
		"unlined",
		"unlinked",
		"unlisted",
		"unlit",
		"unlivable",
		"unloaded",
		"unloader",
		"unlocked",
		"unlocking",
		"unlovable",
		"unloved",
		"unlovely",
		"unloving",
		"unluckily",
		"unlucky",
		"unmade",
		"unmanaged",
		"unmanned",
		"unmapped",
		"unmarked",
		"unmasked",
		"unmasking",
		"unmatched",
		"unmindful",
		"unmixable",
		"unmixed",
		"unmolded",
		"unmoral",
		"unmovable",
		"unmoved",
		"unmoving",
		"unnamable",
		"unnamed",
		"unnatural",
		"unneeded",
		"unnerve",
		"unnerving",
		"unnoticed",
		"unopened",
		"unopposed",
		"unpack",
		"unpadded",
		"unpaid",
		"unpainted",
		"unpaired",
		"unpaved",
		"unpeeled",
		"unpicked",
		"unpiloted",
		"unpinned",
		"unplanned",
		"unplanted",
		"unpleased",
		"unpledged",
		"unplowed",
		"unplug",
		"unpopular",
		"unproven",
		"unquote",
		"unranked",
		"unrated",
		"unraveled",
		"unreached",
		"unread",
		"unreal",
		"unreeling",
		"unrefined",
		"unrelated",
		"unrented",
		"unrest",
		"unretired",
		"unrevised",
		"unrigged",
		"unripe",
		"unrivaled",
		"unroasted",
		"unrobed",
		"unroll",
		"unruffled",
		"unruly",
		"unrushed",
		"unsaddle",
		"unsafe",
		"unsaid",
		"unsalted",
		"unsaved",
		"unsavory",
		"unscathed",
		"unscented",
		"unscrew",
		"unsealed",
		"unseated",
		"unsecured",
		"unseeing",
		"unseemly",
		"unseen",
		"unselect",
		"unselfish",
		"unsent",
		"unsettled",
		"unshackle",
		"unshaken",
		"unshaved",
		"unshaven",
		"unsheathe",
		"unshipped",
		"unsightly",
		"unsigned",
		"unskilled",
		"unsliced",
		"unsmooth",
		"unsnap",
		"unsocial",
		"unsoiled",
		"unsold",
		"unsolved",
		"unsorted",
		"unspoiled",
		"unspoken",
		"unstable",
		"unstaffed",
		"unstamped",
		"unsteady",
		"unsterile",
		"unstirred",
		"unstitch",
		"unstopped",
		"unstuck",
		"unstuffed",
		"unstylish",
		"unsubtle",
		"unsubtly",
		"unsuited",
		"unsure",
		"unsworn",
		"untagged",
		"untainted",
		"untaken",
		"untamed",
		"untangled",
		"untapped",
		"untaxed",
		"unthawed",
		"unthread",
		"untidy",
		"untie",
		"until",
		"untimed",
		"untimely",
		"untitled",
		"untoasted",
		"untold",
		"untouched",
		"untracked",
		"untrained",
		"untreated",
		"untried",
		"untrimmed",
		"untrue",
		"untruth",
		"unturned",
		"untwist",
		"untying",
		"unusable",
		"unused",
		"unusual",
		"unvalued",
		"unvaried",
		"unvarying",
		"unveiled",
		"unveiling",
		"unvented",
		"unviable",
		"unvisited",
		"unvocal",
		"unwanted",
		"unwarlike",
		"unwary",
		"unwashed",
		"unwatched",
		"unweave",
		"unwed",
		"unwelcome",
		"unwell",
		"unwieldy",
		"unwilling",
		"unwind",
		"unwired",
		"unwitting",
		"unwomanly",
		"unworldly",
		"unworn",
		"unworried",
		"unworthy",
		"unwound",
		"unwoven",
		"unwrapped",
		"unwritten",
		"unzip",
		"upbeat",
		"upchuck",
		"upcoming",
		"upcountry",
		"update",
		"upfront",
		"upgrade",
		"upheaval",
		"upheld",
		"uphill",
		"uphold",
		"uplifted",
		"uplifting",
		"upload",
		"upon",
		"upper",
		"upright",
		"uprising",
		"upriver",
		"uproar",
		"uproot",
		"upscale",
		"upside",
		"upstage",
		"upstairs",
		"upstart",
		"upstate",
		"upstream",
		"upstroke",
		"upswing",
		"uptake",
		"uptight",
		"uptown",
		"upturned",
		"upward",
		"upwind",
		"uranium",
		"urban",
		"urchin",
		"urethane",
		"urgency",
		"urgent",
		"urging",
		"urologist",
		"urology",
		"usable",
		"usage",
		"useable",
		"used",
		"uselessly",
		"user",
		"usher",
		"usual",
		"utensil",
		"utility",
		"utilize",
		"utmost",
		"utopia",
		"utter",
		"vacancy",
		"vacant",
		"vacate",
		"vacation",
		"vagabond",
		"vagrancy",
		"vagrantly",
		"vaguely",
		"vagueness",
		"valiant",
		"valid",
		"valium",
		"valley",
		"valuables",
		"value",
		"vanilla",
		"vanish",
		"vanity",
		"vanquish",
		"vantage",
		"vaporizer",
		"variable",
		"variably",
		"varied",
		"variety",
		"various",
		"varmint",
		"varnish",
		"varsity",
		"varying",
		"vascular",
		"vaseline",
		"vastly",
		"vastness",
		"veal",
		"vegan",
		"veggie",
		"vehicular",
		"velcro",
		"velocity",
		"velvet",
		"vendetta",
		"vending",
		"vendor",
		"veneering",
		"vengeful",
		"venomous",
		"ventricle",
		"venture",
		"venue",
		"venus",
		"verbalize",
		"verbally",
		"verbose",
		"verdict",
		"verify",
		"verse",
		"version",
		"versus",
		"vertebrae",
		"vertical",
		"vertigo",
		"very",
		"vessel",
		"vest",
		"veteran",
		"veto",
		"vexingly",
		"viability",
		"viable",
		"vibes",
		"vice",
		"vicinity",
		"victory",
		"video",
		"viewable",
		"viewer",
		"viewing",
		"viewless",
		"viewpoint",
		"vigorous",
		"village",
		"villain",
		"vindicate",
		"vineyard",
		"vintage",
		"violate",
		"violation",
		"violator",
		"violet",
		"violin",
		"viper",
		"viral",
		"virtual",
		"virtuous",
		"virus",
		"visa",
		"viscosity",
		"viscous",
		"viselike",
		"visible",
		"visibly",
		"vision",
		"visiting",
		"visitor",
		"visor",
		"vista",
		"vitality",
		"vitalize",
		"vitally",
		"vitamins",
		"vivacious",
		"vividly",
		"vividness",
		"vixen",
		"vocalist",
		"vocalize",
		"vocally",
		"vocation",
		"voice",
		"voicing",
		"void",
		"volatile",
		"volley",
		"voltage",
		"volumes",
		"voter",
		"voting",
		"voucher",
		"vowed",
		"vowel",
		"voyage",
		"wackiness",
		"wad",
		"wafer",
		"waffle",
		"waged",
		"wager",
		"wages",
		"waggle",
		"wagon",
		"wake",
		"waking",
		"walk",
		"walmart",
		"walnut",
		"walrus",
		"waltz",
		"wand",
		"wannabe",
		"wanted",
		"wanting",
		"wasabi",
		"washable",
		"washbasin",
		"washboard",
		"washbowl",
		"washcloth",
		"washday",
		"washed",
		"washer",
		"washhouse",
		"washing",
		"washout",
		"washroom",
		"washstand",
		"washtub",
		"wasp",
		"wasting",
		"watch",
		"water",
		"waviness",
		"waving",
		"wavy",
		"whacking",
		"whacky",
		"wham",
		"wharf",
		"wheat",
		"whenever",
		"whiff",
		"whimsical",
		"whinny",
		"whiny",
		"whisking",
		"whoever",
		"whole",
		"whomever",
		"whoopee",
		"whooping",
		"whoops",
		"why",
		"wick",
		"widely",
		"widen",
		"widget",
		"widow",
		"width",
		"wieldable",
		"wielder",
		"wife",
		"wifi",
		"wikipedia",
		"wildcard",
		"wildcat",
		"wilder",
		"wildfire",
		"wildfowl",
		"wildland",
		"wildlife",
		"wildly",
		"wildness",
		"willed",
		"willfully",
		"willing",
		"willow",
		"willpower",
		"wilt",
		"wimp",
		"wince",
		"wincing",
		"wind",
		"wing",
		"winking",
		"winner",
		"winnings",
		"winter",
		"wipe",
		"wired",
		"wireless",
		"wiring",
		"wiry",
		"wisdom",
		"wise",
		"wish",
		"wisplike",
		"wispy",
		"wistful",
		"wizard",
		"wobble",
		"wobbling",
		"wobbly",
		"wok",
		"wolf",
		"wolverine",
		"womanhood",
		"womankind",
		"womanless",
		"womanlike",
		"womanly",
		"womb",
		"woof",
		"wooing",
		"wool",
		"woozy",
		"word",
		"work",
		"worried",
		"worrier",
		"worrisome",
		"worry",
		"worsening",
		"worshiper",
		"worst",
		"wound",
		"woven",
		"wow",
		"wrangle",
		"wrath",
		"wreath",
		"wreckage",
		"wrecker",
		"wrecking",
		"wrench",
		"wriggle",
		"wriggly",
		"wrinkle",
		"wrinkly",
		"wrist",
		"writing",
		"written",
		"wrongdoer",
		"wronged",
		"wrongful",
		"wrongly",
		"wrongness",
		"wrought",
		"xbox",
		"xerox",
		"yahoo",
		"yam",
		"yanking",
		"yapping",
		"yard",
		"yarn",
		"yeah",
		"yearbook",
		"yearling",
		"yearly",
		"yearning",
		"yeast",
		"yelling",
		"yelp",
		"yen",
		"yesterday",
		"yiddish",
		"yield",
		"yin",
		"yippee",
		"yo-yo",
		"yodel",
		"yoga",
		"yogurt",
		"yonder",
		"yoyo",
		"yummy",
		"zap",
		"zealous",
		"zebra",
		"zen",
		"zeppelin",
		"zero",
		"zestfully",
		"zesty",
		"zigzagged",
		"zipfile",
		"zipping",
		"zippy",
		"zips",
		"zit",
		"zodiac",
		"zombie",
		"zone",
		"zoning",
		"zookeeper",
		"zoologist",
		"zoology",
		"zoom"
	];
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/passwords/newSecureWords.js
var require_newSecureWords = __commonJS({ "../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/passwords/newSecureWords.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.newSecureWords = void 0;
	const getSecureRandom_1$2 = require_getSecureRandom();
	const wordlist_1$2 = require_wordlist$1();
	async function newSecureWords(size = 6) {
		let words = [];
		for (let i$2 = 0; i$2 < size; i$2++) words.push(wordlist_1$2.wordlist[await (0, getSecureRandom_1$2.getSecureRandomNumber)(0, wordlist_1$2.wordlist.length)]);
		return words;
	}
	exports.newSecureWords = newSecureWords;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/passwords/newSecurePassphrase.js
var require_newSecurePassphrase = __commonJS({ "../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/passwords/newSecurePassphrase.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.newSecurePassphrase = void 0;
	const __1 = require_dist$1();
	async function newSecurePassphrase(size = 6) {
		return (await (0, __1.newSecureWords)(size)).join("-");
	}
	exports.newSecurePassphrase = newSecurePassphrase;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/utils/binary.js
var require_binary = __commonJS({ "../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/utils/binary.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.bitsToBytes = exports.bytesToBits = exports.lpad = void 0;
	function lpad(str, padString, length) {
		while (str.length < length) str = padString + str;
		return str;
	}
	exports.lpad = lpad;
	function bytesToBits(bytes) {
		let res = "";
		for (let i$2 = 0; i$2 < bytes.length; i$2++) {
			let x = bytes.at(i$2);
			res += lpad(x.toString(2), "0", 8);
		}
		return res;
	}
	exports.bytesToBits = bytesToBits;
	function bitsToBytes(src) {
		if (src.length % 8 !== 0) throw Error("Uneven bits");
		let res = [];
		while (src.length > 0) {
			res.push(parseInt(src.slice(0, 8), 2));
			src = src.slice(8);
		}
		return Buffer.from(res);
	}
	exports.bitsToBytes = bitsToBytes;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/mnemonic/wordlist.js
var require_wordlist = __commonJS({ "../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/mnemonic/wordlist.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.wordlist = void 0;
	const EN = [
		"abandon",
		"ability",
		"able",
		"about",
		"above",
		"absent",
		"absorb",
		"abstract",
		"absurd",
		"abuse",
		"access",
		"accident",
		"account",
		"accuse",
		"achieve",
		"acid",
		"acoustic",
		"acquire",
		"across",
		"act",
		"action",
		"actor",
		"actress",
		"actual",
		"adapt",
		"add",
		"addict",
		"address",
		"adjust",
		"admit",
		"adult",
		"advance",
		"advice",
		"aerobic",
		"affair",
		"afford",
		"afraid",
		"again",
		"age",
		"agent",
		"agree",
		"ahead",
		"aim",
		"air",
		"airport",
		"aisle",
		"alarm",
		"album",
		"alcohol",
		"alert",
		"alien",
		"all",
		"alley",
		"allow",
		"almost",
		"alone",
		"alpha",
		"already",
		"also",
		"alter",
		"always",
		"amateur",
		"amazing",
		"among",
		"amount",
		"amused",
		"analyst",
		"anchor",
		"ancient",
		"anger",
		"angle",
		"angry",
		"animal",
		"ankle",
		"announce",
		"annual",
		"another",
		"answer",
		"antenna",
		"antique",
		"anxiety",
		"any",
		"apart",
		"apology",
		"appear",
		"apple",
		"approve",
		"april",
		"arch",
		"arctic",
		"area",
		"arena",
		"argue",
		"arm",
		"armed",
		"armor",
		"army",
		"around",
		"arrange",
		"arrest",
		"arrive",
		"arrow",
		"art",
		"artefact",
		"artist",
		"artwork",
		"ask",
		"aspect",
		"assault",
		"asset",
		"assist",
		"assume",
		"asthma",
		"athlete",
		"atom",
		"attack",
		"attend",
		"attitude",
		"attract",
		"auction",
		"audit",
		"august",
		"aunt",
		"author",
		"auto",
		"autumn",
		"average",
		"avocado",
		"avoid",
		"awake",
		"aware",
		"away",
		"awesome",
		"awful",
		"awkward",
		"axis",
		"baby",
		"bachelor",
		"bacon",
		"badge",
		"bag",
		"balance",
		"balcony",
		"ball",
		"bamboo",
		"banana",
		"banner",
		"bar",
		"barely",
		"bargain",
		"barrel",
		"base",
		"basic",
		"basket",
		"battle",
		"beach",
		"bean",
		"beauty",
		"because",
		"become",
		"beef",
		"before",
		"begin",
		"behave",
		"behind",
		"believe",
		"below",
		"belt",
		"bench",
		"benefit",
		"best",
		"betray",
		"better",
		"between",
		"beyond",
		"bicycle",
		"bid",
		"bike",
		"bind",
		"biology",
		"bird",
		"birth",
		"bitter",
		"black",
		"blade",
		"blame",
		"blanket",
		"blast",
		"bleak",
		"bless",
		"blind",
		"blood",
		"blossom",
		"blouse",
		"blue",
		"blur",
		"blush",
		"board",
		"boat",
		"body",
		"boil",
		"bomb",
		"bone",
		"bonus",
		"book",
		"boost",
		"border",
		"boring",
		"borrow",
		"boss",
		"bottom",
		"bounce",
		"box",
		"boy",
		"bracket",
		"brain",
		"brand",
		"brass",
		"brave",
		"bread",
		"breeze",
		"brick",
		"bridge",
		"brief",
		"bright",
		"bring",
		"brisk",
		"broccoli",
		"broken",
		"bronze",
		"broom",
		"brother",
		"brown",
		"brush",
		"bubble",
		"buddy",
		"budget",
		"buffalo",
		"build",
		"bulb",
		"bulk",
		"bullet",
		"bundle",
		"bunker",
		"burden",
		"burger",
		"burst",
		"bus",
		"business",
		"busy",
		"butter",
		"buyer",
		"buzz",
		"cabbage",
		"cabin",
		"cable",
		"cactus",
		"cage",
		"cake",
		"call",
		"calm",
		"camera",
		"camp",
		"can",
		"canal",
		"cancel",
		"candy",
		"cannon",
		"canoe",
		"canvas",
		"canyon",
		"capable",
		"capital",
		"captain",
		"car",
		"carbon",
		"card",
		"cargo",
		"carpet",
		"carry",
		"cart",
		"case",
		"cash",
		"casino",
		"castle",
		"casual",
		"cat",
		"catalog",
		"catch",
		"category",
		"cattle",
		"caught",
		"cause",
		"caution",
		"cave",
		"ceiling",
		"celery",
		"cement",
		"census",
		"century",
		"cereal",
		"certain",
		"chair",
		"chalk",
		"champion",
		"change",
		"chaos",
		"chapter",
		"charge",
		"chase",
		"chat",
		"cheap",
		"check",
		"cheese",
		"chef",
		"cherry",
		"chest",
		"chicken",
		"chief",
		"child",
		"chimney",
		"choice",
		"choose",
		"chronic",
		"chuckle",
		"chunk",
		"churn",
		"cigar",
		"cinnamon",
		"circle",
		"citizen",
		"city",
		"civil",
		"claim",
		"clap",
		"clarify",
		"claw",
		"clay",
		"clean",
		"clerk",
		"clever",
		"click",
		"client",
		"cliff",
		"climb",
		"clinic",
		"clip",
		"clock",
		"clog",
		"close",
		"cloth",
		"cloud",
		"clown",
		"club",
		"clump",
		"cluster",
		"clutch",
		"coach",
		"coast",
		"coconut",
		"code",
		"coffee",
		"coil",
		"coin",
		"collect",
		"color",
		"column",
		"combine",
		"come",
		"comfort",
		"comic",
		"common",
		"company",
		"concert",
		"conduct",
		"confirm",
		"congress",
		"connect",
		"consider",
		"control",
		"convince",
		"cook",
		"cool",
		"copper",
		"copy",
		"coral",
		"core",
		"corn",
		"correct",
		"cost",
		"cotton",
		"couch",
		"country",
		"couple",
		"course",
		"cousin",
		"cover",
		"coyote",
		"crack",
		"cradle",
		"craft",
		"cram",
		"crane",
		"crash",
		"crater",
		"crawl",
		"crazy",
		"cream",
		"credit",
		"creek",
		"crew",
		"cricket",
		"crime",
		"crisp",
		"critic",
		"crop",
		"cross",
		"crouch",
		"crowd",
		"crucial",
		"cruel",
		"cruise",
		"crumble",
		"crunch",
		"crush",
		"cry",
		"crystal",
		"cube",
		"culture",
		"cup",
		"cupboard",
		"curious",
		"current",
		"curtain",
		"curve",
		"cushion",
		"custom",
		"cute",
		"cycle",
		"dad",
		"damage",
		"damp",
		"dance",
		"danger",
		"daring",
		"dash",
		"daughter",
		"dawn",
		"day",
		"deal",
		"debate",
		"debris",
		"decade",
		"december",
		"decide",
		"decline",
		"decorate",
		"decrease",
		"deer",
		"defense",
		"define",
		"defy",
		"degree",
		"delay",
		"deliver",
		"demand",
		"demise",
		"denial",
		"dentist",
		"deny",
		"depart",
		"depend",
		"deposit",
		"depth",
		"deputy",
		"derive",
		"describe",
		"desert",
		"design",
		"desk",
		"despair",
		"destroy",
		"detail",
		"detect",
		"develop",
		"device",
		"devote",
		"diagram",
		"dial",
		"diamond",
		"diary",
		"dice",
		"diesel",
		"diet",
		"differ",
		"digital",
		"dignity",
		"dilemma",
		"dinner",
		"dinosaur",
		"direct",
		"dirt",
		"disagree",
		"discover",
		"disease",
		"dish",
		"dismiss",
		"disorder",
		"display",
		"distance",
		"divert",
		"divide",
		"divorce",
		"dizzy",
		"doctor",
		"document",
		"dog",
		"doll",
		"dolphin",
		"domain",
		"donate",
		"donkey",
		"donor",
		"door",
		"dose",
		"double",
		"dove",
		"draft",
		"dragon",
		"drama",
		"drastic",
		"draw",
		"dream",
		"dress",
		"drift",
		"drill",
		"drink",
		"drip",
		"drive",
		"drop",
		"drum",
		"dry",
		"duck",
		"dumb",
		"dune",
		"during",
		"dust",
		"dutch",
		"duty",
		"dwarf",
		"dynamic",
		"eager",
		"eagle",
		"early",
		"earn",
		"earth",
		"easily",
		"east",
		"easy",
		"echo",
		"ecology",
		"economy",
		"edge",
		"edit",
		"educate",
		"effort",
		"egg",
		"eight",
		"either",
		"elbow",
		"elder",
		"electric",
		"elegant",
		"element",
		"elephant",
		"elevator",
		"elite",
		"else",
		"embark",
		"embody",
		"embrace",
		"emerge",
		"emotion",
		"employ",
		"empower",
		"empty",
		"enable",
		"enact",
		"end",
		"endless",
		"endorse",
		"enemy",
		"energy",
		"enforce",
		"engage",
		"engine",
		"enhance",
		"enjoy",
		"enlist",
		"enough",
		"enrich",
		"enroll",
		"ensure",
		"enter",
		"entire",
		"entry",
		"envelope",
		"episode",
		"equal",
		"equip",
		"era",
		"erase",
		"erode",
		"erosion",
		"error",
		"erupt",
		"escape",
		"essay",
		"essence",
		"estate",
		"eternal",
		"ethics",
		"evidence",
		"evil",
		"evoke",
		"evolve",
		"exact",
		"example",
		"excess",
		"exchange",
		"excite",
		"exclude",
		"excuse",
		"execute",
		"exercise",
		"exhaust",
		"exhibit",
		"exile",
		"exist",
		"exit",
		"exotic",
		"expand",
		"expect",
		"expire",
		"explain",
		"expose",
		"express",
		"extend",
		"extra",
		"eye",
		"eyebrow",
		"fabric",
		"face",
		"faculty",
		"fade",
		"faint",
		"faith",
		"fall",
		"false",
		"fame",
		"family",
		"famous",
		"fan",
		"fancy",
		"fantasy",
		"farm",
		"fashion",
		"fat",
		"fatal",
		"father",
		"fatigue",
		"fault",
		"favorite",
		"feature",
		"february",
		"federal",
		"fee",
		"feed",
		"feel",
		"female",
		"fence",
		"festival",
		"fetch",
		"fever",
		"few",
		"fiber",
		"fiction",
		"field",
		"figure",
		"file",
		"film",
		"filter",
		"final",
		"find",
		"fine",
		"finger",
		"finish",
		"fire",
		"firm",
		"first",
		"fiscal",
		"fish",
		"fit",
		"fitness",
		"fix",
		"flag",
		"flame",
		"flash",
		"flat",
		"flavor",
		"flee",
		"flight",
		"flip",
		"float",
		"flock",
		"floor",
		"flower",
		"fluid",
		"flush",
		"fly",
		"foam",
		"focus",
		"fog",
		"foil",
		"fold",
		"follow",
		"food",
		"foot",
		"force",
		"forest",
		"forget",
		"fork",
		"fortune",
		"forum",
		"forward",
		"fossil",
		"foster",
		"found",
		"fox",
		"fragile",
		"frame",
		"frequent",
		"fresh",
		"friend",
		"fringe",
		"frog",
		"front",
		"frost",
		"frown",
		"frozen",
		"fruit",
		"fuel",
		"fun",
		"funny",
		"furnace",
		"fury",
		"future",
		"gadget",
		"gain",
		"galaxy",
		"gallery",
		"game",
		"gap",
		"garage",
		"garbage",
		"garden",
		"garlic",
		"garment",
		"gas",
		"gasp",
		"gate",
		"gather",
		"gauge",
		"gaze",
		"general",
		"genius",
		"genre",
		"gentle",
		"genuine",
		"gesture",
		"ghost",
		"giant",
		"gift",
		"giggle",
		"ginger",
		"giraffe",
		"girl",
		"give",
		"glad",
		"glance",
		"glare",
		"glass",
		"glide",
		"glimpse",
		"globe",
		"gloom",
		"glory",
		"glove",
		"glow",
		"glue",
		"goat",
		"goddess",
		"gold",
		"good",
		"goose",
		"gorilla",
		"gospel",
		"gossip",
		"govern",
		"gown",
		"grab",
		"grace",
		"grain",
		"grant",
		"grape",
		"grass",
		"gravity",
		"great",
		"green",
		"grid",
		"grief",
		"grit",
		"grocery",
		"group",
		"grow",
		"grunt",
		"guard",
		"guess",
		"guide",
		"guilt",
		"guitar",
		"gun",
		"gym",
		"habit",
		"hair",
		"half",
		"hammer",
		"hamster",
		"hand",
		"happy",
		"harbor",
		"hard",
		"harsh",
		"harvest",
		"hat",
		"have",
		"hawk",
		"hazard",
		"head",
		"health",
		"heart",
		"heavy",
		"hedgehog",
		"height",
		"hello",
		"helmet",
		"help",
		"hen",
		"hero",
		"hidden",
		"high",
		"hill",
		"hint",
		"hip",
		"hire",
		"history",
		"hobby",
		"hockey",
		"hold",
		"hole",
		"holiday",
		"hollow",
		"home",
		"honey",
		"hood",
		"hope",
		"horn",
		"horror",
		"horse",
		"hospital",
		"host",
		"hotel",
		"hour",
		"hover",
		"hub",
		"huge",
		"human",
		"humble",
		"humor",
		"hundred",
		"hungry",
		"hunt",
		"hurdle",
		"hurry",
		"hurt",
		"husband",
		"hybrid",
		"ice",
		"icon",
		"idea",
		"identify",
		"idle",
		"ignore",
		"ill",
		"illegal",
		"illness",
		"image",
		"imitate",
		"immense",
		"immune",
		"impact",
		"impose",
		"improve",
		"impulse",
		"inch",
		"include",
		"income",
		"increase",
		"index",
		"indicate",
		"indoor",
		"industry",
		"infant",
		"inflict",
		"inform",
		"inhale",
		"inherit",
		"initial",
		"inject",
		"injury",
		"inmate",
		"inner",
		"innocent",
		"input",
		"inquiry",
		"insane",
		"insect",
		"inside",
		"inspire",
		"install",
		"intact",
		"interest",
		"into",
		"invest",
		"invite",
		"involve",
		"iron",
		"island",
		"isolate",
		"issue",
		"item",
		"ivory",
		"jacket",
		"jaguar",
		"jar",
		"jazz",
		"jealous",
		"jeans",
		"jelly",
		"jewel",
		"job",
		"join",
		"joke",
		"journey",
		"joy",
		"judge",
		"juice",
		"jump",
		"jungle",
		"junior",
		"junk",
		"just",
		"kangaroo",
		"keen",
		"keep",
		"ketchup",
		"key",
		"kick",
		"kid",
		"kidney",
		"kind",
		"kingdom",
		"kiss",
		"kit",
		"kitchen",
		"kite",
		"kitten",
		"kiwi",
		"knee",
		"knife",
		"knock",
		"know",
		"lab",
		"label",
		"labor",
		"ladder",
		"lady",
		"lake",
		"lamp",
		"language",
		"laptop",
		"large",
		"later",
		"latin",
		"laugh",
		"laundry",
		"lava",
		"law",
		"lawn",
		"lawsuit",
		"layer",
		"lazy",
		"leader",
		"leaf",
		"learn",
		"leave",
		"lecture",
		"left",
		"leg",
		"legal",
		"legend",
		"leisure",
		"lemon",
		"lend",
		"length",
		"lens",
		"leopard",
		"lesson",
		"letter",
		"level",
		"liar",
		"liberty",
		"library",
		"license",
		"life",
		"lift",
		"light",
		"like",
		"limb",
		"limit",
		"link",
		"lion",
		"liquid",
		"list",
		"little",
		"live",
		"lizard",
		"load",
		"loan",
		"lobster",
		"local",
		"lock",
		"logic",
		"lonely",
		"long",
		"loop",
		"lottery",
		"loud",
		"lounge",
		"love",
		"loyal",
		"lucky",
		"luggage",
		"lumber",
		"lunar",
		"lunch",
		"luxury",
		"lyrics",
		"machine",
		"mad",
		"magic",
		"magnet",
		"maid",
		"mail",
		"main",
		"major",
		"make",
		"mammal",
		"man",
		"manage",
		"mandate",
		"mango",
		"mansion",
		"manual",
		"maple",
		"marble",
		"march",
		"margin",
		"marine",
		"market",
		"marriage",
		"mask",
		"mass",
		"master",
		"match",
		"material",
		"math",
		"matrix",
		"matter",
		"maximum",
		"maze",
		"meadow",
		"mean",
		"measure",
		"meat",
		"mechanic",
		"medal",
		"media",
		"melody",
		"melt",
		"member",
		"memory",
		"mention",
		"menu",
		"mercy",
		"merge",
		"merit",
		"merry",
		"mesh",
		"message",
		"metal",
		"method",
		"middle",
		"midnight",
		"milk",
		"million",
		"mimic",
		"mind",
		"minimum",
		"minor",
		"minute",
		"miracle",
		"mirror",
		"misery",
		"miss",
		"mistake",
		"mix",
		"mixed",
		"mixture",
		"mobile",
		"model",
		"modify",
		"mom",
		"moment",
		"monitor",
		"monkey",
		"monster",
		"month",
		"moon",
		"moral",
		"more",
		"morning",
		"mosquito",
		"mother",
		"motion",
		"motor",
		"mountain",
		"mouse",
		"move",
		"movie",
		"much",
		"muffin",
		"mule",
		"multiply",
		"muscle",
		"museum",
		"mushroom",
		"music",
		"must",
		"mutual",
		"myself",
		"mystery",
		"myth",
		"naive",
		"name",
		"napkin",
		"narrow",
		"nasty",
		"nation",
		"nature",
		"near",
		"neck",
		"need",
		"negative",
		"neglect",
		"neither",
		"nephew",
		"nerve",
		"nest",
		"net",
		"network",
		"neutral",
		"never",
		"news",
		"next",
		"nice",
		"night",
		"noble",
		"noise",
		"nominee",
		"noodle",
		"normal",
		"north",
		"nose",
		"notable",
		"note",
		"nothing",
		"notice",
		"novel",
		"now",
		"nuclear",
		"number",
		"nurse",
		"nut",
		"oak",
		"obey",
		"object",
		"oblige",
		"obscure",
		"observe",
		"obtain",
		"obvious",
		"occur",
		"ocean",
		"october",
		"odor",
		"off",
		"offer",
		"office",
		"often",
		"oil",
		"okay",
		"old",
		"olive",
		"olympic",
		"omit",
		"once",
		"one",
		"onion",
		"online",
		"only",
		"open",
		"opera",
		"opinion",
		"oppose",
		"option",
		"orange",
		"orbit",
		"orchard",
		"order",
		"ordinary",
		"organ",
		"orient",
		"original",
		"orphan",
		"ostrich",
		"other",
		"outdoor",
		"outer",
		"output",
		"outside",
		"oval",
		"oven",
		"over",
		"own",
		"owner",
		"oxygen",
		"oyster",
		"ozone",
		"pact",
		"paddle",
		"page",
		"pair",
		"palace",
		"palm",
		"panda",
		"panel",
		"panic",
		"panther",
		"paper",
		"parade",
		"parent",
		"park",
		"parrot",
		"party",
		"pass",
		"patch",
		"path",
		"patient",
		"patrol",
		"pattern",
		"pause",
		"pave",
		"payment",
		"peace",
		"peanut",
		"pear",
		"peasant",
		"pelican",
		"pen",
		"penalty",
		"pencil",
		"people",
		"pepper",
		"perfect",
		"permit",
		"person",
		"pet",
		"phone",
		"photo",
		"phrase",
		"physical",
		"piano",
		"picnic",
		"picture",
		"piece",
		"pig",
		"pigeon",
		"pill",
		"pilot",
		"pink",
		"pioneer",
		"pipe",
		"pistol",
		"pitch",
		"pizza",
		"place",
		"planet",
		"plastic",
		"plate",
		"play",
		"please",
		"pledge",
		"pluck",
		"plug",
		"plunge",
		"poem",
		"poet",
		"point",
		"polar",
		"pole",
		"police",
		"pond",
		"pony",
		"pool",
		"popular",
		"portion",
		"position",
		"possible",
		"post",
		"potato",
		"pottery",
		"poverty",
		"powder",
		"power",
		"practice",
		"praise",
		"predict",
		"prefer",
		"prepare",
		"present",
		"pretty",
		"prevent",
		"price",
		"pride",
		"primary",
		"print",
		"priority",
		"prison",
		"private",
		"prize",
		"problem",
		"process",
		"produce",
		"profit",
		"program",
		"project",
		"promote",
		"proof",
		"property",
		"prosper",
		"protect",
		"proud",
		"provide",
		"public",
		"pudding",
		"pull",
		"pulp",
		"pulse",
		"pumpkin",
		"punch",
		"pupil",
		"puppy",
		"purchase",
		"purity",
		"purpose",
		"purse",
		"push",
		"put",
		"puzzle",
		"pyramid",
		"quality",
		"quantum",
		"quarter",
		"question",
		"quick",
		"quit",
		"quiz",
		"quote",
		"rabbit",
		"raccoon",
		"race",
		"rack",
		"radar",
		"radio",
		"rail",
		"rain",
		"raise",
		"rally",
		"ramp",
		"ranch",
		"random",
		"range",
		"rapid",
		"rare",
		"rate",
		"rather",
		"raven",
		"raw",
		"razor",
		"ready",
		"real",
		"reason",
		"rebel",
		"rebuild",
		"recall",
		"receive",
		"recipe",
		"record",
		"recycle",
		"reduce",
		"reflect",
		"reform",
		"refuse",
		"region",
		"regret",
		"regular",
		"reject",
		"relax",
		"release",
		"relief",
		"rely",
		"remain",
		"remember",
		"remind",
		"remove",
		"render",
		"renew",
		"rent",
		"reopen",
		"repair",
		"repeat",
		"replace",
		"report",
		"require",
		"rescue",
		"resemble",
		"resist",
		"resource",
		"response",
		"result",
		"retire",
		"retreat",
		"return",
		"reunion",
		"reveal",
		"review",
		"reward",
		"rhythm",
		"rib",
		"ribbon",
		"rice",
		"rich",
		"ride",
		"ridge",
		"rifle",
		"right",
		"rigid",
		"ring",
		"riot",
		"ripple",
		"risk",
		"ritual",
		"rival",
		"river",
		"road",
		"roast",
		"robot",
		"robust",
		"rocket",
		"romance",
		"roof",
		"rookie",
		"room",
		"rose",
		"rotate",
		"rough",
		"round",
		"route",
		"royal",
		"rubber",
		"rude",
		"rug",
		"rule",
		"run",
		"runway",
		"rural",
		"sad",
		"saddle",
		"sadness",
		"safe",
		"sail",
		"salad",
		"salmon",
		"salon",
		"salt",
		"salute",
		"same",
		"sample",
		"sand",
		"satisfy",
		"satoshi",
		"sauce",
		"sausage",
		"save",
		"say",
		"scale",
		"scan",
		"scare",
		"scatter",
		"scene",
		"scheme",
		"school",
		"science",
		"scissors",
		"scorpion",
		"scout",
		"scrap",
		"screen",
		"script",
		"scrub",
		"sea",
		"search",
		"season",
		"seat",
		"second",
		"secret",
		"section",
		"security",
		"seed",
		"seek",
		"segment",
		"select",
		"sell",
		"seminar",
		"senior",
		"sense",
		"sentence",
		"series",
		"service",
		"session",
		"settle",
		"setup",
		"seven",
		"shadow",
		"shaft",
		"shallow",
		"share",
		"shed",
		"shell",
		"sheriff",
		"shield",
		"shift",
		"shine",
		"ship",
		"shiver",
		"shock",
		"shoe",
		"shoot",
		"shop",
		"short",
		"shoulder",
		"shove",
		"shrimp",
		"shrug",
		"shuffle",
		"shy",
		"sibling",
		"sick",
		"side",
		"siege",
		"sight",
		"sign",
		"silent",
		"silk",
		"silly",
		"silver",
		"similar",
		"simple",
		"since",
		"sing",
		"siren",
		"sister",
		"situate",
		"six",
		"size",
		"skate",
		"sketch",
		"ski",
		"skill",
		"skin",
		"skirt",
		"skull",
		"slab",
		"slam",
		"sleep",
		"slender",
		"slice",
		"slide",
		"slight",
		"slim",
		"slogan",
		"slot",
		"slow",
		"slush",
		"small",
		"smart",
		"smile",
		"smoke",
		"smooth",
		"snack",
		"snake",
		"snap",
		"sniff",
		"snow",
		"soap",
		"soccer",
		"social",
		"sock",
		"soda",
		"soft",
		"solar",
		"soldier",
		"solid",
		"solution",
		"solve",
		"someone",
		"song",
		"soon",
		"sorry",
		"sort",
		"soul",
		"sound",
		"soup",
		"source",
		"south",
		"space",
		"spare",
		"spatial",
		"spawn",
		"speak",
		"special",
		"speed",
		"spell",
		"spend",
		"sphere",
		"spice",
		"spider",
		"spike",
		"spin",
		"spirit",
		"split",
		"spoil",
		"sponsor",
		"spoon",
		"sport",
		"spot",
		"spray",
		"spread",
		"spring",
		"spy",
		"square",
		"squeeze",
		"squirrel",
		"stable",
		"stadium",
		"staff",
		"stage",
		"stairs",
		"stamp",
		"stand",
		"start",
		"state",
		"stay",
		"steak",
		"steel",
		"stem",
		"step",
		"stereo",
		"stick",
		"still",
		"sting",
		"stock",
		"stomach",
		"stone",
		"stool",
		"story",
		"stove",
		"strategy",
		"street",
		"strike",
		"strong",
		"struggle",
		"student",
		"stuff",
		"stumble",
		"style",
		"subject",
		"submit",
		"subway",
		"success",
		"such",
		"sudden",
		"suffer",
		"sugar",
		"suggest",
		"suit",
		"summer",
		"sun",
		"sunny",
		"sunset",
		"super",
		"supply",
		"supreme",
		"sure",
		"surface",
		"surge",
		"surprise",
		"surround",
		"survey",
		"suspect",
		"sustain",
		"swallow",
		"swamp",
		"swap",
		"swarm",
		"swear",
		"sweet",
		"swift",
		"swim",
		"swing",
		"switch",
		"sword",
		"symbol",
		"symptom",
		"syrup",
		"system",
		"table",
		"tackle",
		"tag",
		"tail",
		"talent",
		"talk",
		"tank",
		"tape",
		"target",
		"task",
		"taste",
		"tattoo",
		"taxi",
		"teach",
		"team",
		"tell",
		"ten",
		"tenant",
		"tennis",
		"tent",
		"term",
		"test",
		"text",
		"thank",
		"that",
		"theme",
		"then",
		"theory",
		"there",
		"they",
		"thing",
		"this",
		"thought",
		"three",
		"thrive",
		"throw",
		"thumb",
		"thunder",
		"ticket",
		"tide",
		"tiger",
		"tilt",
		"timber",
		"time",
		"tiny",
		"tip",
		"tired",
		"tissue",
		"title",
		"toast",
		"tobacco",
		"today",
		"toddler",
		"toe",
		"together",
		"toilet",
		"token",
		"tomato",
		"tomorrow",
		"tone",
		"tongue",
		"tonight",
		"tool",
		"tooth",
		"top",
		"topic",
		"topple",
		"torch",
		"tornado",
		"tortoise",
		"toss",
		"total",
		"tourist",
		"toward",
		"tower",
		"town",
		"toy",
		"track",
		"trade",
		"traffic",
		"tragic",
		"train",
		"transfer",
		"trap",
		"trash",
		"travel",
		"tray",
		"treat",
		"tree",
		"trend",
		"trial",
		"tribe",
		"trick",
		"trigger",
		"trim",
		"trip",
		"trophy",
		"trouble",
		"truck",
		"true",
		"truly",
		"trumpet",
		"trust",
		"truth",
		"try",
		"tube",
		"tuition",
		"tumble",
		"tuna",
		"tunnel",
		"turkey",
		"turn",
		"turtle",
		"twelve",
		"twenty",
		"twice",
		"twin",
		"twist",
		"two",
		"type",
		"typical",
		"ugly",
		"umbrella",
		"unable",
		"unaware",
		"uncle",
		"uncover",
		"under",
		"undo",
		"unfair",
		"unfold",
		"unhappy",
		"uniform",
		"unique",
		"unit",
		"universe",
		"unknown",
		"unlock",
		"until",
		"unusual",
		"unveil",
		"update",
		"upgrade",
		"uphold",
		"upon",
		"upper",
		"upset",
		"urban",
		"urge",
		"usage",
		"use",
		"used",
		"useful",
		"useless",
		"usual",
		"utility",
		"vacant",
		"vacuum",
		"vague",
		"valid",
		"valley",
		"valve",
		"van",
		"vanish",
		"vapor",
		"various",
		"vast",
		"vault",
		"vehicle",
		"velvet",
		"vendor",
		"venture",
		"venue",
		"verb",
		"verify",
		"version",
		"very",
		"vessel",
		"veteran",
		"viable",
		"vibrant",
		"vicious",
		"victory",
		"video",
		"view",
		"village",
		"vintage",
		"violin",
		"virtual",
		"virus",
		"visa",
		"visit",
		"visual",
		"vital",
		"vivid",
		"vocal",
		"voice",
		"void",
		"volcano",
		"volume",
		"vote",
		"voyage",
		"wage",
		"wagon",
		"wait",
		"walk",
		"wall",
		"walnut",
		"want",
		"warfare",
		"warm",
		"warrior",
		"wash",
		"wasp",
		"waste",
		"water",
		"wave",
		"way",
		"wealth",
		"weapon",
		"wear",
		"weasel",
		"weather",
		"web",
		"wedding",
		"weekend",
		"weird",
		"welcome",
		"west",
		"wet",
		"whale",
		"what",
		"wheat",
		"wheel",
		"when",
		"where",
		"whip",
		"whisper",
		"wide",
		"width",
		"wife",
		"wild",
		"will",
		"win",
		"window",
		"wine",
		"wing",
		"wink",
		"winner",
		"winter",
		"wire",
		"wisdom",
		"wise",
		"wish",
		"witness",
		"wolf",
		"woman",
		"wonder",
		"wood",
		"wool",
		"word",
		"work",
		"world",
		"worry",
		"worth",
		"wrap",
		"wreck",
		"wrestle",
		"wrist",
		"write",
		"wrong",
		"yard",
		"year",
		"yellow",
		"you",
		"young",
		"youth",
		"zebra",
		"zero",
		"zone",
		"zoo"
	];
	exports.wordlist = EN;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/mnemonic/mnemonic.js
var require_mnemonic = __commonJS({ "../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/mnemonic/mnemonic.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	var __importDefault$2 = void 0 && (void 0).__importDefault || function(mod) {
		return mod && mod.__esModule ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.mnemonicFromRandomSeed = exports.mnemonicIndexesToBytes = exports.bytesToMnemonics = exports.bytesToMnemonicIndexes = exports.mnemonicNew = exports.mnemonicValidate = exports.mnemonicToHDSeed = exports.mnemonicToWalletKey = exports.mnemonicToPrivateKey = exports.mnemonicToSeed = exports.mnemonicToEntropy = void 0;
	const tweetnacl_1$1 = __importDefault$2(require_nacl_fast());
	const getSecureRandom_1$1 = require_getSecureRandom();
	const hmac_sha512_1$4 = require_hmac_sha512();
	const pbkdf2_sha512_1$1 = require_pbkdf2_sha512();
	const binary_1 = require_binary();
	const wordlist_1$1 = require_wordlist();
	const PBKDF_ITERATIONS = 1e5;
	async function isPasswordNeeded(mnemonicArray) {
		const passlessEntropy = await mnemonicToEntropy(mnemonicArray);
		return await isPasswordSeed(passlessEntropy) && !await isBasicSeed(passlessEntropy);
	}
	function normalizeMnemonic(src) {
		return src.map((v) => v.toLowerCase().trim());
	}
	async function isBasicSeed(entropy) {
		const seed = await (0, pbkdf2_sha512_1$1.pbkdf2_sha512)(entropy, "TON seed version", Math.max(1, Math.floor(PBKDF_ITERATIONS / 256)), 64);
		return seed[0] == 0;
	}
	async function isPasswordSeed(entropy) {
		const seed = await (0, pbkdf2_sha512_1$1.pbkdf2_sha512)(entropy, "TON fast seed version", 1, 64);
		return seed[0] == 1;
	}
	async function mnemonicToEntropy(mnemonicArray, password) {
		return await (0, hmac_sha512_1$4.hmac_sha512)(mnemonicArray.join(" "), password && password.length > 0 ? password : "");
	}
	exports.mnemonicToEntropy = mnemonicToEntropy;
	async function mnemonicToSeed(mnemonicArray, seed, password) {
		const entropy = await mnemonicToEntropy(mnemonicArray, password);
		return await (0, pbkdf2_sha512_1$1.pbkdf2_sha512)(entropy, seed, PBKDF_ITERATIONS, 64);
	}
	exports.mnemonicToSeed = mnemonicToSeed;
	/**
	* Extract private key from mnemonic
	* @param mnemonicArray mnemonic array
	* @param password mnemonic password
	* @returns Key Pair
	*/
	async function mnemonicToPrivateKey(mnemonicArray, password) {
		mnemonicArray = normalizeMnemonic(mnemonicArray);
		const seed = await mnemonicToSeed(mnemonicArray, "TON default seed", password);
		let keyPair = tweetnacl_1$1.default.sign.keyPair.fromSeed(seed.slice(0, 32));
		return {
			publicKey: Buffer.from(keyPair.publicKey),
			secretKey: Buffer.from(keyPair.secretKey)
		};
	}
	exports.mnemonicToPrivateKey = mnemonicToPrivateKey;
	/**
	* Convert mnemonic to wallet key pair
	* @param mnemonicArray mnemonic array
	* @param password mnemonic password
	* @returns Key Pair
	*/
	async function mnemonicToWalletKey(mnemonicArray, password) {
		let seedPk = await mnemonicToPrivateKey(mnemonicArray, password);
		let seedSecret = seedPk.secretKey.slice(0, 32);
		const keyPair = tweetnacl_1$1.default.sign.keyPair.fromSeed(seedSecret);
		return {
			publicKey: Buffer.from(keyPair.publicKey),
			secretKey: Buffer.from(keyPair.secretKey)
		};
	}
	exports.mnemonicToWalletKey = mnemonicToWalletKey;
	/**
	* Convert mnemonics to HD seed
	* @param mnemonicArray mnemonic array
	* @param password mnemonic password
	* @returns 64 byte seed
	*/
	async function mnemonicToHDSeed(mnemonicArray, password) {
		mnemonicArray = normalizeMnemonic(mnemonicArray);
		return await mnemonicToSeed(mnemonicArray, "TON HD Keys seed", password);
	}
	exports.mnemonicToHDSeed = mnemonicToHDSeed;
	/**
	* Validate Mnemonic
	* @param mnemonicArray mnemonic array
	* @param password mnemonic password
	* @returns true for valid mnemonic
	*/
	async function mnemonicValidate(mnemonicArray, password) {
		mnemonicArray = normalizeMnemonic(mnemonicArray);
		for (let word of mnemonicArray) if (wordlist_1$1.wordlist.indexOf(word) < 0) return false;
		if (password && password.length > 0) {
			if (!await isPasswordNeeded(mnemonicArray)) return false;
		}
		return await isBasicSeed(await mnemonicToEntropy(mnemonicArray, password));
	}
	exports.mnemonicValidate = mnemonicValidate;
	/**
	* Generate new Mnemonic
	* @param wordsCount number of words to generate
	* @param password mnemonic password
	* @returns
	*/
	async function mnemonicNew(wordsCount = 24, password) {
		let mnemonicArray = [];
		while (true) {
			mnemonicArray = [];
			for (let i$2 = 0; i$2 < wordsCount; i$2++) {
				let ind = await (0, getSecureRandom_1$1.getSecureRandomNumber)(0, wordlist_1$1.wordlist.length);
				mnemonicArray.push(wordlist_1$1.wordlist[ind]);
			}
			if (password && password.length > 0) {
				if (!await isPasswordNeeded(mnemonicArray)) continue;
			}
			if (!await isBasicSeed(await mnemonicToEntropy(mnemonicArray, password))) continue;
			break;
		}
		return mnemonicArray;
	}
	exports.mnemonicNew = mnemonicNew;
	/**
	* Converts bytes to mnemonics array (could be invalid for TON)
	* @param src source buffer
	* @param wordsCount number of words
	*/
	function bytesToMnemonicIndexes(src, wordsCount) {
		let bits = (0, binary_1.bytesToBits)(src);
		let indexes = [];
		for (let i$2 = 0; i$2 < wordsCount; i$2++) {
			let sl = bits.slice(i$2 * 11, i$2 * 11 + 11);
			indexes.push(parseInt(sl, 2));
		}
		return indexes;
	}
	exports.bytesToMnemonicIndexes = bytesToMnemonicIndexes;
	function bytesToMnemonics(src, wordsCount) {
		let mnemonics = bytesToMnemonicIndexes(src, wordsCount);
		let res = [];
		for (let m of mnemonics) res.push(wordlist_1$1.wordlist[m]);
		return res;
	}
	exports.bytesToMnemonics = bytesToMnemonics;
	/**
	* Converts mnemonics indexes to buffer with zero padding in the end
	* @param src source indexes
	* @returns Buffer
	*/
	function mnemonicIndexesToBytes(src) {
		let res = "";
		for (let s$1 of src) {
			if (!Number.isSafeInteger(s$1)) throw Error("Invalid input");
			if (s$1 < 0 || s$1 >= 2028) throw Error("Invalid input");
			res += (0, binary_1.lpad)(s$1.toString(2), "0", 11);
		}
		while (res.length % 8 !== 0) res = res + "0";
		return (0, binary_1.bitsToBytes)(res);
	}
	exports.mnemonicIndexesToBytes = mnemonicIndexesToBytes;
	/**
	* Generates deterministically mnemonics
	* @param seed
	* @param wordsCount
	* @param password
	*/
	async function mnemonicFromRandomSeed(seed, wordsCount = 24, password) {
		const bytesLength = Math.ceil(wordsCount * 11 / 8);
		let currentSeed = seed;
		while (true) {
			let entropy = await (0, pbkdf2_sha512_1$1.pbkdf2_sha512)(currentSeed, "TON mnemonic seed", Math.max(1, Math.floor(PBKDF_ITERATIONS / 256)), bytesLength);
			let mnemonics = bytesToMnemonics(entropy, wordsCount);
			if (await mnemonicValidate(mnemonics, password)) return mnemonics;
			currentSeed = entropy;
		}
	}
	exports.mnemonicFromRandomSeed = mnemonicFromRandomSeed;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/primitives/nacl.js
var require_nacl = __commonJS({ "../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/primitives/nacl.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	var __importDefault$1 = void 0 && (void 0).__importDefault || function(mod) {
		return mod && mod.__esModule ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.openBox = exports.sealBox = exports.signVerify = exports.sign = exports.keyPairFromSeed = exports.keyPairFromSecretKey = void 0;
	const tweetnacl_1 = __importDefault$1(require_nacl_fast());
	function keyPairFromSecretKey(secretKey) {
		let res = tweetnacl_1.default.sign.keyPair.fromSecretKey(new Uint8Array(secretKey));
		return {
			publicKey: Buffer.from(res.publicKey),
			secretKey: Buffer.from(res.secretKey)
		};
	}
	exports.keyPairFromSecretKey = keyPairFromSecretKey;
	function keyPairFromSeed(secretKey) {
		let res = tweetnacl_1.default.sign.keyPair.fromSeed(new Uint8Array(secretKey));
		return {
			publicKey: Buffer.from(res.publicKey),
			secretKey: Buffer.from(res.secretKey)
		};
	}
	exports.keyPairFromSeed = keyPairFromSeed;
	function sign(data, secretKey) {
		return Buffer.from(tweetnacl_1.default.sign.detached(new Uint8Array(data), new Uint8Array(secretKey)));
	}
	exports.sign = sign;
	function signVerify(data, signature, publicKey) {
		return tweetnacl_1.default.sign.detached.verify(new Uint8Array(data), new Uint8Array(signature), new Uint8Array(publicKey));
	}
	exports.signVerify = signVerify;
	function sealBox(data, nonce, key) {
		return Buffer.from(tweetnacl_1.default.secretbox(data, nonce, key));
	}
	exports.sealBox = sealBox;
	function openBox(data, nonce, key) {
		let res = tweetnacl_1.default.secretbox.open(data, nonce, key);
		if (!res) return null;
		return Buffer.from(res);
	}
	exports.openBox = openBox;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/hd/ed25519.js
var require_ed25519 = __commonJS({ "../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/hd/ed25519.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.deriveEd25519Path = exports.deriveED25519HardenedKey = exports.getED25519MasterKeyFromSeed = void 0;
	const hmac_sha512_1$3 = require_hmac_sha512();
	const ED25519_CURVE = "ed25519 seed";
	const HARDENED_OFFSET$1 = 2147483648;
	async function getED25519MasterKeyFromSeed(seed) {
		const I = await (0, hmac_sha512_1$3.hmac_sha512)(ED25519_CURVE, seed);
		const IL = I.slice(0, 32);
		const IR = I.slice(32);
		return {
			key: IL,
			chainCode: IR
		};
	}
	exports.getED25519MasterKeyFromSeed = getED25519MasterKeyFromSeed;
	async function deriveED25519HardenedKey(parent, index) {
		if (index >= HARDENED_OFFSET$1) throw Error("Key index must be less than offset");
		const indexBuffer = Buffer.alloc(4);
		indexBuffer.writeUInt32BE(index + HARDENED_OFFSET$1, 0);
		const data = Buffer.concat([
			Buffer.alloc(1, 0),
			parent.key,
			indexBuffer
		]);
		const I = await (0, hmac_sha512_1$3.hmac_sha512)(parent.chainCode, data);
		const IL = I.slice(0, 32);
		const IR = I.slice(32);
		return {
			key: IL,
			chainCode: IR
		};
	}
	exports.deriveED25519HardenedKey = deriveED25519HardenedKey;
	async function deriveEd25519Path(seed, path) {
		let state = await getED25519MasterKeyFromSeed(seed);
		let remaining = [...path];
		while (remaining.length > 0) {
			let index = remaining[0];
			remaining = remaining.slice(1);
			state = await deriveED25519HardenedKey(state, index);
		}
		return state.key;
	}
	exports.deriveEd25519Path = deriveEd25519Path;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/hd/symmetric.js
var require_symmetric = __commonJS({ "../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/hd/symmetric.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.deriveSymmetricPath = exports.deriveSymmetricHardenedKey = exports.getSymmetricMasterKeyFromSeed = void 0;
	const hmac_sha512_1$2 = require_hmac_sha512();
	const SYMMETRIC_SEED = "Symmetric key seed";
	async function getSymmetricMasterKeyFromSeed(seed) {
		const I = await (0, hmac_sha512_1$2.hmac_sha512)(SYMMETRIC_SEED, seed);
		const IL = I.slice(32);
		const IR = I.slice(0, 32);
		return {
			key: IL,
			chainCode: IR
		};
	}
	exports.getSymmetricMasterKeyFromSeed = getSymmetricMasterKeyFromSeed;
	async function deriveSymmetricHardenedKey(parent, offset) {
		const data = Buffer.concat([Buffer.alloc(1, 0), Buffer.from(offset)]);
		const I = await (0, hmac_sha512_1$2.hmac_sha512)(parent.chainCode, data);
		const IL = I.slice(32);
		const IR = I.slice(0, 32);
		return {
			key: IL,
			chainCode: IR
		};
	}
	exports.deriveSymmetricHardenedKey = deriveSymmetricHardenedKey;
	async function deriveSymmetricPath(seed, path) {
		let state = await getSymmetricMasterKeyFromSeed(seed);
		let remaining = [...path];
		while (remaining.length > 0) {
			let index = remaining[0];
			remaining = remaining.slice(1);
			state = await deriveSymmetricHardenedKey(state, index);
		}
		return state.key;
	}
	exports.deriveSymmetricPath = deriveSymmetricPath;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/hd/mnemonics.js
var require_mnemonics = __commonJS({ "../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/hd/mnemonics.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.deriveMnemonicsPath = exports.deriveMnemonicHardenedKey = exports.getMnemonicsMasterKeyFromSeed = void 0;
	const mnemonic_1$1 = require_mnemonic();
	const hmac_sha512_1$1 = require_hmac_sha512();
	const HARDENED_OFFSET = 2147483648;
	const MNEMONICS_SEED = "TON Mnemonics HD seed";
	async function getMnemonicsMasterKeyFromSeed(seed) {
		const I = await (0, hmac_sha512_1$1.hmac_sha512)(MNEMONICS_SEED, seed);
		const IL = I.slice(0, 32);
		const IR = I.slice(32);
		return {
			key: IL,
			chainCode: IR
		};
	}
	exports.getMnemonicsMasterKeyFromSeed = getMnemonicsMasterKeyFromSeed;
	async function deriveMnemonicHardenedKey(parent, index) {
		if (index >= HARDENED_OFFSET) throw Error("Key index must be less than offset");
		const indexBuffer = Buffer.alloc(4);
		indexBuffer.writeUInt32BE(index + HARDENED_OFFSET, 0);
		const data = Buffer.concat([
			Buffer.alloc(1, 0),
			parent.key,
			indexBuffer
		]);
		const I = await (0, hmac_sha512_1$1.hmac_sha512)(parent.chainCode, data);
		const IL = I.slice(0, 32);
		const IR = I.slice(32);
		return {
			key: IL,
			chainCode: IR
		};
	}
	exports.deriveMnemonicHardenedKey = deriveMnemonicHardenedKey;
	async function deriveMnemonicsPath(seed, path, wordsCount = 24, password) {
		let state = await getMnemonicsMasterKeyFromSeed(seed);
		let remaining = [...path];
		while (remaining.length > 0) {
			let index = remaining[0];
			remaining = remaining.slice(1);
			state = await deriveMnemonicHardenedKey(state, index);
		}
		return await (0, mnemonic_1$1.mnemonicFromRandomSeed)(state.key, wordsCount, password);
	}
	exports.deriveMnemonicsPath = deriveMnemonicsPath;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/index.js
var require_dist$1 = __commonJS({ "../../node_modules/.pnpm/@ton+crypto@3.3.0/node_modules/@ton/crypto/dist/index.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getMnemonicsMasterKeyFromSeed = exports.deriveMnemonicHardenedKey = exports.deriveMnemonicsPath = exports.deriveSymmetricPath = exports.deriveSymmetricHardenedKey = exports.getSymmetricMasterKeyFromSeed = exports.deriveEd25519Path = exports.deriveED25519HardenedKey = exports.getED25519MasterKeyFromSeed = exports.signVerify = exports.sign = exports.keyPairFromSecretKey = exports.keyPairFromSeed = exports.openBox = exports.sealBox = exports.mnemonicWordList = exports.mnemonicToHDSeed = exports.mnemonicToSeed = exports.mnemonicToWalletKey = exports.mnemonicToPrivateKey = exports.mnemonicValidate = exports.mnemonicNew = exports.newSecurePassphrase = exports.newSecureWords = exports.getSecureRandomNumber = exports.getSecureRandomWords = exports.getSecureRandomBytes = exports.hmac_sha512 = exports.pbkdf2_sha512 = exports.sha512_sync = exports.sha512 = exports.sha256_sync = exports.sha256 = void 0;
	var sha256_1 = require_sha256();
	Object.defineProperty(exports, "sha256", {
		enumerable: true,
		get: function() {
			return sha256_1.sha256;
		}
	});
	Object.defineProperty(exports, "sha256_sync", {
		enumerable: true,
		get: function() {
			return sha256_1.sha256_sync;
		}
	});
	var sha512_1 = require_sha512();
	Object.defineProperty(exports, "sha512", {
		enumerable: true,
		get: function() {
			return sha512_1.sha512;
		}
	});
	Object.defineProperty(exports, "sha512_sync", {
		enumerable: true,
		get: function() {
			return sha512_1.sha512_sync;
		}
	});
	var pbkdf2_sha512_1 = require_pbkdf2_sha512();
	Object.defineProperty(exports, "pbkdf2_sha512", {
		enumerable: true,
		get: function() {
			return pbkdf2_sha512_1.pbkdf2_sha512;
		}
	});
	var hmac_sha512_1 = require_hmac_sha512();
	Object.defineProperty(exports, "hmac_sha512", {
		enumerable: true,
		get: function() {
			return hmac_sha512_1.hmac_sha512;
		}
	});
	var getSecureRandom_1 = require_getSecureRandom();
	Object.defineProperty(exports, "getSecureRandomBytes", {
		enumerable: true,
		get: function() {
			return getSecureRandom_1.getSecureRandomBytes;
		}
	});
	Object.defineProperty(exports, "getSecureRandomWords", {
		enumerable: true,
		get: function() {
			return getSecureRandom_1.getSecureRandomWords;
		}
	});
	Object.defineProperty(exports, "getSecureRandomNumber", {
		enumerable: true,
		get: function() {
			return getSecureRandom_1.getSecureRandomNumber;
		}
	});
	var newSecureWords_1 = require_newSecureWords();
	Object.defineProperty(exports, "newSecureWords", {
		enumerable: true,
		get: function() {
			return newSecureWords_1.newSecureWords;
		}
	});
	var newSecurePassphrase_1 = require_newSecurePassphrase();
	Object.defineProperty(exports, "newSecurePassphrase", {
		enumerable: true,
		get: function() {
			return newSecurePassphrase_1.newSecurePassphrase;
		}
	});
	var mnemonic_1 = require_mnemonic();
	Object.defineProperty(exports, "mnemonicNew", {
		enumerable: true,
		get: function() {
			return mnemonic_1.mnemonicNew;
		}
	});
	Object.defineProperty(exports, "mnemonicValidate", {
		enumerable: true,
		get: function() {
			return mnemonic_1.mnemonicValidate;
		}
	});
	Object.defineProperty(exports, "mnemonicToPrivateKey", {
		enumerable: true,
		get: function() {
			return mnemonic_1.mnemonicToPrivateKey;
		}
	});
	Object.defineProperty(exports, "mnemonicToWalletKey", {
		enumerable: true,
		get: function() {
			return mnemonic_1.mnemonicToWalletKey;
		}
	});
	Object.defineProperty(exports, "mnemonicToSeed", {
		enumerable: true,
		get: function() {
			return mnemonic_1.mnemonicToSeed;
		}
	});
	Object.defineProperty(exports, "mnemonicToHDSeed", {
		enumerable: true,
		get: function() {
			return mnemonic_1.mnemonicToHDSeed;
		}
	});
	var wordlist_1 = require_wordlist();
	Object.defineProperty(exports, "mnemonicWordList", {
		enumerable: true,
		get: function() {
			return wordlist_1.wordlist;
		}
	});
	var nacl_1 = require_nacl();
	Object.defineProperty(exports, "sealBox", {
		enumerable: true,
		get: function() {
			return nacl_1.sealBox;
		}
	});
	Object.defineProperty(exports, "openBox", {
		enumerable: true,
		get: function() {
			return nacl_1.openBox;
		}
	});
	var nacl_2 = require_nacl();
	Object.defineProperty(exports, "keyPairFromSeed", {
		enumerable: true,
		get: function() {
			return nacl_2.keyPairFromSeed;
		}
	});
	Object.defineProperty(exports, "keyPairFromSecretKey", {
		enumerable: true,
		get: function() {
			return nacl_2.keyPairFromSecretKey;
		}
	});
	Object.defineProperty(exports, "sign", {
		enumerable: true,
		get: function() {
			return nacl_2.sign;
		}
	});
	Object.defineProperty(exports, "signVerify", {
		enumerable: true,
		get: function() {
			return nacl_2.signVerify;
		}
	});
	var ed25519_1 = require_ed25519();
	Object.defineProperty(exports, "getED25519MasterKeyFromSeed", {
		enumerable: true,
		get: function() {
			return ed25519_1.getED25519MasterKeyFromSeed;
		}
	});
	Object.defineProperty(exports, "deriveED25519HardenedKey", {
		enumerable: true,
		get: function() {
			return ed25519_1.deriveED25519HardenedKey;
		}
	});
	Object.defineProperty(exports, "deriveEd25519Path", {
		enumerable: true,
		get: function() {
			return ed25519_1.deriveEd25519Path;
		}
	});
	var symmetric_1 = require_symmetric();
	Object.defineProperty(exports, "getSymmetricMasterKeyFromSeed", {
		enumerable: true,
		get: function() {
			return symmetric_1.getSymmetricMasterKeyFromSeed;
		}
	});
	Object.defineProperty(exports, "deriveSymmetricHardenedKey", {
		enumerable: true,
		get: function() {
			return symmetric_1.deriveSymmetricHardenedKey;
		}
	});
	Object.defineProperty(exports, "deriveSymmetricPath", {
		enumerable: true,
		get: function() {
			return symmetric_1.deriveSymmetricPath;
		}
	});
	var mnemonics_1 = require_mnemonics();
	Object.defineProperty(exports, "deriveMnemonicsPath", {
		enumerable: true,
		get: function() {
			return mnemonics_1.deriveMnemonicsPath;
		}
	});
	Object.defineProperty(exports, "deriveMnemonicHardenedKey", {
		enumerable: true,
		get: function() {
			return mnemonics_1.deriveMnemonicHardenedKey;
		}
	});
	Object.defineProperty(exports, "getMnemonicsMasterKeyFromSeed", {
		enumerable: true,
		get: function() {
			return mnemonics_1.getMnemonicsMasterKeyFromSeed;
		}
	});
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/cell/wonderCalculator.js
var require_wonderCalculator = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/cell/wonderCalculator.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.wonderCalculator = void 0;
	const BitString_1$3 = require_BitString();
	const CellType_1$2 = require_CellType();
	const LevelMask_1 = require_LevelMask();
	const exoticPruned_1$1 = require_exoticPruned();
	const exoticMerkleProof_1$1 = require_exoticMerkleProof();
	const descriptor_1$1 = require_descriptor();
	const crypto_1$1 = require_dist$1();
	const exoticMerkleUpdate_1$1 = require_exoticMerkleUpdate();
	const exoticLibrary_1 = require_exoticLibrary();
	function wonderCalculator(type, bits, refs) {
		let levelMask;
		let pruned = null;
		if (type === CellType_1$2.CellType.Ordinary) {
			let mask = 0;
			for (let r of refs) mask = mask | r.mask.value;
			levelMask = new LevelMask_1.LevelMask(mask);
		} else if (type === CellType_1$2.CellType.PrunedBranch) {
			pruned = (0, exoticPruned_1$1.exoticPruned)(bits, refs);
			levelMask = new LevelMask_1.LevelMask(pruned.mask);
		} else if (type === CellType_1$2.CellType.MerkleProof) {
			let loaded = (0, exoticMerkleProof_1$1.exoticMerkleProof)(bits, refs);
			levelMask = new LevelMask_1.LevelMask(refs[0].mask.value >> 1);
		} else if (type === CellType_1$2.CellType.MerkleUpdate) {
			let loaded = (0, exoticMerkleUpdate_1$1.exoticMerkleUpdate)(bits, refs);
			levelMask = new LevelMask_1.LevelMask((refs[0].mask.value | refs[1].mask.value) >> 1);
		} else if (type === CellType_1$2.CellType.Library) {
			let loaded = (0, exoticLibrary_1.exoticLibrary)(bits, refs);
			levelMask = new LevelMask_1.LevelMask();
		} else throw new Error("Unsupported exotic type");
		let depths = [];
		let hashes = [];
		let hashCount = type === CellType_1$2.CellType.PrunedBranch ? 1 : levelMask.hashCount;
		let totalHashCount = levelMask.hashCount;
		let hashIOffset = totalHashCount - hashCount;
		for (let levelI = 0, hashI = 0; levelI <= levelMask.level; levelI++) {
			if (!levelMask.isSignificant(levelI)) continue;
			if (hashI < hashIOffset) {
				hashI++;
				continue;
			}
			let currentBits;
			if (hashI === hashIOffset) {
				if (!(levelI === 0 || type === CellType_1$2.CellType.PrunedBranch)) throw Error("Invalid");
				currentBits = bits;
			} else {
				if (!(levelI !== 0 && type !== CellType_1$2.CellType.PrunedBranch)) throw Error("Invalid: " + levelI + ", " + type);
				currentBits = new BitString_1$3.BitString(hashes[hashI - hashIOffset - 1], 0, 256);
			}
			let currentDepth = 0;
			for (let c$1 of refs) {
				let childDepth;
				if (type == CellType_1$2.CellType.MerkleProof || type == CellType_1$2.CellType.MerkleUpdate) childDepth = c$1.depth(levelI + 1);
				else childDepth = c$1.depth(levelI);
				currentDepth = Math.max(currentDepth, childDepth);
			}
			if (refs.length > 0) currentDepth++;
			let repr = (0, descriptor_1$1.getRepr)(bits, currentBits, refs, levelI, type);
			let hash = (0, crypto_1$1.sha256_sync)(repr);
			let destI = hashI - hashIOffset;
			depths[destI] = currentDepth;
			hashes[destI] = hash;
			hashI++;
		}
		let resolvedHashes = [];
		let resolvedDepths = [];
		if (pruned) for (let i$2 = 0; i$2 < 4; i$2++) {
			const { hashIndex } = levelMask.apply(i$2);
			const { hashIndex: thisHashIndex } = levelMask;
			if (hashIndex !== thisHashIndex) {
				resolvedHashes.push(pruned.pruned[hashIndex].hash);
				resolvedDepths.push(pruned.pruned[hashIndex].depth);
			} else {
				resolvedHashes.push(hashes[0]);
				resolvedDepths.push(depths[0]);
			}
		}
		else for (let i$2 = 0; i$2 < 4; i$2++) {
			resolvedHashes.push(hashes[levelMask.apply(i$2).hashIndex]);
			resolvedDepths.push(depths[levelMask.apply(i$2).hashIndex]);
		}
		return {
			mask: levelMask,
			hashes: resolvedHashes,
			depths: resolvedDepths
		};
	}
	exports.wonderCalculator = wonderCalculator;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/cell/utils/topologicalSort.js
var require_topologicalSort = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/cell/utils/topologicalSort.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.topologicalSort = void 0;
	function topologicalSort(src) {
		let pending = [src];
		let allCells = /* @__PURE__ */ new Map();
		let notPermCells = /* @__PURE__ */ new Set();
		let sorted = [];
		while (pending.length > 0) {
			const cells = [...pending];
			pending = [];
			for (let cell of cells) {
				const hash = cell.hash().toString("hex");
				if (allCells.has(hash)) continue;
				notPermCells.add(hash);
				allCells.set(hash, {
					cell,
					refs: cell.refs.map((v) => v.hash().toString("hex"))
				});
				for (let r of cell.refs) pending.push(r);
			}
		}
		let tempMark = /* @__PURE__ */ new Set();
		function visit(hash) {
			if (!notPermCells.has(hash)) return;
			if (tempMark.has(hash)) throw Error("Not a DAG");
			tempMark.add(hash);
			for (let c$1 of allCells.get(hash).refs) visit(c$1);
			sorted.unshift(hash);
			tempMark.delete(hash);
			notPermCells.delete(hash);
		}
		while (notPermCells.size > 0) {
			const id = Array.from(notPermCells)[0];
			visit(id);
		}
		let indexes = /* @__PURE__ */ new Map();
		for (let i$2 = 0; i$2 < sorted.length; i$2++) indexes.set(sorted[i$2], i$2);
		let result = [];
		for (let ent of sorted) {
			const rrr = allCells.get(ent);
			result.push({
				cell: rrr.cell,
				refs: rrr.refs.map((v) => indexes.get(v))
			});
		}
		return result;
	}
	exports.topologicalSort = topologicalSort;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/utils/bitsForNumber.js
var require_bitsForNumber = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/utils/bitsForNumber.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.bitsForNumber = void 0;
	function bitsForNumber(src, mode) {
		let v = BigInt(src);
		if (mode === "int") {
			if (v === 0n || v === -1n) return 1;
			let v2 = v > 0 ? v : -v;
			return v2.toString(2).length + 1;
		} else if (mode === "uint") {
			if (v < 0) throw Error(`value is negative. Got ${src}`);
			return v.toString(2).length;
		} else throw Error(`invalid mode. Got ${mode}`);
	}
	exports.bitsForNumber = bitsForNumber;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/utils/crc32c.js
var require_crc32c = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/utils/crc32c.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.crc32c = void 0;
	const POLY = 2197175160;
	function crc32c(source) {
		let crc = -1;
		for (let n$1 = 0; n$1 < source.length; n$1++) {
			crc ^= source[n$1];
			crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
			crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
			crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
			crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
			crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
			crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
			crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
			crc = crc & 1 ? crc >>> 1 ^ POLY : crc >>> 1;
		}
		crc = crc ^ 4294967295;
		let res = Buffer.alloc(4);
		res.writeInt32LE(crc);
		return res;
	}
	exports.crc32c = crc32c;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/cell/serialization.js
var require_serialization = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/cell/serialization.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.serializeBoc = exports.deserializeBoc = exports.parseBoc = void 0;
	const BitReader_1$2 = require_BitReader();
	const BitString_1$2 = require_BitString();
	const Cell_1$5 = require_Cell();
	const topologicalSort_1 = require_topologicalSort();
	const bitsForNumber_1 = require_bitsForNumber();
	const BitBuilder_1$2 = require_BitBuilder();
	const descriptor_1 = require_descriptor();
	const paddedBits_1 = require_paddedBits();
	const crc32c_1$1 = require_crc32c();
	function getHashesCount(levelMask) {
		return getHashesCountFromMask(levelMask & 7);
	}
	function getHashesCountFromMask(mask) {
		let n$1 = 0;
		for (let i$2 = 0; i$2 < 3; i$2++) {
			n$1 += mask & 1;
			mask = mask >> 1;
		}
		return n$1 + 1;
	}
	function readCell(reader, sizeBytes) {
		const d1 = reader.loadUint(8);
		const refsCount = d1 % 8;
		const exotic = !!(d1 & 8);
		const d2 = reader.loadUint(8);
		const dataBytesize = Math.ceil(d2 / 2);
		const paddingAdded = !!(d2 % 2);
		const levelMask = d1 >> 5;
		const hasHashes = (d1 & 16) != 0;
		const hash_bytes = 32;
		const hashesSize = hasHashes ? getHashesCount(levelMask) * hash_bytes : 0;
		const depthSize = hasHashes ? getHashesCount(levelMask) * 2 : 0;
		reader.skip(hashesSize * 8);
		reader.skip(depthSize * 8);
		let bits = BitString_1$2.BitString.EMPTY;
		if (dataBytesize > 0) if (paddingAdded) bits = reader.loadPaddedBits(dataBytesize * 8);
		else bits = reader.loadBits(dataBytesize * 8);
		let refs = [];
		for (let i$2 = 0; i$2 < refsCount; i$2++) refs.push(reader.loadUint(sizeBytes * 8));
		return {
			bits,
			refs,
			exotic
		};
	}
	function calcCellSize(cell, sizeBytes) {
		return 2 + Math.ceil(cell.bits.length / 8) + cell.refs.length * sizeBytes;
	}
	function parseBoc(src) {
		let reader = new BitReader_1$2.BitReader(new BitString_1$2.BitString(src, 0, src.length * 8));
		let magic = reader.loadUint(32);
		if (magic === 1761568243) {
			let size = reader.loadUint(8);
			let offBytes = reader.loadUint(8);
			let cells = reader.loadUint(size * 8);
			let roots = reader.loadUint(size * 8);
			let absent = reader.loadUint(size * 8);
			let totalCellSize = reader.loadUint(offBytes * 8);
			let index = reader.loadBuffer(cells * offBytes);
			let cellData = reader.loadBuffer(totalCellSize);
			return {
				size,
				offBytes,
				cells,
				roots,
				absent,
				totalCellSize,
				index,
				cellData,
				root: [0]
			};
		} else if (magic === 2898503464) {
			let size = reader.loadUint(8);
			let offBytes = reader.loadUint(8);
			let cells = reader.loadUint(size * 8);
			let roots = reader.loadUint(size * 8);
			let absent = reader.loadUint(size * 8);
			let totalCellSize = reader.loadUint(offBytes * 8);
			let index = reader.loadBuffer(cells * offBytes);
			let cellData = reader.loadBuffer(totalCellSize);
			let crc32 = reader.loadBuffer(4);
			if (!(0, crc32c_1$1.crc32c)(src.subarray(0, src.length - 4)).equals(crc32)) throw Error("Invalid CRC32C");
			return {
				size,
				offBytes,
				cells,
				roots,
				absent,
				totalCellSize,
				index,
				cellData,
				root: [0]
			};
		} else if (magic === 3052313714) {
			let hasIdx = reader.loadUint(1);
			let hasCrc32c = reader.loadUint(1);
			let hasCacheBits = reader.loadUint(1);
			let flags = reader.loadUint(2);
			let size = reader.loadUint(3);
			let offBytes = reader.loadUint(8);
			let cells = reader.loadUint(size * 8);
			let roots = reader.loadUint(size * 8);
			let absent = reader.loadUint(size * 8);
			let totalCellSize = reader.loadUint(offBytes * 8);
			let root = [];
			for (let i$2 = 0; i$2 < roots; i$2++) root.push(reader.loadUint(size * 8));
			let index = null;
			if (hasIdx) index = reader.loadBuffer(cells * offBytes);
			let cellData = reader.loadBuffer(totalCellSize);
			if (hasCrc32c) {
				let crc32 = reader.loadBuffer(4);
				if (!(0, crc32c_1$1.crc32c)(src.subarray(0, src.length - 4)).equals(crc32)) throw Error("Invalid CRC32C");
			}
			return {
				size,
				offBytes,
				cells,
				roots,
				absent,
				totalCellSize,
				index,
				cellData,
				root
			};
		} else throw Error("Invalid magic");
	}
	exports.parseBoc = parseBoc;
	function deserializeBoc(src) {
		let boc = parseBoc(src);
		let reader = new BitReader_1$2.BitReader(new BitString_1$2.BitString(boc.cellData, 0, boc.cellData.length * 8));
		let cells = [];
		for (let i$2 = 0; i$2 < boc.cells; i$2++) {
			let cll = readCell(reader, boc.size);
			cells.push({
				...cll,
				result: null
			});
		}
		for (let i$2 = cells.length - 1; i$2 >= 0; i$2--) {
			if (cells[i$2].result) throw Error("Impossible");
			let refs = [];
			for (let r of cells[i$2].refs) {
				if (!cells[r].result) throw Error("Invalid BOC file");
				refs.push(cells[r].result);
			}
			cells[i$2].result = new Cell_1$5.Cell({
				bits: cells[i$2].bits,
				refs,
				exotic: cells[i$2].exotic
			});
		}
		let roots = [];
		for (let i$2 = 0; i$2 < boc.root.length; i$2++) roots.push(cells[boc.root[i$2]].result);
		return roots;
	}
	exports.deserializeBoc = deserializeBoc;
	function writeCellToBuilder(cell, refs, sizeBytes, to) {
		let d1 = (0, descriptor_1.getRefsDescriptor)(cell.refs, cell.level(), cell.type);
		let d2 = (0, descriptor_1.getBitsDescriptor)(cell.bits);
		to.writeUint(d1, 8);
		to.writeUint(d2, 8);
		to.writeBuffer((0, paddedBits_1.bitsToPaddedBuffer)(cell.bits));
		for (let r of refs) to.writeUint(r, sizeBytes * 8);
	}
	function serializeBoc(root, opts) {
		let allCells = (0, topologicalSort_1.topologicalSort)(root);
		let cellsNum = allCells.length;
		let has_idx = opts.idx;
		let has_crc32c = opts.crc32;
		let has_cache_bits = false;
		let flags = 0;
		let sizeBytes = Math.max(Math.ceil((0, bitsForNumber_1.bitsForNumber)(cellsNum, "uint") / 8), 1);
		let totalCellSize = 0;
		let index = [];
		for (let c$1 of allCells) {
			let sz = calcCellSize(c$1.cell, sizeBytes);
			index.push(totalCellSize);
			totalCellSize += sz;
		}
		let offsetBytes = Math.max(Math.ceil((0, bitsForNumber_1.bitsForNumber)(totalCellSize, "uint") / 8), 1);
		let totalSize = (6 + 3 * sizeBytes + offsetBytes + 1 * sizeBytes + (has_idx ? cellsNum * offsetBytes : 0) + totalCellSize + (has_crc32c ? 4 : 0)) * 8;
		let builder = new BitBuilder_1$2.BitBuilder(totalSize);
		builder.writeUint(3052313714, 32);
		builder.writeBit(has_idx);
		builder.writeBit(has_crc32c);
		builder.writeBit(has_cache_bits);
		builder.writeUint(flags, 2);
		builder.writeUint(sizeBytes, 3);
		builder.writeUint(offsetBytes, 8);
		builder.writeUint(cellsNum, sizeBytes * 8);
		builder.writeUint(1, sizeBytes * 8);
		builder.writeUint(0, sizeBytes * 8);
		builder.writeUint(totalCellSize, offsetBytes * 8);
		builder.writeUint(0, sizeBytes * 8);
		if (has_idx) for (let i$2 = 0; i$2 < cellsNum; i$2++) builder.writeUint(index[i$2], offsetBytes * 8);
		for (let i$2 = 0; i$2 < cellsNum; i$2++) writeCellToBuilder(allCells[i$2].cell, allCells[i$2].refs, sizeBytes, builder);
		if (has_crc32c) {
			let crc32 = (0, crc32c_1$1.crc32c)(builder.buffer());
			builder.writeBuffer(crc32);
		}
		let res = builder.buffer();
		if (res.length !== totalSize / 8) throw Error("Internal error");
		return res;
	}
	exports.serializeBoc = serializeBoc;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/Cell.js
var require_Cell = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/Cell.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	var __importDefault = void 0 && (void 0).__importDefault || function(mod) {
		return mod && mod.__esModule ? mod : { "default": mod };
	};
	var _a;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Cell = void 0;
	const symbol_inspect_1 = __importDefault(require_symbol());
	const BitString_1$1 = require_BitString();
	const CellType_1$1 = require_CellType();
	const Slice_1$2 = require_Slice();
	const resolveExotic_1 = require_resolveExotic();
	const wonderCalculator_1 = require_wonderCalculator();
	const serialization_1 = require_serialization();
	const BitReader_1$1 = require_BitReader();
	const Builder_1$12 = require_Builder();
	/**
	* Cell as described in TVM spec
	*/
	var Cell = class Cell {
		/**
		* Deserialize cells from BOC
		* @param src source buffer
		* @returns array of cells
		*/
		static fromBoc(src) {
			return (0, serialization_1.deserializeBoc)(src);
		}
		/**
		* Helper class that deserializes a single cell from BOC in base64
		* @param src source string
		*/
		static fromBase64(src) {
			let parsed = Cell.fromBoc(Buffer.from(src, "base64"));
			if (parsed.length !== 1) throw new Error("Deserialized more than one cell");
			return parsed[0];
		}
		constructor(opts) {
			this._hashes = [];
			this._depths = [];
			/**
			* Beging cell parsing
			* @returns a new slice
			*/
			this.beginParse = (allowExotic = false) => {
				if (this.isExotic && !allowExotic) throw new Error("Exotic cells cannot be parsed");
				return new Slice_1$2.Slice(new BitReader_1$1.BitReader(this.bits), this.refs);
			};
			/**
			* Get cell hash
			* @param level level
			* @returns cell hash
			*/
			this.hash = (level = 3) => {
				return this._hashes[Math.min(this._hashes.length - 1, level)];
			};
			/**
			* Get cell depth
			* @param level level
			* @returns cell depth
			*/
			this.depth = (level = 3) => {
				return this._depths[Math.min(this._depths.length - 1, level)];
			};
			/**
			* Get cell level
			* @returns cell level
			*/
			this.level = () => {
				return this.mask.level;
			};
			/**
			* Checks cell to be euqal to another cell
			* @param other other cell
			* @returns true if cells are equal
			*/
			this.equals = (other) => {
				return this.hash().equals(other.hash());
			};
			this[_a] = () => this.toString();
			let bits = BitString_1$1.BitString.EMPTY;
			if (opts && opts.bits) bits = opts.bits;
			let refs = [];
			if (opts && opts.refs) refs = [...opts.refs];
			let hashes;
			let depths;
			let mask;
			let type = CellType_1$1.CellType.Ordinary;
			if (opts && opts.exotic) {
				let resolved = (0, resolveExotic_1.resolveExotic)(bits, refs);
				let wonders = (0, wonderCalculator_1.wonderCalculator)(resolved.type, bits, refs);
				mask = wonders.mask;
				depths = wonders.depths;
				hashes = wonders.hashes;
				type = resolved.type;
			} else {
				if (refs.length > 4) throw new Error("Invalid number of references");
				if (bits.length > 1023) throw new Error(`Bits overflow: ${bits.length} > 1023`);
				let wonders = (0, wonderCalculator_1.wonderCalculator)(CellType_1$1.CellType.Ordinary, bits, refs);
				mask = wonders.mask;
				depths = wonders.depths;
				hashes = wonders.hashes;
				type = CellType_1$1.CellType.Ordinary;
			}
			this.type = type;
			this.bits = bits;
			this.refs = refs;
			this.mask = mask;
			this._depths = depths;
			this._hashes = hashes;
			Object.freeze(this);
			Object.freeze(this.refs);
			Object.freeze(this.bits);
			Object.freeze(this.mask);
			Object.freeze(this._depths);
			Object.freeze(this._hashes);
		}
		/**
		* Check if cell is exotic
		*/
		get isExotic() {
			return this.type !== CellType_1$1.CellType.Ordinary;
		}
		/**
		* Serializes cell to BOC
		* @param opts options
		*/
		toBoc(opts) {
			let idx = opts && opts.idx !== null && opts.idx !== void 0 ? opts.idx : false;
			let crc32 = opts && opts.crc32 !== null && opts.crc32 !== void 0 ? opts.crc32 : true;
			return (0, serialization_1.serializeBoc)(this, {
				idx,
				crc32
			});
		}
		/**
		* Format cell to string
		* @param indent indentation
		* @returns string representation
		*/
		toString(indent) {
			let id = indent || "";
			let t$1 = "x";
			if (this.isExotic) {
				if (this.type === CellType_1$1.CellType.MerkleProof) t$1 = "p";
				else if (this.type === CellType_1$1.CellType.MerkleUpdate) t$1 = "u";
				else if (this.type === CellType_1$1.CellType.PrunedBranch) t$1 = "p";
			}
			let s$1 = id + (this.isExotic ? t$1 : "x") + "{" + this.bits.toString() + "}";
			for (let k in this.refs) {
				const i$2 = this.refs[k];
				s$1 += "\n" + i$2.toString(id + " ");
			}
			return s$1;
		}
		/**
		* Covnert cell to slice
		* @returns slice
		*/
		asSlice() {
			return this.beginParse();
		}
		/**
		* Convert cell to a builder that has this cell stored
		* @returns builder
		*/
		asBuilder() {
			return (0, Builder_1$12.beginCell)().storeSlice(this.asSlice());
		}
	};
	exports.Cell = Cell;
	_a = symbol_inspect_1.default;
	Cell.EMPTY = new Cell();
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/Builder.js
var require_Builder = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/boc/Builder.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Builder = exports.beginCell = void 0;
	const BitBuilder_1$1 = require_BitBuilder();
	const Cell_1$4 = require_Cell();
	const strings_1 = require_strings();
	/**
	* Start building a cell
	* @returns a new builder
	*/
	function beginCell$1() {
		return new Builder();
	}
	exports.beginCell = beginCell$1;
	/**
	* Builder for Cells
	*/
	var Builder = class Builder {
		constructor() {
			this._bits = new BitBuilder_1$1.BitBuilder();
			this._refs = [];
		}
		/**
		* Bits written so far
		*/
		get bits() {
			return this._bits.length;
		}
		/**
		* References written so far
		*/
		get refs() {
			return this._refs.length;
		}
		/**
		* Available bits
		*/
		get availableBits() {
			return 1023 - this.bits;
		}
		/**
		* Available references
		*/
		get availableRefs() {
			return 4 - this.refs;
		}
		/**
		* Write a single bit
		* @param value bit to write, true or positive number for 1, false or zero or negative for 0
		* @returns this builder
		*/
		storeBit(value) {
			this._bits.writeBit(value);
			return this;
		}
		/**
		* Write bits from BitString
		* @param src source bits
		* @returns this builder
		*/
		storeBits(src) {
			this._bits.writeBits(src);
			return this;
		}
		/**
		* Store Buffer
		* @param src source buffer
		* @param bytes optional number of bytes to write
		* @returns this builder
		*/
		storeBuffer(src, bytes) {
			if (bytes !== void 0 && bytes !== null) {
				if (src.length !== bytes) throw Error(`Buffer length ${src.length} is not equal to ${bytes}`);
			}
			this._bits.writeBuffer(src);
			return this;
		}
		/**
		* Store Maybe Buffer
		* @param src source buffer or null
		* @param bytes optional number of bytes to write
		* @returns this builder
		*/
		storeMaybeBuffer(src, bytes) {
			if (src !== null) {
				this.storeBit(1);
				this.storeBuffer(src, bytes);
			} else this.storeBit(0);
			return this;
		}
		/**
		* Store uint value
		* @param value value as bigint or number
		* @param bits number of bits to write
		* @returns this builder
		*/
		storeUint(value, bits) {
			this._bits.writeUint(value, bits);
			return this;
		}
		/**
		* Store maybe uint value
		* @param value value as bigint or number, null or undefined
		* @param bits number of bits to write
		* @returns this builder
		*/
		storeMaybeUint(value, bits) {
			if (value !== null && value !== void 0) {
				this.storeBit(1);
				this.storeUint(value, bits);
			} else this.storeBit(0);
			return this;
		}
		/**
		* Store int value
		* @param value value as bigint or number
		* @param bits number of bits to write
		* @returns this builder
		*/
		storeInt(value, bits) {
			this._bits.writeInt(value, bits);
			return this;
		}
		/**
		* Store maybe int value
		* @param value value as bigint or number, null or undefined
		* @param bits number of bits to write
		* @returns this builder
		*/
		storeMaybeInt(value, bits) {
			if (value !== null && value !== void 0) {
				this.storeBit(1);
				this.storeInt(value, bits);
			} else this.storeBit(0);
			return this;
		}
		/**
		* Store varuint value
		* @param value value as bigint or number
		* @param bits number of bits to write to header
		* @returns this builder
		*/
		storeVarUint(value, bits) {
			this._bits.writeVarUint(value, bits);
			return this;
		}
		/**
		* Store maybe varuint value
		* @param value value as bigint or number, null or undefined
		* @param bits number of bits to write to header
		* @returns this builder
		*/
		storeMaybeVarUint(value, bits) {
			if (value !== null && value !== void 0) {
				this.storeBit(1);
				this.storeVarUint(value, bits);
			} else this.storeBit(0);
			return this;
		}
		/**
		* Store varint value
		* @param value value as bigint or number
		* @param bits number of bits to write to header
		* @returns this builder
		*/
		storeVarInt(value, bits) {
			this._bits.writeVarInt(value, bits);
			return this;
		}
		/**
		* Store maybe varint value
		* @param value value as bigint or number, null or undefined
		* @param bits number of bits to write to header
		* @returns this builder
		*/
		storeMaybeVarInt(value, bits) {
			if (value !== null && value !== void 0) {
				this.storeBit(1);
				this.storeVarInt(value, bits);
			} else this.storeBit(0);
			return this;
		}
		/**
		* Store coins value
		* @param amount amount of coins
		* @returns this builder
		*/
		storeCoins(amount) {
			this._bits.writeCoins(amount);
			return this;
		}
		/**
		* Store maybe coins value
		* @param amount amount of coins, null or undefined
		* @returns this builder
		*/
		storeMaybeCoins(amount) {
			if (amount !== null && amount !== void 0) {
				this.storeBit(1);
				this.storeCoins(amount);
			} else this.storeBit(0);
			return this;
		}
		/**
		* Store address
		* @param addres address to store
		* @returns this builder
		*/
		storeAddress(address$1) {
			this._bits.writeAddress(address$1);
			return this;
		}
		/**
		* Store reference
		* @param cell cell or builder to store
		* @returns this builder
		*/
		storeRef(cell) {
			if (this._refs.length >= 4) throw new Error("Too many references");
			if (cell instanceof Cell_1$4.Cell) this._refs.push(cell);
			else if (cell instanceof Builder) this._refs.push(cell.endCell());
			else throw new Error("Invalid argument");
			return this;
		}
		/**
		* Store reference if not null
		* @param cell cell or builder to store
		* @returns this builder
		*/
		storeMaybeRef(cell) {
			if (cell) {
				this.storeBit(1);
				this.storeRef(cell);
			} else this.storeBit(0);
			return this;
		}
		/**
		* Store slice it in this builder
		* @param src source slice
		*/
		storeSlice(src) {
			let c$1 = src.clone();
			if (c$1.remainingBits > 0) this.storeBits(c$1.loadBits(c$1.remainingBits));
			while (c$1.remainingRefs > 0) this.storeRef(c$1.loadRef());
			return this;
		}
		/**
		* Store slice in this builder if not null
		* @param src source slice
		*/
		storeMaybeSlice(src) {
			if (src) {
				this.storeBit(1);
				this.storeSlice(src);
			} else this.storeBit(0);
			return this;
		}
		/**
		* Store builder
		* @param src builder to store
		* @returns this builder
		*/
		storeBuilder(src) {
			return this.storeSlice(src.endCell().beginParse());
		}
		/**
		* Store builder if not null
		* @param src builder to store
		* @returns this builder
		*/
		storeMaybeBuilder(src) {
			if (src) {
				this.storeBit(1);
				this.storeBuilder(src);
			} else this.storeBit(0);
			return this;
		}
		/**
		* Store writer or builder
		* @param writer writer or builder to store
		* @returns this builder
		*/
		storeWritable(writer) {
			if (typeof writer === "object") writer.writeTo(this);
			else writer(this);
			return this;
		}
		/**
		* Store writer or builder if not null
		* @param writer writer or builder to store
		* @returns this builder
		*/
		storeMaybeWritable(writer) {
			if (writer) {
				this.storeBit(1);
				this.storeWritable(writer);
			} else this.storeBit(0);
			return this;
		}
		/**
		* Store object in this builder
		* @param writer Writable or writer functuin
		*/
		store(writer) {
			this.storeWritable(writer);
			return this;
		}
		/**
		* Store string tail
		* @param src source string
		* @returns this builder
		*/
		storeStringTail(src) {
			(0, strings_1.writeString)(src, this);
			return this;
		}
		/**
		* Store string tail
		* @param src source string
		* @returns this builder
		*/
		storeMaybeStringTail(src) {
			if (src !== null && src !== void 0) {
				this.storeBit(1);
				(0, strings_1.writeString)(src, this);
			} else this.storeBit(0);
			return this;
		}
		/**
		* Store string tail in ref
		* @param src source string
		* @returns this builder
		*/
		storeStringRefTail(src) {
			this.storeRef(beginCell$1().storeStringTail(src));
			return this;
		}
		/**
		* Store maybe string tail in ref
		* @param src source string
		* @returns this builder
		*/
		storeMaybeStringRefTail(src) {
			if (src !== null && src !== void 0) {
				this.storeBit(1);
				this.storeStringRefTail(src);
			} else this.storeBit(0);
			return this;
		}
		/**
		* Store dictionary in this builder
		* @param dict dictionary to store
		* @returns this builder
		*/
		storeDict(dict, key, value) {
			if (dict) dict.store(this, key, value);
			else this.storeBit(0);
			return this;
		}
		/**
		* Store dictionary in this builder directly
		* @param dict dictionary to store
		* @returns this builder
		*/
		storeDictDirect(dict, key, value) {
			dict.storeDirect(this, key, value);
			return this;
		}
		/**
		* Complete cell
		* @returns cell
		*/
		endCell() {
			return new Cell_1$4.Cell({
				bits: this._bits.build(),
				refs: this._refs
			});
		}
		/**
		* Convert to cell
		* @returns cell
		*/
		asCell() {
			return this.endCell();
		}
		/**
		* Convert to slice
		* @returns slice
		*/
		asSlice() {
			return this.endCell().beginParse();
		}
	};
	exports.Builder = Builder;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/SimpleLibrary.js
var require_SimpleLibrary = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/SimpleLibrary.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.SimpleLibraryValue = exports.storeSimpleLibrary = exports.loadSimpleLibrary = void 0;
	function loadSimpleLibrary(slice) {
		return {
			public: slice.loadBit(),
			root: slice.loadRef()
		};
	}
	exports.loadSimpleLibrary = loadSimpleLibrary;
	function storeSimpleLibrary(src) {
		return (builder) => {
			builder.storeBit(src.public);
			builder.storeRef(src.root);
		};
	}
	exports.storeSimpleLibrary = storeSimpleLibrary;
	exports.SimpleLibraryValue = {
		serialize(src, builder) {
			storeSimpleLibrary(src)(builder);
		},
		parse(src) {
			return loadSimpleLibrary(src);
		}
	};
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/TickTock.js
var require_TickTock = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/TickTock.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeTickTock = exports.loadTickTock = void 0;
	function loadTickTock(slice) {
		return {
			tick: slice.loadBit(),
			tock: slice.loadBit()
		};
	}
	exports.loadTickTock = loadTickTock;
	function storeTickTock(src) {
		return (builder) => {
			builder.storeBit(src.tick);
			builder.storeBit(src.tock);
		};
	}
	exports.storeTickTock = storeTickTock;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/StateInit.js
var require_StateInit = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/StateInit.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeStateInit = exports.loadStateInit = void 0;
	const Dictionary_1$5 = require_Dictionary();
	const SimpleLibrary_1$1 = require_SimpleLibrary();
	const TickTock_1$1 = require_TickTock();
	function loadStateInit(slice) {
		let splitDepth;
		if (slice.loadBit()) splitDepth = slice.loadUint(5);
		let special;
		if (slice.loadBit()) special = (0, TickTock_1$1.loadTickTock)(slice);
		let code$1 = slice.loadMaybeRef();
		let data = slice.loadMaybeRef();
		let libraries = slice.loadDict(Dictionary_1$5.Dictionary.Keys.BigUint(256), SimpleLibrary_1$1.SimpleLibraryValue);
		if (libraries.size === 0) libraries = void 0;
		return {
			splitDepth,
			special,
			code: code$1,
			data,
			libraries
		};
	}
	exports.loadStateInit = loadStateInit;
	function storeStateInit(src) {
		return (builder) => {
			if (src.splitDepth !== null && src.splitDepth !== void 0) {
				builder.storeBit(true);
				builder.storeUint(src.splitDepth, 5);
			} else builder.storeBit(false);
			if (src.special !== null && src.special !== void 0) {
				builder.storeBit(true);
				builder.store((0, TickTock_1$1.storeTickTock)(src.special));
			} else builder.storeBit(false);
			builder.storeMaybeRef(src.code);
			builder.storeMaybeRef(src.data);
			builder.storeDict(src.libraries);
		};
	}
	exports.storeStateInit = storeStateInit;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/address/contractAddress.js
var require_contractAddress = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/address/contractAddress.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.contractAddress = void 0;
	const Builder_1$11 = require_Builder();
	const StateInit_1$4 = require_StateInit();
	const Address_1$3 = require_Address();
	function contractAddress(workchain, init) {
		let hash = (0, Builder_1$11.beginCell)().store((0, StateInit_1$4.storeStateInit)(init)).endCell().hash();
		return new Address_1$3.Address(workchain, hash);
	}
	exports.contractAddress = contractAddress;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/tuple/tuple.js
var require_tuple = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/tuple/tuple.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.parseTuple = exports.serializeTuple = void 0;
	const Builder_1$10 = require_Builder();
	const INT64_MIN = BigInt("-9223372036854775808");
	const INT64_MAX = BigInt("9223372036854775807");
	function serializeTupleItem(src, builder) {
		if (src.type === "null") builder.storeUint(0, 8);
		else if (src.type === "int") if (src.value <= INT64_MAX && src.value >= INT64_MIN) {
			builder.storeUint(1, 8);
			builder.storeInt(src.value, 64);
		} else {
			builder.storeUint(256, 15);
			builder.storeInt(src.value, 257);
		}
		else if (src.type === "nan") builder.storeInt(767, 16);
		else if (src.type === "cell") {
			builder.storeUint(3, 8);
			builder.storeRef(src.cell);
		} else if (src.type === "slice") {
			builder.storeUint(4, 8);
			builder.storeUint(0, 10);
			builder.storeUint(src.cell.bits.length, 10);
			builder.storeUint(0, 3);
			builder.storeUint(src.cell.refs.length, 3);
			builder.storeRef(src.cell);
		} else if (src.type === "builder") {
			builder.storeUint(5, 8);
			builder.storeRef(src.cell);
		} else if (src.type === "tuple") {
			let head = null;
			let tail = null;
			for (let i$2 = 0; i$2 < src.items.length; i$2++) {
				let s$1 = head;
				head = tail;
				tail = s$1;
				if (i$2 > 1) head = (0, Builder_1$10.beginCell)().storeRef(tail).storeRef(head).endCell();
				let bc = (0, Builder_1$10.beginCell)();
				serializeTupleItem(src.items[i$2], bc);
				tail = bc.endCell();
			}
			builder.storeUint(7, 8);
			builder.storeUint(src.items.length, 16);
			if (head) builder.storeRef(head);
			if (tail) builder.storeRef(tail);
		} else throw Error("Invalid value");
	}
	function parseStackItem(cs) {
		let kind = cs.loadUint(8);
		if (kind === 0) return { type: "null" };
		else if (kind === 1) return {
			type: "int",
			value: cs.loadIntBig(64)
		};
		else if (kind === 2) if (cs.loadUint(7) === 0) return {
			type: "int",
			value: cs.loadIntBig(257)
		};
		else {
			cs.loadBit();
			return { type: "nan" };
		}
		else if (kind === 3) return {
			type: "cell",
			cell: cs.loadRef()
		};
		else if (kind === 4) {
			let startBits = cs.loadUint(10);
			let endBits = cs.loadUint(10);
			let startRefs = cs.loadUint(3);
			let endRefs = cs.loadUint(3);
			let rs = cs.loadRef().beginParse();
			rs.skip(startBits);
			let dt = rs.loadBits(endBits - startBits);
			let builder = (0, Builder_1$10.beginCell)().storeBits(dt);
			if (startRefs < endRefs) {
				for (let i$2 = 0; i$2 < startRefs; i$2++) rs.loadRef();
				for (let i$2 = 0; i$2 < endRefs - startRefs; i$2++) builder.storeRef(rs.loadRef());
			}
			return {
				type: "slice",
				cell: builder.endCell()
			};
		} else if (kind === 5) return {
			type: "builder",
			cell: cs.loadRef()
		};
		else if (kind === 7) {
			let length = cs.loadUint(16);
			let items = [];
			if (length > 1) {
				let head = cs.loadRef().beginParse();
				let tail = cs.loadRef().beginParse();
				items.unshift(parseStackItem(tail));
				for (let i$2 = 0; i$2 < length - 2; i$2++) {
					let ohead = head;
					head = ohead.loadRef().beginParse();
					tail = ohead.loadRef().beginParse();
					items.unshift(parseStackItem(tail));
				}
				items.unshift(parseStackItem(head));
			} else if (length === 1) items.push(parseStackItem(cs.loadRef().beginParse()));
			return {
				type: "tuple",
				items
			};
		} else throw Error("Unsupported stack item");
	}
	function serializeTupleTail(src, builder) {
		if (src.length > 0) {
			let tail = (0, Builder_1$10.beginCell)();
			serializeTupleTail(src.slice(0, src.length - 1), tail);
			builder.storeRef(tail.endCell());
			serializeTupleItem(src[src.length - 1], builder);
		}
	}
	function serializeTuple(src) {
		let builder = (0, Builder_1$10.beginCell)();
		builder.storeUint(src.length, 24);
		let r = [...src];
		serializeTupleTail(r, builder);
		return builder.endCell();
	}
	exports.serializeTuple = serializeTuple;
	function parseTuple(src) {
		let res = [];
		let cs = src.beginParse();
		let size = cs.loadUint(24);
		for (let i$2 = 0; i$2 < size; i$2++) {
			let next = cs.loadRef();
			res.unshift(parseStackItem(cs));
			cs = next.beginParse();
		}
		return res;
	}
	exports.parseTuple = parseTuple;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/tuple/reader.js
var require_reader = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/tuple/reader.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TupleReader = void 0;
	var TupleReader = class TupleReader {
		constructor(items) {
			this.items = [...items];
		}
		get remaining() {
			return this.items.length;
		}
		peek() {
			if (this.items.length === 0) throw Error("EOF");
			return this.items[0];
		}
		pop() {
			if (this.items.length === 0) throw Error("EOF");
			let res = this.items[0];
			this.items.splice(0, 1);
			return res;
		}
		skip(num = 1) {
			for (let i$2 = 0; i$2 < num; i$2++) this.pop();
			return this;
		}
		readBigNumber() {
			let popped = this.pop();
			if (popped.type !== "int") throw Error("Not a number");
			return popped.value;
		}
		readBigNumberOpt() {
			let popped = this.pop();
			if (popped.type === "null") return null;
			if (popped.type !== "int") throw Error("Not a number");
			return popped.value;
		}
		readNumber() {
			return Number(this.readBigNumber());
		}
		readNumberOpt() {
			let r = this.readBigNumberOpt();
			if (r !== null) return Number(r);
			else return null;
		}
		readBoolean() {
			let res = this.readNumber();
			return res === 0 ? false : true;
		}
		readBooleanOpt() {
			let res = this.readNumberOpt();
			if (res !== null) return res === 0 ? false : true;
			else return null;
		}
		readAddress() {
			let r = this.readCell().beginParse().loadAddress();
			if (r !== null) return r;
			else throw Error("Not an address");
		}
		readAddressOpt() {
			let r = this.readCellOpt();
			if (r !== null) return r.beginParse().loadMaybeAddress();
			else return null;
		}
		readCell() {
			let popped = this.pop();
			if (popped.type !== "cell" && popped.type !== "slice" && popped.type !== "builder") throw Error("Not a cell: " + popped.type);
			return popped.cell;
		}
		readCellOpt() {
			let popped = this.pop();
			if (popped.type === "null") return null;
			if (popped.type !== "cell" && popped.type !== "slice" && popped.type !== "builder") throw Error("Not a cell");
			return popped.cell;
		}
		readTuple() {
			let popped = this.pop();
			if (popped.type !== "tuple") throw Error("Not a tuple");
			return new TupleReader(popped.items);
		}
		readTupleOpt() {
			let popped = this.pop();
			if (popped.type === "null") return null;
			if (popped.type !== "tuple") throw Error("Not a tuple");
			return new TupleReader(popped.items);
		}
		static readLispList(reader) {
			const result = [];
			let tail = reader;
			while (tail !== null) {
				var head = tail.pop();
				if (tail.items.length === 0 || tail.items[0].type !== "tuple" && tail.items[0].type !== "null") throw Error("Lisp list consists only from (any, tuple) elements and ends with null");
				tail = tail.readTupleOpt();
				result.push(head);
			}
			return result;
		}
		readLispListDirect() {
			if (this.items.length === 1 && this.items[0].type === "null") return [];
			return TupleReader.readLispList(this);
		}
		readLispList() {
			return TupleReader.readLispList(this.readTupleOpt());
		}
		readBuffer() {
			let s$1 = this.readCell().beginParse();
			if (s$1.remainingRefs !== 0) throw Error("Not a buffer");
			if (s$1.remainingBits % 8 !== 0) throw Error("Not a buffer");
			return s$1.loadBuffer(s$1.remainingBits / 8);
		}
		readBufferOpt() {
			let popped = this.peek();
			if (popped.type === "null") return null;
			let s$1 = this.readCell().beginParse();
			if (s$1.remainingRefs !== 0) throw Error("Not a buffer");
			if (s$1.remainingBits % 8 !== 0) throw Error("Not a buffer");
			return s$1.loadBuffer(s$1.remainingBits / 8);
		}
		readString() {
			let s$1 = this.readCell().beginParse();
			return s$1.loadStringTail();
		}
		readStringOpt() {
			let popped = this.peek();
			if (popped.type === "null") return null;
			let s$1 = this.readCell().beginParse();
			return s$1.loadStringTail();
		}
	};
	exports.TupleReader = TupleReader;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/tuple/builder.js
var require_builder = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/tuple/builder.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TupleBuilder = void 0;
	const Builder_1$9 = require_Builder();
	const Cell_1$3 = require_Cell();
	const Slice_1$1 = require_Slice();
	var TupleBuilder = class {
		constructor() {
			this._tuple = [];
		}
		writeNumber(v) {
			if (v === null || v === void 0) this._tuple.push({ type: "null" });
			else this._tuple.push({
				type: "int",
				value: BigInt(v)
			});
		}
		writeBoolean(v) {
			if (v === null || v === void 0) this._tuple.push({ type: "null" });
			else this._tuple.push({
				type: "int",
				value: v ? -1n : 0n
			});
		}
		writeBuffer(v) {
			if (v === null || v === void 0) this._tuple.push({ type: "null" });
			else this._tuple.push({
				type: "slice",
				cell: (0, Builder_1$9.beginCell)().storeBuffer(v).endCell()
			});
		}
		writeString(v) {
			if (v === null || v === void 0) this._tuple.push({ type: "null" });
			else this._tuple.push({
				type: "slice",
				cell: (0, Builder_1$9.beginCell)().storeStringTail(v).endCell()
			});
		}
		writeCell(v) {
			if (v === null || v === void 0) this._tuple.push({ type: "null" });
			else if (v instanceof Cell_1$3.Cell) this._tuple.push({
				type: "cell",
				cell: v
			});
			else if (v instanceof Slice_1$1.Slice) this._tuple.push({
				type: "cell",
				cell: v.asCell()
			});
		}
		writeSlice(v) {
			if (v === null || v === void 0) this._tuple.push({ type: "null" });
			else if (v instanceof Cell_1$3.Cell) this._tuple.push({
				type: "slice",
				cell: v
			});
			else if (v instanceof Slice_1$1.Slice) this._tuple.push({
				type: "slice",
				cell: v.asCell()
			});
		}
		writeBuilder(v) {
			if (v === null || v === void 0) this._tuple.push({ type: "null" });
			else if (v instanceof Cell_1$3.Cell) this._tuple.push({
				type: "builder",
				cell: v
			});
			else if (v instanceof Slice_1$1.Slice) this._tuple.push({
				type: "builder",
				cell: v.asCell()
			});
		}
		writeTuple(v) {
			if (v === null || v === void 0) this._tuple.push({ type: "null" });
			else this._tuple.push({
				type: "tuple",
				items: v
			});
		}
		writeAddress(v) {
			if (v === null || v === void 0) this._tuple.push({ type: "null" });
			else this._tuple.push({
				type: "slice",
				cell: (0, Builder_1$9.beginCell)().storeAddress(v).endCell()
			});
		}
		build() {
			return [...this._tuple];
		}
	};
	exports.TupleBuilder = TupleBuilder;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/utils/convert.js
var require_convert = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/utils/convert.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.fromNano = exports.toNano = void 0;
	function toNano$1(src) {
		if (typeof src === "bigint") return src * 1000000000n;
		else {
			if (typeof src === "number") {
				if (!Number.isFinite(src)) throw Error("Invalid number");
				if (Math.log10(src) <= 6) src = src.toLocaleString("en", {
					minimumFractionDigits: 9,
					useGrouping: false
				});
				else if (src - Math.trunc(src) === 0) src = src.toLocaleString("en", {
					maximumFractionDigits: 0,
					useGrouping: false
				});
				else throw Error("Not enough precision for a number value. Use string value instead");
			}
			let neg = false;
			while (src.startsWith("-")) {
				neg = !neg;
				src = src.slice(1);
			}
			if (src === ".") throw Error("Invalid number");
			let parts = src.split(".");
			if (parts.length > 2) throw Error("Invalid number");
			let whole = parts[0];
			let frac = parts[1];
			if (!whole) whole = "0";
			if (!frac) frac = "0";
			if (frac.length > 9) throw Error("Invalid number");
			while (frac.length < 9) frac += "0";
			let r = BigInt(whole) * 1000000000n + BigInt(frac);
			if (neg) r = -r;
			return r;
		}
	}
	exports.toNano = toNano$1;
	function fromNano(src) {
		let v = BigInt(src);
		let neg = false;
		if (v < 0) {
			neg = true;
			v = -v;
		}
		let frac = v % 1000000000n;
		let facStr = frac.toString();
		while (facStr.length < 9) facStr = "0" + facStr;
		facStr = facStr.match(/^([0-9]*[1-9]|0)(0*)/)[1];
		let whole = v / 1000000000n;
		let wholeStr = whole.toString();
		let value = `${wholeStr}${facStr === "0" ? "" : `.${facStr}`}`;
		if (neg) value = "-" + value;
		return value;
	}
	exports.fromNano = fromNano;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/_helpers.js
var require__helpers = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/_helpers.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.comment = exports.external = exports.internal = void 0;
	const Address_1$2 = require_Address();
	const Cell_1$2 = require_Cell();
	const Builder_1$8 = require_Builder();
	const convert_1$1 = require_convert();
	function internal(src) {
		let bounce = true;
		if (src.bounce !== null && src.bounce !== void 0) bounce = src.bounce;
		let to;
		if (typeof src.to === "string") to = Address_1$2.Address.parse(src.to);
		else if (Address_1$2.Address.isAddress(src.to)) to = src.to;
		else throw new Error(`Invalid address ${src.to}`);
		let value;
		if (typeof src.value === "string") value = (0, convert_1$1.toNano)(src.value);
		else value = src.value;
		let body = Cell_1$2.Cell.EMPTY;
		if (typeof src.body === "string") body = (0, Builder_1$8.beginCell)().storeUint(0, 32).storeStringTail(src.body).endCell();
		else if (src.body) body = src.body;
		return {
			info: {
				type: "internal",
				dest: to,
				value: { coins: value },
				bounce,
				ihrDisabled: true,
				bounced: false,
				ihrFee: 0n,
				forwardFee: 0n,
				createdAt: 0,
				createdLt: 0n
			},
			init: src.init ? {
				code: src.init.code,
				data: src.init.data
			} : void 0,
			body
		};
	}
	exports.internal = internal;
	function external(src) {
		let to;
		if (typeof src.to === "string") to = Address_1$2.Address.parse(src.to);
		else if (Address_1$2.Address.isAddress(src.to)) to = src.to;
		else throw new Error(`Invalid address ${src.to}`);
		return {
			info: {
				type: "external-in",
				dest: to,
				importFee: 0n
			},
			init: src.init ? {
				code: src.init.code,
				data: src.init.data
			} : void 0,
			body: src.body || Cell_1$2.Cell.EMPTY
		};
	}
	exports.external = external;
	function comment(src) {
		return (0, Builder_1$8.beginCell)().storeUint(0, 32).storeStringTail(src).endCell();
	}
	exports.comment = comment;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/AccountState.js
var require_AccountState = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/AccountState.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeAccountState = exports.loadAccountState = void 0;
	const StateInit_1$3 = require_StateInit();
	function loadAccountState(cs) {
		if (cs.loadBit()) return {
			type: "active",
			state: (0, StateInit_1$3.loadStateInit)(cs)
		};
		else if (cs.loadBit()) return {
			type: "frozen",
			stateHash: cs.loadUintBig(256)
		};
		else return { type: "uninit" };
	}
	exports.loadAccountState = loadAccountState;
	function storeAccountState(src) {
		return (builder) => {
			if (src.type === "active") {
				builder.storeBit(true);
				builder.store((0, StateInit_1$3.storeStateInit)(src.state));
			} else if (src.type === "frozen") {
				builder.storeBit(false);
				builder.storeBit(true);
				builder.storeUint(src.stateHash, 256);
			} else if (src.type === "uninit") {
				builder.storeBit(false);
				builder.storeBit(false);
			}
		};
	}
	exports.storeAccountState = storeAccountState;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/CurrencyCollection.js
var require_CurrencyCollection = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/CurrencyCollection.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeCurrencyCollection = exports.loadCurrencyCollection = void 0;
	const Dictionary_1$4 = require_Dictionary();
	function loadCurrencyCollection(slice) {
		const coins = slice.loadCoins();
		const other = slice.loadDict(Dictionary_1$4.Dictionary.Keys.Uint(32), Dictionary_1$4.Dictionary.Values.BigVarUint(5));
		if (other.size === 0) return { coins };
		else return {
			other,
			coins
		};
	}
	exports.loadCurrencyCollection = loadCurrencyCollection;
	function storeCurrencyCollection(collection) {
		return (builder) => {
			builder.storeCoins(collection.coins);
			if (collection.other) builder.storeDict(collection.other);
			else builder.storeBit(0);
		};
	}
	exports.storeCurrencyCollection = storeCurrencyCollection;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/AccountStorage.js
var require_AccountStorage = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/AccountStorage.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeAccountStorage = exports.loadAccountStorage = void 0;
	const AccountState_1$1 = require_AccountState();
	const CurrencyCollection_1$7 = require_CurrencyCollection();
	function loadAccountStorage(slice) {
		return {
			lastTransLt: slice.loadUintBig(64),
			balance: (0, CurrencyCollection_1$7.loadCurrencyCollection)(slice),
			state: (0, AccountState_1$1.loadAccountState)(slice)
		};
	}
	exports.loadAccountStorage = loadAccountStorage;
	function storeAccountStorage(src) {
		return (builder) => {
			builder.storeUint(src.lastTransLt, 64);
			builder.store((0, CurrencyCollection_1$7.storeCurrencyCollection)(src.balance));
			builder.store((0, AccountState_1$1.storeAccountState)(src.state));
		};
	}
	exports.storeAccountStorage = storeAccountStorage;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/StorageUsed.js
var require_StorageUsed = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/StorageUsed.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeStorageUsed = exports.loadStorageUsed = void 0;
	function loadStorageUsed(cs) {
		return {
			cells: cs.loadVarUintBig(3),
			bits: cs.loadVarUintBig(3),
			publicCells: cs.loadVarUintBig(3)
		};
	}
	exports.loadStorageUsed = loadStorageUsed;
	function storeStorageUsed(src) {
		return (builder) => {
			builder.storeVarUint(src.cells, 3);
			builder.storeVarUint(src.bits, 3);
			builder.storeVarUint(src.publicCells, 3);
		};
	}
	exports.storeStorageUsed = storeStorageUsed;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/StorageInto.js
var require_StorageInto = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/StorageInto.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeStorageInfo = exports.loadStorageInfo = void 0;
	const StorageUsed_1$1 = require_StorageUsed();
	function loadStorageInfo(slice) {
		return {
			used: (0, StorageUsed_1$1.loadStorageUsed)(slice),
			lastPaid: slice.loadUint(32),
			duePayment: slice.loadMaybeCoins()
		};
	}
	exports.loadStorageInfo = loadStorageInfo;
	function storeStorageInfo(src) {
		return (builder) => {
			builder.store((0, StorageUsed_1$1.storeStorageUsed)(src.used));
			builder.storeUint(src.lastPaid, 32);
			builder.storeMaybeCoins(src.duePayment);
		};
	}
	exports.storeStorageInfo = storeStorageInfo;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/Account.js
var require_Account = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/Account.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeAccount = exports.loadAccount = void 0;
	const AccountStorage_1$1 = require_AccountStorage();
	const StorageInto_1$1 = require_StorageInto();
	function loadAccount(slice) {
		return {
			addr: slice.loadAddress(),
			storageStats: (0, StorageInto_1$1.loadStorageInfo)(slice),
			storage: (0, AccountStorage_1$1.loadAccountStorage)(slice)
		};
	}
	exports.loadAccount = loadAccount;
	function storeAccount(src) {
		return (builder) => {
			builder.storeAddress(src.addr);
			builder.store((0, StorageInto_1$1.storeStorageInfo)(src.storageStats));
			builder.store((0, AccountStorage_1$1.storeAccountStorage)(src.storage));
		};
	}
	exports.storeAccount = storeAccount;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/AccountStatus.js
var require_AccountStatus = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/AccountStatus.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeAccountStatus = exports.loadAccountStatus = void 0;
	/**
	* Load account state from slice
	* @param slice
	* @returns AccountState
	*/
	function loadAccountStatus(slice) {
		const status = slice.loadUint(2);
		if (status === 0) return "uninitialized";
		if (status === 1) return "frozen";
		if (status === 2) return "active";
		if (status === 3) return "non-existing";
		throw Error("Invalid data");
	}
	exports.loadAccountStatus = loadAccountStatus;
	/**
	* Store account state to builder
	* @param src account state
	* @param builder buidler
	*/
	function storeAccountStatus(src) {
		return (builder) => {
			if (src === "uninitialized") builder.storeUint(0, 2);
			else if (src === "frozen") builder.storeUint(1, 2);
			else if (src === "active") builder.storeUint(2, 2);
			else if (src === "non-existing") builder.storeUint(3, 2);
			else throw Error("Invalid data");
			return builder;
		};
	}
	exports.storeAccountStatus = storeAccountStatus;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/AccountStatusChange.js
var require_AccountStatusChange = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/AccountStatusChange.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeAccountStatusChange = exports.loadAccountStatusChange = void 0;
	function loadAccountStatusChange(slice) {
		if (!slice.loadBit()) return "unchanged";
		if (slice.loadBit()) return "frozen";
		else return "deleted";
	}
	exports.loadAccountStatusChange = loadAccountStatusChange;
	function storeAccountStatusChange(src) {
		return (builder) => {
			if (src == "unchanged") builder.storeBit(0);
			else if (src === "frozen") {
				builder.storeBit(1);
				builder.storeBit(0);
			} else if (src === "deleted") {
				builder.storeBit(1);
				builder.storeBit(1);
			} else throw Error("Invalid account status change");
		};
	}
	exports.storeAccountStatusChange = storeAccountStatusChange;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/CommonMessageInfoRelaxed.js
var require_CommonMessageInfoRelaxed = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/CommonMessageInfoRelaxed.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeCommonMessageInfoRelaxed = exports.loadCommonMessageInfoRelaxed = void 0;
	const CurrencyCollection_1$6 = require_CurrencyCollection();
	function loadCommonMessageInfoRelaxed(slice) {
		if (!slice.loadBit()) {
			const ihrDisabled = slice.loadBit();
			const bounce = slice.loadBit();
			const bounced = slice.loadBit();
			const src$1 = slice.loadMaybeAddress();
			const dest$1 = slice.loadAddress();
			const value = (0, CurrencyCollection_1$6.loadCurrencyCollection)(slice);
			const ihrFee = slice.loadCoins();
			const forwardFee = slice.loadCoins();
			const createdLt$1 = slice.loadUintBig(64);
			const createdAt$1 = slice.loadUint(32);
			return {
				type: "internal",
				ihrDisabled,
				bounce,
				bounced,
				src: src$1,
				dest: dest$1,
				value,
				ihrFee,
				forwardFee,
				createdLt: createdLt$1,
				createdAt: createdAt$1
			};
		}
		if (!slice.loadBit()) throw Error("External In message is not possible for CommonMessageInfoRelaxed");
		const src = slice.loadMaybeAddress();
		const dest = slice.loadMaybeExternalAddress();
		const createdLt = slice.loadUintBig(64);
		const createdAt = slice.loadUint(32);
		return {
			type: "external-out",
			src,
			dest,
			createdLt,
			createdAt
		};
	}
	exports.loadCommonMessageInfoRelaxed = loadCommonMessageInfoRelaxed;
	function storeCommonMessageInfoRelaxed(source) {
		return (builder) => {
			if (source.type === "internal") {
				builder.storeBit(0);
				builder.storeBit(source.ihrDisabled);
				builder.storeBit(source.bounce);
				builder.storeBit(source.bounced);
				builder.storeAddress(source.src);
				builder.storeAddress(source.dest);
				builder.store((0, CurrencyCollection_1$6.storeCurrencyCollection)(source.value));
				builder.storeCoins(source.ihrFee);
				builder.storeCoins(source.forwardFee);
				builder.storeUint(source.createdLt, 64);
				builder.storeUint(source.createdAt, 32);
			} else if (source.type === "external-out") {
				builder.storeBit(1);
				builder.storeBit(1);
				builder.storeAddress(source.src);
				builder.storeAddress(source.dest);
				builder.storeUint(source.createdLt, 64);
				builder.storeUint(source.createdAt, 32);
			} else throw new Error("Unknown CommonMessageInfo type");
		};
	}
	exports.storeCommonMessageInfoRelaxed = storeCommonMessageInfoRelaxed;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/MessageRelaxed.js
var require_MessageRelaxed = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/MessageRelaxed.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeMessageRelaxed = exports.loadMessageRelaxed = void 0;
	const Builder_1$7 = require_Builder();
	const CommonMessageInfoRelaxed_1$1 = require_CommonMessageInfoRelaxed();
	const StateInit_1$2 = require_StateInit();
	function loadMessageRelaxed(slice) {
		const info = (0, CommonMessageInfoRelaxed_1$1.loadCommonMessageInfoRelaxed)(slice);
		let init = null;
		if (slice.loadBit()) if (!slice.loadBit()) init = (0, StateInit_1$2.loadStateInit)(slice);
		else init = (0, StateInit_1$2.loadStateInit)(slice.loadRef().beginParse());
		const body = slice.loadBit() ? slice.loadRef() : slice.asCell();
		return {
			info,
			init,
			body
		};
	}
	exports.loadMessageRelaxed = loadMessageRelaxed;
	function storeMessageRelaxed(message, opts) {
		return (builder) => {
			builder.store((0, CommonMessageInfoRelaxed_1$1.storeCommonMessageInfoRelaxed)(message.info));
			if (message.init) {
				builder.storeBit(true);
				let initCell = (0, Builder_1$7.beginCell)().store((0, StateInit_1$2.storeStateInit)(message.init));
				let needRef$1 = false;
				if (opts && opts.forceRef) needRef$1 = true;
				else if (builder.availableBits - 2 >= initCell.bits) needRef$1 = false;
				else needRef$1 = true;
				if (needRef$1) {
					builder.storeBit(true);
					builder.storeRef(initCell);
				} else {
					builder.storeBit(false);
					builder.storeBuilder(initCell);
				}
			} else builder.storeBit(false);
			let needRef = false;
			if (opts && opts.forceRef) needRef = true;
			else if (builder.availableBits - 1 >= message.body.bits.length && builder.refs + message.body.refs.length <= 4) needRef = false;
			else needRef = true;
			if (needRef) {
				builder.storeBit(true);
				builder.storeRef(message.body);
			} else {
				builder.storeBit(false);
				builder.storeBuilder(message.body.asBuilder());
			}
		};
	}
	exports.storeMessageRelaxed = storeMessageRelaxed;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/OutList.js
var require_OutList = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/OutList.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.loadOutList = exports.storeOutList = exports.loadOutAction = exports.storeOutAction = void 0;
	const MessageRelaxed_1$1 = require_MessageRelaxed();
	const Builder_1$6 = require_Builder();
	function storeOutAction(action$1) {
		switch (action$1.type) {
			case "sendMsg": return storeOutActionSendMsg(action$1);
			case "setCode": return storeOutActionSetCode(action$1);
			default: throw new Error(`Unknown action type ${action$1.type}`);
		}
	}
	exports.storeOutAction = storeOutAction;
	const outActionSendMsgTag = 247711853;
	function storeOutActionSendMsg(action$1) {
		return (builder) => {
			builder.storeUint(outActionSendMsgTag, 32).storeUint(action$1.mode, 8).storeRef((0, Builder_1$6.beginCell)().store((0, MessageRelaxed_1$1.storeMessageRelaxed)(action$1.outMsg)).endCell());
		};
	}
	const outActionSetCodeTag = 2907562126;
	function storeOutActionSetCode(action$1) {
		return (builder) => {
			builder.storeUint(outActionSetCodeTag, 32).storeRef(action$1.newCode);
		};
	}
	function loadOutAction(slice) {
		const tag = slice.loadUint(32);
		if (tag === outActionSendMsgTag) {
			const mode = slice.loadUint(8);
			const outMsg = (0, MessageRelaxed_1$1.loadMessageRelaxed)(slice.loadRef().beginParse());
			return {
				type: "sendMsg",
				mode,
				outMsg
			};
		}
		if (tag === outActionSetCodeTag) {
			const newCode = slice.loadRef();
			return {
				type: "setCode",
				newCode
			};
		}
		throw new Error(`Unknown out action tag 0x${tag.toString(16)}`);
	}
	exports.loadOutAction = loadOutAction;
	function storeOutList(actions) {
		const cell = actions.reduce((cell$1, action$1) => (0, Builder_1$6.beginCell)().storeRef(cell$1).store(storeOutAction(action$1)).endCell(), (0, Builder_1$6.beginCell)().endCell());
		return (builder) => {
			builder.storeSlice(cell.beginParse());
		};
	}
	exports.storeOutList = storeOutList;
	function loadOutList(slice) {
		const actions = [];
		while (slice.remainingRefs) {
			const nextCell = slice.loadRef();
			actions.push(loadOutAction(slice));
			slice = nextCell.beginParse();
		}
		return actions.reverse();
	}
	exports.loadOutList = loadOutList;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/CommonMessageInfo.js
var require_CommonMessageInfo = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/CommonMessageInfo.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeCommonMessageInfo = exports.loadCommonMessageInfo = void 0;
	const CurrencyCollection_1$5 = require_CurrencyCollection();
	function loadCommonMessageInfo(slice) {
		if (!slice.loadBit()) {
			const ihrDisabled = slice.loadBit();
			const bounce = slice.loadBit();
			const bounced = slice.loadBit();
			const src$1 = slice.loadAddress();
			const dest$1 = slice.loadAddress();
			const value = (0, CurrencyCollection_1$5.loadCurrencyCollection)(slice);
			const ihrFee = slice.loadCoins();
			const forwardFee = slice.loadCoins();
			const createdLt$1 = slice.loadUintBig(64);
			const createdAt$1 = slice.loadUint(32);
			return {
				type: "internal",
				ihrDisabled,
				bounce,
				bounced,
				src: src$1,
				dest: dest$1,
				value,
				ihrFee,
				forwardFee,
				createdLt: createdLt$1,
				createdAt: createdAt$1
			};
		}
		if (!slice.loadBit()) {
			const src$1 = slice.loadMaybeExternalAddress();
			const dest$1 = slice.loadAddress();
			const importFee = slice.loadCoins();
			return {
				type: "external-in",
				src: src$1,
				dest: dest$1,
				importFee
			};
		}
		const src = slice.loadAddress();
		const dest = slice.loadMaybeExternalAddress();
		const createdLt = slice.loadUintBig(64);
		const createdAt = slice.loadUint(32);
		return {
			type: "external-out",
			src,
			dest,
			createdLt,
			createdAt
		};
	}
	exports.loadCommonMessageInfo = loadCommonMessageInfo;
	function storeCommonMessageInfo(source) {
		return (builder) => {
			if (source.type === "internal") {
				builder.storeBit(0);
				builder.storeBit(source.ihrDisabled);
				builder.storeBit(source.bounce);
				builder.storeBit(source.bounced);
				builder.storeAddress(source.src);
				builder.storeAddress(source.dest);
				builder.store((0, CurrencyCollection_1$5.storeCurrencyCollection)(source.value));
				builder.storeCoins(source.ihrFee);
				builder.storeCoins(source.forwardFee);
				builder.storeUint(source.createdLt, 64);
				builder.storeUint(source.createdAt, 32);
			} else if (source.type === "external-in") {
				builder.storeBit(1);
				builder.storeBit(0);
				builder.storeAddress(source.src);
				builder.storeAddress(source.dest);
				builder.storeCoins(source.importFee);
			} else if (source.type === "external-out") {
				builder.storeBit(1);
				builder.storeBit(1);
				builder.storeAddress(source.src);
				builder.storeAddress(source.dest);
				builder.storeUint(source.createdLt, 64);
				builder.storeUint(source.createdAt, 32);
			} else throw new Error("Unknown CommonMessageInfo type");
		};
	}
	exports.storeCommonMessageInfo = storeCommonMessageInfo;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/ComputeSkipReason.js
var require_ComputeSkipReason = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/ComputeSkipReason.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeComputeSkipReason = exports.loadComputeSkipReason = void 0;
	function loadComputeSkipReason(slice) {
		let reason = slice.loadUint(2);
		if (reason === 0) return "no-state";
		else if (reason === 1) return "bad-state";
		else if (reason === 2) return "no-gas";
		throw new Error(`Unknown ComputeSkipReason: ${reason}`);
	}
	exports.loadComputeSkipReason = loadComputeSkipReason;
	function storeComputeSkipReason(src) {
		return (builder) => {
			if (src === "no-state") builder.storeUint(0, 2);
			else if (src === "bad-state") builder.storeUint(1, 2);
			else if (src === "no-gas") builder.storeUint(2, 2);
			else throw new Error(`Unknown ComputeSkipReason: ${src}`);
		};
	}
	exports.storeComputeSkipReason = storeComputeSkipReason;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/DepthBalanceInfo.js
var require_DepthBalanceInfo = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/DepthBalanceInfo.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeDepthBalanceInfo = exports.loadDepthBalanceInfo = void 0;
	const CurrencyCollection_1$4 = require_CurrencyCollection();
	function loadDepthBalanceInfo(slice) {
		let splitDepth = slice.loadUint(5);
		return {
			splitDepth,
			balance: (0, CurrencyCollection_1$4.loadCurrencyCollection)(slice)
		};
	}
	exports.loadDepthBalanceInfo = loadDepthBalanceInfo;
	function storeDepthBalanceInfo(src) {
		return (builder) => {
			builder.storeUint(src.splitDepth, 5);
			builder.store((0, CurrencyCollection_1$4.storeCurrencyCollection)(src.balance));
		};
	}
	exports.storeDepthBalanceInfo = storeDepthBalanceInfo;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/HashUpdate.js
var require_HashUpdate = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/HashUpdate.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeHashUpdate = exports.loadHashUpdate = void 0;
	function loadHashUpdate(slice) {
		if (slice.loadUint(8) !== 114) throw Error("Invalid data");
		const oldHash = slice.loadBuffer(32);
		const newHash = slice.loadBuffer(32);
		return {
			oldHash,
			newHash
		};
	}
	exports.loadHashUpdate = loadHashUpdate;
	function storeHashUpdate(src) {
		return (builder) => {
			builder.storeUint(114, 8);
			builder.storeBuffer(src.oldHash);
			builder.storeBuffer(src.newHash);
		};
	}
	exports.storeHashUpdate = storeHashUpdate;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/MasterchainStateExtra.js
var require_MasterchainStateExtra = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/MasterchainStateExtra.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.loadMasterchainStateExtra = void 0;
	const Dictionary_1$3 = require_Dictionary();
	const CurrencyCollection_1$3 = require_CurrencyCollection();
	function loadMasterchainStateExtra(cs) {
		if (cs.loadUint(16) !== 52262) throw Error("Invalid data");
		if (cs.loadBit()) cs.loadRef();
		let configAddress = cs.loadUintBig(256);
		let config = Dictionary_1$3.Dictionary.load(Dictionary_1$3.Dictionary.Keys.Int(32), Dictionary_1$3.Dictionary.Values.Cell(), cs);
		const globalBalance = (0, CurrencyCollection_1$3.loadCurrencyCollection)(cs);
		return {
			config,
			configAddress,
			globalBalance
		};
	}
	exports.loadMasterchainStateExtra = loadMasterchainStateExtra;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/Message.js
var require_Message = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/Message.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.MessageValue = exports.storeMessage = exports.loadMessage = void 0;
	const Builder_1$5 = require_Builder();
	const CommonMessageInfo_1$1 = require_CommonMessageInfo();
	const StateInit_1$1 = require_StateInit();
	function loadMessage(slice) {
		const info = (0, CommonMessageInfo_1$1.loadCommonMessageInfo)(slice);
		let init = null;
		if (slice.loadBit()) if (!slice.loadBit()) init = (0, StateInit_1$1.loadStateInit)(slice);
		else init = (0, StateInit_1$1.loadStateInit)(slice.loadRef().beginParse());
		const body = slice.loadBit() ? slice.loadRef() : slice.asCell();
		return {
			info,
			init,
			body
		};
	}
	exports.loadMessage = loadMessage;
	function storeMessage(message, opts) {
		return (builder) => {
			builder.store((0, CommonMessageInfo_1$1.storeCommonMessageInfo)(message.info));
			if (message.init) {
				builder.storeBit(true);
				let initCell = (0, Builder_1$5.beginCell)().store((0, StateInit_1$1.storeStateInit)(message.init));
				let needRef$1 = false;
				if (opts && opts.forceRef) needRef$1 = true;
				else if (builder.availableBits - 2 >= initCell.bits) needRef$1 = false;
				else needRef$1 = true;
				if (needRef$1) {
					builder.storeBit(true);
					builder.storeRef(initCell);
				} else {
					builder.storeBit(false);
					builder.storeBuilder(initCell);
				}
			} else builder.storeBit(false);
			let needRef = false;
			if (opts && opts.forceRef) needRef = true;
			else if (builder.availableBits - 1 >= message.body.bits.length && builder.refs + message.body.refs.length <= 4) needRef = false;
			else needRef = true;
			if (needRef) {
				builder.storeBit(true);
				builder.storeRef(message.body);
			} else {
				builder.storeBit(false);
				builder.storeBuilder(message.body.asBuilder());
			}
		};
	}
	exports.storeMessage = storeMessage;
	exports.MessageValue = {
		serialize(src, builder) {
			builder.storeRef((0, Builder_1$5.beginCell)().store(storeMessage(src)));
		},
		parse(slice) {
			return loadMessage(slice.loadRef().beginParse());
		}
	};
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/SendMode.js
var require_SendMode = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/SendMode.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.SendMode = void 0;
	var SendMode;
	(function(SendMode$1) {
		SendMode$1[SendMode$1["CARRY_ALL_REMAINING_BALANCE"] = 128] = "CARRY_ALL_REMAINING_BALANCE";
		SendMode$1[SendMode$1["CARRY_ALL_REMAINING_INCOMING_VALUE"] = 64] = "CARRY_ALL_REMAINING_INCOMING_VALUE";
		SendMode$1[SendMode$1["DESTROY_ACCOUNT_IF_ZERO"] = 32] = "DESTROY_ACCOUNT_IF_ZERO";
		SendMode$1[SendMode$1["PAY_GAS_SEPARATELY"] = 1] = "PAY_GAS_SEPARATELY";
		SendMode$1[SendMode$1["IGNORE_ERRORS"] = 2] = "IGNORE_ERRORS";
		SendMode$1[SendMode$1["NONE"] = 0] = "NONE";
	})(SendMode = exports.SendMode || (exports.SendMode = {}));
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/ShardAccount.js
var require_ShardAccount = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/ShardAccount.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeShardAccount = exports.loadShardAccount = void 0;
	const Builder_1$4 = require_Builder();
	const Account_1$1 = require_Account();
	function loadShardAccount(slice) {
		let accountRef = slice.loadRef();
		let account = void 0;
		if (!accountRef.isExotic) {
			let accountSlice = accountRef.beginParse();
			if (accountSlice.loadBit()) account = (0, Account_1$1.loadAccount)(accountSlice);
		}
		return {
			account,
			lastTransactionHash: slice.loadUintBig(256),
			lastTransactionLt: slice.loadUintBig(64)
		};
	}
	exports.loadShardAccount = loadShardAccount;
	function storeShardAccount(src) {
		return (builder) => {
			if (src.account) builder.storeRef((0, Builder_1$4.beginCell)().storeBit(true).store((0, Account_1$1.storeAccount)(src.account)));
			else builder.storeRef((0, Builder_1$4.beginCell)().storeBit(false));
			builder.storeUint(src.lastTransactionHash, 256);
			builder.storeUint(src.lastTransactionLt, 64);
		};
	}
	exports.storeShardAccount = storeShardAccount;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/ShardAccounts.js
var require_ShardAccounts = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/ShardAccounts.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeShardAccounts = exports.loadShardAccounts = exports.ShardAccountRefValue = void 0;
	const Dictionary_1$2 = require_Dictionary();
	const DepthBalanceInfo_1$1 = require_DepthBalanceInfo();
	const ShardAccount_1$1 = require_ShardAccount();
	exports.ShardAccountRefValue = {
		parse: (cs) => {
			let depthBalanceInfo = (0, DepthBalanceInfo_1$1.loadDepthBalanceInfo)(cs);
			let shardAccount = (0, ShardAccount_1$1.loadShardAccount)(cs);
			return {
				depthBalanceInfo,
				shardAccount
			};
		},
		serialize(src, builder) {
			builder.store((0, DepthBalanceInfo_1$1.storeDepthBalanceInfo)(src.depthBalanceInfo));
			builder.store((0, ShardAccount_1$1.storeShardAccount)(src.shardAccount));
		}
	};
	function loadShardAccounts(cs) {
		return Dictionary_1$2.Dictionary.load(Dictionary_1$2.Dictionary.Keys.BigUint(256), exports.ShardAccountRefValue, cs);
	}
	exports.loadShardAccounts = loadShardAccounts;
	function storeShardAccounts(src) {
		return (Builder$1) => {
			Builder$1.storeDict(src);
		};
	}
	exports.storeShardAccounts = storeShardAccounts;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/ShardIdent.js
var require_ShardIdent = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/ShardIdent.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeShardIdent = exports.loadShardIdent = void 0;
	function loadShardIdent(slice) {
		if (slice.loadUint(2) !== 0) throw Error("Invalid data");
		return {
			shardPrefixBits: slice.loadUint(6),
			workchainId: slice.loadInt(32),
			shardPrefix: slice.loadUintBig(64)
		};
	}
	exports.loadShardIdent = loadShardIdent;
	function storeShardIdent(src) {
		return (builder) => {
			builder.storeUint(0, 2);
			builder.storeUint(src.shardPrefixBits, 6);
			builder.storeInt(src.workchainId, 32);
			builder.storeUint(src.shardPrefix, 64);
		};
	}
	exports.storeShardIdent = storeShardIdent;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/ShardStateUnsplit.js
var require_ShardStateUnsplit = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/ShardStateUnsplit.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.loadShardStateUnsplit = void 0;
	const MasterchainStateExtra_1$1 = require_MasterchainStateExtra();
	const ShardAccounts_1$1 = require_ShardAccounts();
	const ShardIdent_1$1 = require_ShardIdent();
	function loadShardStateUnsplit(cs) {
		if (cs.loadUint(32) !== 2418257890) throw Error("Invalid data");
		let globalId = cs.loadInt(32);
		let shardId = (0, ShardIdent_1$1.loadShardIdent)(cs);
		let seqno = cs.loadUint(32);
		let vertSeqNo = cs.loadUint(32);
		let genUtime = cs.loadUint(32);
		let genLt = cs.loadUintBig(64);
		let minRefMcSeqno = cs.loadUint(32);
		cs.loadRef();
		let beforeSplit = cs.loadBit();
		let shardAccountsRef = cs.loadRef();
		let accounts = void 0;
		if (!shardAccountsRef.isExotic) accounts = (0, ShardAccounts_1$1.loadShardAccounts)(shardAccountsRef.beginParse());
		cs.loadRef();
		let mcStateExtra = cs.loadBit();
		let extras = null;
		if (mcStateExtra) {
			let cell = cs.loadRef();
			if (!cell.isExotic) extras = (0, MasterchainStateExtra_1$1.loadMasterchainStateExtra)(cell.beginParse());
		}
		return {
			globalId,
			shardId,
			seqno,
			vertSeqNo,
			genUtime,
			genLt,
			minRefMcSeqno,
			beforeSplit,
			accounts,
			extras
		};
	}
	exports.loadShardStateUnsplit = loadShardStateUnsplit;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/SplitMergeInfo.js
var require_SplitMergeInfo = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/SplitMergeInfo.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeSplitMergeInfo = exports.loadSplitMergeInfo = void 0;
	function loadSplitMergeInfo(slice) {
		let currentShardPrefixLength = slice.loadUint(6);
		let accountSplitDepth = slice.loadUint(6);
		let thisAddress = slice.loadUintBig(256);
		let siblingAddress = slice.loadUintBig(256);
		return {
			currentShardPrefixLength,
			accountSplitDepth,
			thisAddress,
			siblingAddress
		};
	}
	exports.loadSplitMergeInfo = loadSplitMergeInfo;
	function storeSplitMergeInfo(src) {
		return (builder) => {
			builder.storeUint(src.currentShardPrefixLength, 6);
			builder.storeUint(src.accountSplitDepth, 6);
			builder.storeUint(src.thisAddress, 256);
			builder.storeUint(src.siblingAddress, 256);
		};
	}
	exports.storeSplitMergeInfo = storeSplitMergeInfo;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/StorageUsedShort.js
var require_StorageUsedShort = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/StorageUsedShort.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeStorageUsedShort = exports.loadStorageUsedShort = void 0;
	function loadStorageUsedShort(slice) {
		let cells = slice.loadVarUintBig(3);
		let bits = slice.loadVarUintBig(3);
		return {
			cells,
			bits
		};
	}
	exports.loadStorageUsedShort = loadStorageUsedShort;
	function storeStorageUsedShort(src) {
		return (builder) => {
			builder.storeVarUint(src.cells, 3);
			builder.storeVarUint(src.bits, 3);
		};
	}
	exports.storeStorageUsedShort = storeStorageUsedShort;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/TransactionActionPhase.js
var require_TransactionActionPhase = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/TransactionActionPhase.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeTransactionActionPhase = exports.loadTransactionActionPhase = void 0;
	const AccountStatusChange_1$2 = require_AccountStatusChange();
	const StorageUsedShort_1$2 = require_StorageUsedShort();
	function loadTransactionActionPhase(slice) {
		let success = slice.loadBit();
		let valid = slice.loadBit();
		let noFunds = slice.loadBit();
		let statusChange = (0, AccountStatusChange_1$2.loadAccountStatusChange)(slice);
		let totalFwdFees = slice.loadBit() ? slice.loadCoins() : void 0;
		let totalActionFees = slice.loadBit() ? slice.loadCoins() : void 0;
		let resultCode = slice.loadInt(32);
		let resultArg = slice.loadBit() ? slice.loadInt(32) : void 0;
		let totalActions = slice.loadUint(16);
		let specActions = slice.loadUint(16);
		let skippedActions = slice.loadUint(16);
		let messagesCreated = slice.loadUint(16);
		let actionListHash = slice.loadUintBig(256);
		let totalMessageSize = (0, StorageUsedShort_1$2.loadStorageUsedShort)(slice);
		return {
			success,
			valid,
			noFunds,
			statusChange,
			totalFwdFees,
			totalActionFees,
			resultCode,
			resultArg,
			totalActions,
			specActions,
			skippedActions,
			messagesCreated,
			actionListHash,
			totalMessageSize
		};
	}
	exports.loadTransactionActionPhase = loadTransactionActionPhase;
	function storeTransactionActionPhase(src) {
		return (builder) => {
			builder.storeBit(src.success);
			builder.storeBit(src.valid);
			builder.storeBit(src.noFunds);
			builder.store((0, AccountStatusChange_1$2.storeAccountStatusChange)(src.statusChange));
			builder.storeMaybeCoins(src.totalFwdFees);
			builder.storeMaybeCoins(src.totalActionFees);
			builder.storeInt(src.resultCode, 32);
			builder.storeMaybeInt(src.resultArg, 32);
			builder.storeUint(src.totalActions, 16);
			builder.storeUint(src.specActions, 16);
			builder.storeUint(src.skippedActions, 16);
			builder.storeUint(src.messagesCreated, 16);
			builder.storeUint(src.actionListHash, 256);
			builder.store((0, StorageUsedShort_1$2.storeStorageUsedShort)(src.totalMessageSize));
		};
	}
	exports.storeTransactionActionPhase = storeTransactionActionPhase;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/TransactionBouncePhase.js
var require_TransactionBouncePhase = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/TransactionBouncePhase.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeTransactionBouncePhase = exports.loadTransactionBouncePhase = void 0;
	const StorageUsedShort_1$1 = require_StorageUsedShort();
	function loadTransactionBouncePhase(slice) {
		if (slice.loadBit()) {
			let messageSize = (0, StorageUsedShort_1$1.loadStorageUsedShort)(slice);
			let messageFees = slice.loadCoins();
			let forwardFees = slice.loadCoins();
			return {
				type: "ok",
				messageSize,
				messageFees,
				forwardFees
			};
		}
		if (slice.loadBit()) {
			let messageSize = (0, StorageUsedShort_1$1.loadStorageUsedShort)(slice);
			let requiredForwardFees = slice.loadCoins();
			return {
				type: "no-funds",
				messageSize,
				requiredForwardFees
			};
		}
		return { type: "negative-funds" };
	}
	exports.loadTransactionBouncePhase = loadTransactionBouncePhase;
	function storeTransactionBouncePhase(src) {
		return (builder) => {
			if (src.type === "ok") {
				builder.storeBit(true);
				builder.store((0, StorageUsedShort_1$1.storeStorageUsedShort)(src.messageSize));
				builder.storeCoins(src.messageFees);
				builder.storeCoins(src.forwardFees);
			} else if (src.type === "negative-funds") {
				builder.storeBit(false);
				builder.storeBit(false);
			} else if (src.type === "no-funds") {
				builder.storeBit(false);
				builder.storeBit(true);
				builder.store((0, StorageUsedShort_1$1.storeStorageUsedShort)(src.messageSize));
				builder.storeCoins(src.requiredForwardFees);
			} else throw new Error("Invalid TransactionBouncePhase type");
		};
	}
	exports.storeTransactionBouncePhase = storeTransactionBouncePhase;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/TransactionComputePhase.js
var require_TransactionComputePhase = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/TransactionComputePhase.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeTransactionComputePhase = exports.loadTransactionComputePhase = void 0;
	const Builder_1$3 = require_Builder();
	const ComputeSkipReason_1$1 = require_ComputeSkipReason();
	function loadTransactionComputePhase(slice) {
		if (!slice.loadBit()) {
			let reason = (0, ComputeSkipReason_1$1.loadComputeSkipReason)(slice);
			return {
				type: "skipped",
				reason
			};
		}
		let success = slice.loadBit();
		let messageStateUsed = slice.loadBit();
		let accountActivated = slice.loadBit();
		let gasFees = slice.loadCoins();
		const vmState = slice.loadRef().beginParse();
		let gasUsed = vmState.loadVarUintBig(3);
		let gasLimit = vmState.loadVarUintBig(3);
		let gasCredit = vmState.loadBit() ? vmState.loadVarUintBig(2) : void 0;
		let mode = vmState.loadUint(8);
		let exitCode = vmState.loadInt(32);
		let exitArg = vmState.loadBit() ? vmState.loadInt(32) : void 0;
		let vmSteps = vmState.loadUint(32);
		let vmInitStateHash = vmState.loadUintBig(256);
		let vmFinalStateHash = vmState.loadUintBig(256);
		return {
			type: "vm",
			success,
			messageStateUsed,
			accountActivated,
			gasFees,
			gasUsed,
			gasLimit,
			gasCredit,
			mode,
			exitCode,
			exitArg,
			vmSteps,
			vmInitStateHash,
			vmFinalStateHash
		};
	}
	exports.loadTransactionComputePhase = loadTransactionComputePhase;
	function storeTransactionComputePhase(src) {
		return (builder) => {
			if (src.type === "skipped") {
				builder.storeBit(0);
				builder.store((0, ComputeSkipReason_1$1.storeComputeSkipReason)(src.reason));
				return;
			}
			builder.storeBit(1);
			builder.storeBit(src.success);
			builder.storeBit(src.messageStateUsed);
			builder.storeBit(src.accountActivated);
			builder.storeCoins(src.gasFees);
			builder.storeRef((0, Builder_1$3.beginCell)().storeVarUint(src.gasUsed, 3).storeVarUint(src.gasLimit, 3).store((b) => src.gasCredit !== void 0 && src.gasCredit !== null ? b.storeBit(1).storeVarUint(src.gasCredit, 2) : b.storeBit(0)).storeUint(src.mode, 8).storeInt(src.exitCode, 32).store((b) => src.exitArg !== void 0 && src.exitArg !== null ? b.storeBit(1).storeInt(src.exitArg, 32) : b.storeBit(0)).storeUint(src.vmSteps, 32).storeUint(src.vmInitStateHash, 256).storeUint(src.vmFinalStateHash, 256).endCell());
		};
	}
	exports.storeTransactionComputePhase = storeTransactionComputePhase;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/TransactionCreditPhase.js
var require_TransactionCreditPhase = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/TransactionCreditPhase.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeTransactionCreditPhase = exports.loadTransactionCreditPhase = void 0;
	const CurrencyCollection_1$2 = require_CurrencyCollection();
	function loadTransactionCreditPhase(slice) {
		const dueFeesColelcted = slice.loadBit() ? slice.loadCoins() : void 0;
		const credit = (0, CurrencyCollection_1$2.loadCurrencyCollection)(slice);
		return {
			dueFeesColelcted,
			credit
		};
	}
	exports.loadTransactionCreditPhase = loadTransactionCreditPhase;
	function storeTransactionCreditPhase(src) {
		return (builder) => {
			if (src.dueFeesColelcted === null || src.dueFeesColelcted === void 0) builder.storeBit(false);
			else {
				builder.storeBit(true);
				builder.storeCoins(src.dueFeesColelcted);
			}
			builder.store((0, CurrencyCollection_1$2.storeCurrencyCollection)(src.credit));
		};
	}
	exports.storeTransactionCreditPhase = storeTransactionCreditPhase;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/TransactionStoragePhase.js
var require_TransactionStoragePhase = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/TransactionStoragePhase.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeTransactionsStoragePhase = exports.loadTransactionStoragePhase = void 0;
	const AccountStatusChange_1$1 = require_AccountStatusChange();
	function loadTransactionStoragePhase(slice) {
		const storageFeesCollected = slice.loadCoins();
		let storageFeesDue = void 0;
		if (slice.loadBit()) storageFeesDue = slice.loadCoins();
		const statusChange = (0, AccountStatusChange_1$1.loadAccountStatusChange)(slice);
		return {
			storageFeesCollected,
			storageFeesDue,
			statusChange
		};
	}
	exports.loadTransactionStoragePhase = loadTransactionStoragePhase;
	function storeTransactionsStoragePhase(src) {
		return (builder) => {
			builder.storeCoins(src.storageFeesCollected);
			if (src.storageFeesDue === null || src.storageFeesDue === void 0) builder.storeBit(false);
			else {
				builder.storeBit(true);
				builder.storeCoins(src.storageFeesDue);
			}
			builder.store((0, AccountStatusChange_1$1.storeAccountStatusChange)(src.statusChange));
		};
	}
	exports.storeTransactionsStoragePhase = storeTransactionsStoragePhase;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/TransactionDescription.js
var require_TransactionDescription = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/TransactionDescription.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeTransactionDescription = exports.loadTransactionDescription = void 0;
	const Builder_1$2 = require_Builder();
	const SplitMergeInfo_1$1 = require_SplitMergeInfo();
	const Transaction_1$1 = require_Transaction();
	const TransactionActionPhase_1$1 = require_TransactionActionPhase();
	const TransactionBouncePhase_1$1 = require_TransactionBouncePhase();
	const TransactionComputePhase_1$1 = require_TransactionComputePhase();
	const TransactionCreditPhase_1$1 = require_TransactionCreditPhase();
	const TransactionStoragePhase_1$1 = require_TransactionStoragePhase();
	function loadTransactionDescription(slice) {
		let type = slice.loadUint(4);
		if (type === 0) {
			const creditFirst = slice.loadBit();
			let storagePhase = void 0;
			if (slice.loadBit()) storagePhase = (0, TransactionStoragePhase_1$1.loadTransactionStoragePhase)(slice);
			let creditPhase = void 0;
			if (slice.loadBit()) creditPhase = (0, TransactionCreditPhase_1$1.loadTransactionCreditPhase)(slice);
			let computePhase = (0, TransactionComputePhase_1$1.loadTransactionComputePhase)(slice);
			let actionPhase = void 0;
			if (slice.loadBit()) actionPhase = (0, TransactionActionPhase_1$1.loadTransactionActionPhase)(slice.loadRef().beginParse());
			let aborted = slice.loadBit();
			let bouncePhase = void 0;
			if (slice.loadBit()) bouncePhase = (0, TransactionBouncePhase_1$1.loadTransactionBouncePhase)(slice);
			const destroyed = slice.loadBit();
			return {
				type: "generic",
				creditFirst,
				storagePhase,
				creditPhase,
				computePhase,
				actionPhase,
				bouncePhase,
				aborted,
				destroyed
			};
		}
		if (type === 1) return {
			type: "storage",
			storagePhase: (0, TransactionStoragePhase_1$1.loadTransactionStoragePhase)(slice)
		};
		if (type === 2 || type === 3) {
			const isTock = type === 3;
			let storagePhase = (0, TransactionStoragePhase_1$1.loadTransactionStoragePhase)(slice);
			let computePhase = (0, TransactionComputePhase_1$1.loadTransactionComputePhase)(slice);
			let actionPhase = void 0;
			if (slice.loadBit()) actionPhase = (0, TransactionActionPhase_1$1.loadTransactionActionPhase)(slice.loadRef().beginParse());
			const aborted = slice.loadBit();
			const destroyed = slice.loadBit();
			return {
				type: "tick-tock",
				isTock,
				storagePhase,
				computePhase,
				actionPhase,
				aborted,
				destroyed
			};
		}
		if (type === 4) {
			let splitInfo = (0, SplitMergeInfo_1$1.loadSplitMergeInfo)(slice);
			let storagePhase = void 0;
			if (slice.loadBit()) storagePhase = (0, TransactionStoragePhase_1$1.loadTransactionStoragePhase)(slice);
			let computePhase = (0, TransactionComputePhase_1$1.loadTransactionComputePhase)(slice);
			let actionPhase = void 0;
			if (slice.loadBit()) actionPhase = (0, TransactionActionPhase_1$1.loadTransactionActionPhase)(slice.loadRef().beginParse());
			const aborted = slice.loadBit();
			const destroyed = slice.loadBit();
			return {
				type: "split-prepare",
				splitInfo,
				storagePhase,
				computePhase,
				actionPhase,
				aborted,
				destroyed
			};
		}
		if (type === 5) {
			let splitInfo = (0, SplitMergeInfo_1$1.loadSplitMergeInfo)(slice);
			let prepareTransaction = (0, Transaction_1$1.loadTransaction)(slice.loadRef().beginParse());
			const installed = slice.loadBit();
			return {
				type: "split-install",
				splitInfo,
				prepareTransaction,
				installed
			};
		}
		throw Error(`Unsupported transaction description type ${type}`);
	}
	exports.loadTransactionDescription = loadTransactionDescription;
	function storeTransactionDescription(src) {
		return (builder) => {
			if (src.type === "generic") {
				builder.storeUint(0, 4);
				builder.storeBit(src.creditFirst);
				if (src.storagePhase) {
					builder.storeBit(true);
					builder.store((0, TransactionStoragePhase_1$1.storeTransactionsStoragePhase)(src.storagePhase));
				} else builder.storeBit(false);
				if (src.creditPhase) {
					builder.storeBit(true);
					builder.store((0, TransactionCreditPhase_1$1.storeTransactionCreditPhase)(src.creditPhase));
				} else builder.storeBit(false);
				builder.store((0, TransactionComputePhase_1$1.storeTransactionComputePhase)(src.computePhase));
				if (src.actionPhase) {
					builder.storeBit(true);
					builder.storeRef((0, Builder_1$2.beginCell)().store((0, TransactionActionPhase_1$1.storeTransactionActionPhase)(src.actionPhase)));
				} else builder.storeBit(false);
				builder.storeBit(src.aborted);
				if (src.bouncePhase) {
					builder.storeBit(true);
					builder.store((0, TransactionBouncePhase_1$1.storeTransactionBouncePhase)(src.bouncePhase));
				} else builder.storeBit(false);
				builder.storeBit(src.destroyed);
			} else if (src.type === "storage") {
				builder.storeUint(1, 4);
				builder.store((0, TransactionStoragePhase_1$1.storeTransactionsStoragePhase)(src.storagePhase));
			} else if (src.type === "tick-tock") {
				builder.storeUint(src.isTock ? 3 : 2, 4);
				builder.store((0, TransactionStoragePhase_1$1.storeTransactionsStoragePhase)(src.storagePhase));
				builder.store((0, TransactionComputePhase_1$1.storeTransactionComputePhase)(src.computePhase));
				if (src.actionPhase) {
					builder.storeBit(true);
					builder.storeRef((0, Builder_1$2.beginCell)().store((0, TransactionActionPhase_1$1.storeTransactionActionPhase)(src.actionPhase)));
				} else builder.storeBit(false);
				builder.storeBit(src.aborted);
				builder.storeBit(src.destroyed);
			} else if (src.type === "split-prepare") {
				builder.storeUint(4, 4);
				builder.store((0, SplitMergeInfo_1$1.storeSplitMergeInfo)(src.splitInfo));
				if (src.storagePhase) {
					builder.storeBit(true);
					builder.store((0, TransactionStoragePhase_1$1.storeTransactionsStoragePhase)(src.storagePhase));
				} else builder.storeBit(false);
				builder.store((0, TransactionComputePhase_1$1.storeTransactionComputePhase)(src.computePhase));
				if (src.actionPhase) {
					builder.storeBit(true);
					builder.store((0, TransactionActionPhase_1$1.storeTransactionActionPhase)(src.actionPhase));
				} else builder.storeBit(false);
				builder.storeBit(src.aborted);
				builder.storeBit(src.destroyed);
			} else if (src.type === "split-install") {
				builder.storeUint(5, 4);
				builder.store((0, SplitMergeInfo_1$1.storeSplitMergeInfo)(src.splitInfo));
				builder.storeRef((0, Builder_1$2.beginCell)().store((0, Transaction_1$1.storeTransaction)(src.prepareTransaction)));
				builder.storeBit(src.installed);
			} else throw Error(`Unsupported transaction description type ${src.type}`);
		};
	}
	exports.storeTransactionDescription = storeTransactionDescription;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/Transaction.js
var require_Transaction = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/Transaction.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.storeTransaction = exports.loadTransaction = void 0;
	const Builder_1$1 = require_Builder();
	const Dictionary_1$1 = require_Dictionary();
	const AccountStatus_1$1 = require_AccountStatus();
	const CurrencyCollection_1$1 = require_CurrencyCollection();
	const HashUpdate_1$1 = require_HashUpdate();
	const Message_1$1 = require_Message();
	const TransactionDescription_1$1 = require_TransactionDescription();
	function loadTransaction(slice) {
		let raw = slice.asCell();
		if (slice.loadUint(4) !== 7) throw Error("Invalid data");
		let address$1 = slice.loadUintBig(256);
		let lt = slice.loadUintBig(64);
		let prevTransactionHash = slice.loadUintBig(256);
		let prevTransactionLt = slice.loadUintBig(64);
		let now = slice.loadUint(32);
		let outMessagesCount = slice.loadUint(15);
		let oldStatus = (0, AccountStatus_1$1.loadAccountStatus)(slice);
		let endStatus = (0, AccountStatus_1$1.loadAccountStatus)(slice);
		let msgRef = slice.loadRef();
		let msgSlice = msgRef.beginParse();
		let inMessage = msgSlice.loadBit() ? (0, Message_1$1.loadMessage)(msgSlice.loadRef().beginParse()) : void 0;
		let outMessages = msgSlice.loadDict(Dictionary_1$1.Dictionary.Keys.Uint(15), Message_1$1.MessageValue);
		msgSlice.endParse();
		let totalFees = (0, CurrencyCollection_1$1.loadCurrencyCollection)(slice);
		let stateUpdate = (0, HashUpdate_1$1.loadHashUpdate)(slice.loadRef().beginParse());
		let description = (0, TransactionDescription_1$1.loadTransactionDescription)(slice.loadRef().beginParse());
		return {
			address: address$1,
			lt,
			prevTransactionHash,
			prevTransactionLt,
			now,
			outMessagesCount,
			oldStatus,
			endStatus,
			inMessage,
			outMessages,
			totalFees,
			stateUpdate,
			description,
			raw,
			hash: () => raw.hash()
		};
	}
	exports.loadTransaction = loadTransaction;
	function storeTransaction(src) {
		return (builder) => {
			builder.storeUint(7, 4);
			builder.storeUint(src.address, 256);
			builder.storeUint(src.lt, 64);
			builder.storeUint(src.prevTransactionHash, 256);
			builder.storeUint(src.prevTransactionLt, 64);
			builder.storeUint(src.now, 32);
			builder.storeUint(src.outMessagesCount, 15);
			builder.store((0, AccountStatus_1$1.storeAccountStatus)(src.oldStatus));
			builder.store((0, AccountStatus_1$1.storeAccountStatus)(src.endStatus));
			let msgBuilder = (0, Builder_1$1.beginCell)();
			if (src.inMessage) {
				msgBuilder.storeBit(true);
				msgBuilder.storeRef((0, Builder_1$1.beginCell)().store((0, Message_1$1.storeMessage)(src.inMessage)));
			} else msgBuilder.storeBit(false);
			msgBuilder.storeDict(src.outMessages);
			builder.storeRef(msgBuilder);
			builder.store((0, CurrencyCollection_1$1.storeCurrencyCollection)(src.totalFees));
			builder.storeRef((0, Builder_1$1.beginCell)().store((0, HashUpdate_1$1.storeHashUpdate)(src.stateUpdate)));
			builder.storeRef((0, Builder_1$1.beginCell)().store((0, TransactionDescription_1$1.storeTransactionDescription)(src.description)));
		};
	}
	exports.storeTransaction = storeTransaction;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/_export.js
var require__export = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/types/_export.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.loadStorageInfo = exports.storeStateInit = exports.loadStateInit = exports.storeSplitMergeInfo = exports.loadSplitMergeInfo = exports.storeSimpleLibrary = exports.loadSimpleLibrary = exports.loadShardStateUnsplit = exports.storeShardIdent = exports.loadShardIdent = exports.storeShardAccounts = exports.loadShardAccounts = exports.ShardAccountRefValue = exports.storeShardAccount = exports.loadShardAccount = exports.SendMode = exports.storeMessageRelaxed = exports.loadMessageRelaxed = exports.storeMessage = exports.loadMessage = exports.loadMasterchainStateExtra = exports.storeHashUpdate = exports.loadHashUpdate = exports.storeDepthBalanceInfo = exports.loadDepthBalanceInfo = exports.storeCurrencyCollection = exports.loadCurrencyCollection = exports.storeComputeSkipReason = exports.loadComputeSkipReason = exports.storeCommonMessageInfoRelaxed = exports.loadCommonMessageInfoRelaxed = exports.storeCommonMessageInfo = exports.loadCommonMessageInfo = exports.storeOutList = exports.loadOutList = exports.storeOutAction = exports.loadOutAction = exports.storeAccountStorage = exports.loadAccountStorage = exports.storeAccountStatusChange = exports.loadAccountStatusChange = exports.storeAccountStatus = exports.loadAccountStatus = exports.storeAccountState = exports.loadAccountState = exports.storeAccount = exports.loadAccount = exports.comment = exports.external = exports.internal = void 0;
	exports.storeTransactionsStoragePhase = exports.loadTransactionStoragePhase = exports.storeTransactionDescription = exports.loadTransactionDescription = exports.storeTransactionCreditPhase = exports.loadTransactionCreditPhase = exports.storeTransactionComputePhase = exports.loadTransactionComputePhase = exports.storeTransactionBouncePhase = exports.loadTransactionBouncePhase = exports.storeTransactionActionPhase = exports.loadTransactionActionPhase = exports.storeTransaction = exports.loadTransaction = exports.storeTickTock = exports.loadTickTock = exports.storeStorageUsedShort = exports.loadStorageUsedShort = exports.storeStorageUsed = exports.loadStorageUsed = exports.storeStorageInfo = void 0;
	var _helpers_1 = require__helpers();
	Object.defineProperty(exports, "internal", {
		enumerable: true,
		get: function() {
			return _helpers_1.internal;
		}
	});
	Object.defineProperty(exports, "external", {
		enumerable: true,
		get: function() {
			return _helpers_1.external;
		}
	});
	Object.defineProperty(exports, "comment", {
		enumerable: true,
		get: function() {
			return _helpers_1.comment;
		}
	});
	var Account_1 = require_Account();
	Object.defineProperty(exports, "loadAccount", {
		enumerable: true,
		get: function() {
			return Account_1.loadAccount;
		}
	});
	Object.defineProperty(exports, "storeAccount", {
		enumerable: true,
		get: function() {
			return Account_1.storeAccount;
		}
	});
	var AccountState_1 = require_AccountState();
	Object.defineProperty(exports, "loadAccountState", {
		enumerable: true,
		get: function() {
			return AccountState_1.loadAccountState;
		}
	});
	Object.defineProperty(exports, "storeAccountState", {
		enumerable: true,
		get: function() {
			return AccountState_1.storeAccountState;
		}
	});
	var AccountStatus_1 = require_AccountStatus();
	Object.defineProperty(exports, "loadAccountStatus", {
		enumerable: true,
		get: function() {
			return AccountStatus_1.loadAccountStatus;
		}
	});
	Object.defineProperty(exports, "storeAccountStatus", {
		enumerable: true,
		get: function() {
			return AccountStatus_1.storeAccountStatus;
		}
	});
	var AccountStatusChange_1 = require_AccountStatusChange();
	Object.defineProperty(exports, "loadAccountStatusChange", {
		enumerable: true,
		get: function() {
			return AccountStatusChange_1.loadAccountStatusChange;
		}
	});
	Object.defineProperty(exports, "storeAccountStatusChange", {
		enumerable: true,
		get: function() {
			return AccountStatusChange_1.storeAccountStatusChange;
		}
	});
	var AccountStorage_1 = require_AccountStorage();
	Object.defineProperty(exports, "loadAccountStorage", {
		enumerable: true,
		get: function() {
			return AccountStorage_1.loadAccountStorage;
		}
	});
	Object.defineProperty(exports, "storeAccountStorage", {
		enumerable: true,
		get: function() {
			return AccountStorage_1.storeAccountStorage;
		}
	});
	var OutList_1 = require_OutList();
	Object.defineProperty(exports, "loadOutAction", {
		enumerable: true,
		get: function() {
			return OutList_1.loadOutAction;
		}
	});
	Object.defineProperty(exports, "storeOutAction", {
		enumerable: true,
		get: function() {
			return OutList_1.storeOutAction;
		}
	});
	Object.defineProperty(exports, "loadOutList", {
		enumerable: true,
		get: function() {
			return OutList_1.loadOutList;
		}
	});
	Object.defineProperty(exports, "storeOutList", {
		enumerable: true,
		get: function() {
			return OutList_1.storeOutList;
		}
	});
	var CommonMessageInfo_1 = require_CommonMessageInfo();
	Object.defineProperty(exports, "loadCommonMessageInfo", {
		enumerable: true,
		get: function() {
			return CommonMessageInfo_1.loadCommonMessageInfo;
		}
	});
	Object.defineProperty(exports, "storeCommonMessageInfo", {
		enumerable: true,
		get: function() {
			return CommonMessageInfo_1.storeCommonMessageInfo;
		}
	});
	var CommonMessageInfoRelaxed_1 = require_CommonMessageInfoRelaxed();
	Object.defineProperty(exports, "loadCommonMessageInfoRelaxed", {
		enumerable: true,
		get: function() {
			return CommonMessageInfoRelaxed_1.loadCommonMessageInfoRelaxed;
		}
	});
	Object.defineProperty(exports, "storeCommonMessageInfoRelaxed", {
		enumerable: true,
		get: function() {
			return CommonMessageInfoRelaxed_1.storeCommonMessageInfoRelaxed;
		}
	});
	var ComputeSkipReason_1 = require_ComputeSkipReason();
	Object.defineProperty(exports, "loadComputeSkipReason", {
		enumerable: true,
		get: function() {
			return ComputeSkipReason_1.loadComputeSkipReason;
		}
	});
	Object.defineProperty(exports, "storeComputeSkipReason", {
		enumerable: true,
		get: function() {
			return ComputeSkipReason_1.storeComputeSkipReason;
		}
	});
	var CurrencyCollection_1 = require_CurrencyCollection();
	Object.defineProperty(exports, "loadCurrencyCollection", {
		enumerable: true,
		get: function() {
			return CurrencyCollection_1.loadCurrencyCollection;
		}
	});
	Object.defineProperty(exports, "storeCurrencyCollection", {
		enumerable: true,
		get: function() {
			return CurrencyCollection_1.storeCurrencyCollection;
		}
	});
	var DepthBalanceInfo_1 = require_DepthBalanceInfo();
	Object.defineProperty(exports, "loadDepthBalanceInfo", {
		enumerable: true,
		get: function() {
			return DepthBalanceInfo_1.loadDepthBalanceInfo;
		}
	});
	Object.defineProperty(exports, "storeDepthBalanceInfo", {
		enumerable: true,
		get: function() {
			return DepthBalanceInfo_1.storeDepthBalanceInfo;
		}
	});
	var HashUpdate_1 = require_HashUpdate();
	Object.defineProperty(exports, "loadHashUpdate", {
		enumerable: true,
		get: function() {
			return HashUpdate_1.loadHashUpdate;
		}
	});
	Object.defineProperty(exports, "storeHashUpdate", {
		enumerable: true,
		get: function() {
			return HashUpdate_1.storeHashUpdate;
		}
	});
	var MasterchainStateExtra_1 = require_MasterchainStateExtra();
	Object.defineProperty(exports, "loadMasterchainStateExtra", {
		enumerable: true,
		get: function() {
			return MasterchainStateExtra_1.loadMasterchainStateExtra;
		}
	});
	var Message_1 = require_Message();
	Object.defineProperty(exports, "loadMessage", {
		enumerable: true,
		get: function() {
			return Message_1.loadMessage;
		}
	});
	Object.defineProperty(exports, "storeMessage", {
		enumerable: true,
		get: function() {
			return Message_1.storeMessage;
		}
	});
	var MessageRelaxed_1 = require_MessageRelaxed();
	Object.defineProperty(exports, "loadMessageRelaxed", {
		enumerable: true,
		get: function() {
			return MessageRelaxed_1.loadMessageRelaxed;
		}
	});
	Object.defineProperty(exports, "storeMessageRelaxed", {
		enumerable: true,
		get: function() {
			return MessageRelaxed_1.storeMessageRelaxed;
		}
	});
	var SendMode_1 = require_SendMode();
	Object.defineProperty(exports, "SendMode", {
		enumerable: true,
		get: function() {
			return SendMode_1.SendMode;
		}
	});
	var ShardAccount_1 = require_ShardAccount();
	Object.defineProperty(exports, "loadShardAccount", {
		enumerable: true,
		get: function() {
			return ShardAccount_1.loadShardAccount;
		}
	});
	Object.defineProperty(exports, "storeShardAccount", {
		enumerable: true,
		get: function() {
			return ShardAccount_1.storeShardAccount;
		}
	});
	var ShardAccounts_1 = require_ShardAccounts();
	Object.defineProperty(exports, "ShardAccountRefValue", {
		enumerable: true,
		get: function() {
			return ShardAccounts_1.ShardAccountRefValue;
		}
	});
	Object.defineProperty(exports, "loadShardAccounts", {
		enumerable: true,
		get: function() {
			return ShardAccounts_1.loadShardAccounts;
		}
	});
	Object.defineProperty(exports, "storeShardAccounts", {
		enumerable: true,
		get: function() {
			return ShardAccounts_1.storeShardAccounts;
		}
	});
	var ShardIdent_1 = require_ShardIdent();
	Object.defineProperty(exports, "loadShardIdent", {
		enumerable: true,
		get: function() {
			return ShardIdent_1.loadShardIdent;
		}
	});
	Object.defineProperty(exports, "storeShardIdent", {
		enumerable: true,
		get: function() {
			return ShardIdent_1.storeShardIdent;
		}
	});
	var ShardStateUnsplit_1 = require_ShardStateUnsplit();
	Object.defineProperty(exports, "loadShardStateUnsplit", {
		enumerable: true,
		get: function() {
			return ShardStateUnsplit_1.loadShardStateUnsplit;
		}
	});
	var SimpleLibrary_1 = require_SimpleLibrary();
	Object.defineProperty(exports, "loadSimpleLibrary", {
		enumerable: true,
		get: function() {
			return SimpleLibrary_1.loadSimpleLibrary;
		}
	});
	Object.defineProperty(exports, "storeSimpleLibrary", {
		enumerable: true,
		get: function() {
			return SimpleLibrary_1.storeSimpleLibrary;
		}
	});
	var SplitMergeInfo_1 = require_SplitMergeInfo();
	Object.defineProperty(exports, "loadSplitMergeInfo", {
		enumerable: true,
		get: function() {
			return SplitMergeInfo_1.loadSplitMergeInfo;
		}
	});
	Object.defineProperty(exports, "storeSplitMergeInfo", {
		enumerable: true,
		get: function() {
			return SplitMergeInfo_1.storeSplitMergeInfo;
		}
	});
	var StateInit_1 = require_StateInit();
	Object.defineProperty(exports, "loadStateInit", {
		enumerable: true,
		get: function() {
			return StateInit_1.loadStateInit;
		}
	});
	Object.defineProperty(exports, "storeStateInit", {
		enumerable: true,
		get: function() {
			return StateInit_1.storeStateInit;
		}
	});
	var StorageInto_1 = require_StorageInto();
	Object.defineProperty(exports, "loadStorageInfo", {
		enumerable: true,
		get: function() {
			return StorageInto_1.loadStorageInfo;
		}
	});
	Object.defineProperty(exports, "storeStorageInfo", {
		enumerable: true,
		get: function() {
			return StorageInto_1.storeStorageInfo;
		}
	});
	var StorageUsed_1 = require_StorageUsed();
	Object.defineProperty(exports, "loadStorageUsed", {
		enumerable: true,
		get: function() {
			return StorageUsed_1.loadStorageUsed;
		}
	});
	Object.defineProperty(exports, "storeStorageUsed", {
		enumerable: true,
		get: function() {
			return StorageUsed_1.storeStorageUsed;
		}
	});
	var StorageUsedShort_1 = require_StorageUsedShort();
	Object.defineProperty(exports, "loadStorageUsedShort", {
		enumerable: true,
		get: function() {
			return StorageUsedShort_1.loadStorageUsedShort;
		}
	});
	Object.defineProperty(exports, "storeStorageUsedShort", {
		enumerable: true,
		get: function() {
			return StorageUsedShort_1.storeStorageUsedShort;
		}
	});
	var TickTock_1 = require_TickTock();
	Object.defineProperty(exports, "loadTickTock", {
		enumerable: true,
		get: function() {
			return TickTock_1.loadTickTock;
		}
	});
	Object.defineProperty(exports, "storeTickTock", {
		enumerable: true,
		get: function() {
			return TickTock_1.storeTickTock;
		}
	});
	var Transaction_1 = require_Transaction();
	Object.defineProperty(exports, "loadTransaction", {
		enumerable: true,
		get: function() {
			return Transaction_1.loadTransaction;
		}
	});
	Object.defineProperty(exports, "storeTransaction", {
		enumerable: true,
		get: function() {
			return Transaction_1.storeTransaction;
		}
	});
	var TransactionActionPhase_1 = require_TransactionActionPhase();
	Object.defineProperty(exports, "loadTransactionActionPhase", {
		enumerable: true,
		get: function() {
			return TransactionActionPhase_1.loadTransactionActionPhase;
		}
	});
	Object.defineProperty(exports, "storeTransactionActionPhase", {
		enumerable: true,
		get: function() {
			return TransactionActionPhase_1.storeTransactionActionPhase;
		}
	});
	var TransactionBouncePhase_1 = require_TransactionBouncePhase();
	Object.defineProperty(exports, "loadTransactionBouncePhase", {
		enumerable: true,
		get: function() {
			return TransactionBouncePhase_1.loadTransactionBouncePhase;
		}
	});
	Object.defineProperty(exports, "storeTransactionBouncePhase", {
		enumerable: true,
		get: function() {
			return TransactionBouncePhase_1.storeTransactionBouncePhase;
		}
	});
	var TransactionComputePhase_1 = require_TransactionComputePhase();
	Object.defineProperty(exports, "loadTransactionComputePhase", {
		enumerable: true,
		get: function() {
			return TransactionComputePhase_1.loadTransactionComputePhase;
		}
	});
	Object.defineProperty(exports, "storeTransactionComputePhase", {
		enumerable: true,
		get: function() {
			return TransactionComputePhase_1.storeTransactionComputePhase;
		}
	});
	var TransactionCreditPhase_1 = require_TransactionCreditPhase();
	Object.defineProperty(exports, "loadTransactionCreditPhase", {
		enumerable: true,
		get: function() {
			return TransactionCreditPhase_1.loadTransactionCreditPhase;
		}
	});
	Object.defineProperty(exports, "storeTransactionCreditPhase", {
		enumerable: true,
		get: function() {
			return TransactionCreditPhase_1.storeTransactionCreditPhase;
		}
	});
	var TransactionDescription_1 = require_TransactionDescription();
	Object.defineProperty(exports, "loadTransactionDescription", {
		enumerable: true,
		get: function() {
			return TransactionDescription_1.loadTransactionDescription;
		}
	});
	Object.defineProperty(exports, "storeTransactionDescription", {
		enumerable: true,
		get: function() {
			return TransactionDescription_1.storeTransactionDescription;
		}
	});
	var TransactionStoragePhase_1 = require_TransactionStoragePhase();
	Object.defineProperty(exports, "loadTransactionStoragePhase", {
		enumerable: true,
		get: function() {
			return TransactionStoragePhase_1.loadTransactionStoragePhase;
		}
	});
	Object.defineProperty(exports, "storeTransactionsStoragePhase", {
		enumerable: true,
		get: function() {
			return TransactionStoragePhase_1.storeTransactionsStoragePhase;
		}
	});
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/contract/openContract.js
var require_openContract = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/contract/openContract.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.openContract = void 0;
	const Address_1$1 = require_Address();
	const Cell_1$1 = require_Cell();
	function openContract(src, factory) {
		let address$1;
		let init = null;
		if (!Address_1$1.Address.isAddress(src.address)) throw Error("Invalid address");
		address$1 = src.address;
		if (src.init) {
			if (!(src.init.code instanceof Cell_1$1.Cell)) throw Error("Invalid init.code");
			if (!(src.init.data instanceof Cell_1$1.Cell)) throw Error("Invalid init.data");
			init = src.init;
		}
		let executor = factory({
			address: address$1,
			init
		});
		return new Proxy(src, { get(target, prop) {
			const value = target[prop];
			if (typeof prop === "string" && (prop.startsWith("get") || prop.startsWith("send"))) {
				if (typeof value === "function") return (...args) => value.apply(target, [executor, ...args]);
			}
			return value;
		} });
	}
	exports.openContract = openContract;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/contract/ComputeError.js
var require_ComputeError = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/contract/ComputeError.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ComputeError = void 0;
	var ComputeError = class ComputeError extends Error {
		constructor(message, exitCode, opts) {
			super(message);
			this.exitCode = exitCode;
			this.debugLogs = opts && opts.debugLogs ? opts.debugLogs : null;
			this.logs = opts && opts.logs ? opts.logs : null;
			Object.setPrototypeOf(this, ComputeError.prototype);
		}
	};
	exports.ComputeError = ComputeError;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/utils/getMethodId.js
var require_getMethodId = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/utils/getMethodId.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getMethodId = void 0;
	const TABLE = new Int16Array([
		0,
		4129,
		8258,
		12387,
		16516,
		20645,
		24774,
		28903,
		33032,
		37161,
		41290,
		45419,
		49548,
		53677,
		57806,
		61935,
		4657,
		528,
		12915,
		8786,
		21173,
		17044,
		29431,
		25302,
		37689,
		33560,
		45947,
		41818,
		54205,
		50076,
		62463,
		58334,
		9314,
		13379,
		1056,
		5121,
		25830,
		29895,
		17572,
		21637,
		42346,
		46411,
		34088,
		38153,
		58862,
		62927,
		50604,
		54669,
		13907,
		9842,
		5649,
		1584,
		30423,
		26358,
		22165,
		18100,
		46939,
		42874,
		38681,
		34616,
		63455,
		59390,
		55197,
		51132,
		18628,
		22757,
		26758,
		30887,
		2112,
		6241,
		10242,
		14371,
		51660,
		55789,
		59790,
		63919,
		35144,
		39273,
		43274,
		47403,
		23285,
		19156,
		31415,
		27286,
		6769,
		2640,
		14899,
		10770,
		56317,
		52188,
		64447,
		60318,
		39801,
		35672,
		47931,
		43802,
		27814,
		31879,
		19684,
		23749,
		11298,
		15363,
		3168,
		7233,
		60846,
		64911,
		52716,
		56781,
		44330,
		48395,
		36200,
		40265,
		32407,
		28342,
		24277,
		20212,
		15891,
		11826,
		7761,
		3696,
		65439,
		61374,
		57309,
		53244,
		48923,
		44858,
		40793,
		36728,
		37256,
		33193,
		45514,
		41451,
		53516,
		49453,
		61774,
		57711,
		4224,
		161,
		12482,
		8419,
		20484,
		16421,
		28742,
		24679,
		33721,
		37784,
		41979,
		46042,
		49981,
		54044,
		58239,
		62302,
		689,
		4752,
		8947,
		13010,
		16949,
		21012,
		25207,
		29270,
		46570,
		42443,
		38312,
		34185,
		62830,
		58703,
		54572,
		50445,
		13538,
		9411,
		5280,
		1153,
		29798,
		25671,
		21540,
		17413,
		42971,
		47098,
		34713,
		38840,
		59231,
		63358,
		50973,
		55100,
		9939,
		14066,
		1681,
		5808,
		26199,
		30326,
		17941,
		22068,
		55628,
		51565,
		63758,
		59695,
		39368,
		35305,
		47498,
		43435,
		22596,
		18533,
		30726,
		26663,
		6336,
		2273,
		14466,
		10403,
		52093,
		56156,
		60223,
		64286,
		35833,
		39896,
		43963,
		48026,
		19061,
		23124,
		27191,
		31254,
		2801,
		6864,
		10931,
		14994,
		64814,
		60687,
		56684,
		52557,
		48554,
		44427,
		40424,
		36297,
		31782,
		27655,
		23652,
		19525,
		15522,
		11395,
		7392,
		3265,
		61215,
		65342,
		53085,
		57212,
		44955,
		49082,
		36825,
		40952,
		28183,
		32310,
		20053,
		24180,
		11923,
		16050,
		3793,
		7920
	]);
	function crc16(data) {
		if (!(data instanceof Buffer)) data = Buffer.from(data);
		let crc = 0;
		for (let index = 0; index < data.length; index++) {
			const byte = data[index];
			crc = (TABLE[(crc >> 8 ^ byte) & 255] ^ crc << 8) & 65535;
		}
		return crc;
	}
	function getMethodId(name) {
		return crc16(name) & 65535 | 65536;
	}
	exports.getMethodId = getMethodId;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/crypto/safeSign.js
var require_safeSign = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/crypto/safeSign.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.safeSignVerify = exports.safeSign = void 0;
	const crypto_1 = require_dist$1();
	const MIN_SEED_LENGTH = 8;
	const MAX_SEED_LENGTH = 64;
	function createSafeSignHash(cell, seed) {
		let seedData = Buffer.from(seed);
		if (seedData.length > MAX_SEED_LENGTH) throw Error("Seed can	 be longer than 64 bytes");
		if (seedData.length < MIN_SEED_LENGTH) throw Error("Seed must be at least 8 bytes");
		return (0, crypto_1.sha256_sync)(Buffer.concat([
			Buffer.from([255, 255]),
			seedData,
			cell.hash()
		]));
	}
	function safeSign(cell, secretKey, seed = "ton-safe-sign-magic") {
		return (0, crypto_1.sign)(createSafeSignHash(cell, seed), secretKey);
	}
	exports.safeSign = safeSign;
	function safeSignVerify(cell, signature, publicKey, seed = "ton-safe-sign-magic") {
		return (0, crypto_1.signVerify)(createSafeSignHash(cell, seed), signature, publicKey);
	}
	exports.safeSignVerify = safeSignVerify;
} });

//#endregion
//#region ../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/index.js
var require_dist = __commonJS({ "../../node_modules/.pnpm/@ton+core@0.53.0_@ton+crypto@3.3.0/node_modules/@ton/core/dist/index.js"(exports) {
	/**
	* Copyright (c) Whales Corp.
	* All Rights Reserved.
	*
	* This source code is licensed under the MIT license found in the
	* LICENSE file in the root directory of this source tree.
	*/
	var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc = Object.getOwnPropertyDescriptor(m, k);
		if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m[k];
			}
		};
		Object.defineProperty(o$1, k2, desc);
	} : function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		o$1[k2] = m[k];
	});
	var __exportStar = void 0 && (void 0).__exportStar || function(m, exports$1) {
		for (var p$1 in m) if (p$1 !== "default" && !Object.prototype.hasOwnProperty.call(exports$1, p$1)) __createBinding(exports$1, m, p$1);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.safeSignVerify = exports.safeSign = exports.getMethodId = exports.base32Encode = exports.base32Decode = exports.crc32c = exports.crc16 = exports.fromNano = exports.toNano = exports.ComputeError = exports.openContract = exports.TupleBuilder = exports.TupleReader = exports.serializeTuple = exports.parseTuple = exports.generateMerkleUpdate = exports.generateMerkleProof = exports.exoticPruned = exports.exoticMerkleUpdate = exports.exoticMerkleProof = exports.Dictionary = exports.Cell = exports.CellType = exports.Slice = exports.beginCell = exports.Builder = exports.BitBuilder = exports.BitReader = exports.BitString = exports.contractAddress = exports.ADNLAddress = exports.ExternalAddress = exports.address = exports.Address = void 0;
	var Address_1 = require_Address();
	Object.defineProperty(exports, "Address", {
		enumerable: true,
		get: function() {
			return Address_1.Address;
		}
	});
	Object.defineProperty(exports, "address", {
		enumerable: true,
		get: function() {
			return Address_1.address;
		}
	});
	var ExternalAddress_1 = require_ExternalAddress();
	Object.defineProperty(exports, "ExternalAddress", {
		enumerable: true,
		get: function() {
			return ExternalAddress_1.ExternalAddress;
		}
	});
	var ADNLAddress_1 = require_ADNLAddress();
	Object.defineProperty(exports, "ADNLAddress", {
		enumerable: true,
		get: function() {
			return ADNLAddress_1.ADNLAddress;
		}
	});
	var contractAddress_1 = require_contractAddress();
	Object.defineProperty(exports, "contractAddress", {
		enumerable: true,
		get: function() {
			return contractAddress_1.contractAddress;
		}
	});
	var BitString_1 = require_BitString();
	Object.defineProperty(exports, "BitString", {
		enumerable: true,
		get: function() {
			return BitString_1.BitString;
		}
	});
	var BitReader_1 = require_BitReader();
	Object.defineProperty(exports, "BitReader", {
		enumerable: true,
		get: function() {
			return BitReader_1.BitReader;
		}
	});
	var BitBuilder_1 = require_BitBuilder();
	Object.defineProperty(exports, "BitBuilder", {
		enumerable: true,
		get: function() {
			return BitBuilder_1.BitBuilder;
		}
	});
	var Builder_1 = require_Builder();
	Object.defineProperty(exports, "Builder", {
		enumerable: true,
		get: function() {
			return Builder_1.Builder;
		}
	});
	Object.defineProperty(exports, "beginCell", {
		enumerable: true,
		get: function() {
			return Builder_1.beginCell;
		}
	});
	var Slice_1 = require_Slice();
	Object.defineProperty(exports, "Slice", {
		enumerable: true,
		get: function() {
			return Slice_1.Slice;
		}
	});
	var CellType_1 = require_CellType();
	Object.defineProperty(exports, "CellType", {
		enumerable: true,
		get: function() {
			return CellType_1.CellType;
		}
	});
	var Cell_1 = require_Cell();
	Object.defineProperty(exports, "Cell", {
		enumerable: true,
		get: function() {
			return Cell_1.Cell;
		}
	});
	var Dictionary_1 = require_Dictionary();
	Object.defineProperty(exports, "Dictionary", {
		enumerable: true,
		get: function() {
			return Dictionary_1.Dictionary;
		}
	});
	var exoticMerkleProof_1 = require_exoticMerkleProof();
	Object.defineProperty(exports, "exoticMerkleProof", {
		enumerable: true,
		get: function() {
			return exoticMerkleProof_1.exoticMerkleProof;
		}
	});
	var exoticMerkleUpdate_1 = require_exoticMerkleUpdate();
	Object.defineProperty(exports, "exoticMerkleUpdate", {
		enumerable: true,
		get: function() {
			return exoticMerkleUpdate_1.exoticMerkleUpdate;
		}
	});
	var exoticPruned_1 = require_exoticPruned();
	Object.defineProperty(exports, "exoticPruned", {
		enumerable: true,
		get: function() {
			return exoticPruned_1.exoticPruned;
		}
	});
	var generateMerkleProof_1 = require_generateMerkleProof();
	Object.defineProperty(exports, "generateMerkleProof", {
		enumerable: true,
		get: function() {
			return generateMerkleProof_1.generateMerkleProof;
		}
	});
	var generateMerkleUpdate_1 = require_generateMerkleUpdate();
	Object.defineProperty(exports, "generateMerkleUpdate", {
		enumerable: true,
		get: function() {
			return generateMerkleUpdate_1.generateMerkleUpdate;
		}
	});
	var tuple_1 = require_tuple();
	Object.defineProperty(exports, "parseTuple", {
		enumerable: true,
		get: function() {
			return tuple_1.parseTuple;
		}
	});
	Object.defineProperty(exports, "serializeTuple", {
		enumerable: true,
		get: function() {
			return tuple_1.serializeTuple;
		}
	});
	var reader_1 = require_reader();
	Object.defineProperty(exports, "TupleReader", {
		enumerable: true,
		get: function() {
			return reader_1.TupleReader;
		}
	});
	var builder_1 = require_builder();
	Object.defineProperty(exports, "TupleBuilder", {
		enumerable: true,
		get: function() {
			return builder_1.TupleBuilder;
		}
	});
	__exportStar(require__export(), exports);
	var openContract_1 = require_openContract();
	Object.defineProperty(exports, "openContract", {
		enumerable: true,
		get: function() {
			return openContract_1.openContract;
		}
	});
	var ComputeError_1 = require_ComputeError();
	Object.defineProperty(exports, "ComputeError", {
		enumerable: true,
		get: function() {
			return ComputeError_1.ComputeError;
		}
	});
	var convert_1 = require_convert();
	Object.defineProperty(exports, "toNano", {
		enumerable: true,
		get: function() {
			return convert_1.toNano;
		}
	});
	Object.defineProperty(exports, "fromNano", {
		enumerable: true,
		get: function() {
			return convert_1.fromNano;
		}
	});
	var crc16_1 = require_crc16();
	Object.defineProperty(exports, "crc16", {
		enumerable: true,
		get: function() {
			return crc16_1.crc16;
		}
	});
	var crc32c_1 = require_crc32c();
	Object.defineProperty(exports, "crc32c", {
		enumerable: true,
		get: function() {
			return crc32c_1.crc32c;
		}
	});
	var base32_1 = require_base32();
	Object.defineProperty(exports, "base32Decode", {
		enumerable: true,
		get: function() {
			return base32_1.base32Decode;
		}
	});
	Object.defineProperty(exports, "base32Encode", {
		enumerable: true,
		get: function() {
			return base32_1.base32Encode;
		}
	});
	var getMethodId_1 = require_getMethodId();
	Object.defineProperty(exports, "getMethodId", {
		enumerable: true,
		get: function() {
			return getMethodId_1.getMethodId;
		}
	});
	var safeSign_1 = require_safeSign();
	Object.defineProperty(exports, "safeSign", {
		enumerable: true,
		get: function() {
			return safeSign_1.safeSign;
		}
	});
	Object.defineProperty(exports, "safeSignVerify", {
		enumerable: true,
		get: function() {
			return safeSign_1.safeSignVerify;
		}
	});
} });

//#endregion
//#region ../../node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js
var require_base64_js = __commonJS({ "../../node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js"(exports) {
	exports.byteLength = byteLength$1;
	exports.toByteArray = toByteArray;
	exports.fromByteArray = fromByteArray;
	var lookup = [];
	var revLookup = [];
	var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
	var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	for (var i = 0, len = code.length; i < len; ++i) {
		lookup[i] = code[i];
		revLookup[code.charCodeAt(i)] = i;
	}
	revLookup["-".charCodeAt(0)] = 62;
	revLookup["_".charCodeAt(0)] = 63;
	function getLens(b64) {
		var len$1 = b64.length;
		if (len$1 % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
		var validLen = b64.indexOf("=");
		if (validLen === -1) validLen = len$1;
		var placeHoldersLen = validLen === len$1 ? 0 : 4 - validLen % 4;
		return [validLen, placeHoldersLen];
	}
	function byteLength$1(b64) {
		var lens = getLens(b64);
		var validLen = lens[0];
		var placeHoldersLen = lens[1];
		return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
	}
	function _byteLength(b64, validLen, placeHoldersLen) {
		return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
	}
	function toByteArray(b64) {
		var tmp;
		var lens = getLens(b64);
		var validLen = lens[0];
		var placeHoldersLen = lens[1];
		var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
		var curByte = 0;
		var len$1 = placeHoldersLen > 0 ? validLen - 4 : validLen;
		var i$2;
		for (i$2 = 0; i$2 < len$1; i$2 += 4) {
			tmp = revLookup[b64.charCodeAt(i$2)] << 18 | revLookup[b64.charCodeAt(i$2 + 1)] << 12 | revLookup[b64.charCodeAt(i$2 + 2)] << 6 | revLookup[b64.charCodeAt(i$2 + 3)];
			arr[curByte++] = tmp >> 16 & 255;
			arr[curByte++] = tmp >> 8 & 255;
			arr[curByte++] = tmp & 255;
		}
		if (placeHoldersLen === 2) {
			tmp = revLookup[b64.charCodeAt(i$2)] << 2 | revLookup[b64.charCodeAt(i$2 + 1)] >> 4;
			arr[curByte++] = tmp & 255;
		}
		if (placeHoldersLen === 1) {
			tmp = revLookup[b64.charCodeAt(i$2)] << 10 | revLookup[b64.charCodeAt(i$2 + 1)] << 4 | revLookup[b64.charCodeAt(i$2 + 2)] >> 2;
			arr[curByte++] = tmp >> 8 & 255;
			arr[curByte++] = tmp & 255;
		}
		return arr;
	}
	function tripletToBase64(num) {
		return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
	}
	function encodeChunk(uint8, start, end) {
		var tmp;
		var output = [];
		for (var i$2 = start; i$2 < end; i$2 += 3) {
			tmp = (uint8[i$2] << 16 & 16711680) + (uint8[i$2 + 1] << 8 & 65280) + (uint8[i$2 + 2] & 255);
			output.push(tripletToBase64(tmp));
		}
		return output.join("");
	}
	function fromByteArray(uint8) {
		var tmp;
		var len$1 = uint8.length;
		var extraBytes = len$1 % 3;
		var parts = [];
		var maxChunkLength = 16383;
		for (var i$2 = 0, len2 = len$1 - extraBytes; i$2 < len2; i$2 += maxChunkLength) parts.push(encodeChunk(uint8, i$2, i$2 + maxChunkLength > len2 ? len2 : i$2 + maxChunkLength));
		if (extraBytes === 1) {
			tmp = uint8[len$1 - 1];
			parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "==");
		} else if (extraBytes === 2) {
			tmp = (uint8[len$1 - 2] << 8) + uint8[len$1 - 1];
			parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "=");
		}
		return parts.join("");
	}
} });

//#endregion
//#region ../../node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js
var require_ieee754 = __commonJS({ "../../node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js"(exports) {
	/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
	exports.read = function(buffer, offset, isLE, mLen, nBytes) {
		var e$1, m;
		var eLen = nBytes * 8 - mLen - 1;
		var eMax = (1 << eLen) - 1;
		var eBias = eMax >> 1;
		var nBits = -7;
		var i$2 = isLE ? nBytes - 1 : 0;
		var d = isLE ? -1 : 1;
		var s$1 = buffer[offset + i$2];
		i$2 += d;
		e$1 = s$1 & (1 << -nBits) - 1;
		s$1 >>= -nBits;
		nBits += eLen;
		for (; nBits > 0; e$1 = e$1 * 256 + buffer[offset + i$2], i$2 += d, nBits -= 8);
		m = e$1 & (1 << -nBits) - 1;
		e$1 >>= -nBits;
		nBits += mLen;
		for (; nBits > 0; m = m * 256 + buffer[offset + i$2], i$2 += d, nBits -= 8);
		if (e$1 === 0) e$1 = 1 - eBias;
		else if (e$1 === eMax) return m ? NaN : (s$1 ? -1 : 1) * Infinity;
		else {
			m = m + Math.pow(2, mLen);
			e$1 = e$1 - eBias;
		}
		return (s$1 ? -1 : 1) * m * Math.pow(2, e$1 - mLen);
	};
	exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
		var e$1, m, c$1;
		var eLen = nBytes * 8 - mLen - 1;
		var eMax = (1 << eLen) - 1;
		var eBias = eMax >> 1;
		var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
		var i$2 = isLE ? 0 : nBytes - 1;
		var d = isLE ? 1 : -1;
		var s$1 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
		value = Math.abs(value);
		if (isNaN(value) || value === Infinity) {
			m = isNaN(value) ? 1 : 0;
			e$1 = eMax;
		} else {
			e$1 = Math.floor(Math.log(value) / Math.LN2);
			if (value * (c$1 = Math.pow(2, -e$1)) < 1) {
				e$1--;
				c$1 *= 2;
			}
			if (e$1 + eBias >= 1) value += rt / c$1;
			else value += rt * Math.pow(2, 1 - eBias);
			if (value * c$1 >= 2) {
				e$1++;
				c$1 /= 2;
			}
			if (e$1 + eBias >= eMax) {
				m = 0;
				e$1 = eMax;
			} else if (e$1 + eBias >= 1) {
				m = (value * c$1 - 1) * Math.pow(2, mLen);
				e$1 = e$1 + eBias;
			} else {
				m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
				e$1 = 0;
			}
		}
		for (; mLen >= 8; buffer[offset + i$2] = m & 255, i$2 += d, m /= 256, mLen -= 8);
		e$1 = e$1 << mLen | m;
		eLen += mLen;
		for (; eLen > 0; buffer[offset + i$2] = e$1 & 255, i$2 += d, e$1 /= 256, eLen -= 8);
		buffer[offset + i$2 - d] |= s$1 * 128;
	};
} });

//#endregion
//#region ../../node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js
var require_buffer = __commonJS({ "../../node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js"(exports) {
	const base64 = require_base64_js();
	const ieee754 = require_ieee754();
	const customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
	exports.Buffer = Buffer$2;
	exports.SlowBuffer = SlowBuffer;
	exports.INSPECT_MAX_BYTES = 50;
	const K_MAX_LENGTH = 2147483647;
	exports.kMaxLength = K_MAX_LENGTH;
	/**
	* If `Buffer.TYPED_ARRAY_SUPPORT`:
	*   === true    Use Uint8Array implementation (fastest)
	*   === false   Print warning and recommend using `buffer` v4.x which has an Object
	*               implementation (most compatible, even IE6)
	*
	* Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	* Opera 11.6+, iOS 4.2+.
	*
	* We report that the browser does not support typed arrays if the are not subclassable
	* using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
	* (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
	* for __proto__ and has a buggy typed array implementation.
	*/
	Buffer$2.TYPED_ARRAY_SUPPORT = typedArraySupport();
	if (!Buffer$2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
	function typedArraySupport() {
		try {
			const arr = new Uint8Array(1);
			const proto = { foo: function() {
				return 42;
			} };
			Object.setPrototypeOf(proto, Uint8Array.prototype);
			Object.setPrototypeOf(arr, proto);
			return arr.foo() === 42;
		} catch (e$1) {
			return false;
		}
	}
	Object.defineProperty(Buffer$2.prototype, "parent", {
		enumerable: true,
		get: function() {
			if (!Buffer$2.isBuffer(this)) return void 0;
			return this.buffer;
		}
	});
	Object.defineProperty(Buffer$2.prototype, "offset", {
		enumerable: true,
		get: function() {
			if (!Buffer$2.isBuffer(this)) return void 0;
			return this.byteOffset;
		}
	});
	function createBuffer(length) {
		if (length > K_MAX_LENGTH) throw new RangeError("The value \"" + length + "\" is invalid for option \"size\"");
		const buf = new Uint8Array(length);
		Object.setPrototypeOf(buf, Buffer$2.prototype);
		return buf;
	}
	/**
	* The Buffer constructor returns instances of `Uint8Array` that have their
	* prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	* `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	* and the `Uint8Array` methods. Square bracket notation works as expected -- it
	* returns a single octet.
	*
	* The `Uint8Array` prototype remains unmodified.
	*/
	function Buffer$2(arg, encodingOrOffset, length) {
		if (typeof arg === "number") {
			if (typeof encodingOrOffset === "string") throw new TypeError("The \"string\" argument must be of type string. Received type number");
			return allocUnsafe(arg);
		}
		return from(arg, encodingOrOffset, length);
	}
	Buffer$2.poolSize = 8192;
	function from(value, encodingOrOffset, length) {
		if (typeof value === "string") return fromString(value, encodingOrOffset);
		if (ArrayBuffer.isView(value)) return fromArrayView(value);
		if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
		if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
		if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
		if (typeof value === "number") throw new TypeError("The \"value\" argument must not be of type number. Received type number");
		const valueOf = value.valueOf && value.valueOf();
		if (valueOf != null && valueOf !== value) return Buffer$2.from(valueOf, encodingOrOffset, length);
		const b = fromObject(value);
		if (b) return b;
		if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return Buffer$2.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
		throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
	}
	/**
	* Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	* if value is a number.
	* Buffer.from(str[, encoding])
	* Buffer.from(array)
	* Buffer.from(buffer)
	* Buffer.from(arrayBuffer[, byteOffset[, length]])
	**/
	Buffer$2.from = function(value, encodingOrOffset, length) {
		return from(value, encodingOrOffset, length);
	};
	Object.setPrototypeOf(Buffer$2.prototype, Uint8Array.prototype);
	Object.setPrototypeOf(Buffer$2, Uint8Array);
	function assertSize(size) {
		if (typeof size !== "number") throw new TypeError("\"size\" argument must be of type number");
		else if (size < 0) throw new RangeError("The value \"" + size + "\" is invalid for option \"size\"");
	}
	function alloc(size, fill, encoding) {
		assertSize(size);
		if (size <= 0) return createBuffer(size);
		if (fill !== void 0) return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
		return createBuffer(size);
	}
	/**
	* Creates a new filled Buffer instance.
	* alloc(size[, fill[, encoding]])
	**/
	Buffer$2.alloc = function(size, fill, encoding) {
		return alloc(size, fill, encoding);
	};
	function allocUnsafe(size) {
		assertSize(size);
		return createBuffer(size < 0 ? 0 : checked(size) | 0);
	}
	/**
	* Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	* */
	Buffer$2.allocUnsafe = function(size) {
		return allocUnsafe(size);
	};
	/**
	* Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	*/
	Buffer$2.allocUnsafeSlow = function(size) {
		return allocUnsafe(size);
	};
	function fromString(string, encoding) {
		if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
		if (!Buffer$2.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
		const length = byteLength(string, encoding) | 0;
		let buf = createBuffer(length);
		const actual = buf.write(string, encoding);
		if (actual !== length) buf = buf.slice(0, actual);
		return buf;
	}
	function fromArrayLike(array) {
		const length = array.length < 0 ? 0 : checked(array.length) | 0;
		const buf = createBuffer(length);
		for (let i$2 = 0; i$2 < length; i$2 += 1) buf[i$2] = array[i$2] & 255;
		return buf;
	}
	function fromArrayView(arrayView) {
		if (isInstance(arrayView, Uint8Array)) {
			const copy = new Uint8Array(arrayView);
			return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
		}
		return fromArrayLike(arrayView);
	}
	function fromArrayBuffer(array, byteOffset, length) {
		if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError("\"offset\" is outside of buffer bounds");
		if (array.byteLength < byteOffset + (length || 0)) throw new RangeError("\"length\" is outside of buffer bounds");
		let buf;
		if (byteOffset === void 0 && length === void 0) buf = new Uint8Array(array);
		else if (length === void 0) buf = new Uint8Array(array, byteOffset);
		else buf = new Uint8Array(array, byteOffset, length);
		Object.setPrototypeOf(buf, Buffer$2.prototype);
		return buf;
	}
	function fromObject(obj) {
		if (Buffer$2.isBuffer(obj)) {
			const len$1 = checked(obj.length) | 0;
			const buf = createBuffer(len$1);
			if (buf.length === 0) return buf;
			obj.copy(buf, 0, 0, len$1);
			return buf;
		}
		if (obj.length !== void 0) {
			if (typeof obj.length !== "number" || numberIsNaN(obj.length)) return createBuffer(0);
			return fromArrayLike(obj);
		}
		if (obj.type === "Buffer" && Array.isArray(obj.data)) return fromArrayLike(obj.data);
	}
	function checked(length) {
		if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
		return length | 0;
	}
	function SlowBuffer(length) {
		if (+length != length) length = 0;
		return Buffer$2.alloc(+length);
	}
	Buffer$2.isBuffer = function isBuffer(b) {
		return b != null && b._isBuffer === true && b !== Buffer$2.prototype;
	};
	Buffer$2.compare = function compare(a$1, b) {
		if (isInstance(a$1, Uint8Array)) a$1 = Buffer$2.from(a$1, a$1.offset, a$1.byteLength);
		if (isInstance(b, Uint8Array)) b = Buffer$2.from(b, b.offset, b.byteLength);
		if (!Buffer$2.isBuffer(a$1) || !Buffer$2.isBuffer(b)) throw new TypeError("The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array");
		if (a$1 === b) return 0;
		let x = a$1.length;
		let y = b.length;
		for (let i$2 = 0, len$1 = Math.min(x, y); i$2 < len$1; ++i$2) if (a$1[i$2] !== b[i$2]) {
			x = a$1[i$2];
			y = b[i$2];
			break;
		}
		if (x < y) return -1;
		if (y < x) return 1;
		return 0;
	};
	Buffer$2.isEncoding = function isEncoding(encoding) {
		switch (String(encoding).toLowerCase()) {
			case "hex":
			case "utf8":
			case "utf-8":
			case "ascii":
			case "latin1":
			case "binary":
			case "base64":
			case "ucs2":
			case "ucs-2":
			case "utf16le":
			case "utf-16le": return true;
			default: return false;
		}
	};
	Buffer$2.concat = function concat(list, length) {
		if (!Array.isArray(list)) throw new TypeError("\"list\" argument must be an Array of Buffers");
		if (list.length === 0) return Buffer$2.alloc(0);
		let i$2;
		if (length === void 0) {
			length = 0;
			for (i$2 = 0; i$2 < list.length; ++i$2) length += list[i$2].length;
		}
		const buffer = Buffer$2.allocUnsafe(length);
		let pos = 0;
		for (i$2 = 0; i$2 < list.length; ++i$2) {
			let buf = list[i$2];
			if (isInstance(buf, Uint8Array)) if (pos + buf.length > buffer.length) {
				if (!Buffer$2.isBuffer(buf)) buf = Buffer$2.from(buf);
				buf.copy(buffer, pos);
			} else Uint8Array.prototype.set.call(buffer, buf, pos);
			else if (!Buffer$2.isBuffer(buf)) throw new TypeError("\"list\" argument must be an Array of Buffers");
			else buf.copy(buffer, pos);
			pos += buf.length;
		}
		return buffer;
	};
	function byteLength(string, encoding) {
		if (Buffer$2.isBuffer(string)) return string.length;
		if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
		if (typeof string !== "string") throw new TypeError("The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type " + typeof string);
		const len$1 = string.length;
		const mustMatch = arguments.length > 2 && arguments[2] === true;
		if (!mustMatch && len$1 === 0) return 0;
		let loweredCase = false;
		for (;;) switch (encoding) {
			case "ascii":
			case "latin1":
			case "binary": return len$1;
			case "utf8":
			case "utf-8": return utf8ToBytes(string).length;
			case "ucs2":
			case "ucs-2":
			case "utf16le":
			case "utf-16le": return len$1 * 2;
			case "hex": return len$1 >>> 1;
			case "base64": return base64ToBytes(string).length;
			default:
				if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length;
				encoding = ("" + encoding).toLowerCase();
				loweredCase = true;
		}
	}
	Buffer$2.byteLength = byteLength;
	function slowToString(encoding, start, end) {
		let loweredCase = false;
		if (start === void 0 || start < 0) start = 0;
		if (start > this.length) return "";
		if (end === void 0 || end > this.length) end = this.length;
		if (end <= 0) return "";
		end >>>= 0;
		start >>>= 0;
		if (end <= start) return "";
		if (!encoding) encoding = "utf8";
		while (true) switch (encoding) {
			case "hex": return hexSlice(this, start, end);
			case "utf8":
			case "utf-8": return utf8Slice(this, start, end);
			case "ascii": return asciiSlice(this, start, end);
			case "latin1":
			case "binary": return latin1Slice(this, start, end);
			case "base64": return base64Slice(this, start, end);
			case "ucs2":
			case "ucs-2":
			case "utf16le":
			case "utf-16le": return utf16leSlice(this, start, end);
			default:
				if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
				encoding = (encoding + "").toLowerCase();
				loweredCase = true;
		}
	}
	Buffer$2.prototype._isBuffer = true;
	function swap(b, n$1, m) {
		const i$2 = b[n$1];
		b[n$1] = b[m];
		b[m] = i$2;
	}
	Buffer$2.prototype.swap16 = function swap16() {
		const len$1 = this.length;
		if (len$1 % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
		for (let i$2 = 0; i$2 < len$1; i$2 += 2) swap(this, i$2, i$2 + 1);
		return this;
	};
	Buffer$2.prototype.swap32 = function swap32() {
		const len$1 = this.length;
		if (len$1 % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
		for (let i$2 = 0; i$2 < len$1; i$2 += 4) {
			swap(this, i$2, i$2 + 3);
			swap(this, i$2 + 1, i$2 + 2);
		}
		return this;
	};
	Buffer$2.prototype.swap64 = function swap64() {
		const len$1 = this.length;
		if (len$1 % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
		for (let i$2 = 0; i$2 < len$1; i$2 += 8) {
			swap(this, i$2, i$2 + 7);
			swap(this, i$2 + 1, i$2 + 6);
			swap(this, i$2 + 2, i$2 + 5);
			swap(this, i$2 + 3, i$2 + 4);
		}
		return this;
	};
	Buffer$2.prototype.toString = function toString() {
		const length = this.length;
		if (length === 0) return "";
		if (arguments.length === 0) return utf8Slice(this, 0, length);
		return slowToString.apply(this, arguments);
	};
	Buffer$2.prototype.toLocaleString = Buffer$2.prototype.toString;
	Buffer$2.prototype.equals = function equals(b) {
		if (!Buffer$2.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
		if (this === b) return true;
		return Buffer$2.compare(this, b) === 0;
	};
	Buffer$2.prototype.inspect = function inspect() {
		let str = "";
		const max$1 = exports.INSPECT_MAX_BYTES;
		str = this.toString("hex", 0, max$1).replace(/(.{2})/g, "$1 ").trim();
		if (this.length > max$1) str += " ... ";
		return "<Buffer " + str + ">";
	};
	if (customInspectSymbol) Buffer$2.prototype[customInspectSymbol] = Buffer$2.prototype.inspect;
	Buffer$2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
		if (isInstance(target, Uint8Array)) target = Buffer$2.from(target, target.offset, target.byteLength);
		if (!Buffer$2.isBuffer(target)) throw new TypeError("The \"target\" argument must be one of type Buffer or Uint8Array. Received type " + typeof target);
		if (start === void 0) start = 0;
		if (end === void 0) end = target ? target.length : 0;
		if (thisStart === void 0) thisStart = 0;
		if (thisEnd === void 0) thisEnd = this.length;
		if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
		if (thisStart >= thisEnd && start >= end) return 0;
		if (thisStart >= thisEnd) return -1;
		if (start >= end) return 1;
		start >>>= 0;
		end >>>= 0;
		thisStart >>>= 0;
		thisEnd >>>= 0;
		if (this === target) return 0;
		let x = thisEnd - thisStart;
		let y = end - start;
		const len$1 = Math.min(x, y);
		const thisCopy = this.slice(thisStart, thisEnd);
		const targetCopy = target.slice(start, end);
		for (let i$2 = 0; i$2 < len$1; ++i$2) if (thisCopy[i$2] !== targetCopy[i$2]) {
			x = thisCopy[i$2];
			y = targetCopy[i$2];
			break;
		}
		if (x < y) return -1;
		if (y < x) return 1;
		return 0;
	};
	function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
		if (buffer.length === 0) return -1;
		if (typeof byteOffset === "string") {
			encoding = byteOffset;
			byteOffset = 0;
		} else if (byteOffset > 2147483647) byteOffset = 2147483647;
		else if (byteOffset < -2147483648) byteOffset = -2147483648;
		byteOffset = +byteOffset;
		if (numberIsNaN(byteOffset)) byteOffset = dir ? 0 : buffer.length - 1;
		if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
		if (byteOffset >= buffer.length) if (dir) return -1;
		else byteOffset = buffer.length - 1;
		else if (byteOffset < 0) if (dir) byteOffset = 0;
		else return -1;
		if (typeof val === "string") val = Buffer$2.from(val, encoding);
		if (Buffer$2.isBuffer(val)) {
			if (val.length === 0) return -1;
			return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
		} else if (typeof val === "number") {
			val = val & 255;
			if (typeof Uint8Array.prototype.indexOf === "function") if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
			else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
			return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
		}
		throw new TypeError("val must be string, number or Buffer");
	}
	function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
		let indexSize = 1;
		let arrLength = arr.length;
		let valLength = val.length;
		if (encoding !== void 0) {
			encoding = String(encoding).toLowerCase();
			if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
				if (arr.length < 2 || val.length < 2) return -1;
				indexSize = 2;
				arrLength /= 2;
				valLength /= 2;
				byteOffset /= 2;
			}
		}
		function read(buf, i$3) {
			if (indexSize === 1) return buf[i$3];
			else return buf.readUInt16BE(i$3 * indexSize);
		}
		let i$2;
		if (dir) {
			let foundIndex = -1;
			for (i$2 = byteOffset; i$2 < arrLength; i$2++) if (read(arr, i$2) === read(val, foundIndex === -1 ? 0 : i$2 - foundIndex)) {
				if (foundIndex === -1) foundIndex = i$2;
				if (i$2 - foundIndex + 1 === valLength) return foundIndex * indexSize;
			} else {
				if (foundIndex !== -1) i$2 -= i$2 - foundIndex;
				foundIndex = -1;
			}
		} else {
			if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
			for (i$2 = byteOffset; i$2 >= 0; i$2--) {
				let found = true;
				for (let j = 0; j < valLength; j++) if (read(arr, i$2 + j) !== read(val, j)) {
					found = false;
					break;
				}
				if (found) return i$2;
			}
		}
		return -1;
	}
	Buffer$2.prototype.includes = function includes(val, byteOffset, encoding) {
		return this.indexOf(val, byteOffset, encoding) !== -1;
	};
	Buffer$2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
		return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
	};
	Buffer$2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
		return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
	};
	function hexWrite(buf, string, offset, length) {
		offset = Number(offset) || 0;
		const remaining = buf.length - offset;
		if (!length) length = remaining;
		else {
			length = Number(length);
			if (length > remaining) length = remaining;
		}
		const strLen = string.length;
		if (length > strLen / 2) length = strLen / 2;
		let i$2;
		for (i$2 = 0; i$2 < length; ++i$2) {
			const parsed = parseInt(string.substr(i$2 * 2, 2), 16);
			if (numberIsNaN(parsed)) return i$2;
			buf[offset + i$2] = parsed;
		}
		return i$2;
	}
	function utf8Write(buf, string, offset, length) {
		return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
	}
	function asciiWrite(buf, string, offset, length) {
		return blitBuffer(asciiToBytes(string), buf, offset, length);
	}
	function base64Write(buf, string, offset, length) {
		return blitBuffer(base64ToBytes(string), buf, offset, length);
	}
	function ucs2Write(buf, string, offset, length) {
		return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
	}
	Buffer$2.prototype.write = function write(string, offset, length, encoding) {
		if (offset === void 0) {
			encoding = "utf8";
			length = this.length;
			offset = 0;
		} else if (length === void 0 && typeof offset === "string") {
			encoding = offset;
			length = this.length;
			offset = 0;
		} else if (isFinite(offset)) {
			offset = offset >>> 0;
			if (isFinite(length)) {
				length = length >>> 0;
				if (encoding === void 0) encoding = "utf8";
			} else {
				encoding = length;
				length = void 0;
			}
		} else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
		const remaining = this.length - offset;
		if (length === void 0 || length > remaining) length = remaining;
		if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
		if (!encoding) encoding = "utf8";
		let loweredCase = false;
		for (;;) switch (encoding) {
			case "hex": return hexWrite(this, string, offset, length);
			case "utf8":
			case "utf-8": return utf8Write(this, string, offset, length);
			case "ascii":
			case "latin1":
			case "binary": return asciiWrite(this, string, offset, length);
			case "base64": return base64Write(this, string, offset, length);
			case "ucs2":
			case "ucs-2":
			case "utf16le":
			case "utf-16le": return ucs2Write(this, string, offset, length);
			default:
				if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
				encoding = ("" + encoding).toLowerCase();
				loweredCase = true;
		}
	};
	Buffer$2.prototype.toJSON = function toJSON() {
		return {
			type: "Buffer",
			data: Array.prototype.slice.call(this._arr || this, 0)
		};
	};
	function base64Slice(buf, start, end) {
		if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
		else return base64.fromByteArray(buf.slice(start, end));
	}
	function utf8Slice(buf, start, end) {
		end = Math.min(buf.length, end);
		const res = [];
		let i$2 = start;
		while (i$2 < end) {
			const firstByte = buf[i$2];
			let codePoint = null;
			let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
			if (i$2 + bytesPerSequence <= end) {
				let secondByte, thirdByte, fourthByte, tempCodePoint;
				switch (bytesPerSequence) {
					case 1:
						if (firstByte < 128) codePoint = firstByte;
						break;
					case 2:
						secondByte = buf[i$2 + 1];
						if ((secondByte & 192) === 128) {
							tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
							if (tempCodePoint > 127) codePoint = tempCodePoint;
						}
						break;
					case 3:
						secondByte = buf[i$2 + 1];
						thirdByte = buf[i$2 + 2];
						if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
							tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
							if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) codePoint = tempCodePoint;
						}
						break;
					case 4:
						secondByte = buf[i$2 + 1];
						thirdByte = buf[i$2 + 2];
						fourthByte = buf[i$2 + 3];
						if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
							tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
							if (tempCodePoint > 65535 && tempCodePoint < 1114112) codePoint = tempCodePoint;
						}
				}
			}
			if (codePoint === null) {
				codePoint = 65533;
				bytesPerSequence = 1;
			} else if (codePoint > 65535) {
				codePoint -= 65536;
				res.push(codePoint >>> 10 & 1023 | 55296);
				codePoint = 56320 | codePoint & 1023;
			}
			res.push(codePoint);
			i$2 += bytesPerSequence;
		}
		return decodeCodePointsArray(res);
	}
	const MAX_ARGUMENTS_LENGTH = 4096;
	function decodeCodePointsArray(codePoints) {
		const len$1 = codePoints.length;
		if (len$1 <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints);
		let res = "";
		let i$2 = 0;
		while (i$2 < len$1) res += String.fromCharCode.apply(String, codePoints.slice(i$2, i$2 += MAX_ARGUMENTS_LENGTH));
		return res;
	}
	function asciiSlice(buf, start, end) {
		let ret = "";
		end = Math.min(buf.length, end);
		for (let i$2 = start; i$2 < end; ++i$2) ret += String.fromCharCode(buf[i$2] & 127);
		return ret;
	}
	function latin1Slice(buf, start, end) {
		let ret = "";
		end = Math.min(buf.length, end);
		for (let i$2 = start; i$2 < end; ++i$2) ret += String.fromCharCode(buf[i$2]);
		return ret;
	}
	function hexSlice(buf, start, end) {
		const len$1 = buf.length;
		if (!start || start < 0) start = 0;
		if (!end || end < 0 || end > len$1) end = len$1;
		let out = "";
		for (let i$2 = start; i$2 < end; ++i$2) out += hexSliceLookupTable[buf[i$2]];
		return out;
	}
	function utf16leSlice(buf, start, end) {
		const bytes = buf.slice(start, end);
		let res = "";
		for (let i$2 = 0; i$2 < bytes.length - 1; i$2 += 2) res += String.fromCharCode(bytes[i$2] + bytes[i$2 + 1] * 256);
		return res;
	}
	Buffer$2.prototype.slice = function slice(start, end) {
		const len$1 = this.length;
		start = ~~start;
		end = end === void 0 ? len$1 : ~~end;
		if (start < 0) {
			start += len$1;
			if (start < 0) start = 0;
		} else if (start > len$1) start = len$1;
		if (end < 0) {
			end += len$1;
			if (end < 0) end = 0;
		} else if (end > len$1) end = len$1;
		if (end < start) end = start;
		const newBuf = this.subarray(start, end);
		Object.setPrototypeOf(newBuf, Buffer$2.prototype);
		return newBuf;
	};
	function checkOffset(offset, ext, length) {
		if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
		if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
	}
	Buffer$2.prototype.readUintLE = Buffer$2.prototype.readUIntLE = function readUIntLE(offset, byteLength$2, noAssert) {
		offset = offset >>> 0;
		byteLength$2 = byteLength$2 >>> 0;
		if (!noAssert) checkOffset(offset, byteLength$2, this.length);
		let val = this[offset];
		let mul = 1;
		let i$2 = 0;
		while (++i$2 < byteLength$2 && (mul *= 256)) val += this[offset + i$2] * mul;
		return val;
	};
	Buffer$2.prototype.readUintBE = Buffer$2.prototype.readUIntBE = function readUIntBE(offset, byteLength$2, noAssert) {
		offset = offset >>> 0;
		byteLength$2 = byteLength$2 >>> 0;
		if (!noAssert) checkOffset(offset, byteLength$2, this.length);
		let val = this[offset + --byteLength$2];
		let mul = 1;
		while (byteLength$2 > 0 && (mul *= 256)) val += this[offset + --byteLength$2] * mul;
		return val;
	};
	Buffer$2.prototype.readUint8 = Buffer$2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 1, this.length);
		return this[offset];
	};
	Buffer$2.prototype.readUint16LE = Buffer$2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 2, this.length);
		return this[offset] | this[offset + 1] << 8;
	};
	Buffer$2.prototype.readUint16BE = Buffer$2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 2, this.length);
		return this[offset] << 8 | this[offset + 1];
	};
	Buffer$2.prototype.readUint32LE = Buffer$2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 4, this.length);
		return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
	};
	Buffer$2.prototype.readUint32BE = Buffer$2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 4, this.length);
		return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
	};
	Buffer$2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
		offset = offset >>> 0;
		validateNumber(offset, "offset");
		const first = this[offset];
		const last = this[offset + 7];
		if (first === void 0 || last === void 0) boundsError(offset, this.length - 8);
		const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
		const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
		return BigInt(lo) + (BigInt(hi) << BigInt(32));
	});
	Buffer$2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
		offset = offset >>> 0;
		validateNumber(offset, "offset");
		const first = this[offset];
		const last = this[offset + 7];
		if (first === void 0 || last === void 0) boundsError(offset, this.length - 8);
		const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
		const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
		return (BigInt(hi) << BigInt(32)) + BigInt(lo);
	});
	Buffer$2.prototype.readIntLE = function readIntLE(offset, byteLength$2, noAssert) {
		offset = offset >>> 0;
		byteLength$2 = byteLength$2 >>> 0;
		if (!noAssert) checkOffset(offset, byteLength$2, this.length);
		let val = this[offset];
		let mul = 1;
		let i$2 = 0;
		while (++i$2 < byteLength$2 && (mul *= 256)) val += this[offset + i$2] * mul;
		mul *= 128;
		if (val >= mul) val -= Math.pow(2, 8 * byteLength$2);
		return val;
	};
	Buffer$2.prototype.readIntBE = function readIntBE(offset, byteLength$2, noAssert) {
		offset = offset >>> 0;
		byteLength$2 = byteLength$2 >>> 0;
		if (!noAssert) checkOffset(offset, byteLength$2, this.length);
		let i$2 = byteLength$2;
		let mul = 1;
		let val = this[offset + --i$2];
		while (i$2 > 0 && (mul *= 256)) val += this[offset + --i$2] * mul;
		mul *= 128;
		if (val >= mul) val -= Math.pow(2, 8 * byteLength$2);
		return val;
	};
	Buffer$2.prototype.readInt8 = function readInt8(offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 1, this.length);
		if (!(this[offset] & 128)) return this[offset];
		return (255 - this[offset] + 1) * -1;
	};
	Buffer$2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 2, this.length);
		const val = this[offset] | this[offset + 1] << 8;
		return val & 32768 ? val | 4294901760 : val;
	};
	Buffer$2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 2, this.length);
		const val = this[offset + 1] | this[offset] << 8;
		return val & 32768 ? val | 4294901760 : val;
	};
	Buffer$2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 4, this.length);
		return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
	};
	Buffer$2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 4, this.length);
		return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
	};
	Buffer$2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
		offset = offset >>> 0;
		validateNumber(offset, "offset");
		const first = this[offset];
		const last = this[offset + 7];
		if (first === void 0 || last === void 0) boundsError(offset, this.length - 8);
		const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
		return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
	});
	Buffer$2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
		offset = offset >>> 0;
		validateNumber(offset, "offset");
		const first = this[offset];
		const last = this[offset + 7];
		if (first === void 0 || last === void 0) boundsError(offset, this.length - 8);
		const val = (first << 24) + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
		return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
	});
	Buffer$2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 4, this.length);
		return ieee754.read(this, offset, true, 23, 4);
	};
	Buffer$2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 4, this.length);
		return ieee754.read(this, offset, false, 23, 4);
	};
	Buffer$2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 8, this.length);
		return ieee754.read(this, offset, true, 52, 8);
	};
	Buffer$2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
		offset = offset >>> 0;
		if (!noAssert) checkOffset(offset, 8, this.length);
		return ieee754.read(this, offset, false, 52, 8);
	};
	function checkInt(buf, value, offset, ext, max$1, min$1) {
		if (!Buffer$2.isBuffer(buf)) throw new TypeError("\"buffer\" argument must be a Buffer instance");
		if (value > max$1 || value < min$1) throw new RangeError("\"value\" argument is out of bounds");
		if (offset + ext > buf.length) throw new RangeError("Index out of range");
	}
	Buffer$2.prototype.writeUintLE = Buffer$2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength$2, noAssert) {
		value = +value;
		offset = offset >>> 0;
		byteLength$2 = byteLength$2 >>> 0;
		if (!noAssert) {
			const maxBytes = Math.pow(2, 8 * byteLength$2) - 1;
			checkInt(this, value, offset, byteLength$2, maxBytes, 0);
		}
		let mul = 1;
		let i$2 = 0;
		this[offset] = value & 255;
		while (++i$2 < byteLength$2 && (mul *= 256)) this[offset + i$2] = value / mul & 255;
		return offset + byteLength$2;
	};
	Buffer$2.prototype.writeUintBE = Buffer$2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength$2, noAssert) {
		value = +value;
		offset = offset >>> 0;
		byteLength$2 = byteLength$2 >>> 0;
		if (!noAssert) {
			const maxBytes = Math.pow(2, 8 * byteLength$2) - 1;
			checkInt(this, value, offset, byteLength$2, maxBytes, 0);
		}
		let i$2 = byteLength$2 - 1;
		let mul = 1;
		this[offset + i$2] = value & 255;
		while (--i$2 >= 0 && (mul *= 256)) this[offset + i$2] = value / mul & 255;
		return offset + byteLength$2;
	};
	Buffer$2.prototype.writeUint8 = Buffer$2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
		this[offset] = value & 255;
		return offset + 1;
	};
	Buffer$2.prototype.writeUint16LE = Buffer$2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
		this[offset] = value & 255;
		this[offset + 1] = value >>> 8;
		return offset + 2;
	};
	Buffer$2.prototype.writeUint16BE = Buffer$2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
		this[offset] = value >>> 8;
		this[offset + 1] = value & 255;
		return offset + 2;
	};
	Buffer$2.prototype.writeUint32LE = Buffer$2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
		this[offset + 3] = value >>> 24;
		this[offset + 2] = value >>> 16;
		this[offset + 1] = value >>> 8;
		this[offset] = value & 255;
		return offset + 4;
	};
	Buffer$2.prototype.writeUint32BE = Buffer$2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
		this[offset] = value >>> 24;
		this[offset + 1] = value >>> 16;
		this[offset + 2] = value >>> 8;
		this[offset + 3] = value & 255;
		return offset + 4;
	};
	function wrtBigUInt64LE(buf, value, offset, min$1, max$1) {
		checkIntBI(value, min$1, max$1, buf, offset, 7);
		let lo = Number(value & BigInt(4294967295));
		buf[offset++] = lo;
		lo = lo >> 8;
		buf[offset++] = lo;
		lo = lo >> 8;
		buf[offset++] = lo;
		lo = lo >> 8;
		buf[offset++] = lo;
		let hi = Number(value >> BigInt(32) & BigInt(4294967295));
		buf[offset++] = hi;
		hi = hi >> 8;
		buf[offset++] = hi;
		hi = hi >> 8;
		buf[offset++] = hi;
		hi = hi >> 8;
		buf[offset++] = hi;
		return offset;
	}
	function wrtBigUInt64BE(buf, value, offset, min$1, max$1) {
		checkIntBI(value, min$1, max$1, buf, offset, 7);
		let lo = Number(value & BigInt(4294967295));
		buf[offset + 7] = lo;
		lo = lo >> 8;
		buf[offset + 6] = lo;
		lo = lo >> 8;
		buf[offset + 5] = lo;
		lo = lo >> 8;
		buf[offset + 4] = lo;
		let hi = Number(value >> BigInt(32) & BigInt(4294967295));
		buf[offset + 3] = hi;
		hi = hi >> 8;
		buf[offset + 2] = hi;
		hi = hi >> 8;
		buf[offset + 1] = hi;
		hi = hi >> 8;
		buf[offset] = hi;
		return offset + 8;
	}
	Buffer$2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
		return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
	});
	Buffer$2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
		return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
	});
	Buffer$2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength$2, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) {
			const limit = Math.pow(2, 8 * byteLength$2 - 1);
			checkInt(this, value, offset, byteLength$2, limit - 1, -limit);
		}
		let i$2 = 0;
		let mul = 1;
		let sub = 0;
		this[offset] = value & 255;
		while (++i$2 < byteLength$2 && (mul *= 256)) {
			if (value < 0 && sub === 0 && this[offset + i$2 - 1] !== 0) sub = 1;
			this[offset + i$2] = (value / mul >> 0) - sub & 255;
		}
		return offset + byteLength$2;
	};
	Buffer$2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength$2, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) {
			const limit = Math.pow(2, 8 * byteLength$2 - 1);
			checkInt(this, value, offset, byteLength$2, limit - 1, -limit);
		}
		let i$2 = byteLength$2 - 1;
		let mul = 1;
		let sub = 0;
		this[offset + i$2] = value & 255;
		while (--i$2 >= 0 && (mul *= 256)) {
			if (value < 0 && sub === 0 && this[offset + i$2 + 1] !== 0) sub = 1;
			this[offset + i$2] = (value / mul >> 0) - sub & 255;
		}
		return offset + byteLength$2;
	};
	Buffer$2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
		if (value < 0) value = 255 + value + 1;
		this[offset] = value & 255;
		return offset + 1;
	};
	Buffer$2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
		this[offset] = value & 255;
		this[offset + 1] = value >>> 8;
		return offset + 2;
	};
	Buffer$2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
		this[offset] = value >>> 8;
		this[offset + 1] = value & 255;
		return offset + 2;
	};
	Buffer$2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
		this[offset] = value & 255;
		this[offset + 1] = value >>> 8;
		this[offset + 2] = value >>> 16;
		this[offset + 3] = value >>> 24;
		return offset + 4;
	};
	Buffer$2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
		if (value < 0) value = 4294967295 + value + 1;
		this[offset] = value >>> 24;
		this[offset + 1] = value >>> 16;
		this[offset + 2] = value >>> 8;
		this[offset + 3] = value & 255;
		return offset + 4;
	};
	Buffer$2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
		return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
	});
	Buffer$2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
		return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
	});
	function checkIEEE754(buf, value, offset, ext, max$1, min$1) {
		if (offset + ext > buf.length) throw new RangeError("Index out of range");
		if (offset < 0) throw new RangeError("Index out of range");
	}
	function writeFloat(buf, value, offset, littleEndian, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
		ieee754.write(buf, value, offset, littleEndian, 23, 4);
		return offset + 4;
	}
	Buffer$2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
		return writeFloat(this, value, offset, true, noAssert);
	};
	Buffer$2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
		return writeFloat(this, value, offset, false, noAssert);
	};
	function writeDouble(buf, value, offset, littleEndian, noAssert) {
		value = +value;
		offset = offset >>> 0;
		if (!noAssert) checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
		ieee754.write(buf, value, offset, littleEndian, 52, 8);
		return offset + 8;
	}
	Buffer$2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
		return writeDouble(this, value, offset, true, noAssert);
	};
	Buffer$2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
		return writeDouble(this, value, offset, false, noAssert);
	};
	Buffer$2.prototype.copy = function copy(target, targetStart, start, end) {
		if (!Buffer$2.isBuffer(target)) throw new TypeError("argument should be a Buffer");
		if (!start) start = 0;
		if (!end && end !== 0) end = this.length;
		if (targetStart >= target.length) targetStart = target.length;
		if (!targetStart) targetStart = 0;
		if (end > 0 && end < start) end = start;
		if (end === start) return 0;
		if (target.length === 0 || this.length === 0) return 0;
		if (targetStart < 0) throw new RangeError("targetStart out of bounds");
		if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
		if (end < 0) throw new RangeError("sourceEnd out of bounds");
		if (end > this.length) end = this.length;
		if (target.length - targetStart < end - start) end = target.length - targetStart + start;
		const len$1 = end - start;
		if (this === target && typeof Uint8Array.prototype.copyWithin === "function") this.copyWithin(targetStart, start, end);
		else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
		return len$1;
	};
	Buffer$2.prototype.fill = function fill(val, start, end, encoding) {
		if (typeof val === "string") {
			if (typeof start === "string") {
				encoding = start;
				start = 0;
				end = this.length;
			} else if (typeof end === "string") {
				encoding = end;
				end = this.length;
			}
			if (encoding !== void 0 && typeof encoding !== "string") throw new TypeError("encoding must be a string");
			if (typeof encoding === "string" && !Buffer$2.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
			if (val.length === 1) {
				const code$1 = val.charCodeAt(0);
				if (encoding === "utf8" && code$1 < 128 || encoding === "latin1") val = code$1;
			}
		} else if (typeof val === "number") val = val & 255;
		else if (typeof val === "boolean") val = Number(val);
		if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
		if (end <= start) return this;
		start = start >>> 0;
		end = end === void 0 ? this.length : end >>> 0;
		if (!val) val = 0;
		let i$2;
		if (typeof val === "number") for (i$2 = start; i$2 < end; ++i$2) this[i$2] = val;
		else {
			const bytes = Buffer$2.isBuffer(val) ? val : Buffer$2.from(val, encoding);
			const len$1 = bytes.length;
			if (len$1 === 0) throw new TypeError("The value \"" + val + "\" is invalid for argument \"value\"");
			for (i$2 = 0; i$2 < end - start; ++i$2) this[i$2 + start] = bytes[i$2 % len$1];
		}
		return this;
	};
	const errors = {};
	function E(sym, getMessage, Base) {
		errors[sym] = class NodeError extends Base {
			constructor() {
				super();
				Object.defineProperty(this, "message", {
					value: getMessage.apply(this, arguments),
					writable: true,
					configurable: true
				});
				this.name = `${this.name} [${sym}]`;
				this.stack;
				delete this.name;
			}
			get code() {
				return sym;
			}
			set code(value) {
				Object.defineProperty(this, "code", {
					configurable: true,
					enumerable: true,
					value,
					writable: true
				});
			}
			toString() {
				return `${this.name} [${sym}]: ${this.message}`;
			}
		};
	}
	E("ERR_BUFFER_OUT_OF_BOUNDS", function(name) {
		if (name) return `${name} is outside of buffer bounds`;
		return "Attempt to access memory outside buffer bounds";
	}, RangeError);
	E("ERR_INVALID_ARG_TYPE", function(name, actual) {
		return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
	}, TypeError);
	E("ERR_OUT_OF_RANGE", function(str, range, input) {
		let msg = `The value of "${str}" is out of range.`;
		let received = input;
		if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) received = addNumericalSeparator(String(input));
		else if (typeof input === "bigint") {
			received = String(input);
			if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) received = addNumericalSeparator(received);
			received += "n";
		}
		msg += ` It must be ${range}. Received ${received}`;
		return msg;
	}, RangeError);
	function addNumericalSeparator(val) {
		let res = "";
		let i$2 = val.length;
		const start = val[0] === "-" ? 1 : 0;
		for (; i$2 >= start + 4; i$2 -= 3) res = `_${val.slice(i$2 - 3, i$2)}${res}`;
		return `${val.slice(0, i$2)}${res}`;
	}
	function checkBounds(buf, offset, byteLength$2) {
		validateNumber(offset, "offset");
		if (buf[offset] === void 0 || buf[offset + byteLength$2] === void 0) boundsError(offset, buf.length - (byteLength$2 + 1));
	}
	function checkIntBI(value, min$1, max$1, buf, offset, byteLength$2) {
		if (value > max$1 || value < min$1) {
			const n$1 = typeof min$1 === "bigint" ? "n" : "";
			let range;
			if (byteLength$2 > 3) if (min$1 === 0 || min$1 === BigInt(0)) range = `>= 0${n$1} and < 2${n$1} ** ${(byteLength$2 + 1) * 8}${n$1}`;
			else range = `>= -(2${n$1} ** ${(byteLength$2 + 1) * 8 - 1}${n$1}) and < 2 ** ${(byteLength$2 + 1) * 8 - 1}${n$1}`;
			else range = `>= ${min$1}${n$1} and <= ${max$1}${n$1}`;
			throw new errors.ERR_OUT_OF_RANGE("value", range, value);
		}
		checkBounds(buf, offset, byteLength$2);
	}
	function validateNumber(value, name) {
		if (typeof value !== "number") throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
	}
	function boundsError(value, length, type) {
		if (Math.floor(value) !== value) {
			validateNumber(value, type);
			throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
		}
		if (length < 0) throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
		throw new errors.ERR_OUT_OF_RANGE(type || "offset", `>= ${type ? 1 : 0} and <= ${length}`, value);
	}
	const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
	function base64clean(str) {
		str = str.split("=")[0];
		str = str.trim().replace(INVALID_BASE64_RE, "");
		if (str.length < 2) return "";
		while (str.length % 4 !== 0) str = str + "=";
		return str;
	}
	function utf8ToBytes(string, units) {
		units = units || Infinity;
		let codePoint;
		const length = string.length;
		let leadSurrogate = null;
		const bytes = [];
		for (let i$2 = 0; i$2 < length; ++i$2) {
			codePoint = string.charCodeAt(i$2);
			if (codePoint > 55295 && codePoint < 57344) {
				if (!leadSurrogate) {
					if (codePoint > 56319) {
						if ((units -= 3) > -1) bytes.push(239, 191, 189);
						continue;
					} else if (i$2 + 1 === length) {
						if ((units -= 3) > -1) bytes.push(239, 191, 189);
						continue;
					}
					leadSurrogate = codePoint;
					continue;
				}
				if (codePoint < 56320) {
					if ((units -= 3) > -1) bytes.push(239, 191, 189);
					leadSurrogate = codePoint;
					continue;
				}
				codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
			} else if (leadSurrogate) {
				if ((units -= 3) > -1) bytes.push(239, 191, 189);
			}
			leadSurrogate = null;
			if (codePoint < 128) {
				if ((units -= 1) < 0) break;
				bytes.push(codePoint);
			} else if (codePoint < 2048) {
				if ((units -= 2) < 0) break;
				bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
			} else if (codePoint < 65536) {
				if ((units -= 3) < 0) break;
				bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
			} else if (codePoint < 1114112) {
				if ((units -= 4) < 0) break;
				bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
			} else throw new Error("Invalid code point");
		}
		return bytes;
	}
	function asciiToBytes(str) {
		const byteArray = [];
		for (let i$2 = 0; i$2 < str.length; ++i$2) byteArray.push(str.charCodeAt(i$2) & 255);
		return byteArray;
	}
	function utf16leToBytes(str, units) {
		let c$1, hi, lo;
		const byteArray = [];
		for (let i$2 = 0; i$2 < str.length; ++i$2) {
			if ((units -= 2) < 0) break;
			c$1 = str.charCodeAt(i$2);
			hi = c$1 >> 8;
			lo = c$1 % 256;
			byteArray.push(lo);
			byteArray.push(hi);
		}
		return byteArray;
	}
	function base64ToBytes(str) {
		return base64.toByteArray(base64clean(str));
	}
	function blitBuffer(src, dst, offset, length) {
		let i$2;
		for (i$2 = 0; i$2 < length; ++i$2) {
			if (i$2 + offset >= dst.length || i$2 >= src.length) break;
			dst[i$2 + offset] = src[i$2];
		}
		return i$2;
	}
	function isInstance(obj, type) {
		return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
	}
	function numberIsNaN(obj) {
		return obj !== obj;
	}
	const hexSliceLookupTable = function() {
		const alphabet$1 = "0123456789abcdef";
		const table = new Array(256);
		for (let i$2 = 0; i$2 < 16; ++i$2) {
			const i16 = i$2 * 16;
			for (let j = 0; j < 16; ++j) table[i16 + j] = alphabet$1[i$2] + alphabet$1[j];
		}
		return table;
	}();
	function defineBigIntMethod(fn) {
		return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
	}
	function BufferBigIntNotDefined() {
		throw new Error("BigInt not supported");
	}
} });

//#endregion
//#region src/types.ts
/**
* TON 钱包连接状态
*/
let TonWalletStatus = /* @__PURE__ */ function(TonWalletStatus$1) {
	TonWalletStatus$1["DISCONNECTED"] = "disconnected";
	TonWalletStatus$1["CONNECTING"] = "connecting";
	TonWalletStatus$1["CONNECTED"] = "connected";
	TonWalletStatus$1["ERROR"] = "error";
	return TonWalletStatus$1;
}({});

//#endregion
//#region src/index.ts
var import_dist = __toESM(require_dist(), 1);
var import_buffer = __toESM(require_buffer(), 1);
window.Buffer = import_buffer.Buffer;
/**
* 将人类可读的金额转换为最小的单位
* @param src 人类可读的金额
* @param decimals 小数位数
* @returns 最小的单位
*/
const convertToSmallestUnit = (src, decimals = 9) => {
	if (typeof src === "bigint") return src * 10n ** BigInt(decimals);
	else {
		if (typeof src === "number") {
			if (!Number.isFinite(src)) throw Error("Invalid number");
			if (Math.log10(src) <= 6) src = src.toLocaleString("en", {
				minimumFractionDigits: decimals,
				useGrouping: false
			});
			else if (src - Math.trunc(src) === 0) src = src.toLocaleString("en", {
				maximumFractionDigits: 0,
				useGrouping: false
			});
			else throw Error("Not enough precision for a number value. Use string value instead");
		}
		let neg = false;
		while (src.startsWith("-")) {
			neg = !neg;
			src = src.slice(1);
		}
		if (src === ".") throw Error("Invalid number");
		const parts = src.split(".");
		if (parts.length > 2) throw Error("Invalid number");
		let whole = parts[0];
		let frac = parts[1];
		if (!whole) whole = "0";
		if (!frac) frac = "0";
		if (frac.length > decimals) throw Error("Invalid number");
		while (frac.length < decimals) frac += "0";
		let r = BigInt(whole) * 10n ** BigInt(decimals) + BigInt(frac);
		if (neg) r = -r;
		return r;
	}
};
var Wallet = class Wallet {
	/** TonConnect UI 实例 */
	tonConnectUI;
	/** 单例实例 */
	static instance = null;
	/** 钱包连接状态 */
	_status = TonWalletStatus.DISCONNECTED;
	/** 当前连接的账户信息 */
	_account = null;
	/** 状态变化监听器集合 */
	statusChangeHandlers = /* @__PURE__ */ new Set();
	/** Jetton钱包地址缓存 */
	jettonWalletCache = /* @__PURE__ */ new Map();
	/**
	* 构造函数
	* @param options TON 钱包配置选项
	*/
	constructor(options) {
		this.tonConnectUI = new TonConnectUI({ manifestUrl: options.manifestUrl });
		if (this.isIOSDevice()) this.tonConnectUI.uiOptions = { actionsConfiguration: { skipRedirectToWallet: "ios" } };
		this.tonConnectUI.onStatusChange((wallet) => {
			console.log("update");
			this.handleTonConnectStatusChange(wallet);
		});
	}
	/**
	* 获取 Wallet 单例实例
	* @param manifestUrl TON Connect manifest URL
	* @returns Wallet 实例
	*/
	static getInstance(manifestUrl) {
		if (!Wallet.instance) Wallet.instance = new Wallet({ manifestUrl });
		return Wallet.instance;
	}
	/**
	* 检测是否为 iOS 设备
	* @returns 是否为 iOS 设备
	*/
	isIOSDevice() {
		if (typeof window === "undefined" || !window.navigator) return false;
		const userAgent = window.navigator.userAgent;
		const platform$1 = window.navigator.platform || "";
		return /iPad|iPhone|iPod/.test(userAgent) || platform$1 === "MacIntel" && window.navigator.maxTouchPoints > 1 || /iOS/.test(userAgent);
	}
	/**
	* 处理 TonConnect 状态变化
	* @param wallet 钱包状态
	*/
	handleTonConnectStatusChange(wallet) {
		if (wallet?.account) {
			const account = {
				address: wallet.account.address,
				publicKey: wallet.account.publicKey || void 0,
				chainId: wallet.account.chain
			};
			this.updateStatus(TonWalletStatus.CONNECTED, account);
		} else this.updateStatus(TonWalletStatus.DISCONNECTED, null);
	}
	/**
	* 销毁当前实例（兼容旧API）
	* @deprecated 请直接调用实例的 destroy() 方法
	*/
	static destroy() {
		if (Wallet.instance) {
			Wallet.instance.destroy();
			Wallet.instance = null;
		}
	}
	/** 获取钱包连接状态 */
	get status() {
		return this._status;
	}
	/** 获取当前连接的账户信息 */
	get account() {
		return this._account;
	}
	/** 获取是否已连接 */
	get connected() {
		return this._status === TonWalletStatus.CONNECTED && this._account !== null;
	}
	/**
	* 获取原始 TonConnect 钱包实例
	* @returns 当前连接的钱包实例，如果未连接则返回 undefined
	*/
	get wallet() {
		return this.tonConnectUI.wallet;
	}
	/**
	* 获取当前连接的 TonConnect 账户信息
	* @returns 当前连接的账户信息，如果未连接则返回 undefined
	*/
	get tonAccount() {
		return this.tonConnectUI.account;
	}
	/**
	* 获取当前连接的钱包地址
	* @returns 当前连接的钱包地址，如果未连接则返回 undefined
	*/
	get address() {
		return this.tonConnectUI.account?.address;
	}
	/**
	* 更新钱包状态
	* @param status 新状态
	* @param account 账户信息
	*/
	updateStatus(status, account) {
		this._status = status;
		if (account !== void 0) this._account = account;
		this.notifyStatusChange(status, this._account);
	}
	/**
	* 通知所有监听器状态变化
	* @param status 新状态
	* @param account 账户信息
	*/
	notifyStatusChange(status, account) {
		this.statusChangeHandlers.forEach((handler) => {
			try {
				handler(status, account);
			} catch (error) {
				console.warn("钱包状态变化监听器执行出错:", error);
			}
		});
	}
	/**
	* 获取 TON Proof
	* @returns TON Proof 数据，如果未获取到则返回 null
	*/
	getTonProof() {
		const wallet = this.tonConnectUI.wallet;
		if (!wallet) return null;
		const tonProof = wallet.connectItems?.tonProof;
		if (tonProof && "proof" in tonProof) return tonProof;
		return null;
	}
	/**
	* 添加状态变化监听器
	* @param handler 监听器函数
	*/
	addStatusChangeListener(handler) {
		this.statusChangeHandlers.add(handler);
	}
	/**
	* 移除状态变化监听器
	* @param handler 监听器函数
	*/
	removeStatusChangeListener(handler) {
		this.statusChangeHandlers.delete(handler);
	}
	/**
	* 销毁钱包实例
	*/
	destroy() {
		if (this.tonConnectUI.connected) this.tonConnectUI.disconnect();
		this.tonConnectUI.closeModal();
		if (Wallet.instance === this) Wallet.instance = null;
		this.statusChangeHandlers.clear();
		this.jettonWalletCache.clear();
		this._status = TonWalletStatus.DISCONNECTED;
		this._account = null;
	}
	/**
	* 连接钱包
	*/
	async connect() {
		await this.tonConnectUI.openModal();
	}
	/**
	* 断开钱包连接
	*/
	async disconnect() {
		await this.tonConnectUI.disconnect();
	}
	/**
	* 发送 TON 交易
	* @param to 接收地址
	* @param amount 发送金额（TON）
	* @param message 可选的消息内容
	* @returns 交易哈希
	*/
	async sendTransaction(to, amount, message) {
		if (!this.connected) throw new Error("钱包未连接");
		if (!to || typeof to !== "string" || to.trim() === "") throw new Error("接收地址不能为空");
		if (amount === void 0 || amount === null || isNaN(amount) || Number(amount) <= 0) throw new Error("发送金额必须为大于0的数字");
		try {
			const nanoAmount = (0, import_dist.toNano)(amount.toString());
			let cellPayload;
			if (message) {
				const cell = (0, import_dist.beginCell)().storeUint(0, 32).storeStringTail(message).endCell();
				cellPayload = cell.toBoc().toString("base64");
			} else cellPayload = void 0;
			const transaction = {
				validUntil: Math.floor(Date.now() / 1e3) + 60 * 5,
				messages: [{
					address: to,
					amount: nanoAmount.toString(),
					payload: cellPayload
				}]
			};
			console.log("交易信息", transaction);
			const result = await this.tonConnectUI.sendTransaction(transaction);
			console.log("[DEBUG] sendTransaction 返回:", result);
			return result.boc;
		} catch (error) {
			console.error("发送交易失败:", error);
			throw error;
		}
	}
	/**
	* 发送 JETTON 代币交易
	* @param jettonMasterAddress JETTON主合约地址
	* @param to 接收地址
	* @param amount 发送金额（人类可读数量，自动转最小单位）
	* @param message 可选的消息内容
	* @param gasAmount 可选的gas费（TON），默认0.1
	* @returns 交易哈希
	*/
	async sendJettonTransaction(jettonMasterAddress, to, amount, message) {
		if (!this.connected) throw new Error("钱包未连接");
		if (!jettonMasterAddress) throw new Error("JETTON主合约地址不能为空");
		if (!to) throw new Error("接收地址不能为空");
		if (!amount || isNaN(amount) || Number(amount) <= 0) throw new Error("发送金额必须为大于0的数字");
		if (!this.address) throw new Error("无法获取当前钱包地址");
		try {
			console.log(this.tonConnectUI);
			const { address: jettonWalletAddress, decimals } = await this.calculateJettonWalletAddress(jettonMasterAddress, this.address);
			let forwardPayloadCell;
			if (message) forwardPayloadCell = (0, import_dist.beginCell)().storeUint(0, 32).storeStringTail(message).endCell();
			else forwardPayloadCell = (0, import_dist.beginCell)().endCell();
			console.log("decimals1", decimals);
			const sendJettonTransactionAmount = convertToSmallestUnit(amount, decimals);
			console.log("sendJettonTransactionAmount", sendJettonTransactionAmount);
			const jettonTransferBody = (0, import_dist.beginCell)().storeUint(260734629, 32).storeUint(0, 64).storeCoins(sendJettonTransactionAmount).storeAddress(import_dist.Address.parse(to)).storeAddress(import_dist.Address.parse(to)).storeBit(0).storeCoins(0).storeBit(forwardPayloadCell ? 1 : 0).storeRef(forwardPayloadCell).endCell();
			const transaction = {
				validUntil: Math.floor(Date.now() / 1e3) + 300,
				messages: [{
					address: jettonWalletAddress,
					amount: (0, import_dist.toNano)("0.1").toString(),
					payload: jettonTransferBody.toBoc().toString("base64")
				}]
			};
			console.log("transaction", transaction);
			const result = await this.tonConnectUI.sendTransaction(transaction);
			console.log("Transaction sent:", result);
			return result.boc;
		} catch (error) {
			console.error("[JETTON][ERROR] 发送JETTON交易失败:", error);
			throw error;
		}
	}
	/**
	* 获取当前网络类型
	* @returns 'mainnet' | 'testnet'
	*/
	getNetwork() {
		const chain = this.tonConnectUI.account?.chain;
		return chain === "-3" ? "testnet" : "mainnet";
	}
	/**
	* 获取Jetton钱包地址
	* @param jettonMasterAddress Jetton主合约地址
	* @param ownerAddress 用户钱包地址
	* @returns Jetton钱包地址
	*/
	async calculateJettonWalletAddress(jettonMasterAddress, ownerAddress) {
		const cacheKey = `${jettonMasterAddress}_${ownerAddress}`;
		const cached = this.jettonWalletCache.get(cacheKey);
		if (cached) {
			console.log("[CACHE] 使用缓存的Jetton钱包地址:", cacheKey);
			return {
				address: cached.wallet_address.address,
				decimals: cached.jetton.decimals
			};
		}
		try {
			const network = this.getNetwork();
			const apiUrl = network === "testnet" ? `https://testnet.tonapi.io/v2/accounts/${encodeURIComponent(ownerAddress)}/jettons/${encodeURIComponent(jettonMasterAddress)}` : `https://tonapi.io/v2/accounts/${encodeURIComponent(ownerAddress)}/jettons/${encodeURIComponent(jettonMasterAddress)}`;
			const response = await fetch(apiUrl);
			const data = await response.json();
			if (!data || !data.wallet_address) throw new Error("获取Jetton钱包地址失败");
			const result = {
				address: data.wallet_address.address,
				decimals: data.jetton.decimals
			};
			this.jettonWalletCache.set(cacheKey, { ...data });
			console.log("[CACHE] 缓存Jetton钱包地址:", cacheKey, result);
			return result;
		} catch (error) {
			console.error("获取Jetton钱包地址失败:", error);
			throw error;
		}
	}
};

//#endregion
exports.TonWalletStatus = TonWalletStatus;
exports.Wallet = Wallet;
});